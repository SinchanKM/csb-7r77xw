{"version":3,"sources":["../node_modules/react/index.js","../node_modules/prop-types/index.js","../node_modules/react-audio-analyser/lib/AudioAnalyser/audioConvertWav.js","../node_modules/react-audio-analyser/lib/AudioAnalyser/MediaRecorder.js","../node_modules/react-audio-analyser/lib/AudioAnalyser/RenderCanvas.js","../node_modules/react-audio-analyser/lib/AudioAnalyser/index.js","../node_modules/react-audio-analyser/lib/index.js","../node_modules/object-assign/index.js","../node_modules/react-dom/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/react-audio-analyser/lib/AudioAnalyser/mp3worker.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/react/cjs/react.production.min.js","../node_modules/react-dom/cjs/react-dom.production.min.js","../node_modules/scheduler/index.js","../node_modules/scheduler/cjs/scheduler.production.min.js","../node_modules/webpack/buildin/global.js","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js"],"names":["module","exports","__webpack_require__","writeString","view","offset","string","i","length","setUint8","charCodeAt","audioConvertWav","buffer","opt","arguments","undefined","numChannels","numberOfChannels","sampleRate","format","float32","bitDepth","samples","bytesPerSample","blockAlign","ArrayBuffer","DataView","setUint32","setUint16","output","input","s","Math","max","min","setInt16","floatTo16BitPCM","setFloat32","writeFloat32","encodeWAV","inputL","inputR","result","Float32Array","index","inputIndex","interleave","getChannelData","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","AudioAnalyser_MediaRecorder","Target","_class","_temp","constraints","audio","mp3Worker","Worker","mp3worker_default","a","_Target","MediaRecorderClass","instance","TypeError","_classCallCheck","this","_this","self","call","ReferenceError","_possibleConstructorReturn","__proto__","getPrototypeOf","startAudio","recorder","mediaRecorder","state","navigator","mediaDevices","getUserMedia","then","stream","recordAudio","catch","err","checkAndExecFn","errorCallback","resumeAudio","pauseAudio","pause","onpause","pauseCallback","audioCtx","suspend","stopAudio","_this$props","audioType","audioOptions","includes","stop","onstop","audioStream2Blob","stopCallback","audioChunk","initCanvas","compatibility","analyser","createAnalyser","subClass","superClass","create","constructor","value","setPrototypeOf","_inherits","_this2","_props","audioBitsPerSecond","mimeType","timeslice","MediaRecorder","ondataavailable","event","onRecordCallback","data","push","resume","start","onstart","e","startCallback","onresume","onerror","createMediaStreamSource","connect","renderCurve","_this3","webkitGetUserMedia","mozGetUserMedia","Promise","resolve","reject","Error","fn","type","cb","wavBlob","chunk","Blob","fr","FileReader","readAsArrayBuffer","onload","decodeAudioData","audioWav","wavBuf","postMessage","cmd","config","bitRate","rawInput","onmessage","mp3Blob","buf","audioMp3","window","AudioContext","webkitAudioContext","RenderCanvas_createClass","RenderCanvas_possibleConstructorReturn","AudioAnalyser_class","AudioAnalyser_RenderCanvas","_temp2","RenderCanvasClass","_ref","RenderCanvas_classCallCheck","_len","args","Array","_key","apply","concat","height","width","animationId","requestAnimationFrame","bufferLength","fftSize","dataArray","Uint8Array","getByteTimeDomainData","configCanvas","sliceWidth","Number","x","y","canvasCtx","lineTo","stroke","RenderCanvas_inherits","cancelAnimationFrame","backgroundColor","strokeColor","canvas","canvasRef","current","getContext","clearRect","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","_props2","moveTo","_props3","react_default","createElement","ref","style","createRef","AudioAnalyser_createClass","AudioAnalyser_AudioAnalyser","_Component","AudioAnalyser","AudioAnalyser_classCallCheck","AudioAnalyser_possibleConstructorReturn","AudioAnalyser_inherits","react","prevProps","status","inactive","recording","paused","children","className","audioSrc","renderCanvas","controls","src","defaultProps","propTypes","prop_types_default","number","object","func","lib_AudioAnalyser","__webpack_exports__","getOwnPropertySymbols","hasOwnProperty","propIsEnumerable","propertyIsEnumerable","assign","test1","String","getOwnPropertyNames","test2","fromCharCode","map","n","join","test3","split","forEach","letter","keys","shouldUseNative","source","from","symbols","to","val","toObject","checkDCE","__REACT_DEVTOOLS_GLOBAL_HOOK__","console","error","d","_defineProperties","code","lamejs","new_byte","count","Int8Array","new_short","Int16Array","new_int","Int32Array","new_float","new_double","Float64Array","new_float_n","sz","slice","A","new_int_n","new_short_n","new_array_n","Arrays","fill","fromIndex","toIndex","System","arraycopy","srcPos","dest","destPos","srcEnd","Util","ShortBlock","ordinal","SQRT2","FAST_LOG10","log10","FAST_LOG10_X","short_block_allowed","short_block_coupled","short_block_dispensed","short_block_forced","Float","VbrMode","MPEGMode","_ordinal","Version","getLameVersion","LAME_MAJOR_VERSION","getLameShortVersion","getLameVeryShortVersion","getPsyVersion","PSY_MAJOR_VERSION","getLameUrl","getLameOsBitness","Takehiro","qupvt","Bits","b","bits","setModules","_qupvt","subdv_table","quantize_lines_xrpow_01","l","istep","xr","xrPos","ix","ixPos","compareval0","quantize_lines_xrpow","remaining","x0","x1","x2","x3","rx0","rx1","rx2","rx3","adj43","huf_tbl_noESC","choose_table","endPos","max1","max2","ix_max","end","sum1","hlen1","Tables","ht","hlen","count_bit_noESC","t1","sum2","sum","xlen","table23","table56","count_bit_noESC_from2","sum3","hlen2","hlen3","t","count_bit_noESC_from3","QuantizePVT","IXMAX_VAL","LARGE_BITS","choice2","choice","linmax","t2","linbits","largetbl","count_bit_ESC","recalc_divide_sub","gfc","cod_info2","gi","r01_bits","r01_div","r0_tbl","r1_tbl","bigv","big_values","r2","Encoder","SBMAX_l","a2","scalefac_band","count1bits","part2_3_length","bi","r2t","region0_count","region1_count","table_select","noquant_count_bits","prev_noise","l3_enc","max_nonzero_coeff","sfb_count1","count1","a1","p","t32l","t33l","count1table_select","block_type","SHORT_TYPE","NORM_TYPE","bv_scf","use_best_huffman","best_huffman_divide","sfb","count_bits","w","IPOW20","global_gain","xrpow_max","xp","pi","codInfo","prevNoise","sfbmax","prev_data_use","j","accumulate","accumulate01","xpPos","iData","iDataPos","acc_iData","acc_iDataPos","acc_xp","acc_xpPos","step","scalefac","preflag","pretab","scalefac_scale","subblock_gain","usefullsize","quantize_xrpow","substep_shaping","gain","roundfac","k","pseudohalf","GrInfo","mode_gr","cod_info","r0","r0bits","r0t","r1","r1t","recalc_divide_init","slen1_n","slen2_n","slen1_tab","slen2_tab","best_scalefac_store","gr","ch","l3_side","tt","recalc","SBPSY_l","scfsi","g0","scfsi_band","s1","c1","s2","c2","c","part2_length","scalefac_compress","scfsi_calc","scale_bitcount","scale_bitcount_lsf","scale_short","scale_mixed","scale_long","tab","max_slen1","max_slen2","mixed_block_flag","sfbdivide","max_range_sfac_tab","table_number","row_in_table","partition","nr_sfb","over","max_sfac","partition_table","nr_of_sfb_block","slen1","slen2","slen3","slen4","sfb_partition_table","slen","log2tab","printf","huffman_init","bv_index","scfb_anz","GainAnalysis","PINK_REF","RMS_PERCENTILE","YULE_ORDER","RMS_WINDOW_TIME_NUMERATOR","MAX_SAMP_FREQ","RMS_WINDOW_TIME_DENOMINATOR","ABYule","MAX_SAMPLES_PER_WINDOW","ABButter","filterYule","inputPos","outputPos","nSamples","kernel","filterButter","fsqr","InitGainAnalysis","rgData","samplefreq","MAX_ORDER","linprebuf","lstepbuf","loutbuf","rinprebuf","rstepbuf","routbuf","reqindex","INIT_GAIN_ANALYSIS_ERROR","sampleWindow","lsum","rsum","totsamp","ill","INIT_GAIN_ANALYSIS_OK","ResetSampleFrequency","linpre","rinpre","lstep","rstep","lout","rout","B","AnalyzeSamples","left_samples","left_samplesPos","right_samples","right_samplesPos","num_samples","num_channels","curleft","curleftBase","curright","currightBase","batchsamples","cursamples","cursamplepos","GAIN_ANALYSIS_OK","GAIN_ANALYSIS_ERROR","STEPS_per_dB","ival","GetTitleGain","retval","len","elems","GAIN_NOT_ENOUGH_SAMPLES","upper","ceil","analyzeResult","Presets","VBRPresets","qual","comp","compS","shThreshold","shThresholdS","adj","adjShort","lower","curve","sens","inter","joint","mod","fix","vbr_q","quant_comp","quant_comp_s","expY","st_lrm","st_s","masking_adj","masking_adj_short","ath_lower","ath_curve","ath_sensitivity","interch","safejoint","sfb21mod","msfix","ABRPresets","kbps","bass","sc","mask","interCh","sfScale","nsmsfix","nsbass","scale","sfscale","lame","_lame","vbr_old_switch_map","vbr_psy_switch_map","apply_vbr_preset","gfp","enforce","vbr_preset","VBR","vbr_rh","VBR_q_frac","q","set","VBR_q","lame_set_VBR_q","abs","quant_comp_short","experimentalY","internal_flags","nsPsy","attackthre","attackthre_s","maskingadjust","maskingadjust_short","ATHlower","ATHcurve","athaa_sensitivity","interChRatio","exp_nspsytune","abr_switch_map","apply_abr_preset","preset","actual_bitrate","r","nearestBitrateFullIndex","vbr_abr","VBR_mean_bitrate_kbps","brate","disable_reservoir","noise_shaping","int","apply_preset","Lame","R3MIX","V3","vbr_mtrh","MEDIUM","V4","MEDIUM_FAST","STANDARD","V2","STANDARD_FAST","EXTREME","V0","EXTREME_FAST","INSANE","vbr_off","V9","V8","V7","V6","V5","V1","Reservoir","bs","_bs","ResvFrameBegin","mean_bits","maxmp3buf","frameLength","getframebits","sideinfo_len","resvLimit","out_samplerate","strict_ISO","ResvMax","fullFrameBits","ResvSize","resvDrain_pre","pinfo","resvsize","ResvMaxBits","targ_bits","cbr","add_bits","extra_bits","ResvAdjust","ResvFrameEnd","over_bits","stuffingBits","resvDrain_post","mdb_bytes","main_data_begin","VBRTag","v","_v","NUMTOCENTRIES","MAXFRAMESIZE","LAMEHEADERSIZE","XING_BITRATE1","XING_BITRATE2","XING_BITRATE25","ISO_8859_1","VBRTag0","VBRTag1","crc16Lookup","extractInteger","bufPos","createInteger","createShort","shiftInBitsValue","setLameTagFrameHeader","version","error_protection","bitrate_index","samplerate_index","extension","mode","mode_ext","copyright","original","emphasis","bitrate","bbyte","abyte","free_format","BitrateIndex","crcUpdateLookup","crc","addVbrFrame","bitrate_table","nVbrNumFrames","seen","want","pos","size","bag","addVbr","VBR_seek_table","getVbrTag","pTagData","VBRTagData","flags","hId","hSrIndex","hMode","hBitrate","samprate","samplerate_table","equals","isVbrTag","head_flags","frames","bytes","toc","vbrScale","headersize","encDelay","encPadding","InitVbrTag","kbps_header","totalFrameSize","headerSize","TotalFrameSize","bWriteVbrTag","nBytesWritten","add_dummy_byte","updateMusicCRC","bufferPos","getLameTagFrame","Class_ID","LAME_ID","indx","floor","seek_point","xingSeekTable","streamIndex","charAt","FRAMES_FLAG","streamSize","CRC_writeheader","musicLength","streamBuffer","streamBufferPos","revMethod","misc","musicCRC","abrBitrate","bytesWritten","encoder_delay","encoder_padding","quality","vbrTypeTranslator","lowpass","lowpassfreq","peakSignalAmplitude","radioReplayGain","noiseShaping","stereoMode","nonOptimal","sourceFreq","expNPsyTune","safeJoint","noGapMore","noGapPrevious","noGapCount","nogap_total","noGapCurr","nogap_current","athType","ATHtype","VBR_min_bitrate_kbps","findReplayGain","RadioGain","findPeakSample","PeakSample","pow","MONO","STEREO","DUAL_CHANNEL","JOINT_STEREO","force_ms","NOT_SET","in_samplerate","short_blocks","highpassfreq","scale_left","scale_right","noATH","ATHonly","nMusicCRC","putLameVBR","putVbrTag","seek","id3v2TagSize","fpStream","id3v2Header","readFully","startsWith","skipId3v2","write","BitStream","CRC16_POLYNOMIAL","ga","mpg","ver","vbr","_ga","_mpg","_ver","_vbr","totbit","bufByteIdx","bufBitIdx","putheader_bits","header","w_ptr","LameInternalFlags","MAX_HEADER_BUF","putbits2","write_timing","putbits_noheaders","drain_into_ancillary","remainingBits","ancillary_flag","writeheader","ptr","h_ptr","CRC_update","huffman_coder_count1","h","huffbits","table","Huffmancode","tableindex","cbits","xbits","ext","ShortHuffmancodebits","region1Start","LongHuffmancodebits","bigvalues","region2Start","TotalBytes","total","compute_flushbits","total_bytes_output","flushbits","remaining_headers","bitsPerFrame","last_ptr","first_ptr","println","bit_rate","padding","byte","flush_bitstream","rgdata","noclipGainChange","EQ","noclipScale","format_bitstream","channels_out","private_bits","band","old","encodeSideInfo2","data_bits","tot_bits","sfb_partition","scale_bits","sfbs","writeMainData","copy_buffer","mp3data","minimum","decode_on_the_fly","pcm_buf","mp3_in","samples_out","hip_decode1_unclipped","hip","init_bit_stream_w","LAME_MAXMP3BUFFER","HuffCodeTab","hl","MAX_VALUE","vbr_mt","vbr_default","MAX_dB","NEQ","MeanBits","meanBits","CalcNoiseResult","over_noise","tot_noise","max_noise","over_count","over_SSD","VBRQuantize","_tk","ATH","useAdjust","aaSensitivityP","adjust","adjustLimit","decay","SBMAX_s","psfb21","PSFB21","psfb12","PSFB12","cb_l","CBANDS","cb_s","eql_w","BLKSIZE","LameGlobalFlags","class_id","analysis","decode_only","write_id3tag_automatic","compression_ratio","experimentalZ","VBR_max_bitrate_kbps","VBR_hard_min","lowpasswidth","highpasswidth","ATHshort","athaa_type","athaa_loudapprox","useTemporal","tune","tune_value_a","framesize","frameNum","lame_allocated_gfp","CBRNewIterationLoop","_quantize","quantize","iteration_loop","pe","ms_ener_ratio","ratio","max_bits","l3_xmin","L3Side","SFBMAX","xrpow","mb","rv","on_pe","MPG_MD_MS_LR","ms_convert","reduce_side","masking_lower_db","PSY","mask_adjust","mask_adjust_short","masking_lower","init_outer_loop","init_xrpow","calc_xmin","outer_loop","iteration_finish_one","ReplayGain","freqindex","first","ScaleFac","arrL","arrS","arr21","arr12","tak","psy","_rv","_psy","ipow20","PRECALC_SIZE","Q_MAX","Q_MAX2","NSATHSCALE","sfBandIndex","pow20","pow43","ATHmdct","f","ath","ATHformula","StartLine","iteration_init","iteration_init_init","ATH_l","ATH_psfb21","ATH_s","ATH_psfb12","samp_freq","ATH_f","compute_ath","alto","treble","sfb21","longfact","shortfact","tbits","MAX_BITS_PER_GRANULE","MAX_BITS_PER_CHANNEL","fac","move_bits","athAdjust","athFloor","o","u","pxmin","gsfb","pxminPos","ath_over","enable_athaa_fix","psy_lmax","rh1","xmin","rh2","en0","xa","xb","en","thm","max_nonzero","sfb_smin","psymax","tmpATH","SBPSY_s","calc_noise_core","startline","noise","temp","ix01","calc_noise","distort","res","distortPos","l3_xminPos","over_noise_db","tot_noise_db","scalefacPos","tmp","noise_log","sl","set_pinfo","sfb2","en1","ifqstep","xfsf","sfb_lmax","bw","thr","LAMEsfb","en_s","xfsf_s","thr_s","LAMEsfb_s","LAMEqss","LAMEmainbits","LAMEsfbits","CalcNoiseData","clone_int","array","other","t1HB","t2HB","t3HB","t5HB","t6HB","t7HB","t8HB","t9HB","t10HB","t11HB","t12HB","t13HB","t15HB","t16HB","t24HB","t32HB","t33HB","t1l","t2l","t3l","t5l","t6l","t7l","t8l","t9l","t10l","t11l","t12l","t13l","t15l","t16_5l","t16l","t24l","Quantize","tk","BinSearchDirection","loop_break","quant_compare","best","calc","better","klemm_noise","get_klemm_noise","balance_noise","bRefine","ifqstep34","trigger","noise_shaping_amp","amp_scalefac_bands","inc_scalefac_scale","amp","inc_subblock_gain","sqrt","init_xrpow_core","sfb21_extra","ixwork","ath21","block","ath12","psfb21_analogsilence","BINSEARCH_NONE","BINSEARCH_UP","BINSEARCH_DOWN","trancate_smallspectrums","work","allowedNoise","trancateThreshold","nsame","sort","cod_info_w","save_xrpow","best_noise_info","best_part2_3_length","bEndOfSearch","best_ggain_pass1","desired_rate","nBits","CurrentStep","flagGoneOver","OldValue","Direction","bin_search_StepSize","age","search_limit","noise_info","maxggain","huff_bits","full_outer_loop","VBR_encode_granule","min_bits","dbits","bst_cod_info","bst_xrpow","Max_bits","real_bits","this_bits","found","get_framebits","frameBits","VBR_min_bitrate","VBR_max_bitrate","VBR_old_prepare","bands","analog_silence","avg","mxb","exp","bitpressure_strategy","VBR_new_prepare","maximum_framebits","calc_target_bits","analog_silence_bits","max_frame_bits","res_factor","totbits","NewMDCT","enwindow","win","tantab_l","cx","ca","cs","order","window_subband","x1Pos","wp","mdct_short","inout","inoutPos","tc0","tc1","tc2","ts0","ts1","ts2","mdct_long","out","outPos","_in","ct","st","tc3","tc4","ts5","ts6","ts7","ts8","ts3","ts4","tc5","tc6","tc7","tc8","mdct_sub48","w0","w1","wk","wkPos","mdct_enc","mdct_encPos","samp","sb_sample","sampPos","band0","band1","amp_filter","bu","bd","III_psy_ratio","III_psy_xmin","FFTOFFSET","newMDCT","lame_encode_mp3_frame","inbuf_l","inbuf_r","mp3buf","mp3bufPos","mp3buf_size","mp3count","masking_LR","masking","masking_MS","pe_use","inbuf","tot_ener","pe_MS","lame_encode_frame_init","primebuff0","primebuff1","slot_lag","frac_SpF","psymodel","bufp","bufpPos","blocktype","L3psycho_anal_vbr","L3psycho_anal_ns","gr2_max","max_pow","loudness_sq","adj_lim_new","adjust_ATH","MPG_MD_LR_LR","sum_pe_MS","sum_pe_LR","gi0","gi1","ms_ratio","ers","energy","pefirbuf","fircoef","pcmdata","set_frame_pinfo","bitrate_stereoMode_Hist","bt","bitrate_blockType_Hist","updateStats","VBRSeekInfo","IIISideInfo","iii_psy_xmin","NsPsy","last_en_subshort","lastAttacks","MAX_HEADER_LEN","Header","fill_buffer_resample_init","mfbuf","MFSIZE","channels_in","resample_ratio","mf_samples_to_encode","mf_size","lowpass1","lowpass2","highpass1","highpass2","noise_shaping_stop","tag_spec","inbuf_old","blackfilt","BPC","itime","SBLIMIT","minval_l","minval_s","nb_1","nb_2","nb_s1","nb_s2","s3_ss","s3_ll","loudness_sq_save","mld_l","mld_s","bm_l","bo_l","bm_s","bo_s","npart_l","npart_s","s3ind","s3ind_s","numlines_s","numlines_l","rnumlines_l","mld_cb_l","mld_cb_s","numlines_s_num1","numlines_l_num1","ms_ratio_s_old","ms_ratio_l_old","ms_ener_ratio_old","blocktype_old","AudiophileGain","in_buffer_nsamples","in_buffer_0","in_buffer_1","FFT","window_s","BLKSIZE_s","costab","fht","fz","fzPos","k4","fi","tri","k1","k2","k3","kx","f1","f0","f3","f2","g1","g2","g3","rv_tbl","fft_short","x_real","chn","fft_long","jj","init_fft","cos","PI","PsyModel","fft","LOG10","rpelev","rpelev2","rpelev_s","rpelev2_s","DELBARK","VO_SCALE","NS_PREECHO_ATT2","NSFIRLEN","LN_TO_LOG10","NON_LINEAR_SCALE_ENERGY","psycho_loudness_approx","loudness_power","compute_ffts","fftenergy","fftenergy_s","wsamp_l","wsamp_lPos","wsamp_s","wsamp_sPos","gr_out","re","im","totalenergy","HBLKSIZE","energy_save","ma_max_i1","ma_max_i2","ma_max_m","I1LIMIT","I2LIMIT","MLIMIT","table1","table2","table3","mask_add","m1","m2","kk","shortblock","table2_","vbrpsy_mask_add","convert_partition2scalefac_s","eb","sblock","sb","enn","thmm","bo_s_sb","b_lim","w_curr","bo_s_weight","w_next","convert_partition2scalefac_l","bo_l_sb","bo_l_weight","compute_masking_s","ebb","m","el","ecb","NS_INTERP","regcoef_s","pecalc_s","mr","pe_s","regcoef_l","pecalc_l","pe_l","calc_energy","calc_mask_index_l","mask_idx","last_tab_entry","vbrpsy_compute_fft_l","vbrpsy_compute_fft_s","vbrpsy_compute_loudness_approximation_l","masking_ratio","masking_MS_ratio","percep_entropy","percep_MS_entropy","blocktype_d","numchn","pcfact","wsamp_L","wsamp_S","eb_l","eb_s","uselongblock","ns_hpfsmpl","mask_idx_l","mask_idx_s","firbuf","firbufPos","attackThreshold","en_subshort","en_short","attack_intensity","ns_uselongblock","ns_attacks","HBLKSIZE_s","pf","pfPos","pfe","ers_save","idx","eb2","calc_interchannel_masking","mld","rmid","rside","msfix1","athadjust","msfix2","athlower","thmLR","thmM","thmS","ns_msfix","STOP_TYPE","START_TYPE","block_type_set","ppe","ppePos","fircoef_","vbrpsy_skip_masking_s","vbrpsy_skip_masking_l","vbrpsy_compute_masking_s","float","psyvbr_calc_mask_index_s","dd","dd_n","avg_mask","last","vbrpsy_compute_masking_l","ecb_limit","ecb_limit_2","ecb_limit_1","vbrpsy_compute_MS_thresholds","cb_mld","ath_cb","ebM","ebS","thmL","thmR","mld_m","thmMS","s3_func_x","bark","hf_slope","tempy","norm_s3_func_x","lim_a","lim_b","s3_func","tempx","freq2bark","freq","atan","init_numline","numlines","bo","bm","bval","bval_width","bo_w","sfreq","blksize","scalepos","deltafreq","sbmax","b_frq","sample_freq_frac","ni","j2","bark1","i1","i2","arg","f_tmp","bark2","init_s3_values","npart","norm","use_old_s3","s3","numberOfNoneZero","s3_x_norm","stereo_demask","ATHformula_GB","sub_short_factor","n_chn_psy","n_chn_out","factor","vbrpsy_attack_detection","vbrpsy_compute_block_type","ch01","new_thmm","NS_PREECHO_ATT1","vbrpsy_apply_block_type","psymodel_init","useOldS3","bvl_a","snr_l_a","snr_l_b","snr_s_a","snr_s_b","snr","level","log","frame_duration","freq_inc","eql_balance","qu","id3","mpglib","LowPassHighPass","lowerlimit","BandPass","lPass","enc","_p","_qu","_id3","_mpglib","filter_coef","SmpFrqIndex","sample_freq","gpf","FindNearestBitrate","bRate","samplerate","optimum_bandwidth","lh","freq_map","table_index","calcNeeded","mf_needed","lame_encode_frame","ret","InOut","n_in","n_out","NumUsed","num_used","blackman","fcn","wcn","bkwn","sin","fill_buffer_resample","outbuf","outbufPos","desired_len","in_bufferPos","bpc","gcd","intratio","filter_l","BLACKSIZE","time0","joff","xvalue","n_shift","fill_buffer","in_buffer","nsamples","io","numUsed","lame_init","ENCDELAY","POSTDELAY","MDCTDELAY","lame_init_old","full_bitrate_table","lower_range","lower_range_kbps","upper_range","upper_range_kbps","lame_init_params","map2MP3Frequency","linear_int","input_samplefreq","suggested_samplefreq","optimum_samplefreq","hip_decode_exit","hip_decode_init","lowpass_band","highpass_band","minband","maxband","fc1","fc2","lame_init_params_ppflt","id3tag_write_v2","lame_init_bitstream","LAME_DEFAULT_QUALITY","VBRNewIterationLoop","VBROldIterationLoop","vbrmode","ABRIterationLoop","lame_init_qval","NSATTACKTHRE","NSATTACKTHRE_S","lame_encode_flush","mp3buffer","mp3bufferPos","mp3buffer_size","mp3buffer_size_remaining","end_padding","frames_left","imp3","samples_to_encode","bunch","frame_num","lame_encode_buffer","id3tag_write_v1","buffer_l","buffer_r","update_inbuffer_size","mp3out","mp3size","in_buffer_ptr","inOut","buf_size","lame_encode_buffer_sample","GetAudio","parse2","mpg2","Parse","ver2","id32","pre2","MPGLib","ID3Tag","_bits","WavHeader","dataOffset","dataLen","channels","fourccToInt","fourcc","DECDELAY","MPG_MD_LR_I","MPG_MD_MS_I","RIFF","WAVE","fmt_","readHeader","dataView","getUint32","fmtLen","getUint16","Mp3Encoder","gaud","parse","maxSamples","encodeBuffer","left","right","_sz","subarray","flush","mp3Encoder","wav","samplesLeft","dataBuffer","samplesRight","clearBuffer","appendToBuffer","mp3Buf","prefConfig","arrayBuffer","progress","msg","encode","finish","toString","substring","indexOf","lastIndexOf","blob","worker_script","URL","createObjectURL","_getPrototypeOf","_typeof","obj","Symbol","iterator","_assertThisInitialized","_createSuper","Derived","Super","Reflect","construct","sham","Proxy","Date","_isNativeReflectConstruct","NewTarget","_setPrototypeOf","for","z","aa","ba","encodeURIComponent","g","replace","name","framesToPop","C","isMounted","enqueueForceUpdate","enqueueReplaceState","enqueueSetState","D","E","context","refs","updater","F","G","isReactComponent","setState","forceUpdate","H","isPureReactComponent","I","J","K","L","__self","__source","M","$$typeof","_owner","N","O","P","Q","pop","keyPrefix","R","U","S","T","isArray","next","done","=",":","escape","ea","fa","V","da","W","X","Children","toArray","only","Component","PureComponent","createContext","_calculateChangedBits","_currentValue","_currentValue2","_threadCount","Provider","Consumer","_context","forwardRef","render","lazy","_ctor","_status","_result","memo","compare","useCallback","useContext","useEffect","useImperativeHandle","useDebugValue","useLayoutEffect","useMemo","useReducer","useRef","useState","Fragment","StrictMode","Suspense","cloneElement","createFactory","bind","isValidElement","unstable_ConcurrentMode","unstable_Profiler","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentDispatcher","ReactCurrentOwner","Y","default","Z","ha","ia","onError","ja","la","ma","na","oa","extractEvents","eventTypes","pa","phasedRegistrationNames","qa","registrationName","ra","sa","dependencies","ta","ua","va","wa","currentTarget","ka","ya","za","Aa","_dispatchListeners","_dispatchInstances","isPropagationStopped","isPersistent","release","Ba","injectEventPluginOrder","injectEventPluginsByName","Ca","stateNode","disabled","Da","Ea","random","Fa","Ga","Ha","parentNode","tag","Ia","Ja","Ka","La","return","Ma","dispatchConfig","Na","_targetInst","Oa","Pa","Qa","Ra","document","Sa","toLowerCase","Ta","animationend","animationiteration","animationstart","transitionend","Ua","Va","Wa","animation","transition","Xa","Ya","Za","$a","ab","bb","db","textContent","fb","gb","nativeEvent","Interface","isDefaultPrevented","defaultPrevented","returnValue","ib","eventPool","jb","destructor","hb","getPooled","preventDefault","stopPropagation","cancelBubble","persist","eventPhase","bubbles","cancelable","timeStamp","now","isTrusted","extend","kb","lb","nb","ob","documentMode","pb","qb","rb","beforeInput","bubbled","captured","compositionEnd","compositionStart","compositionUpdate","tb","ub","keyCode","vb","detail","wb","zb","locale","which","ctrlKey","altKey","metaKey","char","yb","Ab","Bb","Cb","Db","Eb","Fb","Gb","Hb","Ib","Jb","Kb","Lb","color","date","datetime","datetime-local","email","month","password","range","search","tel","text","time","url","week","Mb","nodeName","Nb","srcElement","correspondingUseElement","nodeType","Ob","setAttribute","Pb","Rb","_valueTracker","getOwnPropertyDescriptor","get","getValue","setValue","stopTracking","Qb","Sb","checked","Tb","Ub","Vb","Wb","Xb","Yb","Zb","$b","ac","bc","cc","dc","ec","fc","gc","hc","ic","displayName","jc","_debugOwner","_debugSource","fileName","lineNumber","kc","lc","mc","nc","acceptsBooleans","attributeName","attributeNamespace","mustUseProperty","propertyName","rc","toUpperCase","tc","pc","isNaN","qc","test","oc","removeAttribute","setAttributeNS","uc","vc","defaultChecked","defaultValue","_wrapperState","initialChecked","wc","initialValue","controlled","xc","yc","zc","Ac","ownerDocument","activeElement","Bc","change","Cc","Dc","Ec","Fc","Gc","Hc","Ic","Jc","detachEvent","Kc","Lc","attachEvent","Mc","Nc","Oc","Pc","_isInputEventSupported","Qc","Rc","Alt","Control","Meta","Shift","Sc","getModifierState","Tc","Uc","Vc","Wc","Xc","Yc","screenX","screenY","clientX","clientY","pageX","pageY","shiftKey","button","buttons","relatedTarget","fromElement","toElement","movementX","movementY","Zc","pointerId","pressure","tangentialPressure","tiltX","tiltY","twist","pointerType","isPrimary","$c","mouseEnter","mouseLeave","pointerEnter","pointerLeave","ad","defaultView","parentWindow","alternate","cd","ed","effectTag","fd","hd","child","sibling","gd","id","animationName","elapsedTime","pseudoElement","jd","clipboardData","kd","ld","charCode","md","Esc","Spacebar","Left","Up","Right","Down","Del","Win","Menu","Apps","Scroll","MozPrintableKey","nd","8","9","12","13","16","17","18","19","20","27","32","33","34","35","36","37","38","39","40","45","46","112","113","114","115","116","117","118","119","120","121","122","123","144","145","224","od","location","repeat","pd","dataTransfer","qd","touches","targetTouches","changedTouches","rd","sd","deltaX","wheelDeltaX","deltaY","wheelDeltaY","wheelDelta","deltaZ","deltaMode","td","ud","vd","wd","isInteractive","xd","isInteractiveTopLevelEventType","yd","zd","Ad","targetInst","ancestors","containerInfo","topLevelType","Bd","Cd","Dd","addEventListener","Ed","Fd","Gd","Hd","Id","Jd","body","Kd","firstChild","Ld","node","nextSibling","Nd","HTMLIFrameElement","contentWindow","href","Od","contentEditable","Qd","focusedElem","selectionRange","Md","contains","compareDocumentPosition","documentElement","selectionStart","selectionEnd","getSelection","rangeCount","anchorNode","anchorOffset","focusNode","focusOffset","createRange","setStart","removeAllRanges","addRange","setEnd","element","scrollLeft","top","scrollTop","focus","Rd","Sd","select","Td","Ud","Vd","Wd","Xd","Yd","onSelect","$d","Zd","ae","options","selected","defaultSelected","be","dangerouslySetInnerHTML","ce","de","ee","SimpleEventPlugin","EnterLeaveEventPlugin","ChangeEventPlugin","SelectEventPlugin","BeforeInputEventPlugin","fe","html","mathml","svg","ge","he","ie","je","namespaceURI","innerHTML","removeChild","appendChild","MSApp","execUnsafeLocalFunction","ke","lastChild","nodeValue","le","animationIterationCount","borderImageOutset","borderImageSlice","borderImageWidth","boxFlex","boxFlexGroup","boxOrdinalGroup","columnCount","columns","flex","flexGrow","flexPositive","flexShrink","flexNegative","flexOrder","gridArea","gridRow","gridRowEnd","gridRowSpan","gridRowStart","gridColumn","gridColumnEnd","gridColumnSpan","gridColumnStart","fontWeight","lineClamp","lineHeight","opacity","orphans","tabSize","widows","zIndex","zoom","fillOpacity","floodOpacity","stopOpacity","strokeDasharray","strokeDashoffset","strokeMiterlimit","strokeOpacity","strokeWidth","me","ne","trim","oe","setProperty","menuitem","area","base","br","col","embed","hr","img","keygen","link","meta","param","track","wbr","qe","is","se","blur","te","ue","ve","we","autoFocus","xe","__html","ye","setTimeout","ze","clearTimeout","Ae","unstable_scheduleCallback","Be","unstable_cancelCallback","De","Ee","Set","Fe","Ge","He","Ie","Je","contextTypes","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","childContextTypes","Ke","Le","Me","Ne","getChildContext","Oe","__reactInternalMemoizedMergedChildContext","Pe","Qe","Re","Se","Ue","elementType","pendingProps","contextDependencies","memoizedState","updateQueue","memoizedProps","lastEffect","firstEffect","nextEffect","childExpirationTime","expirationTime","Ve","Xe","Ye","Ze","$e","af","bf","pendingChildren","implementation","cf","didError","earliestPendingTime","latestPendingTime","df","ff","latestPingedTime","earliestSuspendedTime","latestSuspendedTime","gf","nextExpirationTimeToWorkOn","jf","kf","baseState","tf","_reactInternalFiber","lf","nf","mf","payload","callback","of","qf","rf","sf","uf","shouldComponentUpdate","vf","contextType","wf","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","xf","yf","getDerivedStateFromProps","getSnapshotBeforeUpdate","UNSAFE_componentWillMount","componentWillMount","componentDidMount","zf","Af","_stringRef","Bf","Cf","Map","delete","Df","Ef","Ff","Gf","Hf","If","Jf","tagName","Kf","Lf","Mf","Nf","Of","Pf","Qf","Rf","Sf","Tf","Uf","Vf","Wf","Xf","Yf","Zf","$f","ag","bg","cg","dg","eg","fg","gg","hg","ig","jg","kg","lg","mg","queue","baseUpdate","ng","og","pg","lastRenderedReducer","dispatch","action","qg","lastRenderedState","eagerReducer","eagerState","rg","destroy","deps","sg","tg","ug","vg","wg","readContext","xg","yg","zg","Ag","Bg","Cg","Dg","Eg","Fg","Gg","Hg","Ig","Jg","Kg","Lg","Mg","Ng","Og","Pg","UNSAFE_componentWillUpdate","componentWillUpdate","componentDidUpdate","Qg","getDerivedStateFromError","Rg","pendingContext","Sg","timedOutAt","fallback","Tg","Ug","hf","We","hydrate","hidden","observedBits","unstable_observedBits","Vg","Wg","Xg","Yg","Zg","$g","ah","bh","firstUpdate","lastUpdate","firstCapturedUpdate","lastCapturedUpdate","firstCapturedEffect","lastCapturedEffect","dh","eh","fh","gh","hh","ih","jh","stack","kh","mh","nh","oh","onClick","onclick","ph","WeakSet","qh","rh","sh","th","vh","componentWillUnmount","wh","xh","yh","insertBefore","_reactRootContainer","zh","wasMultiple","multiple","Ce","display","uh","hi","Xh","has","add","Bh","WeakMap","Ch","Dh","Eh","componentDidCatch","Fh","componentStack","Gh","Hh","Ih","Jh","Kh","Lh","Mh","Nh","Oh","Ph","Qh","Rh","Sh","Th","Uh","__reactInternalSnapshotBeforeUpdate","Vh","Zh","pendingCommitExpirationTime","ef","Pd","Yh","unstable_runWithPriority","unstable_NormalPriority","finishedWork","$h","ai","createElementNS","createTextNode","ci","di","maxDuration","pingCache","ei","unstable_getCurrentPriorityLevel","unstable_ImmediatePriority","unstable_UserBlockingPriority","unstable_LowPriority","unstable_IdlePriority","ii","ji","ki","li","mi","oi","qi","ri","si","ti","unstable_now","ui","vi","wi","xi","yi","zi","timeout","timeoutHandle","Bi","Ci","nextScheduledRoot","Di","Ei","unstable_shouldYield","_onComplete","Fi","firstBatch","_expirationTime","_defer","Gi","Hi","Ii","Ji","Ki","Li","Ni","_root","_callbacks","_next","_hasChildren","_didComplete","_children","Oi","_didCommit","_onCommit","Pi","_internalRoot","Qi","Si","legacy_renderSubtreeIntoContainer","hasAttribute","Ri","Ti","Mi","querySelectorAll","JSON","stringify","form","commit","unmount","createBatch","Vi","createPortal","findDOMNode","unstable_renderSubtreeIntoContainer","unmountComponentAtNode","unstable_createPortal","unstable_batchedUpdates","unstable_interactiveUpdates","flushSync","unstable_createRoot","unstable_flushControlled","Events","findFiberByHostInstance","isDisabled","supportsFiber","inject","onCommitFiberRoot","onCommitFiberUnmount","Te","overrideProps","currentDispatcherRef","findHostInstanceByFiber","bundleType","rendererPackageName","Wi","Xi","global","_r","previous","priorityLevel","performance","_schedMock","MessageChannel","port2","port1","unstable_next","unstable_wrapCallback","unstable_continueExecution","unstable_pauseExecution","unstable_getFirstCallbackNode","Function","ReactPropTypesSecret","emptyFunction","emptyFunctionWithReset","resetWarningCache","shim","propName","componentName","propFullName","secret","getShim","isRequired","ReactPropTypes","bigint","bool","symbol","any","arrayOf","instanceOf","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes"],"mappings":"sFAGAA,EAAAC,QAAmBC,EAAQ,qBCc3BF,EAAAC,QAAmBC,EAAQ,GAARA,qEC+DnB,SAAAC,EAAAC,EAAAC,EAAAC,GACA,QAAAC,EAAA,EAAiBA,EAAAD,EAAAE,OAAmBD,IACpCH,EAAAK,SAAAJ,EAAAE,EAAAD,EAAAI,WAAAH,IAGe,IAAAI,EAlFf,SAAAC,GACA,IAAAC,EAAAC,UAAAN,OAAA,QAAAO,IAAAD,UAAA,GAAAA,UAAA,MACAE,EAAAJ,EAAAK,iBACAC,EAAAL,EAAAK,YAAAN,EAAAM,WACAC,EAAAN,EAAAO,QAAA,IACAC,EAAA,IAAAF,EAAA,MAOA,OAEA,SAAAG,EAAAH,EAAAD,EAAAF,EAAAK,GACA,IAAAE,EAAAF,EAAA,EACAG,EAAAR,EAAAO,EACAX,EAAA,IAAAa,YAAA,GAAAH,EAAAd,OAAAe,GACAnB,EAAA,IAAAsB,SAAAd,GAkCA,OA/BAT,EAAAC,EAAA,UAEAA,EAAAuB,UAAA,KAAAL,EAAAd,OAAAe,GAAA,GAEApB,EAAAC,EAAA,UAEAD,EAAAC,EAAA,WAEAA,EAAAuB,UAAA,UAEAvB,EAAAwB,UAAA,GAAAT,GAAA,GAEAf,EAAAwB,UAAA,GAAAZ,GAAA,GAEAZ,EAAAuB,UAAA,GAAAT,GAAA,GAEAd,EAAAuB,UAAA,GAAAT,EAAAM,GAAA,GAEApB,EAAAwB,UAAA,GAAAJ,GAAA,GAEApB,EAAAwB,UAAA,GAAAP,GAAA,GAEAlB,EAAAC,EAAA,WAEAA,EAAAuB,UAAA,GAAAL,EAAAd,OAAAe,GAAA,GACA,IAAAJ,EAyBA,SAAAU,EAAAxB,EAAAyB,GACA,QAAAvB,EAAA,EAAiBA,EAAAuB,EAAAtB,OAAkBD,IAAAF,GAAA,GACnC,IAAA0B,EAAAC,KAAAC,KAAA,EAAAD,KAAAE,IAAA,EAAAJ,EAAAvB,KACAsB,EAAAM,SAAA9B,EAAA0B,EAAA,QAAAA,EAAA,MAAAA,GAAA,IA1BAK,CAAAhC,EAAA,GAAAkB,GAkBA,SAAAO,EAAAxB,EAAAyB,GACA,QAAAvB,EAAA,EAAiBA,EAAAuB,EAAAtB,OAAkBD,IAAAF,GAAA,EACnCwB,EAAAQ,WAAAhC,EAAAyB,EAAAvB,IAAA,GAlBA+B,CAAAlC,EAAA,GAAAkB,GAEAV,EAxCA2B,CALA,IAAAvB,EA+CA,SAAAwB,EAAAC,GAKA,IAJA,IAAAjC,EAAAgC,EAAAhC,OAAAiC,EAAAjC,OACAkC,EAAA,IAAAC,aAAAnC,GACAoC,EAAA,EACAC,EAAA,EACAD,EAAApC,GACAkC,EAAAE,KAAAJ,EAAAK,GACAH,EAAAE,KAAAH,EAAAI,GACAA,IAEA,OAAAH,EAxDAI,CAAAlC,EAAAmC,eAAA,GAAAnC,EAAAmC,eAAA,IAEAnC,EAAAmC,eAAA,GAEA5B,EAAAD,EAAAF,EAAAK,oBCfA2B,EAAA,WACA,SAAAC,EAAAC,EAAAC,GACA,QAAA5C,EAAA,EAAmBA,EAAA4C,EAAA3C,OAAkBD,IAAA,CACrC,IAAA6C,EAAAD,EAAA5C,GACA6C,EAAAC,WAAAD,EAAAC,aAAA,EACAD,EAAAE,cAAA,EACA,UAAAF,MAAAG,UAAA,GACAC,OAAAC,eAAAP,EAAAE,EAAAM,IAAAN,IAGA,gBAAAO,EAAAC,EAAAC,GAGA,OAFAD,GAAAX,EAAAU,EAAAG,UAAAF,GACAC,GAAAZ,EAAAU,EAAAE,GACAF,GAbA,GAiDA,IAgQeI,EAhQI,SAAAC,GACnB,IAAAC,EAAAC,EACAC,EAAA,CACAC,OAAA,GAEAC,EAAA,IAAAC,OAA6BC,EAAAC,GAC7B,OAAAN,EAAAD,EAAA,SAAAQ,GAMA,SAAAC,EAAAvB,IA7CA,SAAAwB,EAAAhB,GACA,KAAAgB,aAAAhB,GACA,UAAAiB,UAAA,qCA4CAC,CAAAC,KAAAJ,GACA,IAAAK,EA1CA,SAAAC,EAAAC,GACA,IAAAD,EACA,UAAAE,eAAA,6DAEA,OAAAD,GAAA,kBAAAA,GAAA,oBAAAA,EAAAD,EAAAC,EAsCAE,CAAAL,MAAAJ,EAAAU,WAAA5B,OAAA6B,eAAAX,IAAAO,KAAAH,KAAA3B,IA6CA,OA5CA4B,EAAAO,WAAA,WACA,IAAAC,EAAAb,EAAAc,cACA,IAAAD,MAAA,aAAAA,EAAAE,MAQA,OAPAC,UAAAC,aAAAC,aAAAzB,GAAA0B,KAAA,SAAAC,GACAf,EAAAgB,YAAAD,KACWE,MAAA,SAAAC,GACXvB,EAAAwB,eAAAnB,EAAA5B,MAAAgD,cAAAF,MAIA,EAEAV,GAAA,WAAAA,EAAAE,OACAf,EAAA0B,eAGArB,EAAAsB,WAAA,WACA,IAAAd,EAAAb,EAAAc,cACAD,GAAA,cAAAA,EAAAE,QACAF,EAAAe,QACAf,EAAAgB,QAAA,WACA7B,EAAAwB,eAAAnB,EAAA5B,MAAAqD,gBAEA9B,EAAA+B,SAAAC,YAGA3B,EAAA4B,UAAA,WACA,IAAAC,EAAA7B,EAAA5B,MACA0D,EAAAD,EAAAC,UACAC,EAAAF,EAAAE,aACAvB,EAAAb,EAAAc,cACAD,GAAA,uBAAAwB,SAAAxB,EAAAE,SACAF,EAAAyB,OACAzB,EAAA0B,OAAA,WACAvC,EAAAwC,iBAAAL,EAAAC,EAAA/B,EAAA5B,MAAAgE,cACAzC,EAAA0C,WAAA,IAGA1C,EAAA+B,SAAAC,UACA3B,EAAAsC,eAGA3C,EAAA4C,gBACAvC,EAAAwC,SAAA7C,EAAA+B,SAAAe,iBACAzC,EAkMA,OAnRA,SAAA0C,EAAAC,GACA,uBAAAA,GAAA,OAAAA,EACA,UAAA9C,UAAA,kEAAA8C,GAEAD,EAAA3D,UAAAN,OAAAmE,OAAAD,KAAA5D,UAAA,CACA8D,YAAA,CACAC,MAAAJ,EACApE,YAAA,EACAE,UAAA,EACAD,cAAA,KAGAoE,IAAAlE,OAAAsE,eAAAtE,OAAAsE,eAAAL,EAAAC,GAAAD,EAAArC,UAAAsC,GAiBAK,CAAArD,EAuPGV,GA1LHhB,EAAA0B,EAAA,EACAhB,IAAA,cAMAmE,MAAA,SAAA/B,GACA,IAAAkC,EAAAlD,KACAmD,EAAAnD,KAAA3B,MACA+E,EAAAD,EAAAC,mBACAC,EAAAF,EAAAE,SACAC,EAAAH,EAAAG,UACA1D,EAAAc,cAAA,IAAA6C,cAAAvC,EAAA,CACAoC,qBACAC,aAEAzD,EAAAc,cAAA8C,gBAAA,SAAAC,GACA7D,EAAAwB,eAAA8B,EAAA7E,MAAAqF,iBAAAD,EAAAE,MACA/D,EAAA0C,WAAAsB,KAAAH,EAAAE,OAEA/D,EAAA+B,SAAAkC,SACAjE,EAAAc,cAAAoD,MAAAR,GACA1D,EAAAc,cAAAqD,QAAA,SAAAC,GACApE,EAAAwB,eAAA8B,EAAA7E,MAAA4F,cAAAD,IAEApE,EAAAc,cAAAwD,SAAA,SAAAF,GACApE,EAAAwB,eAAA8B,EAAA7E,MAAA4F,cAAAD,IAEApE,EAAAc,cAAAyD,QAAA,SAAAH,GACApE,EAAAwB,eAAA8B,EAAA7E,MAAAgD,cAAA2C,IAEApE,EAAA+B,SAAAyC,wBAAApD,GACAqD,QAAArE,KAAAyC,UACAzC,KAAAsE,YAAAtE,KAAAyC,aAOK,EACL7D,IAAA,gBACAmE,MAAA,WACA,IAAAwB,EAAAvE,UAkBA/D,IAAA2E,UAAAC,eACAD,UAAAC,aAAA,SAMA5E,IAAA2E,UAAAC,aAAAC,eACAF,UAAAC,aAAAC,aAzBA,SAAAzB,GAEA,IAAAyB,EAAAF,UAAAE,cAAAF,UAAA4D,oBAAA5D,UAAA6D,gBAIA,OAAA3D,EAKA,IAAA4D,QAAA,SAAAC,EAAAC,GACA9D,EAAAX,KAAAS,UAAAvB,EAAAsF,EAAAC,MALAhF,EAAAwB,eAAAmD,EAAAlG,MAAAgD,eACAqD,QAAAE,OAAA,IAAAC,MAAA,yDA2BK,CACLjG,IAAA,iBACAmE,MAAA,SAAA+B,EAAAd,GACA,oBAAAc,KAAAd,KASK,CACLpF,IAAA,mBACAmE,MAAA,SAAAgC,EAAA/C,EAAAgD,GACA,IAAAC,EAAA,KACAC,EAAAtF,EAAA0C,WAmDA,OAAAyC,GACA,iBACAnF,EAAAwB,eAAA4D,EAAA,IAAAG,KAAAD,EAAA,CACAH,UAEA,MACA,iBAxDA,WACA,IAAAK,EAAA,IAAAC,WACAD,EAAAE,kBAAA,IAAAH,KAAAD,EAAA,CACAH,UAWAK,EAAAG,OATA,SAAAvB,GACA,IAAAlI,EAAAkI,EAAA5F,OAAAR,OACAgC,EAAA+B,SAAA6D,gBAAA1J,GAAAiF,KAAA,SAAA4C,GACAsB,EAAA,IAAAE,KAAA,KAAAvI,SAA+Cf,EAAU8H,EAAA3B,KAAA,CACzD+C,KAAA,cAEAnF,EAAAwB,eAAA4D,EAAAC,MA8CAQ,GACA,MACA,iBA3CA,WACA,IAAAL,EAAA,IAAAC,WACAD,EAAAE,kBAAA,IAAAH,KAAAD,EAAA,CACAH,KAAA,eA6BAK,EAAAG,OA3BA,SAAAvB,GACA,IAAAlI,EAAAkI,EAAA5F,OAAAR,OACAgC,EAAA+B,SAAA6D,gBAAA1J,GAAAiF,KAAA,SAAA4C,GACA,IAAA+B,EAA2B7J,EAAU8H,EAAA3B,GACrCzC,EAAAoG,YAAA,CACAC,IAAA,OACAC,OAAA,CACAC,QAAA,OAGAvG,EAAAoG,YAAA,CACAC,IAAA,SACAG,SAAAL,IAEAnG,EAAAoG,YAAA,CACAC,IAAA,WAEArG,EAAAyG,UAAA,SAAAhC,GACA,UAAAA,EAAAL,KAAAiC,IAAA,CACA,IAAAK,EAAA,IAAAd,KAAAnB,EAAAL,KAAAuC,IAAA,CACAnB,SAEAnF,EAAAwB,eAAA4D,EAAAiB,QAiBAE,GACA,MACA,QACA,UAkBK,CACLvH,IAAA,cACAmE,MAAA,WACAnD,EAAA+B,SAAAkC,SACAjE,EAAAc,cAAAmD,aAGAjE,EAvPA,GAwPGT,EAAAmD,WAAA,GAAAnD,EAAAuB,cAAA,KAAAvB,EAAAwC,SAAA,IAAAyE,OAAAC,cAAAD,OAAAE,oBAAAlH,GC/SCmH,EAAY,WAChB,SAAApI,EAAAC,EAAAC,GACA,QAAA5C,EAAA,EAAmBA,EAAA4C,EAAA3C,OAAkBD,IAAA,CACrC,IAAA6C,EAAAD,EAAA5C,GACA6C,EAAAC,WAAAD,EAAAC,aAAA,EACAD,EAAAE,cAAA,EACA,UAAAF,MAAAG,UAAA,GACAC,OAAAC,eAAAP,EAAAE,EAAAM,IAAAN,IAGA,gBAAAO,EAAAC,EAAAC,GAGA,OAFAD,GAAAX,EAAAU,EAAAG,UAAAF,GACAC,GAAAZ,EAAAU,EAAAE,GACAF,GAbgB,GAqBhB,SAAS2H,EAA0BtG,EAAAC,GACnC,IAAAD,EACA,UAAAE,eAAA,6DAEA,OAAAD,GAAA,kBAAAA,GAAA,oBAAAA,EAAAD,EAAAC,EAqBA,IC9BIsG,ED8IWC,EAhHC,SAAAxH,GAChB,IAAAC,EAAAwH,EACA,OAAAA,EAAAxH,EAAA,SAAAQ,GAEA,SAAAiH,IACA,IAAAC,EACAzH,EAAAa,GApCA,SAAwBJ,EAAAhB,GACxB,KAAAgB,aAAAhB,GACA,UAAAiB,UAAA,qCAmCMgH,CAAe9G,KAAA4G,GACrB,QAAAG,EAAA/K,UAAAN,OAAAsL,EAAAC,MAAAF,GAAAG,EAAA,EAAqEA,EAAAH,EAAaG,IAClFF,EAAAE,GAAAlL,UAAAkL,GAEA,OAAA9H,EAAAa,EAAsCuG,EAA0BxG,MAAA6G,EAAAD,EAAAtG,WAAA5B,OAAA6B,eAAAqG,IAAAzG,KAAAgH,MAAAN,EAAA,CAAA7G,MAAAoH,OAAAJ,KAAA/G,EAAAqE,YAAA,WAChE,IAAAxC,EAAA7B,EAAA5B,MACAgJ,EAAAvF,EAAAuF,OACAC,EAAAxF,EAAAwF,MACAV,EAAAW,YAAAnB,OAAAoB,sBAAAvH,EAAAqE,aACA,IAAAmD,EAAAxH,EAAAwC,SAAAiF,QACAC,EAAA,IAAAC,WAAAH,GACAxH,EAAAwC,SAAAoF,sBAAAF,GACA1H,EAAA6H,eAGA,IAFA,IAAAC,EAAAC,OAAAV,GAAAG,EACAQ,EAAA,EACAxM,EAAA,EAAuBA,EAAAgM,EAAkBhM,IAAA,CACzC,IACAyM,EADAP,EAAAlM,GAAA,IACA4L,EAAA,EACAT,EAAAuB,UAAA,IAAA1M,EAAA,mBAAAwM,EAAAC,GACAD,GAAAF,EAEAnB,EAAAuB,UAAAC,OAAAd,EAAAD,EAAA,GACAT,EAAAuB,UAAAE,UACiB7B,EAA0BvG,EAApCb,GA+EP,OAhIA,SAAkBuD,EAAAC,GAClB,uBAAAA,GAAA,OAAAA,EACA,UAAA9C,UAAA,kEAAA8C,GAEAD,EAAA3D,UAAAN,OAAAmE,OAAAD,KAAA5D,UAAA,CACA8D,YAAA,CACAC,MAAAJ,EACApE,YAAA,EACAE,UAAA,EACAD,cAAA,KAGAoE,IAAAlE,OAAAsE,eAAAtE,OAAAsE,eAAAL,EAAAC,GAAAD,EAAArC,UAAAsC,GAUI0F,CAAS1B,EA2GV1H,GA5ECqH,EAAYK,EAAA,EAChBhI,IAAA,oBACAmE,MAAA,WACA/C,KAAAuC,eAEK,CACL3D,IAAA,uBACAmE,MAAA,WACAqD,OAAAmC,qBAAA3B,EAAAW,eAOK,CACL3I,IAAA,eACAmE,MAAA,WACA,IAAAI,EAAAnD,KAAA3B,MACAgJ,EAAAlE,EAAAkE,OACAC,EAAAnE,EAAAmE,MACAkB,EAAArF,EAAAqF,gBACAC,EAAAtF,EAAAsF,YACAC,EAAA9B,EAAA+B,UAAAC,QACAhC,EAAAuB,UAAAO,EAAAG,WAAA,MACAjC,EAAAuB,UAAAW,UAAA,IAAAxB,EAAAD,GACAT,EAAAuB,UAAAY,UAAAP,EACA5B,EAAAuB,UAAAa,SAAA,IAAA1B,EAAAD,GACAT,EAAAuB,UAAAc,UAAA,EACArC,EAAAuB,UAAAe,YAAAT,EACA7B,EAAAuB,UAAAgB,cAOK,CACLvK,IAAA,aACAmE,MAAA,WACAqD,OAAAmC,qBAAA3B,EAAAW,aACA,IAAA6B,EAAApJ,KAAA3B,MACAgJ,EAAA+B,EAAA/B,OACAC,EAAA8B,EAAA9B,MACAtH,KAAA8H,eACAlB,EAAAuB,UAAAkB,OAAA,EAAAhC,EAAA,GACAT,EAAAuB,UAAAC,OAAAd,EAAAD,EAAA,GACAT,EAAAuB,UAAAE,WAOK,CACLzJ,IAAA,eAKAmE,MAAA,WACA,IAAAuG,EAAAtJ,KAAA3B,MACAgJ,EAAAiC,EAAAjC,OACAC,EAAAgC,EAAAhC,MACA,OAAeiC,EAAA7J,EAAK8J,cAAA,UACpBC,IAAA7C,EAAA+B,UACAtB,SACAC,QACAoC,MAAA,CACApC,QACAD,gBAKAT,EA3GA,GA4GGzH,EAAAwJ,UAA6BY,EAAA7J,EAAKiK,YAAAxK,EAAAgJ,UAAA,KAAAhJ,EAAAoI,YAAA,KAAAZ,GC5JjCiD,EAAY,WAChB,SAAAzL,EAAAC,EAAAC,GACA,QAAA5C,EAAA,EAAmBA,EAAA4C,EAAA3C,OAAkBD,IAAA,CACrC,IAAA6C,EAAAD,EAAA5C,GACA6C,EAAAC,WAAAD,EAAAC,aAAA,EACAD,EAAAE,cAAA,EACA,UAAAF,MAAAG,UAAA,GACAC,OAAAC,eAAAP,EAAAE,EAAAM,IAAAN,IAGA,gBAAAO,EAAAC,EAAAC,GAGA,OAFAD,GAAAX,EAAAU,EAAAG,UAAAF,GACAC,GAAAZ,EAAAU,EAAAE,GACAF,GAbgB,GAoDhB,IAAIgL,EAAgB5K,EAAcwH,EAASC,EAAaD,EAAM,SAAAqD,GAE9D,SAAAC,IAEA,OAvCA,SAAwBlK,EAAAhB,GACxB,KAAAgB,aAAAhB,GACA,UAAAiB,UAAA,qCAoCIkK,CAAehK,KAAA+J,GAjCnB,SAAmC7J,EAAAC,GACnC,IAAAD,EACA,UAAAE,eAAA,6DAEA,OAAAD,GAAA,kBAAAA,GAAA,oBAAAA,EAAAD,EAAAC,EA8BW8J,CAA0BjK,MAAA+J,EAAAzJ,WAAA5B,OAAA6B,eAAAwJ,IAAA5C,MAAAnH,KAAAhE,YA6BrC,OAzDA,SAAkB2G,EAAAC,GAClB,uBAAAA,GAAA,OAAAA,EACA,UAAA9C,UAAA,kEAAA8C,GAEAD,EAAA3D,UAAAN,OAAAmE,OAAAD,KAAA5D,UAAA,CACA8D,YAAA,CACAC,MAAAJ,EACApE,YAAA,EACAE,UAAA,EACAD,cAAA,KAGAoE,IAAAlE,OAAAsE,eAAAtE,OAAAsE,eAAAL,EAAAC,GAAAD,EAAArC,UAAAsC,GAaEsH,CAASH,EAiCTI,EAAA,cA5BAP,EAAYG,EAAA,EACdnL,IAAA,qBACAmE,MAAA,SAAAqH,GACA,GAAApK,KAAA3B,MAAAgM,SAAAD,EAAAC,OAAA,CACA,IAAA5G,EAAA,CACA6G,SAAAtK,KAAA6B,UACA0I,UAAAvK,KAAAQ,WACAgK,OAAAxK,KAAAuB,YACSvB,KAAA3B,MAAAgM,QACT5G,UAGG,CACH7E,IAAA,SACAmE,MAAA,WACA,IAAAI,EAAAnD,KAAA3B,MACAoM,EAAAtH,EAAAsH,SACAC,EAAAvH,EAAAuH,UACAC,EAAAxH,EAAAwH,SACA,OAAapB,EAAA7J,EAAK8J,cAAA,OAClBkB,aACSnB,EAAA7J,EAAK8J,cAAA,WAAAxJ,KAAA4K,gBAAAH,EAAAE,GAAwEpB,EAAA7J,EAAK8J,cAAA,WAA4BD,EAAA7J,EAAK8J,cAAA,SAC5HqB,UAAA,EACAC,IAAAH,UAIAZ,EAjC8D,KAkC7CtD,IAAWA,EAC5BoD,EAAakB,aAAA,CACbV,OAAA,GACAM,SAAA,GACAnC,gBAAA,mBACAC,YAAA,UACAiC,UAAA,iBACAtH,mBAAA,MACAC,SAAA,aACAtB,UAAA,aACAC,aAAA,GACAsF,MAAA,IACAD,OAAA,KAEAwC,EAAamB,UAAA,CACbX,OAAUY,EAAAvL,EAASlE,OACnBmP,SAAYM,EAAAvL,EAASlE,OACrBgN,gBAAmByC,EAAAvL,EAASlE,OAC5BiN,YAAewC,EAAAvL,EAASlE,OACxBkP,UAAaO,EAAAvL,EAASlE,OACtB4H,mBAAsB6H,EAAAvL,EAASwL,OAC/BnJ,UAAakJ,EAAAvL,EAASlE,OACtBwG,aAAgBiJ,EAAAvL,EAASyL,OACzB7D,MAAS2D,EAAAvL,EAASwL,OAClB7D,OAAU4D,EAAAvL,EAASwL,OACnB5H,UAAa2H,EAAAvL,EAASwL,OACtBjH,cAAiBgH,EAAAvL,EAAS0L,KAC1B1J,cAAiBuJ,EAAAvL,EAAS0L,KAC1B/I,aAAgB4I,EAAAvL,EAAS0L,KACzB1H,iBAAoBuH,EAAAvL,EAAS0L,MAEd,IAAAC,EAAA,ECjHAC,EAAA,kCCKf,IAAAC,EAAA7M,OAAA6M,sBACAC,EAAA9M,OAAAM,UAAAwM,eACAC,EAAA/M,OAAAM,UAAA0M,qBAgDAxQ,EAAAC,QAzCA,WACA,IACA,IAAAuD,OAAAiN,OACA,SAMA,IAAAC,EAAA,IAAAC,OAAA,OAEA,GADAD,EAAA,QACA,MAAAlN,OAAAoN,oBAAAF,GAAA,GACA,SAKA,IADA,IAAAG,EAAA,GACAtQ,EAAA,EAAmBA,EAAA,GAAQA,IAC3BsQ,EAAA,IAAAF,OAAAG,aAAAvQ,MAKA,kBAHAiD,OAAAoN,oBAAAC,GAAAE,IAAA,SAAAC,GACA,OAAAH,EAAAG,KAEAC,KAAA,IACA,SAIA,IAAAC,EAAA,GAIA,MAHA,uBAAAC,MAAA,IAAAC,QAAA,SAAAC,GACAH,EAAAG,OAEoC,yBAApC7N,OAAA8N,KAAA9N,OAAAiN,OAAA,GAAoCS,IAAAD,KAAA,IAIjC,MAAAhL,GAEH,UAGAsL,GAAA/N,OAAAiN,OAAA,SAAAvN,EAAAsO,GAIA,IAHA,IAAAC,EAEAC,EADAC,EAjDA,SAAAC,GACA,UAAAA,QAAA7Q,IAAA6Q,EACA,UAAAhN,UAAA,yDAEA,OAAApB,OAAAoO,GA6CAC,CAAA3O,GAEAnB,EAAA,EAAiBA,EAAAjB,UAAAN,OAAsBuB,IAAA,CAEvC,QAAA2B,KADA+N,EAAAjO,OAAA1C,UAAAiB,IAEAuO,EAAArL,KAAAwM,EAAA/N,KACAiO,EAAAjO,GAAA+N,EAAA/N,IAGA,GAAA2M,EAAA,CACAqB,EAAArB,EAAAoB,GACA,QAAAlR,EAAA,EAAqBA,EAAAmR,EAAAlR,OAAoBD,IACzCgQ,EAAAtL,KAAAwM,EAAAC,EAAAnR,MACAoR,EAAAD,EAAAnR,IAAAkR,EAAAC,EAAAnR,MAKA,OAAAoR,kCC7EA,SAAAG,IAEA,wBAAAC,gCAAA,oBAAAA,+BAAAD,SAaA,IAEAC,+BAAAD,YACG,MAAA7L,GAGH+L,QAAAC,MAAAhM,IAMA6L,GACA9R,EAAAC,QAAmBC,EAAQ,kCC9BZ,SAAA2E,EAAAF,EAAAhB,GACf,KAAAgB,aAAAhB,GACA,UAAAiB,UAAA,qCAFA1E,EAAAgS,EAAA9B,EAAA,sBAAAvL,kCCAA,SAAAsN,EAAAjP,EAAAC,GACA,QAAA5C,EAAA,EAAiBA,EAAA4C,EAAA3C,OAAkBD,IAAA,CACnC,IAAA6C,EAAAD,EAAA5C,GACA6C,EAAAC,WAAAD,EAAAC,aAAA,EACAD,EAAAE,cAAA,EACA,UAAAF,MAAAG,UAAA,GACAC,OAAAC,eAAAP,EAAAE,EAAAM,IAAAN,IAIe,SAAAJ,EAAAW,EAAAC,EAAAC,GAGf,OAFAD,GAAAuO,EAAAxO,EAAAG,UAAAF,GACAC,GAAAsO,EAAAxO,EAAAE,GACAF,EAbAzD,EAAAgS,EAAA9B,EAAA,sBAAApN,mBCEA,IAg4UAoP,EAh4UA,WACA,SAAAC,IACA,SAAAC,EAAAC,GACA,WAAAC,UAAAD,GAEA,SAAAE,EAAAF,GACA,WAAAG,WAAAH,GAEA,SAAAI,EAAAJ,GACA,WAAAK,WAAAL,GAEA,SAAAM,EAAAN,GACA,WAAA5P,aAAA4P,GAEA,SAAAO,EAAAP,GACA,WAAAQ,aAAAR,GAEA,SAAAS,EAAAlH,GACA,MAAAA,EAAAtL,OACA,OAAAqS,EAAA/G,EAAA,IAEA,IAAAmH,EAAAnH,EAAA,GACAA,IAAAoH,MAAA,GAEA,IADA,IAAAC,EAAA,GACA5S,EAAA,EAAqBA,EAAA0S,EAAQ1S,IAC7B4S,EAAAzK,KAAAsK,EAAAlH,IAEA,OAAAqH,EAEA,SAAAC,EAAAtH,GACA,MAAAA,EAAAtL,OACA,OAAAmS,EAAA7G,EAAA,IAEA,IAAAmH,EAAAnH,EAAA,GACAA,IAAAoH,MAAA,GAEA,IADA,IAAAC,EAAA,GACA5S,EAAA,EAAqBA,EAAA0S,EAAQ1S,IAC7B4S,EAAAzK,KAAA0K,EAAAtH,IAEA,OAAAqH,EAEA,SAAAE,EAAAvH,GACA,MAAAA,EAAAtL,OACA,OAAAiS,EAAA3G,EAAA,IAEA,IAAAmH,EAAAnH,EAAA,GACAA,IAAAoH,MAAA,GAEA,IADA,IAAAC,EAAA,GACA5S,EAAA,EAAqBA,EAAA0S,EAAQ1S,IAC7B4S,EAAAzK,KAAA2K,EAAAvH,IAEA,OAAAqH,EAEA,SAAAG,EAAAxH,GACA,MAAAA,EAAAtL,OACA,WAAAuL,MAAAD,EAAA,IAEA,IAAAmH,EAAAnH,EAAA,GACAA,IAAAoH,MAAA,GAEA,IADA,IAAAC,EAAA,GACA5S,EAAA,EAAqBA,EAAA0S,EAAQ1S,IAC7B4S,EAAAzK,KAAA4K,EAAAxH,IAEA,OAAAqH,EAEA,IAAAI,EAAA,CACAC,KAAA,SAAAhP,EAAAiP,EAAAC,EAAA9B,GACA,MAAA9Q,UAAAN,OACA,QAAAD,EAAA,EAAuBA,EAAAiE,EAAAhE,OAAcD,IACrCiE,EAAAjE,GAAAO,UAAA,QAGA,IAAAP,EAAAkT,EAA+BlT,EAAAmT,EAAanT,IAC5CiE,EAAAjE,GAAAqR,IAIA+B,EAAA,CACAC,UAAA,SAAAhE,EAAAiE,EAAAC,EAAAC,EAAAvT,GAEA,IADA,IAAAwT,EAAAH,EAAArT,EACAqT,EAAAG,GACAF,EAAAC,KAAAnE,EAAAiE,OAGAI,EAAA,GAQA,SAAAC,EAAAC,GACArP,KAAAqP,UARAF,EAAAG,MAAA,mBACAH,EAAAI,WAAA,SAAAtH,GACA,OAAA/K,KAAAsS,MAAAvH,IAEAkH,EAAAM,aAAA,SAAAxH,EAAAC,GACA,OAAAhL,KAAAsS,MAAAvH,GAAAC,GAOAkH,EAAAM,oBAAA,IAAAN,EAAA,GAGAA,EAAAO,oBAAA,IAAAP,EAAA,GAGAA,EAAAQ,sBAAA,IAAAR,EAAA,GAGAA,EAAAS,mBAAA,IAAAT,EAAA,GACA,IAAAU,EAAA,GAEA,SAAAC,EAAAV,GACArP,KAAAqP,UA6BA,SAAAW,EAAAX,GACA,IAAAY,EAAAZ,EACArP,KAAAqP,QAAA,WACA,OAAAY,GAQA,SAAAC,IAwBAlQ,KAAAmQ,eAAA,WAEA,MAAAC,UAMApQ,KAAAqQ,oBAAA,WAGA,MAAAD,UAMApQ,KAAAsQ,wBAAA,WAEA,mBAMAtQ,KAAAuQ,cAAA,WACA,MAAAC,QAMAxQ,KAAAyQ,WAAA,WACA,MArDA,0BA2DAzQ,KAAA0Q,iBAAA,WACA,gBAwBA,SAAAC,IACA,IAAAC,EAAA,KAMA,SAAAC,EAAAC,GACA9Q,KAAA+Q,KAAA,EAAAD,EANA9Q,KAAA4Q,MAAA,KACA5Q,KAAAgR,WAAA,SAAAC,GACAjR,KAAA4Q,MAAAK,EACAL,EAAAK,GAKA,IAAAC,EAAA,4IAaA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAA,MAAAL,EAEA,IADAD,IAAA,EACA,GAAAA,KACAI,EAAAC,KAAAC,EAAAJ,EAAAC,KAAA,IACAC,EAAAC,KAAAC,EAAAJ,EAAAC,KAAA,IAcA,SAAAI,EAAAP,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,IAAAG,GADAR,IAAA,GACA,EAEA,IADAA,IAAA,EACA,GAAAA,KAAA,CACA,IAAAS,EAAAC,EAAAC,EAAAC,EACAC,EAAAC,EAAAC,EAAAC,EACAP,EAAAP,EAAAC,KAAAF,EACAS,EAAAR,EAAAC,KAAAF,EACAY,EAAA,EAAAJ,EACAE,EAAAT,EAAAC,KAAAF,EACAa,EAAA,EAAAJ,EACAE,EAAAV,EAAAC,KAAAF,EACAc,EAAA,EAAAJ,EACAF,GAAAjB,EAAAyB,MAAAJ,GACAG,EAAA,EAAAJ,EACAF,GAAAlB,EAAAyB,MAAAH,GACAV,EAAAC,KAAA,EAAAI,EACAE,GAAAnB,EAAAyB,MAAAF,GACAX,EAAAC,KAAA,EAAAK,EACAE,GAAApB,EAAAyB,MAAAD,GACAZ,EAAAC,KAAA,EAAAM,EACAP,EAAAC,KAAA,EAAAO,EAEA,GAAAJ,IAKAK,EAAA,GAFAJ,EAAAP,EAAAC,KAAAF,GAGAa,EAAA,GAFAJ,EAAAR,EAAAC,KAAAF,GAGAQ,GAAAjB,EAAAyB,MAAAJ,GACAH,GAAAlB,EAAAyB,MAAAH,GACAV,EAAAC,KAAA,EAAAI,EACAL,EAAAC,KAAA,EAAAK,GA0NA,IAAAQ,EAAA,0CAQA,SAAAC,EAAAf,EAAAC,EAAAe,EAAAvV,GACA,IAAAE,EA/GA,SAAAqU,EAAAC,EAAAe,GACA,IAAAC,EAAA,EACAC,EAAA,EACA,GACA,IAAAZ,EAAAN,EAAAC,KACAM,EAAAP,EAAAC,KACAgB,EAAAX,IAAAW,EAAAX,GACAY,EAAAX,IAAAW,EAAAX,SACSN,EAAAe,GAET,OADAC,EAAAC,IAAAD,EAAAC,GACAD,EAqGAE,CAAAnB,EAAAC,EAAAe,GACA,OAAArV,GACA,OACA,OAAAA,EACA,OACA,OAxEA,SAAAqU,EAAAC,EAAAmB,EAAA3V,GACA,IAAA4V,EAAA,EACAC,EAAAC,EAAAC,GAAA,GAAAC,KACA,GACA,IAAAhL,EAAA,EAAAuJ,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GACAA,GAAA,EACAoB,GAAAC,EAAA7K,SACSwJ,EAAAmB,GAET,OADA3V,EAAA8T,MAAA8B,EACA,EA+DAK,CAAA1B,EAAAC,EAAAe,EAAAvV,GACA,OACA,OACA,OAhEA,SAAAuU,EAAAC,EAAAmB,EAAAO,EAAAlW,GACA,IACAmW,EAEAH,EAHAI,EAAA,EAEAC,EAAAP,EAAAC,GAAAG,GAAAG,KAEAL,EAAA,GAAAE,EAAAJ,EAAAQ,QAA2CR,EAAAS,QAC3C,GACA,IAAAvL,EAAAuJ,EAAAC,EAAA,GAAA6B,EAAA9B,EAAAC,EAAA,GACAA,GAAA,EACA4B,GAAAJ,EAAAhL,SACSwJ,EAAAmB,GAQT,OAPAQ,EAAA,MAAAC,GACAA,IAAA,IACAD,IACAC,EAAAD,EACAD,KAEAlW,EAAA8T,MAAAsC,EACAF,EA8CAM,CAAAjC,EAAAC,EAAAe,EAAAF,EAAAnV,EAAA,GAAAF,GACA,OACA,OACA,OACA,OACA,OACA,OACA,QACA,QACA,QACA,QACA,QACA,QACA,OAzDA,SAAAuU,EAAAC,EAAAmB,EAAAO,EAAAlW,GACA,IAAA4V,EAAA,EACAO,EAAA,EACAM,EAAA,EACAJ,EAAAP,EAAAC,GAAAG,GAAAG,KACAR,EAAAC,EAAAC,GAAAG,GAAAF,KACAU,EAAAZ,EAAAC,GAAAG,EAAA,GAAAF,KACAW,EAAAb,EAAAC,GAAAG,EAAA,GAAAF,KACA,GACA,IAAAhL,EAAAuJ,EAAAC,EAAA,GAAA6B,EAAA9B,EAAAC,EAAA,GACAA,GAAA,EACAoB,GAAAC,EAAA7K,GACAmL,GAAAO,EAAA1L,GACAyL,GAAAE,EAAA3L,SACSwJ,EAAAmB,GACT,IAAAiB,EAAAV,EAUA,OATAN,EAAAO,IACAP,EAAAO,EACAS,KAEAhB,EAAAa,IACAb,EAAAa,EACAG,EAAAV,EAAA,GAEAlW,EAAA8T,MAAA8B,EACAgB,EAgCAC,CAAAtC,EAAAC,EAAAe,EAAAF,EAAAnV,EAAA,GAAAF,GACA,QACA,GAAAE,EAAA4W,EAAAC,UAEA,OADA/W,EAAA8T,KAAAgD,EAAAE,YACA,EAGA,IAAAC,EAMAC,EALA,IAFAhX,GAAA,GAEA+W,EAAA,GAA8BA,EAAA,MAC9BnB,EAAAC,GAAAkB,GAAAE,QAAAjX,GAD4C+W,KAM5C,IAAAC,EAAAD,EAAA,EAAsCC,EAAA,MACtCpB,EAAAC,GAAAmB,GAAAC,QAAAjX,GADmDgX,KAKnD,OA3IA,SAAA3C,EAAAC,EAAAmB,EAAAO,EAAAkB,EAAApX,GACA,IAEAmW,EAFAkB,EAAA,MAAAvB,EAAAC,GAAAG,GAAAG,KAAAP,EAAAC,GAAAqB,GAAAf,KACAD,EAAA,EAEA,GACA,IAAApL,EAAAuJ,EAAAC,KACAvJ,EAAAsJ,EAAAC,KACA,GAAAxJ,IACAA,EAAA,KACAA,EAAA,GACAoL,GAAAiB,GAEArM,GAAA,IAEA,GAAAC,IACAA,EAAA,KACAA,EAAA,GACAmL,GAAAiB,GAEArM,GAAAC,GAEAmL,GAAAN,EAAAwB,SAAAtM,SACSwJ,EAAAmB,GAQT,OAPAQ,EAAA,MAAAC,GACAA,IAAA,IACAD,IACAC,EAAAD,EACAD,EAAAkB,GAEApX,EAAA8T,MAAAsC,EACAF,EA6GAqB,CAAAhD,EAAAC,EAAAe,EAAA2B,EAAAD,EAAAjX,IA2IA,SAAAwX,EAAAC,EAAAC,EAAAC,EAAApD,EAAAqD,EAAAC,EAAAC,EAAAC,GAEA,IADA,IAAAC,EAAAN,EAAAO,WACAC,EAAA,EAAwBA,EAAAC,EAAAC,QAAA,EAA0BF,IAAA,CAClD,IAAAG,EAAAZ,EAAAa,cAAAnE,EAAA+D,GACA,GAAAG,GAAAL,EAAA,MACA,IAAAlE,EAAA8D,EAAAM,EAAA,GAAAR,EAAAa,WACA,GAAAZ,EAAAa,gBAAA1E,EAAA,MACA,IAAA2E,EAAA,IAAA7E,EAAAE,GACA4E,EAAApD,EAAAf,EAAA8D,EAAAL,EAAAS,GACA3E,EAAA2E,EAAA3E,KACA6D,EAAAa,gBAAA1E,IACA6D,EAAAjJ,OAAAgJ,GACAC,EAAAa,eAAA1E,EACA6D,EAAAgB,cAAAd,EAAAK,EAAA,GACAP,EAAAiB,cAAAV,EAAA,EAAAL,EAAAK,EAAA,GACAP,EAAAkB,aAAA,GAAAf,EAAAI,EAAA,GACAP,EAAAkB,aAAA,GAAAd,EAAAG,EAAA,GACAP,EAAAkB,aAAA,GAAAH,IAvJA3V,KAAA+V,mBAAA,SAAArB,EAAAE,EAAAoB,GACA,IAAAxE,EAAAoD,EAAAqB,OACAxa,EAAAyB,KAAAE,IAAA,IAAAwX,EAAAsB,kBAAA,SAEA,IADA,MAAAF,MAAAG,WAAA,GACc1a,EAAA,GACd,IAAA+V,EAAA/V,EAAA,GAAA+V,EAAA/V,EAAA,IADqBA,GAAA,GAGrBmZ,EAAAwB,OAAA3a,EAGA,IAFA,IAAA4a,EAAA,EACAf,EAAA,EACc7Z,EAAA,EAAOA,GAAA,GACrB,IAAA6a,EAEA,gBAAA9E,EAAA/V,EAAA,GAAA+V,EAAA/V,EAAA,GAAA+V,EAAA/V,EAAA,GAAA+V,EAAA/V,EAAA,OACA,MAEA6a,EAAA,QAAA9E,EAAA/V,EAAA,GAAA+V,EAAA/V,EAAA,IAAA+V,EAAA/V,EAAA,IAAA+V,EAAA/V,EAAA,GACA4a,GAAAtD,EAAAwD,KAAAD,GACAhB,GAAAvC,EAAAyD,KAAAF,GAEA,IAAAvF,EAAAsF,EAQA,GAPAzB,EAAA6B,mBAAA,EACAJ,EAAAf,IACAvE,EAAAuE,EACAV,EAAA6B,mBAAA,GAEA7B,EAAAY,WAAAzE,EACA6D,EAAAM,WAAAzZ,EACA,GAAAA,EAAA,OAAAsV,EACA,GAAA6D,EAAA8B,YAAAtB,EAAAuB,YACAN,EAAA,EAAA3B,EAAAa,cAAAtY,EAAA,IACA2X,EAAAM,aAAAmB,EAAAzB,EAAAM,YACAI,EAAAV,EAAAM,gBACS,GAAAN,EAAA8B,YAAAtB,EAAAwB,WAKT,GAJAP,EAAAzB,EAAAgB,cAAAlB,EAAAmC,OAAApb,EAAA,GACA6Z,EAAAV,EAAAiB,cAAAnB,EAAAmC,OAAApb,EAAA,GACA6Z,EAAAZ,EAAAa,cAAAnE,EAAAiF,EAAAf,EAAA,GACAe,EAAA3B,EAAAa,cAAAnE,EAAAiF,EAAA,GACAf,EAAA7Z,EAAA,CACA,IAAAia,EAAA,IAAA7E,EAAAE,GACA6D,EAAAkB,aAAA,GAAAvD,EAAAf,EAAA8D,EAAA7Z,EAAAia,GACA3E,EAAA2E,EAAA3E,WAGA6D,EAAAgB,cAAA,EACAhB,EAAAiB,cAAAT,EAAAC,QAAA,OACAgB,EAAA3B,EAAAa,cAAAnE,EAAA,KACAkE,EAAA7Z,KAEA4a,EAAAf,GAoBA,GAjBAe,EAAAnZ,KAAAE,IAAAiZ,EAAA5a,GACA6Z,EAAApY,KAAAE,IAAAkY,EAAA7Z,GACA,EAAA4a,IACAX,EAAA,IAAA7E,EAAAE,GACA6D,EAAAkB,aAAA,GAAAvD,EAAAf,EAAA,EAAA6E,EAAAX,GACA3E,EAAA2E,EAAA3E,MAEAsF,EAAAf,IACAI,EAAA,IAAA7E,EAAAE,GACA6D,EAAAkB,aAAA,GAAAvD,EAAAf,EAAA6E,EAAAf,EAAAI,GACA3E,EAAA2E,EAAA3E,MAEA,GAAA2D,EAAAoC,mBACAlC,EAAAa,eAAA1E,EACAgG,oBAAArC,EAAAE,GACA7D,EAAA6D,EAAAa,gBAEA,MAAAO,GACApB,EAAA8B,YAAAtB,EAAAwB,UAAA,CAEA,IADA,IAAAI,EAAA,EACAtC,EAAAa,cAAAnE,EAAA4F,GAAApC,EAAAM,YACA8B,IAEAhB,EAAAG,WAAAa,EAGA,OAAAjG,GAEA/Q,KAAAiX,WAAA,SAAAvC,EAAApD,EAAAsD,EAAAoB,GACA,IAAAxE,EAAAoD,EAAAqB,OACAiB,EAAAnD,EAAAC,UAAApD,EAAAuG,OAAAvC,EAAAwC,aACA,GAAAxC,EAAAyC,UAAAH,EAAA,OAAAnD,EAAAE,WAEA,GA/VA,SAAAqD,EAAAC,EAAAlG,EAAAmG,EAAAC,GACA,IAAAT,EACAU,EAEAC,EADAC,EAAA,EAEAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAAT,EACAU,EAAA,EACAC,EAAAF,EACAG,EAAA,EACAC,EAAAd,EACAe,EAAA,EAQA,IAFAV,EAAA,MAAAF,GAAAD,EAAAJ,aAAAK,EAAAL,YACAM,EAAAF,EAAAd,YAAAtB,EAAAuB,WAAA,GAAkE,GAClEK,EAAA,EAAqBA,GAAAU,EAAeV,IAAA,CACpC,IAAAsB,GAAA,EAIA,IAHAX,GAAAH,EAAAd,YAAAtB,EAAAwB,aACA0B,EAAAd,EAAAJ,aAAAI,EAAAe,SAAAvB,IAAA,GAAAQ,EAAAgB,QAAA5H,EAAA6H,OAAAzB,GAAA,IAAAQ,EAAAkB,eAAA,KAAAlB,EAAAmB,cAAAnB,EAAApR,OAAA4Q,KAEAW,GAAAF,EAAAa,KAAAtB,IAAAsB,EAIA,GAAAT,IACAlG,EAAAkG,EAAAxG,EAAA+G,EAAAC,EAAAH,EAAAC,GACAN,EAAA,GAEA,GAAAC,IACA3G,EAAA2G,EAAAzG,EAAA+G,EAAAC,EAAAH,EAAAC,GACAL,EAAA,OAEW,CACX,IAEAc,EAFAxH,EAAAoG,EAAAlQ,MAAA0P,GAsCA,GArCAY,EAAAJ,EAAAlQ,MAAA0P,GAAAQ,EAAAtB,oBAEA0C,EAAApB,EAAAtB,kBAAA0B,EAAA,EACAnJ,EAAAC,KAAA6I,EAAAC,EAAAtB,kBAAA,QACA9E,EAAAwH,GACA,IACAxH,EAAA,GAEA4F,EAAAU,EAAA,GAEA,GAAAG,GAAA,GAAAC,IACAI,EAAAF,EACAG,EAAAF,EACAG,EAAAd,EACAe,EAAAN,GAEA,MAAAN,KAAAtB,WAAA,GAAAa,GAAAS,EAAAtB,YAAAsB,EAAAa,KAAAtB,GAAA,GAAAsB,GAAAb,EAAAa,KAAAtB,IACA,GAAAa,IACAlG,EAAAkG,EAAAxG,EAAA+G,EAAAC,EAAAH,EAAAC,GACAN,EAAA,EACAK,EAAAF,EACAG,EAAAF,EACAG,EAAAd,EACAe,EAAAN,GAEAD,GAAA1G,IAEA,GAAA0G,IACA3G,EAAA2G,EAAAzG,EAAA+G,EAAAC,EAAAH,EAAAC,GACAL,EAAA,EACAI,EAAAF,EACAG,EAAAF,EACAG,EAAAd,EACAe,EAAAN,GAEAF,GAAAzG,GAEAA,GAAA,GAKA,GAAA0G,IACA3G,EAAA2G,EAAAzG,EAAA+G,EAAAC,EAAAH,EAAAC,GACAL,EAAA,GAEA,GAAAD,IACAlG,EAAAkG,EAAAxG,EAAA+G,EAAAC,EAAAH,EAAAC,GACAN,EAAA,GAEA,OAGAb,GAAAU,IACAO,GAAAT,EAAAlQ,MAAA0P,GACAe,GAAAP,EAAAlQ,MAAA0P,GACAY,GAAAJ,EAAAlQ,MAAA0P,IAGA,GAAAa,IACAlG,EAAAkG,EAAAxG,EAAA+G,EAAAC,EAAAH,EAAAC,GACAN,EAAA,GAEA,GAAAC,IACA3G,EAAA2G,EAAAzG,EAAA+G,EAAAC,EAAAH,EAAAC,GACAL,EAAA,GAqPAe,CAAAvH,EAAAE,EAAAZ,EAAAuG,OAAAvC,EAAAwC,aAAAxC,EAAAoB,GACA,MAAAtB,EAAAoE,iBAIA,IAHA,IAAAlB,EAAA,EACAmB,EAAAnE,EAAAwC,YAAAxC,EAAA8D,eACAM,EAAA,iBAAApI,EAAAuG,OAAA4B,GACA/B,EAAA,EAA2BA,EAAApC,EAAA8C,OAAiBV,IAAA,CAC5C,IAIAiC,EAJA3R,EAAAsN,EAAAtN,MAAA0P,GACA,MAAAtC,EAAAwE,WAAAlC,GACAY,GAAAtQ,OAGA,IAAA2R,EAAArB,KAAAtQ,EAAqC2R,EAAArB,IAAOqB,EAC5CzH,EAAAyH,GAAA3H,EAAA2H,IAAAD,EAAAxH,EAAAyH,GAAA,EAKA,OAAAjZ,KAAA+V,mBAAArB,EAAAE,EAAAoB,IAqDAhW,KAAA+W,oBAAA,SAAArC,EAAAE,GACA,IAAAD,EAAA,IAAAwE,EACA3H,EAAAoD,EAAAqB,OACApB,EAAAhH,EAAA,IACAiH,EAAAjH,EAAA,IACAkH,EAAAlH,EAAA,IACAmH,EAAAnH,EAAA,IACA,GAAA+G,EAAA8B,YAAAtB,EAAAuB,YAAA,GAAAjC,EAAA0E,QAAA,CACAzE,EAAAhJ,OAAAiJ,GACAA,EAAA8B,YAAAtB,EAAAwB,YAzDA,SAAAlC,EAAA2E,EAAA7H,EAAAqD,EAAAC,EAAAC,EAAAC,GAEA,IADA,IAAAC,EAAAoE,EAAAnE,WACAoE,EAAA,EAAwBA,GAAA,GAAcA,IACtCzE,EAAAyE,GAAAvF,EAAAE,WAEA,IAAAqF,EAAA,EAAwBA,EAAA,GAASA,IAAA,CACjC,IAAAjD,EAAA3B,EAAAa,cAAAnE,EAAAkI,EAAA,GACA,GAAAjD,GAAApB,EAAA,MACA,IAAAsE,EAAA,EACA7D,EAAA,IAAA7E,EAAA0I,GACAC,EAAAjH,EAAAf,EAAA,EAAA6E,EAAAX,GACA6D,EAAA7D,EAAA3E,KACA,QAAA0I,EAAA,EAA0BA,EAAA,EAAQA,IAAA,CAClC,IAAAnE,EAAAZ,EAAAa,cAAAnE,EAAAkI,EAAAG,EAAA,GACA,GAAAnE,GAAAL,EAAA,MACA,IAAAlE,EAAAwI,EAEAG,EAAAnH,EAAAf,EAAA6E,EAAAf,EADAI,EAAA,IAAA7E,EAAAE,IAEAA,EAAA2E,EAAA3E,KACA8D,EAAAyE,EAAAG,GAAA1I,IACA8D,EAAAyE,EAAAG,GAAA1I,EACA+D,EAAAwE,EAAAG,GAAAH,EACAvE,EAAAuE,EAAAG,GAAAD,EACAxE,EAAAsE,EAAAG,GAAAC,KAmCAC,CAAAjF,EAAAE,EAAApD,EAAAqD,EAAAC,EAAAC,EAAAC,GACAP,EAAAC,EAAAC,EAAAC,EAAApD,EAAAqD,EAAAC,EAAAC,EAAAC,IAEA,IAAAvZ,EAAAkZ,EAAAO,WACA,QAAAzZ,IAAA+V,EAAA/V,EAAA,GAAA+V,EAAA/V,EAAA,WACAA,EAAAmZ,EAAAwB,OAAA,GACA,MACAzB,EAAAhJ,OAAAiJ,GACAD,EAAAyB,OAAA3a,EAGA,IAFA,IAAA4a,EAAA,EACAf,EAAA,EACc7Z,EAAAkZ,EAAAO,WAA0BzZ,GAAA,GACxC,IAAA6a,EAAA,QAAA9E,EAAA/V,EAAA,GAAA+V,EAAA/V,EAAA,IAAA+V,EAAA/V,EAAA,IAAA+V,EAAA/V,EAAA,GACA4a,GAAAtD,EAAAwD,KAAAD,GACAhB,GAAAvC,EAAAyD,KAAAF,GASA,GAPA3B,EAAAO,WAAAzZ,EACAkZ,EAAA8B,mBAAA,EACAJ,EAAAf,IACAe,EAAAf,EACAX,EAAA8B,mBAAA,GAEA9B,EAAAa,WAAAa,EACA1B,EAAA+B,YAAAtB,EAAAwB,UAAAnC,EAAAC,EAAAC,EAAAC,EAAApD,EAAAqD,EAAAC,EAAAC,EAAAC,OAAoI,CAMpI,GALAL,EAAAc,eAAAY,GACAA,EAAA3B,EAAAa,cAAAnE,EAAA,IACA3V,IACA4a,EAAA5a,GAEA4a,EAAA,GACA,IAAAX,EAAA,IAAA7E,EAAA8D,EAAAc,gBACAd,EAAAmB,aAAA,GAAAvD,EAAAf,EAAA,EAAA6E,EAAAX,GACAf,EAAAc,eAAAC,EAAA3E,KAEAtV,EAAA4a,IACAX,EAAA,IAAA7E,EAAA8D,EAAAc,gBACAd,EAAAmB,aAAA,GAAAvD,EAAAf,EAAA6E,EAAA5a,EAAAia,GACAf,EAAAc,eAAAC,EAAA3E,MAEA6D,EAAAa,eAAAd,EAAAc,gBAAAb,EAAAjJ,OAAAgJ,OAGA,IAAAiF,EAAA,oCACAC,EAAA,kCACAC,EAAA,kCACAC,EAAA,kCACApJ,EAAAmJ,YACAnJ,EAAAoJ,YA4CA/Z,KAAAga,oBAAA,SAAAtF,EAAAuF,EAAAC,EAAAC,GACA,IACAnD,EAAAvb,EAAAmc,EAAAxG,EADAwD,EAAAuF,EAAAC,GAAAH,GAAAC,GAEAG,EAAA,EAKA,IADAzC,EAAA,EACAZ,EAAA,EAAqBA,EAAApC,EAAA8C,OAAiBV,IAAA,CACtC,IAAA1P,EAAAsN,EAAAtN,MAAA0P,GAEA,IADAY,GAAAtQ,EACA8J,GAAA9J,EAA0B8J,EAAA,GAC1B,GAAAwD,EAAAqB,OAAA7E,EAAAwG,GADiCxG,KAGjC,GAAAA,IAAAwD,EAAA2D,SAAAvB,GAAAqD,GAAA,GAKA,MAAAzF,EAAA8D,gBAAA,GAAA9D,EAAA4D,QAAA,CACA,IAAAvb,EAAA,EACA,IAAA+Z,EAAA,EAAuBA,EAAApC,EAAA8C,OAAiBV,IACxCpC,EAAA2D,SAAAvB,GAAA,IAAA/Z,GAAA2X,EAAA2D,SAAAvB,IAEA,SAAA/Z,IAAA,GAAAA,EAAA,CACA,IAAA+Z,EAAA,EAAyBA,EAAApC,EAAA8C,OAAiBV,IAC1CpC,EAAA2D,SAAAvB,GAAA,IAAApC,EAAA2D,SAAAvB,KAAA,GAEApC,EAAA8D,eAAA2B,EAAA,GAGA,MAAAzF,EAAA4D,SAAA5D,EAAA8B,YAAAtB,EAAAuB,YAAA,GAAAjC,EAAA0E,QAAA,CACA,IAAApC,EAAA,GAAwBA,EAAA5B,EAAAkF,WACxB1F,EAAA2D,SAAAvB,GAAApG,EAAA6H,OAAAzB,KAAA,GAAApC,EAAA2D,SAAAvB,IAD+CA,KAG/C,GAAAA,GAAA5B,EAAAkF,QAAA,CACA,IAAAtD,EAAA,GAA0BA,EAAA5B,EAAAkF,QAAuBtD,IACjDpC,EAAA2D,SAAAvB,GAAA,IAAApC,EAAA2D,SAAAvB,IAAApG,EAAA6H,OAAAzB,IAEApC,EAAA4D,QAAA6B,EAAA,GAGA,IAAA5e,EAAA,EAAmBA,EAAA,EAAOA,IAC1B0e,EAAAI,MAAAL,GAAAze,GAAA,EAMA,IAJA,GAAAiZ,EAAA0E,SAAA,GAAAa,GAAAE,EAAAC,GAAA,GAAAF,GAAAxD,YAAAtB,EAAAuB,YAAAwD,EAAAC,GAAA,GAAAF,GAAAxD,YAAAtB,EAAAuB,aAxFA,SAAAuD,EAAAC,GAIA,IAHA,IAAAnD,EACApC,EAAAuF,EAAAC,GAAA,GAAAF,GACAM,EAAAL,EAAAC,GAAA,GAAAF,GACAze,EAAA,EAAuBA,EAAAsX,EAAA0H,WAAA/e,OAAA,EAAkCD,IAAA,CACzD,IAAAub,EAAAjE,EAAA0H,WAAAhf,GAA0Cub,EAAAjE,EAAA0H,WAAAhf,EAAA,MAC1C+e,EAAAjC,SAAAvB,IAAApC,EAAA2D,SAAAvB,IAAApC,EAAA2D,SAAAvB,IAAA,GAD0EA,KAG1E,GAAAA,GAAAjE,EAAA0H,WAAAhf,EAAA,IACA,IAAAub,EAAAjE,EAAA0H,WAAAhf,GAA4Cub,EAAAjE,EAAA0H,WAAAhf,EAAA,GAAgCub,IAC5EpC,EAAA2D,SAAAvB,IAAA,EAEAmD,EAAAI,MAAAL,GAAAze,GAAA,GAGA,IAAAif,EAAA,EACAC,EAAA,EACA,IAAA3D,EAAA,EAAqBA,EAAA,GAAUA,KAC/B,GAAApC,EAAA2D,SAAAvB,KACA2D,IACAD,EAAA9F,EAAA2D,SAAAvB,KAAA0D,EAAA9F,EAAA2D,SAAAvB,KAIA,IAFA,IAAA4D,EAAA,EACAC,EAAA,EACc7D,EAAA5B,EAAAkF,QAAuBtD,KACrC,GAAApC,EAAA2D,SAAAvB,KACA6D,IACAD,EAAAhG,EAAA2D,SAAAvB,KAAA4D,EAAAhG,EAAA2D,SAAAvB,KAEA,IAAAvb,EAAA,EAAuBA,EAAA,GAAQA,IAC/B,GAAAif,EAAAd,EAAAne,IAAAmf,EAAAf,EAAApe,GAAA,CACA,IAAAqf,EAAAhB,EAAAre,GAAAkf,EAAAZ,EAAAte,GAAAof,EACAjG,EAAAmG,aAAAD,IACAlG,EAAAmG,aAAAD,EACAlG,EAAAoG,kBAAAvf,IAuDAwf,CAAAf,EAAAC,GACAE,EAAA,GAEArD,EAAA,EAAqBA,EAAApC,EAAA8C,OAAiBV,KACtC,GAAApC,EAAA2D,SAAAvB,KACApC,EAAA2D,SAAAvB,GAAA,GAGA,GAAAqD,IACA,GAAA3F,EAAA0E,QACApZ,KAAAkb,eAAAtG,GAEA5U,KAAAmb,mBAAAzG,EAAAE,KAcA,IAAAwG,EAAA,oDAKAC,EAAA,oDAKAC,EAAA,iDAGAtb,KAAAkb,eAAA,SAAA7B,GACA,IAAAJ,EACAjC,EAGAuE,EAFAC,EAAA,EACAC,EAAA,EAEAlD,EAAAc,EAAAd,SACA,GAAAc,EAAA3C,YAAAtB,EAAAuB,WACA4E,EAAAH,EACA,GAAA/B,EAAAqC,mBAAAH,EAAAF,QAGA,GADAE,EAAAD,EACA,GAAAjC,EAAAb,QAAA,CACA,IAAAxB,EAAA,GAA0BA,EAAA5B,EAAAkF,WAC1B/B,EAAAvB,GAAApG,EAAA6H,OAAAzB,IADiDA,KAGjD,GAAAA,GAAA5B,EAAAkF,QAEA,IADAjB,EAAAb,QAAA,EACAxB,EAAA,GAA4BA,EAAA5B,EAAAkF,QAAuBtD,IACnDuB,EAAAvB,IAAApG,EAAA6H,OAAAzB,GAKA,IAAAA,EAAA,EAAqBA,EAAAqC,EAAAsC,UAA0B3E,IAC/CwE,EAAAjD,EAAAvB,KAAAwE,EAAAjD,EAAAvB,IAEA,KAAcA,EAAAqC,EAAA3B,OAAuBV,IACrCyE,EAAAlD,EAAAvB,KAAAyE,EAAAlD,EAAAvB,IAOA,IADAqC,EAAA0B,aAAAhH,EAAAE,WACAgF,EAAA,EAAmBA,EAAA,GAAQA,IAC3BuC,EAAA5B,EAAAX,IAAAwC,EAAA5B,EAAAZ,IAAAI,EAAA0B,aAAAQ,EAAAtC,KACAI,EAAA0B,aAAAQ,EAAAtC,GACAI,EAAA2B,kBAAA/B,GAGA,OAAAI,EAAA0B,cAAAhH,EAAAE,YAIA,IAAA2H,EAAA,qEAOA5b,KAAAmb,mBAAA,SAAAzG,EAAA2E,GACA,IAAAwC,EAAAC,EAAAC,EAAAC,EAAA5V,EACA6V,EACAxgB,EAAAub,EACAkF,EAAArO,EAAA,GACA0K,EAAAc,EAAAd,SAKA,IADAsD,EAAA,GAAAxC,EAAAb,QAAA,EAAoD,EACpD/c,EAAA,EAAmBA,EAAA,EAAOA,IAC1BygB,EAAAzgB,GAAA,EAEA,GAAA4d,EAAA3C,YAAAtB,EAAAuB,WAAA,CACAmF,EAAA,EACA,IAAAK,EAAAvL,EAAAwL,gBAAAP,GAAAC,GACA,IAAA9E,EAAA,EAAA+E,EAAA,EAAsCA,EAAA,EAAeA,IAErD,IADAC,EAAAG,EAAAJ,GAAA,EACAtgB,EAAA,EAAuBA,EAAAugB,EAAYvgB,IAAAub,IACnC,IAAA5Q,EAAA,EAA8BA,EAAA,EAAYA,IAC1CmS,EAAA,EAAAvB,EAAA5Q,GAAA8V,EAAAH,KAAAG,EAAAH,GAAAxD,EAAA,EAAAvB,EAAA5Q,SAOA,IAFA0V,EAAA,EACAK,EAAAvL,EAAAwL,gBAAAP,GAAAC,GACA9E,EAAA,EAAA+E,EAAA,EAAsCA,EAAA,EAAeA,IAErD,IADAC,EAAAG,EAAAJ,GACAtgB,EAAA,EAAuBA,EAAAugB,EAAYvgB,IAAAub,IACnCuB,EAAAvB,GAAAkF,EAAAH,KAAAG,EAAAH,GAAAxD,EAAAvB,IAIA,IAAAiF,GAAA,EAAAF,EAAA,EAAyCA,EAAA,EAAeA,IACxDG,EAAAH,GAAAH,EAAAC,GAAAE,KAAAE,GAAA,GAEA,IAAAA,EAAA,CACA,IAAAI,EAAAC,EAAAC,EAAAC,EAEA,IADAnD,EAAAoD,oBAAA7L,EAAAwL,gBAAAP,GAAAC,GACAC,EAAA,EAA6BA,EAAA,EAAeA,IAC5C1C,EAAAqD,KAAAX,GAAAY,EAAAT,EAAAH,IAMA,OAJAM,EAAAhD,EAAAqD,KAAA,GACAJ,EAAAjD,EAAAqD,KAAA,GACAH,EAAAlD,EAAAqD,KAAA,GACAF,EAAAnD,EAAAqD,KAAA,GACAb,GACA,OACAxC,EAAA2B,mBAAA,EAAAqB,EAAAC,GAAA,IAAAC,GAAA,GAAAC,EACA,MACA,OACAnD,EAAA2B,kBAAA,OAAAqB,EAAAC,GAAA,GAAAC,EACA,MACA,OACAlD,EAAA2B,kBAAA,MAAAqB,EAAAC,EACA,MACA,QACAzN,EAAA1N,IAAAyb,OAAA,2CAIA,IAAAX,EAEA,IADA5C,EAAA0B,aAAA,EACAgB,EAAA,EAA6BA,EAAA,EAAeA,IAC5C1C,EAAA0B,cAAA1B,EAAAqD,KAAAX,GAAA1C,EAAAoD,oBAAAV,GAGA,OAAAE,GAKA,IAAAU,EAAA,kCACA3c,KAAA6c,aAAA,SAAAnI,GACA,QAAAjZ,EAAA,EAAuBA,GAAA,IAAUA,GAAA,GAGjC,IAFA,IACAqhB,EADAC,EAAA,EAEArI,EAAAa,cAAAnE,IAAA2L,GAAAthB,IAEA,IADAqhB,EAAA5L,EAAA6L,GAAA,GACArI,EAAAa,cAAAnE,EAAA0L,EAAA,GAAArhB,GACAqhB,IAYA,IAVAA,EAAA,IAMAA,EAAA5L,EAAA6L,GAAA,IAEArI,EAAAmC,OAAApb,EAAA,GAAAqhB,EACAA,EAAA5L,EAAA6L,GAAA,GACArI,EAAAa,cAAAnE,EAAA0L,EAAApI,EAAAmC,OAAApb,EAAA,MAAAA,GACAqhB,IAEAA,EAAA,IACAA,EAAA5L,EAAA6L,GAAA,IAEArI,EAAAmC,OAAApb,EAAA,GAAAqhB,IAyGA,SAAAE,IAIA,IAAAC,EAAA,MAIAC,GAHAF,EAAAG,WAGA,KAIAC,GADAJ,EAAAK,cACAL,EAAAI,2BAGAE,EAAAN,EAAAM,4BAIAC,GADAP,EAAAQ,uBACA,qkGACAC,EAAA,swBAKA,SAAAC,EAAA1gB,EAAA2gB,EAAA5gB,EAAA6gB,EAAAC,EAAAC,GACA,QAAAD,KACA9gB,EAAA6gB,GAAA,MAAA5gB,EAAA2gB,EAAA,GAAAG,EAAA,GAAA/gB,EAAA6gB,EAAA,GAAAE,EAAA,GAAA9gB,EAAA2gB,EAAA,GAAAG,EAAA,GAAA/gB,EAAA6gB,EAAA,GAAAE,EAAA,GAAA9gB,EAAA2gB,EAAA,GAAAG,EAAA,GAAA/gB,EAAA6gB,EAAA,GAAAE,EAAA,GAAA9gB,EAAA2gB,EAAA,GAAAG,EAAA,GAAA/gB,EAAA6gB,EAAA,GAAAE,EAAA,GAAA9gB,EAAA2gB,EAAA,GAAAG,EAAA,GAAA/gB,EAAA6gB,EAAA,GAAAE,EAAA,GAAA9gB,EAAA2gB,EAAA,GAAAG,EAAA,IAAA/gB,EAAA6gB,EAAA,GAAAE,EAAA,IAAA9gB,EAAA2gB,EAAA,GAAAG,EAAA,IAAA/gB,EAAA6gB,EAAA,GAAAE,EAAA,IAAA9gB,EAAA2gB,EAAA,GAAAG,EAAA,IAAA/gB,EAAA6gB,EAAA,GAAAE,EAAA,IAAA9gB,EAAA2gB,EAAA,GAAAG,EAAA,IAAA/gB,EAAA6gB,EAAA,GAAAE,EAAA,IAAA9gB,EAAA2gB,EAAA,GAAAG,EAAA,IAAA/gB,EAAA6gB,EAAA,IAAAE,EAAA,IAAA9gB,EAAA2gB,EAAA,IAAAG,EAAA,MACAF,IACAD,EAIA,SAAAI,EAAA/gB,EAAA2gB,EAAA5gB,EAAA6gB,EAAAC,EAAAC,GACA,QAAAD,KACA9gB,EAAA6gB,GAAA5gB,EAAA2gB,EAAA,GAAAG,EAAA,GAAA/gB,EAAA6gB,EAAA,GAAAE,EAAA,GAAA9gB,EAAA2gB,EAAA,GAAAG,EAAA,GAAA/gB,EAAA6gB,EAAA,GAAAE,EAAA,GAAA9gB,EAAA2gB,EAAA,GAAAG,EAAA,KACAF,IACAD,EA+DA,SAAAK,EAAA5Q,GACA,OAAAA,IAhBApN,KAAAie,iBAAA,SAAAC,EAAAC,GACA,OA3CA,SAAAD,EAAAC,GACA,QAAA1iB,EAAA,EAAoDA,EAAA2iB,UAAe3iB,IACnEyiB,EAAAG,UAAA5iB,GAAAyiB,EAAAI,SAAA7iB,GAAAyiB,EAAAK,QAAA9iB,GAAAyiB,EAAAM,UAAA/iB,GAAAyiB,EAAAO,SAAAhjB,GAAAyiB,EAAAQ,QAAAjjB,GAAA,EAEA,SAAA0iB,GACA,UACAD,EAAAS,SAAA,EACA,MACA,WACAT,EAAAS,SAAA,EACA,MACA,UACAT,EAAAS,SAAA,EACA,MACA,UACAT,EAAAS,SAAA,EACA,MACA,WACAT,EAAAS,SAAA,EACA,MACA,UACAT,EAAAS,SAAA,EACA,MACA,UACAT,EAAAS,SAAA,EACA,MACA,WACAT,EAAAS,SAAA,EACA,MACA,SACAT,EAAAS,SAAA,EACA,MACA,QACA,OAAAC,yBAOA,OALAV,EAAAW,aAAA,GAAAV,EAAAf,EAAAE,EAAA,GAAAA,EACAY,EAAAY,KAAA,EACAZ,EAAAa,KAAA,EACAb,EAAAc,QAAA,EACAvQ,EAAAwQ,IAAAf,EAAA7P,EAAA,GACA6Q,sBAGAC,CAAAjB,EAAAC,IAAAe,sBACAN,0BAEAV,EAAAkB,OAAAhB,UACAF,EAAAmB,OAAAjB,UACAF,EAAAoB,MAAAlB,UACAF,EAAAqB,MAAAnB,UACAF,EAAAsB,KAAApB,UACAF,EAAAuB,KAAArB,UACA3P,EAAAC,KAAAwP,EAAAwB,EAAA,GACAR,wBAOAlf,KAAA2f,eAAA,SAAAzB,EAAA0B,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA,MAAAR,EAAA,OAAAS,iBAGA,OAFAD,EAAA,EACAF,EAAAN,EACAC,GACA,OACAH,EAAAF,EACAG,EAAAF,EACA,MACA,OACA,MACA,QACA,OAAAa,oBASA,IAPAV,EAAA5B,WACAvP,EAAAC,UAAA8Q,EAAAC,EAAA3B,EAAAG,UAAAD,UAAA4B,GACAnR,EAAAC,UAAAgR,EAAAC,EAAA7B,EAAAM,UAAAJ,UAAA4B,KAEAnR,EAAAC,UAAA8Q,EAAAC,EAAA3B,EAAAG,UAAAD,qBACAvP,EAAAC,UAAAgR,EAAAC,EAAA7B,EAAAM,UAAAJ,sBAEAkC,EAAA,IACAC,EAAAD,EAAApC,EAAAW,aAAAX,EAAAc,QAAAd,EAAAW,aAAAX,EAAAc,QAAAsB,EACAE,EAAApC,WACA8B,EAAAhC,EAAAkB,OAAAoB,EACAL,EAAAjC,EAAAG,UACA+B,EAAAlC,EAAAmB,OAAAmB,EACAH,EAAAnC,EAAAM,UACA+B,EAAAnC,UAAAoC,IAAAD,EAAAnC,UAAAoC,KAEAN,EAAAL,EAAAW,EACAL,EAAAP,EACAQ,EAAAL,EAAAS,EACAH,EAAAP,GAEApC,EAAAyC,EAAAD,EAAAhC,EAAAI,SAAAJ,EAAAoB,MAAApB,EAAAc,QAAAuB,EAAAhD,EAAAW,EAAAS,WACAjB,EAAA2C,EAAAD,EAAAlC,EAAAO,SAAAP,EAAAqB,MAAArB,EAAAc,QAAAuB,EAAAhD,EAAAW,EAAAS,WACAZ,EAAAG,EAAAI,SAAAJ,EAAAoB,MAAApB,EAAAc,QAAAd,EAAAK,QAAAL,EAAAsB,KAAAtB,EAAAc,QAAAuB,EAAA9C,EAAAS,EAAAS,WACAZ,EAAAG,EAAAO,SAAAP,EAAAqB,MAAArB,EAAAc,QAAAd,EAAAQ,QAAAR,EAAAuB,KAAAvB,EAAAc,QAAAuB,EAAA9C,EAAAS,EAAAS,WACAuB,EAAAhC,EAAAsB,KAAAtB,EAAAc,QACAmB,EAAAjC,EAAAK,QACA6B,EAAAlC,EAAAuB,KAAAvB,EAAAc,QACAqB,EAAAnC,EAAAQ,QAEA,IADA,IAAAjjB,EAAA8kB,EAAA,EACA,GAAA9kB,KACAyiB,EAAAY,MAAAd,EAAAmC,EAAAD,MACAhC,EAAAa,MAAAf,EAAAqC,EAAAD,MAGA,IADA3kB,EAAA8kB,EAAA,EACA,GAAA9kB,KACAyiB,EAAAY,MAAAd,EAAAmC,EAAAD,EAAA,IAAAlC,EAAAmC,EAAAD,EAAA,IAAAlC,EAAAmC,EAAAD,EAAA,IAAAlC,EAAAmC,EAAAD,EAAA,IAAAlC,EAAAmC,EAAAD,EAAA,IAAAlC,EAAAmC,EAAAD,EAAA,IAAAlC,EAAAmC,EAAAD,EAAA,IAAAlC,EAAAmC,EAAAD,EAAA,IACAA,GAAA,EACAhC,EAAAa,MAAAf,EAAAqC,EAAAD,EAAA,IAAApC,EAAAqC,EAAAD,EAAA,IAAApC,EAAAqC,EAAAD,EAAA,IAAApC,EAAAqC,EAAAD,EAAA,IAAApC,EAAAqC,EAAAD,EAAA,IAAApC,EAAAqC,EAAAD,EAAA,IAAApC,EAAAqC,EAAAD,EAAA,IAAApC,EAAAqC,EAAAD,EAAA,IACAA,GAAA,EAKA,GAHAE,GAAAC,EACAC,GAAAD,EACArC,EAAAc,SAAAuB,EACArC,EAAAc,SAAAd,EAAAW,aAAA,CACA,IAAA/R,EAAA,GAAAkQ,EAAA2D,aAAAzjB,KAAAsS,OAAA0O,EAAAY,KAAAZ,EAAAa,MAAAb,EAAAc,QAAA,UACA4B,EAAA9T,GAAA,MAAAA,EACA8T,GAAA1C,EAAA7P,EAAA3S,SAAAklB,EAAA1C,EAAA7P,EAAA3S,OAAA,GACAwiB,EAAA7P,EAAAuS,KACA1C,EAAAY,KAAAZ,EAAAa,KAAA,EACAlQ,EAAAC,UAAAoP,EAAAK,QAAAL,EAAAc,QAAAd,EAAAK,QAAA,EAAAH,WACAvP,EAAAC,UAAAoP,EAAAQ,QAAAR,EAAAc,QAAAd,EAAAQ,QAAA,EAAAN,WACAvP,EAAAC,UAAAoP,EAAAI,SAAAJ,EAAAc,QAAAd,EAAAI,SAAA,EAAAF,WACAvP,EAAAC,UAAAoP,EAAAO,SAAAP,EAAAc,QAAAd,EAAAO,SAAA,EAAAL,WACAF,EAAAc,QAAA,EAEA,GAAAd,EAAAc,QAAAd,EAAAW,aAKA,OAAA6B,oBAYA,OATAV,EAAA5B,WACAvP,EAAAC,UAAAoP,EAAAG,UAAA2B,EAAA9B,EAAAG,UAAA,EAAAD,UAAA4B,GACAnR,EAAAC,UAAAoP,EAAAM,UAAAwB,EAAA9B,EAAAM,UAAA,EAAAJ,UAAA4B,GACAnR,EAAAC,UAAA8Q,EAAAC,EAAA3B,EAAAG,UAAAD,UAAA4B,KACAnR,EAAAC,UAAAgR,EAAAC,EAAA7B,EAAAM,UAAAJ,UAAA4B,OAEAnR,EAAAC,UAAA8Q,EAAAC,EAAAG,EAAA5B,UAAAF,EAAAG,UAAA,EAAAD,WACAvP,EAAAC,UAAAgR,EAAAC,EAAAC,EAAA5B,UAAAF,EAAAM,UAAA,EAAAJ,YAEAqC,kBAeAzgB,KAAA6gB,aAAA,SAAA3C,GAEA,IADA,IAAA4C,EAdA,SAAA7Z,EAAA8Z,GACA,IAAAtlB,EACAulB,EAAA,EACA,IAAAvlB,EAAA,EAAmBA,EAAAslB,EAAStlB,IAC5BulB,GAAA/Z,EAAAxL,GAEA,MAAAulB,EAAA,OAAAC,wBACA,IAAAC,EAAA,EAAAhkB,KAAAikB,KAAAH,GAAA,EAAA9D,IACA,IAAAzhB,EAAAslB,EAAqBtlB,KAAA,MACrBylB,GAAAja,EAAAxL,KAAA,KAEA,OAAAwhB,EAAAxhB,EAAAuhB,EAAA2D,aAGAS,CAAAlD,EAAA7P,EAAA6P,EAAA7P,EAAA3S,QACAD,EAAA,EAAuBA,EAAAyiB,EAAA7P,EAAA3S,OAAqBD,IAC5CyiB,EAAAwB,EAAAjkB,IAAAyiB,EAAA7P,EAAA5S,GACAyiB,EAAA7P,EAAA5S,GAAA,EAEA,IAAAA,EAAA,EAAuBA,EAAA2iB,UAAe3iB,IACtCyiB,EAAAG,UAAA5iB,GAAAyiB,EAAAI,SAAA7iB,GAAAyiB,EAAAK,QAAA9iB,GAAAyiB,EAAAM,UAAA/iB,GAAAyiB,EAAAO,SAAAhjB,GAAAyiB,EAAAQ,QAAAjjB,GAAA,EAIA,OAFAyiB,EAAAc,QAAA,EACAd,EAAAY,KAAAZ,EAAAa,KAAA,EACA+B,GAGA,SAAAO,IACA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAvZ,EAAAwZ,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACApiB,KAAAqiB,MAAAd,EACAvhB,KAAAsiB,WAAAd,EACAxhB,KAAAuiB,aAAAd,EACAzhB,KAAAwiB,KAAAta,EACAlI,KAAAyiB,OAAAf,EACA1hB,KAAA0iB,KAAAf,EACA3hB,KAAA2iB,YAAAf,EACA5hB,KAAA4iB,kBAAAf,EACA7hB,KAAA6iB,UAAAf,EACA9hB,KAAA8iB,UAAAf,EACA/hB,KAAA+iB,gBAAAf,EACAhiB,KAAAgjB,QAAAf,EACAjiB,KAAAijB,UAAAf,EACAliB,KAAAkjB,SAAAf,EACAniB,KAAAmjB,MAAAf,EAEA,SAAAgB,EAAAC,EAAA7B,EAAAC,EAAAS,EAAAE,EAAAV,EAAAC,EAAA2B,EAAAC,EAAAC,EAAA1B,EAAAC,EAAA0B,EAAAC,GACA1jB,KAAAsiB,WAAAd,EACAxhB,KAAAuiB,aAAAd,EACAzhB,KAAAijB,UAAAf,EACAliB,KAAA2jB,QAAAvB,EACApiB,KAAAyiB,OAAAf,EACA1hB,KAAA0iB,KAAAf,EACA3hB,KAAA4jB,OAAAN,EACAtjB,KAAA6jB,MAAAN,EACAvjB,KAAA2iB,YAAAa,EACAxjB,KAAA6iB,UAAAf,EACA9hB,KAAA8iB,UAAAf,EACA/hB,KAAAgjB,QAAAS,EACAzjB,KAAA8jB,QAAAJ,EAEA,IAAAK,EACA/jB,KAAAgR,WAAA,SAAAgT,GACAD,EAAAC,GAOA,IAAAC,EAAA,KAAA3C,EAAA,kDAAAA,EAAA,qDAAAA,EAAA,mDAAAA,EAAA,oDAAAA,EAAA,kDAAAA,EAAA,oDAAAA,EAAA,wDAAAA,EAAA,qDAAAA,EAAA,sDAAAA,EAAA,mDAAAA,EAAA,6CAKA4C,EAAA,KAAA5C,EAAA,6CAAAA,EAAA,oDAAAA,EAAA,gDAAAA,EAAA,oDAAAA,EAAA,gDAAAA,EAAA,qDAAAA,EAAA,oDAAAA,EAAA,gDAAAA,EAAA,gDAAAA,EAAA,mDAAAA,EAAA,+CACA,SAAA6C,EAAAC,EAAA1kB,EAAA2kB,GACA,IAAAC,EAAAF,EAAAG,KAAAxU,EAAAyU,OAAAP,EAAAC,EACAjc,EAAAmc,EAAAK,WACAnO,EAAAgO,EAAA5kB,GACAglB,EAAAJ,EAAA5kB,EAAA,GACAilB,EAAArO,EAIAA,EAAAmM,OAAAnM,EAAAmM,OAAAxa,GAAAyc,EAAAjC,OAAAnM,EAAAmM,QACAnM,EAAAoM,KAAApM,EAAAoM,KAAAza,GAAAyc,EAAAhC,KAAApM,EAAAoM,MACApM,EAAAqM,YAAArM,EAAAqM,YAAA1a,GAAAyc,EAAA/B,YAAArM,EAAAqM,aACArM,EAAAsM,kBAAAtM,EAAAsM,kBAAA3a,GAAAyc,EAAA9B,kBAAAtM,EAAAsM,mBACAtM,EAAAuM,UAAAvM,EAAAuM,UAAA5a,GAAAyc,EAAA7B,UAAAvM,EAAAuM,WACAvM,EAAAwM,UAAAxM,EAAAwM,UAAA7a,GAAAyc,EAAA5B,UAAAxM,EAAAwM,WACAxM,EAAAyM,gBAAAzM,EAAAyM,gBAAA9a,GAAAyc,EAAA3B,gBAAAzM,EAAAyM,iBACAzM,EAAA0M,QAAA1M,EAAA0M,QAAA/a,GAAAyc,EAAA1B,QAAA1M,EAAA0M,SAGA1M,EAAA6M,MAAA7M,EAAA6M,MAAAlb,GAAAyc,EAAAvB,MAAA7M,EAAA6M,OAuLA,SAAAiB,EAAAQ,GAEA,EAAAA,KACA,EACAA,EAAA,GAEA,EAAAA,KACA,EACAA,EAAA,GAEAR,EAAAQ,QACAR,EAAAK,WAAA,EAjMAI,CAAAT,EAAAO,EAAAtC,OACA,GAAAgC,EAAAD,EAAA9B,WAAAqC,EAAArC,WAA0DplB,KAAA4nB,IAAAV,EAAA9B,aAAA,OAAA8B,EAAA9B,WAAAqC,EAAArC,YAC1D,GAAA+B,EAAAD,EAAAW,iBAAAJ,EAAApC,aAAkErlB,KAAA4nB,IAAAV,EAAAW,mBAAA,OAAAX,EAAAW,iBAAAJ,EAAApC,cAClE,GAAAoC,EAAAnC,OACA4B,EAAAY,cAAA,GAAAL,EAAAnC,MAEA,GAAA6B,EAAAD,EAAAa,eAAAC,MAAAC,WAAAR,EAAAlC,OAA2EvlB,KAAA4nB,IAAAV,EAAAa,eAAAC,MAAAC,aAAA,OAAAf,EAAAa,eAAAC,MAAAC,WAAAR,EAAAlC,QAC3E,GAAA4B,EAAAD,EAAAa,eAAAC,MAAAE,aAAAT,EAAAjC,KAA2ExlB,KAAA4nB,IAAAV,EAAAa,eAAAC,MAAAE,eAAA,OAAAhB,EAAAa,eAAAC,MAAAE,aAAAT,EAAAjC,MAC3E,GAAA2B,EAAAD,EAAAiB,cAAAV,EAAAhC,YAA8DzlB,KAAA4nB,IAAAV,EAAAiB,cAAA,OAAAjB,EAAAiB,cAAAV,EAAAhC,aAC9D,GAAA0B,EAAAD,EAAAkB,oBAAAX,EAAA/B,kBAA0E1lB,KAAA4nB,IAAAV,EAAAkB,oBAAA,OAAAlB,EAAAkB,oBAAAX,EAAA/B,mBAC1E,GAAAyB,EAAAD,EAAAmB,UAAAZ,EAAA9B,UAAA,GAA+D3lB,KAAA4nB,IAAA,IAAAV,EAAAmB,SAAA,OAAAnB,EAAAmB,UAAAZ,EAAA9B,UAAA,IAC/D,GAAAwB,EAAAD,EAAAoB,SAAAb,EAAA7B,UAAuD5lB,KAAA4nB,IAAAV,EAAAoB,WAAA,OAAApB,EAAAoB,SAAAb,EAAA7B,WACvD,GAAAuB,EAAAD,EAAAqB,kBAAAd,EAAA5B,gBAAsE7lB,KAAA4nB,IAAAV,EAAAqB,oBAAA,OAAArB,EAAAqB,kBAAAd,EAAA5B,iBACtE4B,EAAA3B,QAAA,IACA,GAAAqB,EAAAD,EAAAsB,aAAAf,EAAA3B,QAA2D9lB,KAAA4nB,IAAAV,EAAAsB,eAAA,OAAAtB,EAAAsB,aAAAf,EAAA3B,UAE3D2B,EAAA1B,UAAA,IACAmB,EAAAuB,cAAAvB,EAAAuB,cAAAhB,EAAA1B,WAEA0B,EAAAzB,SAAA,IACAkB,EAAAuB,cAAAvB,EAAAuB,cAAAhB,EAAAzB,UAAA,IAEA,GAAAmB,EAAAD,EAAAjB,MAAAwB,EAAAxB,MAAgDjmB,KAAA4nB,IAAAV,EAAAjB,QAAA,OAAAiB,EAAAjB,MAAAwB,EAAAxB,OAChD,GAAAkB,IACAD,EAAAQ,MAAAllB,EACA0kB,EAAAK,WAAAxc,GASA,IAAA2d,EAAA,KAAAxC,EAAA,8CAAAA,EAAA,8CAAAA,EAAA,8CAAAA,EAAA,8CAAAA,EAAA,8CAAAA,EAAA,8CAAAA,EAAA,6CAAAA,EAAA,6CAAAA,EAAA,2CAAAA,EAAA,+CAAAA,EAAA,iDAAAA,EAAA,+CAAAA,EAAA,6CAAAA,EAAA,6CAAAA,EAAA,6CAAAA,EAAA,2CAAAA,EAAA,wCACA,SAAAyC,EAAAzB,EAAA0B,EAAAzB,GACA,IAAA0B,EAAAD,EACAE,EAAAjC,EAAAkC,wBAAAH,GAaA,GAZA1B,EAAAG,IAAAxU,EAAAmW,QACA9B,EAAA+B,sBAAAJ,EACA3B,EAAA+B,sBAAAjpB,KAAAE,IAAAgnB,EAAA+B,sBAAA,KACA/B,EAAA+B,sBAAAjpB,KAAAC,IAAAinB,EAAA+B,sBAAA,GACA/B,EAAAgC,MAAAhC,EAAA+B,sBACA/B,EAAA+B,sBAAA,MACA/B,EAAAiC,mBAAA,GAEAT,EAAAI,GAAA/C,UAAA,IAAAmB,EAAAuB,cAAA,EAAAvB,EAAAuB,eACAC,EAAAI,GAAAlC,QAAA,IACAM,EAAAa,eAAAqB,cAAA,GAEAppB,KAAA4nB,IAAAc,EAAAI,GAAApC,QAAA,GACA,IAAA3K,EAAAsN,IAAA,EAAAX,EAAAI,GAAApC,QACA3K,EAAA,IAAAA,GAAA,IACAmL,EAAAuB,cAAAvB,EAAAuB,cAAA1M,GAAA,EA0BA,OAxBA,GAAAoL,EAAAD,EAAA9B,WAAAsD,EAAAI,GAAA1D,WAAwEplB,KAAA4nB,IAAAV,EAAA9B,aAAA,OAAA8B,EAAA9B,WAAAsD,EAAAI,GAAA1D,YACxE,GAAA+B,EAAAD,EAAAW,iBAAAa,EAAAI,GAAAzD,aAAgFrlB,KAAA4nB,IAAAV,EAAAW,mBAAA,OAAAX,EAAAW,iBAAAa,EAAAI,GAAAzD,cAChF,GAAA8B,EAAAD,EAAAjB,MAAAyC,EAAAI,GAAArC,QAAgEzmB,KAAA4nB,IAAAV,EAAAjB,QAAA,OAAAiB,EAAAjB,MAAAyC,EAAAI,GAAArC,SAChE,GAAAU,EAAAD,EAAAa,eAAAC,MAAAC,WAAAS,EAAAI,GAAAvD,OAAyFvlB,KAAA4nB,IAAAV,EAAAa,eAAAC,MAAAC,aAAA,OAAAf,EAAAa,eAAAC,MAAAC,WAAAS,EAAAI,GAAAvD,QACzF,GAAA4B,EAAAD,EAAAa,eAAAC,MAAAE,aAAAQ,EAAAI,GAAAtD,KAAyFxlB,KAAA4nB,IAAAV,EAAAa,eAAAC,MAAAE,eAAA,OAAAhB,EAAAa,eAAAC,MAAAE,aAAAQ,EAAAI,GAAAtD,MAQzF,GAAA2B,EAAAD,EAAAP,MAAA+B,EAAAI,GAAAnC,MAA8D3mB,KAAA4nB,IAAAV,EAAAP,QAAA,OAAAO,EAAAP,MAAA+B,EAAAI,GAAAnC,OAC9D,GAAAQ,EAAAD,EAAAiB,cAAAO,EAAAI,GAAArD,YAA4EzlB,KAAA4nB,IAAAV,EAAAiB,cAAA,OAAAjB,EAAAiB,cAAAO,EAAAI,GAAArD,aAC5EiD,EAAAI,GAAArD,YAAA,EACA,GAAA0B,EAAAD,EAAAkB,oBAAA,GAAAM,EAAAI,GAAArD,YAAyFzlB,KAAA4nB,IAAAV,EAAAkB,oBAAA,OAAAlB,EAAAkB,oBAAA,GAAAM,EAAAI,GAAArD,aAGzF,GAAA0B,EAAAD,EAAAkB,oBAAA,IAAAM,EAAAI,GAAArD,YAA0FzlB,KAAA4nB,IAAAV,EAAAkB,oBAAA,OAAAlB,EAAAkB,oBAAA,IAAAM,EAAAI,GAAArD,aAG1F,GAAA0B,EAAAD,EAAAmB,UAAAK,EAAAI,GAAAnD,UAAA,GAA4E3lB,KAAA4nB,IAAA,IAAAV,EAAAmB,SAAA,OAAAnB,EAAAmB,UAAAK,EAAAI,GAAAnD,UAAA,IAC5E,GAAAwB,EAAAD,EAAAoB,SAAAI,EAAAI,GAAAlD,UAAqE5lB,KAAA4nB,IAAAV,EAAAoB,WAAA,OAAApB,EAAAoB,SAAAI,EAAAI,GAAAlD,WACrE,GAAAuB,EAAAD,EAAAsB,aAAAE,EAAAI,GAAAhD,QAAuE9lB,KAAA4nB,IAAAV,EAAAsB,eAAA,OAAAtB,EAAAsB,aAAAE,EAAAI,GAAAhD,SACvE8C,EAEA9lB,KAAAwmB,aAAA,SAAApC,EAAA0B,EAAAzB,GACA,OAAAyB,GACA,KAAAW,EAAAC,MAEAZ,EAAAW,EAAAE,GACAvC,EAAAG,IAAAxU,EAAA6W,SACA,MAEA,KAAAH,EAAAI,OAEAf,EAAAW,EAAAK,GACA1C,EAAAG,IAAAxU,EAAAyU,OACA,MAEA,KAAAiC,EAAAM,YAEAjB,EAAAW,EAAAK,GACA1C,EAAAG,IAAAxU,EAAA6W,SACA,MAEA,KAAAH,EAAAO,SAEAlB,EAAAW,EAAAQ,GACA7C,EAAAG,IAAAxU,EAAAyU,OACA,MAEA,KAAAiC,EAAAS,cAEApB,EAAAW,EAAAQ,GACA7C,EAAAG,IAAAxU,EAAA6W,SACA,MAEA,KAAAH,EAAAU,QAEArB,EAAAW,EAAAW,GACAhD,EAAAG,IAAAxU,EAAAyU,OACA,MAEA,KAAAiC,EAAAY,aAEAvB,EAAAW,EAAAW,GACAhD,EAAAG,IAAAxU,EAAA6W,SACA,MAEA,KAAAH,EAAAa,OAMA,OAJAxB,EAAA,IACA1B,EAAA0B,SACAD,EAAAzB,EAAA0B,EAAAzB,GACAD,EAAAG,IAAAxU,EAAAwX,QACAzB,EAKA,OAFA1B,EAAA0B,SAEAA,GACA,KAAAW,EAAAe,GAEA,OADArD,EAAAC,EAAA,EAAAC,GACAyB,EACA,KAAAW,EAAAgB,GAEA,OADAtD,EAAAC,EAAA,EAAAC,GACAyB,EACA,KAAAW,EAAAiB,GAEA,OADAvD,EAAAC,EAAA,EAAAC,GACAyB,EACA,KAAAW,EAAAkB,GAEA,OADAxD,EAAAC,EAAA,EAAAC,GACAyB,EACA,KAAAW,EAAAmB,GAEA,OADAzD,EAAAC,EAAA,EAAAC,GACAyB,EACA,KAAAW,EAAAK,GAEA,OADA3C,EAAAC,EAAA,EAAAC,GACAyB,EACA,KAAAW,EAAAE,GAEA,OADAxC,EAAAC,EAAA,EAAAC,GACAyB,EACA,KAAAW,EAAAQ,GAEA,OADA9C,EAAAC,EAAA,EAAAC,GACAyB,EACA,KAAAW,EAAAoB,GAEA,OADA1D,EAAAC,EAAA,EAAAC,GACAyB,EACA,KAAAW,EAAAW,GAEA,OADAjD,EAAAC,EAAA,EAAAC,GACAyB,EAKA,UAAAA,MAAA,IACAD,EAAAzB,EAAA0B,EAAAzB,IAEAD,EAAA0B,OAAA,EACAA,IAiFA,SAAAgC,IACA,IAAAC,EACA/nB,KAAAgR,WAAA,SAAAgX,GACAD,EAAAC,GAEAhoB,KAAAioB,eAAA,SAAA7D,EAAA8D,GACA,IACAC,EADAzT,EAAA0P,EAAAa,eAEA9K,EAAAzF,EAAAyF,QACAiO,EAAAL,EAAAM,aAAAjE,GACA8D,EAAAnX,MAAAqX,EAAA,EAAA1T,EAAA4T,cAAA5T,EAAA0E,QAyCA,IAAAmP,EAAA,KAAA7T,EAAA0E,QAAA,EAIAgL,EAAAgC,MAAA,IACA+B,EAAA,EAAA5B,IAAA,IAAAnC,EAAAgC,OAAAhC,EAAAoE,eAAA,aAMAL,EAAA,MAIA/D,EAAAqE,aACAN,EAAA,EAAA5B,IAAA,MAAAnC,EAAAoE,eAAA,cAGA9T,EAAAgU,QAAAP,EAAAC,EACA1T,EAAAgU,QAAAH,IAAA7T,EAAAgU,QAAAH,IACA7T,EAAAgU,QAAA,GAAAtE,EAAAiC,qBAAA3R,EAAAgU,QAAA,GACA,IAAAC,EAAAT,EAAAnX,KAAA2D,EAAA0E,QAAAlc,KAAAE,IAAAsX,EAAAkU,SAAAlU,EAAAgU,SAWA,OAVAC,EAAAR,IAAAQ,EAAAR,GACAhO,EAAA0O,cAAA,EACA,MAAAnU,EAAAoU,QAKApU,EAAAoU,MAAAZ,YAAAnX,KAAA,EACA2D,EAAAoU,MAAAC,SAAArU,EAAAkU,UAEAD,GAMA3oB,KAAAgpB,YAAA,SAAA5E,EAAA8D,EAAAe,EAAAC,GACA,IACAC,EADAzU,EAAA0P,EAAAa,eAEA2D,EAAAlU,EAAAkU,SACAF,EAAAhU,EAAAgU,QACA,GAAAQ,IAAAN,GAAAV,GACA,MAAAxT,EAAAoE,mBAAA4P,GAAA,IACAO,EAAAlY,KAAAmX,EACA,GAAAU,EAAA,EAAAF,GACAS,EAAAP,EAAA,EAAAF,EAAA,GACAO,EAAAlY,MAAAoY,EACAzU,EAAAoE,iBAAA,MAEAqQ,EAAA,EACAzU,EAAAoE,iBAAA,IAKAsL,EAAAiC,mBAAA,MAAA3R,EAAAoE,mBAAAmQ,EAAAlY,MAAA,GAAAmX,IAEA,IAAAkB,EAAAR,EAAA,EAAAlU,EAAAgU,QAAA,GAAAE,EAAA,EAAAlU,EAAAgU,QAAA,GAGA,OAFAU,GAAAD,GACA,IAAAC,EAAA,GACAA,GAKAppB,KAAAqpB,WAAA,SAAA3U,EAAAE,GACAF,EAAAkU,UAAAhU,EAAAa,eAAAb,EAAAmG,cAKA/a,KAAAspB,aAAA,SAAA5U,EAAAwT,GACA,IAAAqB,EACApP,EAAAzF,EAAAyF,QACAzF,EAAAkU,UAAAV,EAAAxT,EAAA0E,QACA,IAAAoQ,EAAA,EACArP,EAAAsP,eAAA,EACAtP,EAAA0O,cAAA,EACA,IAAAU,EAAA7U,EAAAkU,SAAA,KAAAY,GAAAD,IACAA,EAAA7U,EAAAkU,SAAAY,EAAA9U,EAAAgU,SACA,IACAc,GAAAD,GAsBA,IAAAG,EAAAxsB,KAAAE,IAAA,EAAA+c,EAAAwP,gBAAAH,GAAA,EACArP,EAAA0O,eAAA,EAAAa,EACAF,GAAA,EAAAE,EACAhV,EAAAkU,UAAA,EAAAc,EACAvP,EAAAwP,iBAAAD,EAEAvP,EAAAsP,gBAAAD,EACA9U,EAAAkU,UAAAY,GAmBA,SAAAI,IACA,IAAA7F,EACAgE,EACA8B,EACA7pB,KAAAgR,WAAA,SAAAgT,EAAAgE,EAAA8B,GACA/F,EAAAC,EACA+D,EAAAC,EACA6B,EAAAC,GAEA,IAIAC,EAAAH,EAAAG,cAGAC,EAAAJ,EAAAI,aAcAC,EADAF,EAAA,UACA,0BAGAG,EAAA,IAGAC,EAAA,GAGAC,EAAA,GAGAC,EAAA,KAIAC,EAAA,OAGAC,EAAA,OAIAC,EAAA,i9CAwDA,SAAAC,EAAAvkB,EAAAwkB,GACA,IAAAziB,EAAA,IAAA/B,EAAAwkB,EAAA,GAOA,OANAziB,IAAA,EACAA,GAAA,IAAA/B,EAAAwkB,EAAA,GACAziB,IAAA,EACAA,GAAA,IAAA/B,EAAAwkB,EAAA,GACAziB,IAAA,EACAA,GAAA,IAAA/B,EAAAwkB,EAAA,GAYA,SAAAC,EAAAzkB,EAAAwkB,EAAA3nB,GACAmD,EAAAwkB,EAAA,OAAA3nB,GAAA,GACAmD,EAAAwkB,EAAA,OAAA3nB,GAAA,GACAmD,EAAAwkB,EAAA,OAAA3nB,GAAA,EACAmD,EAAAwkB,EAAA,OAAA3nB,EAWA,SAAA6nB,EAAA1kB,EAAAwkB,EAAA3nB,GACAmD,EAAAwkB,EAAA,OAAA3nB,GAAA,EACAmD,EAAAwkB,EAAA,OAAA3nB,EAaA,SAAA8nB,EAAA5iB,EAAAiE,EAAA2d,GACA,YAAA5hB,GAAAiE,EAAA2d,KAAA,GAAA3d,IAWA,SAAA4e,EAAA1G,EAAAtoB,GACA,IAAA4Y,EAAA0P,EAAAa,eACAnpB,EAAA,GAAA+uB,EAAA/uB,EAAA,UACAA,EAAA,GAAA+uB,EAAA/uB,EAAA,QACAA,EAAA,GAAA+uB,EAAA/uB,EAAA,KAAAsoB,EAAAoE,eAAA,UACA1sB,EAAA,GAAA+uB,EAAA/uB,EAAA,KAAAsoB,EAAA2G,SACAjvB,EAAA,GAAA+uB,EAAA/uB,EAAA,QACAA,EAAA,GAAA+uB,EAAA/uB,EAAA,KAAAsoB,EAAA4G,iBAAA,KACAlvB,EAAA,GAAA+uB,EAAA/uB,EAAA,KAAA4Y,EAAAuW,eACAnvB,EAAA,GAAA+uB,EAAA/uB,EAAA,KAAA4Y,EAAAwW,kBACApvB,EAAA,GAAA+uB,EAAA/uB,EAAA,QACAA,EAAA,GAAA+uB,EAAA/uB,EAAA,KAAAsoB,EAAA+G,WACArvB,EAAA,GAAA+uB,EAAA/uB,EAAA,KAAAsoB,EAAAgH,KAAA/b,WACAvT,EAAA,GAAA+uB,EAAA/uB,EAAA,KAAA4Y,EAAA2W,UACAvvB,EAAA,GAAA+uB,EAAA/uB,EAAA,KAAAsoB,EAAAkH,WACAxvB,EAAA,GAAA+uB,EAAA/uB,EAAA,KAAAsoB,EAAAmH,UACAzvB,EAAA,GAAA+uB,EAAA/uB,EAAA,KAAAsoB,EAAAoH,UACA1vB,EAAA,OACA,IACA2vB,EAOAC,EARAC,EAAA,IAAA7vB,EAAA,GAGA2vB,EADA,GAAArH,EAAA2G,QACAb,EAEA9F,EAAAoE,eAAA,KAAA4B,EAAmED,EAEnE/F,EAAAG,KAAAxU,EAAAwX,UAAAkE,EAAArH,EAAAgC,OAEAsF,EAAAtH,EAAAwH,YAAA,EAA0C,OAAA7H,EAAA8H,aAAAJ,EAAArH,EAAA2G,QAAA3G,EAAAoE,gBAI1C,GAAApE,EAAA2G,SACAjvB,EAAA,WAAA6vB,GACAA,EAAA,GAAA7vB,EAAA,GACAA,EAAA,QAAA4vB,EAAAC,KAEA7vB,EAAA,UAAA6vB,GACAA,EAAA,GAAA7vB,EAAA,GACAA,EAAA,QAAA4vB,EAAAC,IA2HA,SAAAG,EAAA/oB,EAAAgpB,GAGA,OADAA,KAAA,EAAAvB,EAAA,KADAuB,EAAAhpB,IA5OA/C,KAAAgsB,YAAA,SAAA5H,GACA,IAAA1P,EAAA0P,EAAAa,eACA5B,EAAAtQ,EAAAkZ,cAAA7H,EAAA2G,SAAArW,EAAAuW,gBA1CA,SAAApB,EAAA4B,GAIA,GAHA5B,EAAAqC,gBACArC,EAAAxW,KAAAoY,EACA5B,EAAAsC,SACAtC,EAAAsC,KAAAtC,EAAAuC,QAGAvC,EAAAwC,IAAAxC,EAAAyC,OACAzC,EAAA0C,IAAA1C,EAAAwC,KAAAxC,EAAAxW,IACAwW,EAAAwC,MACAxC,EAAAsC,KAAA,GAEAtC,EAAAwC,KAAAxC,EAAAyC,MAAA,CACA,QAAA7wB,EAAA,EAAyBA,EAAAouB,EAAAyC,KAAY7wB,GAAA,EACrCouB,EAAA0C,IAAA9wB,EAAA,GAAAouB,EAAA0C,IAAA9wB,GAEAouB,EAAAuC,MAAA,EACAvC,EAAAwC,KAAA,GA0BAG,CAAA9X,EAAA+X,eAAApJ,IAwHArjB,KAAA0sB,UAAA,SAAAxmB,GACA,IAAAymB,EAAA,IAAAC,WACAlC,EAAA,EACAiC,EAAAE,MAAA,EACA,IAAAC,EAAA5mB,EAAAwkB,EAAA,QACAqC,EAAA7mB,EAAAwkB,EAAA,QACAsC,EAAA9mB,EAAAwkB,EAAA,QACAuC,EAAA/mB,EAAAwkB,EAAA,SAQA,GAPAuC,EAAAla,EAAAkZ,cAAAa,GAAAG,GACA/mB,EAAAwkB,EAAA,UAAAiC,EAAAO,SAAAna,EAAAoa,iBAAA,GAAAJ,GAAkGJ,EAAAO,SAAAna,EAAAoa,iBAAAL,GAAAC,IAzElG,SAAA7mB,EAAAwkB,GACA,WAAA7e,OAAA3F,EAAAwkB,EAAAJ,EAAA5uB,SAAA2uB,GAAA+C,OAAA9C,IAAA,IAAAze,OAAA3F,EAAAwkB,EAAAH,EAAA7uB,SAAA2uB,GAAA+C,OAAA7C,GA8EA8C,CAAAnnB,EAJAwkB,GADA,GAAAoC,EACA,GAAAE,EAAA,GAAsD,GAEtD,GAAAA,EAAA,GAAsD,IAEtD,YACAtC,GAAA,EACAiC,EAAAG,MACA,IAAAQ,EAAAX,EAAAE,MAAApC,EAAAvkB,EAAAwkB,GAUA,GATAA,GAAA,EACA,IAtOA,EAsOA4C,KACAX,EAAAY,OAAA9C,EAAAvkB,EAAAwkB,GACAA,GAAA,GAEA,IAzOA,EAyOA4C,KACAX,EAAAa,MAAA/C,EAAAvkB,EAAAwkB,GACAA,GAAA,GAEA,IA5OA,EA4OA4C,GAAA,CACA,SAAAX,EAAAc,IACA,QAAAhyB,EAAA,EAA2BA,EAAAsuB,EAAmBtuB,IAC9CkxB,EAAAc,IAAAhyB,GAAAyK,EAAAwkB,EAAAjvB,GAGAivB,GAAAX,EAEA4C,EAAAe,UAAA,EACA,IApPA,EAoPAJ,KACAX,EAAAe,SAAAjD,EAAAvkB,EAAAwkB,GACAA,GAAA,GAEAiC,EAAAgB,WAAA,MAAAb,EAAA,GAAAG,EAAAN,EAAAO,SAEA,IAAAU,EAAA1nB,GADAwkB,GAAA,IACA,MACAkD,GAAA1nB,EAAAwkB,EAAA,MACA,IAAAmD,GAAA,GAAA3nB,EAAAwkB,EAAA,OAMA,OAJAkD,EAAA,GAAAA,EAAA,OAAAA,GAAA,KADAC,GAAA,IAAA3nB,EAAAwkB,EAAA,IAEA,GAAAmD,EAAA,OAAAA,GAAA,GACAlB,EAAAiB,WACAjB,EAAAkB,aACAlB,GAOA3sB,KAAA8tB,WAAA,SAAA1J,GACA,IAgBA2J,EAhBArZ,EAAA0P,EAAAa,eAkBA8I,EADA,GAAA3J,EAAA2G,QACAb,EAEA9F,EAAAoE,eAAA,KAAA4B,EAAuED,EAEvE/F,EAAAG,KAAAxU,EAAAwX,UAAAwG,EAAA3J,EAAAgC,OACA,IAAA4H,EAAA,MAAA5J,EAAA2G,QAAA,GAAAgD,EAAA3J,EAAAoE,eACAyF,EAAAvZ,EAAA4T,aAAA2B,EAEA,GADAvV,EAAA+X,eAAAyB,eAAAF,EACAA,EAAAC,GAAAD,EAAAhE,EACA5F,EAAA+J,cAAA,MADA,CAIAzZ,EAAA+X,eAAAP,cAAA,EACAxX,EAAA+X,eAAA2B,cAAA,EACA1Z,EAAA+X,eAAApZ,IAAA,EACAqB,EAAA+X,eAAAN,KAAA,EACAzX,EAAA+X,eAAAL,KAAA,EACA1X,EAAA+X,eAAAJ,IAAA,EACA,MAAA3X,EAAA+X,eAAAF,MACA7X,EAAA+X,eAAAF,IAAA,IAAAhG,IAAA,KACA7R,EAAA+X,eAAAH,KAAA,KAEA,IAAAxwB,EAAA0R,EAAAwc,GACAc,EAAA1G,EAAAtoB,GAEA,IADA,IAAAoQ,EAAAwI,EAAA+X,eAAAyB,eACAzyB,EAAA,EAAuBA,EAAAyQ,IAAOzQ,EAC9BssB,EAAAsG,eAAAjK,EAAA,IAAAtoB,EAAAL,GAAA,KAcAuE,KAAAsuB,eAAA,SAAAvC,EAAAjwB,EAAAyyB,EAAAjC,GACA,QAAA7wB,EAAA,EAAuBA,EAAA6wB,IAAU7wB,EACjCswB,EAAA,GAAAD,EAAAhwB,EAAAyyB,EAAA9yB,GAAAswB,EAAA,KAsKA/rB,KAAAwuB,gBAAA,SAAApK,EAAAtoB,GACA,IAAA4Y,EAAA0P,EAAAa,eACA,IAAAb,EAAA+J,aACA,SAEA,GAAAzZ,EAAA+Z,UAAAhI,EAAAiI,QACA,SAEA,GAAAha,EAAA+X,eAAAJ,KAAA,EACA,SAEA,GAAAvwB,EAAAJ,OAAAgZ,EAAA+X,eAAAyB,eACA,OAAAxZ,EAAA+X,eAAAyB,eAEAzf,EAAAC,KAAA5S,EAAA,EAAA4Y,EAAA+X,eAAAyB,eAAA,GACApD,EAAA1G,EAAAtoB,GACA,IAAA2xB,EAAAjgB,EAAAuc,GACA,GAAA3F,EAAAwH,YACA,QAAAnwB,EAAA,EAAyBA,EAAAsuB,IAAmBtuB,EAC5CgyB,EAAAhyB,GAAA,QAAAA,EAAA,SA/bA,SAAAouB,EAAAhW,GACA,KAAAgW,EAAAwC,KAAA,GACA,QAAA5wB,EAAA,EAAuBA,EAAAsuB,IAAmBtuB,EAAA,CAC1C,IAAAmc,EAAAnc,EAAAsuB,EAGA4E,EAAA,EAAAzxB,KAAA0xB,MAAAhX,EAAAiS,EAAAwC,KACAsC,EAAA9E,EAAAwC,IAAA,IAAAsC,EAAA9E,EAAAwC,IAAA,GAGA,IAAAwC,EAAA,MAFAhF,EAAA0C,IAAAoC,GACA9E,EAAAxW,IAEAwb,EAAA,MAAAA,EAAA,KACAhb,EAAApY,GAAA,IAAAozB,GAsbAC,CAAApa,EAAA+X,eAAAgB,GAEA,IAAAsB,EAAAra,EAAA4T,aAOAlE,EAAA4G,mBAAA+D,GAAA,GACA3K,EAAAG,KAAAxU,EAAAwX,SACAzrB,EAAAizB,KAAA,IAAAxE,EAAAyE,OAAA,GACAlzB,EAAAizB,KAAA,IAAAxE,EAAAyE,OAAA,GACAlzB,EAAAizB,KAAA,IAAAxE,EAAAyE,OAAA,GACAlzB,EAAAizB,KAAA,IAAAxE,EAAAyE,OAAA,KAEAlzB,EAAAizB,KAAA,IAAAzE,EAAA0E,OAAA,GACAlzB,EAAAizB,KAAA,IAAAzE,EAAA0E,OAAA,GACAlzB,EAAAizB,KAAA,IAAAzE,EAAA0E,OAAA,GACAlzB,EAAAizB,KAAA,IAAAzE,EAAA0E,OAAA,IAEArE,EAAA7uB,EAAAizB,EAAAE,IAEAtE,EAAA7uB,EADAizB,GAAA,EACAra,EAAA+X,eAAAP,eACA6C,GAAA,EACA,IAAAG,EAAAxa,EAAA+X,eAAA2B,cAAA1Z,EAAA+X,eAAAyB,eACAvD,EAAA7uB,EAAAizB,EAAA,EAAAG,GACAH,GAAA,EACAlgB,EAAAC,UAAA2e,EAAA,EAAA3xB,EAAAizB,EAAAtB,EAAA/xB,QACAqzB,GAAAtB,EAAA/xB,OACA0oB,EAAA4G,kBAEAjD,EAAAoH,gBAAAza,EAAA5Y,GAEA,IAAAiwB,EAAA,EACA,IAAAtwB,EAAA,EAAuBA,EAAAszB,EAAiBtzB,IACxCswB,EAAAD,EAAAhwB,EAAAL,GAAAswB,GAGA,OADAgD,GA/MA,SAAA3K,EAAAgL,EAAAC,EAAAC,EAAAvD,GACA,IAQAwD,EAUAC,EACAC,EAQA5C,EACA6C,EA5BAhb,EAAA0P,EAAAa,eACA0K,EAAA,EACA/B,EAAAxJ,EAAAwL,cACA/B,EAAAzJ,EAAAyL,gBACAC,EAAA,OAAA1L,EAAAQ,MAAAR,EAAA0L,QACA/E,EAAAlB,EAAAvZ,0BAIAyf,EAAA,gBACAC,EAAA,GAAA5L,EAAA6L,YAAA,eAAA7L,EAAA6L,YAAA,QACAC,EAAA,EACAC,EAAA,EAEAC,EAAAhM,EAAAa,eAAAqB,cACA+J,EAAA,EACAC,EAAA,EACAC,EAAA,EAGAC,EAAA,MAAApM,EAAAuB,eACA8K,EAAA,MAAArM,EAAAuB,eACA+K,GAAA,EACAC,GAAA,EACAC,EAAAxM,EAAAa,eAAA4L,YACAC,EAAA1M,EAAAa,eAAA8L,cACAC,EAAA5M,EAAA6M,QAGA,OAAA7M,EAAAG,KACA,KAAA2B,QACAwJ,EAAAtL,EAAA+B,sBACA,MACA,KAAAoB,QACAmI,EAAAtL,EAAAgC,MACA,MACA,QACAsJ,EAAAtL,EAAA8M,qBAyBA,OAtBA3B,EAAA,GADAnL,EAAAG,IAAAlV,UAAA0gB,EAAAr0B,OAAAq0B,EAAA3L,EAAAG,IAAAlV,WAAqG,GAErGqF,EAAAyc,iBACAzc,EAAA0c,UAAA,MAAA1c,EAAA0c,UAAA,KACA1c,EAAA0c,WAAA,MAAA1c,EAAA0c,WAAA,KACAjB,EAAA,KACAA,GAAA,KACAzb,EAAA0c,WAAA,EAEAjB,GAAAzb,EAAA0c,WAGAjB,GAAA,IACAA,IAAAzb,EAAA0c,YAGA1c,EAAA2c,iBAAAnB,EAAAhzB,KAAA4nB,IAAA,EAAApQ,EAAA4c,WAAA,MAAAp0B,KAAAq0B,IAAA,YACA,GAAAX,IACAE,EAAA,IAAAH,GAAA,GACAG,EAAAF,EAAA,IAAAF,GAAA,IAEA7D,EAAAmE,IAAAR,EAAA,WAAAC,EAAA,WAAAC,EAAA,WAAAC,EAAA,SACAb,EAAA,IAAAA,EAAA,GACA1L,EAAAgH,MACA,KAAAoG,KACAnB,EAAA,EACA,MACA,KAAAoB,OACApB,EAAA,EACA,MACA,KAAAqB,aACArB,EAAA,EACA,MACA,KAAAsB,aACAtB,EAAAjM,EAAAwN,SAAA,EAA6C,EAC7C,MACA,KAAAC,QACA,QACAxB,EAAA,EAGAE,EAAAnM,EAAA0N,eAAA,OAA0D,MAAA1N,EAAA0N,cAAA,EAAuD1N,EAAA0N,cAAA,OAEjH,GAGA1N,EAAA2N,cAAA3iB,EAAAS,oBAAAuU,EAAA2N,cAAA3iB,EAAAQ,wBAAA,GAAAwU,EAAA6L,cAAA,GAAA7L,EAAA4N,cAAA5N,EAAA6N,WAAA7N,EAAA8N,aAAA9N,EAAA6N,WAAA7N,EAAA8N,aAAA9N,EAAAiC,mBAAAjC,EAAAgC,MAAA,KAAAhC,EAAA+N,OAAA/N,EAAAgO,SAAA,GAAApB,GAAA5M,EAAA0N,eAAA,QAAAxB,EAAA,GACAd,EAAAY,GAAAC,GAAA,IAAAC,GAAA,IAAAC,GAAA,GACAd,EAAA/a,EAAA2d,UACA1H,EAAA0E,EAAAC,EAAAK,EAAAG,GACAH,GAAA,EACA,QAAA/X,EAAA,EAAuBA,EAAA,EAAOA,IAC9ByX,EAAAC,EAAAK,EAAA/X,GAAA,IAAAmT,EAAAiE,OAAApX,GAGAyX,EAAAC,GADAK,GAAA,IACA,IAAAJ,EAEAF,EAAAC,KADAK,GACA,IAAAK,EAEArF,EAAA0E,EAAAC,KADAK,EACAO,GAEAtF,EAAAyE,EAAAC,GADAK,GAAA,GACAQ,GAEAvF,EAAAyE,EAAAC,GADAK,GAAA,GAxFA,GA2FAN,EAAAC,GADAK,GAAA,IACA,IAAA9C,EAEAwC,EAAAC,KADAK,GACAD,GAAA,QAAmF,IAAAA,EAEnFL,EAAAC,KADAK,GACA,IAAA/B,GAAA,EACAyB,EAAAC,EAAAK,EAAA,QAAA/B,GAAA,IAAAC,GAAA,GACAwB,EAAAC,EAAAK,EAAA,OAAA9B,EAEAwB,EAAAC,GADAK,GAAA,IACA,IAAAH,EACAG,IACAN,EAAAC,EAAAK,KAAA,EACA/E,EAAAyE,EAAAC,EAAAK,EAAAvL,EAAA0B,QAEA6E,EAAA0E,EAAAC,GADAK,GAAA,GACAP,GAEAxE,EAAAyE,EAAAC,GADAK,GAAA,GACAF,GACAE,GAAA,EAEA,QAAAl0B,EAAA,EAAuBA,EAAAk0B,EAAkBl0B,IACzCswB,EAAAD,EAAAuD,EAAAC,EAAA7zB,GAAAswB,GAIA,OAFAnB,EAAAyE,EAAAC,EAAAK,EAAA5D,GACA4D,GAAA,EAgFA2C,CAAAlO,EAAA8K,EAAApzB,EAAAizB,EAAAhD,GACArX,EAAA+X,eAAAyB,gBAYAluB,KAAAuyB,UAAA,SAAAnO,EAAApjB,GAEA,GADAojB,EAAAa,eACAwH,eAAAJ,KAAA,WAEA,GADArrB,EAAAwxB,KAAAxxB,EAAAtF,UACA,GAAAsF,EAAAtF,SAAA,SAGA,IAAA+2B,EAjGA,SAAAC,GAEAA,EAAAF,KAAA,GACA,IAAAG,EAAAnlB,EAAA,IAYA,OAXAklB,EAAAE,UAAAD,GAEA,IAAA9mB,OAAA8mB,EAAA,cAAAE,WAAA,OAOA,IAFA,IAAAF,EAAA,aAAAA,EAAA,aAAAA,EAAA,WAAAA,EAAA,IAAAA,EAAAj3B,OAsFAo3B,CAAA9xB,GACAA,EAAAwxB,KAAAC,GACA,IAAA32B,EAAA0R,EAAAwc,GACAwD,EAAAgB,gBAAApK,EAAAtoB,GACA,OAAA0xB,EAAA1xB,EAAAJ,QACA,EAEA8xB,EAAA,EACA,GAEAxsB,EAAA+xB,MAAAj3B,EAAA,EAAA0xB,GACA,IASA,SAAAwF,IACA,IAAA9yB,EAAAF,KACAizB,EAAA,MAQAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KAEArzB,KAAAgR,WAAA,SAAAsiB,EAAAC,EAAAC,EAAAC,GACAP,EAAAI,EACAH,EAAAI,EACAH,EAAAI,EACAH,EAAAI,GAIA,IAAAvtB,EAAA,KAGAwtB,EAAA,EAGAC,EAAA,EAGAC,EAAA,EAUA,SAAAC,EAAAnf,GACA7F,EAAAC,UAAA4F,EAAAof,OAAApf,EAAAqf,OAAA7tB,IAAA,EAAAA,EAAAytB,EAAAjf,EAAA4T,cACAqL,GAAAjf,EAAA4T,aACAoL,GAAA,EAAAhf,EAAA4T,aACA5T,EAAAqf,MAAArf,EAAAqf,MAAA,EAAAC,EAAAC,eAAA,EAIA,SAAAC,EAAAxf,EAAA5H,EAAA8K,GACA,KAAAA,EAAA,IACA,IAAAqB,EACA,GAAA2a,IACAA,EAAA,EACAD,IACAjf,EAAAof,OAAApf,EAAAqf,OAAAI,cAAAT,GACAG,EAAAnf,GAEAxO,EAAAytB,GAAA,GAGA/b,GADAqB,EAAA/b,KAAAE,IAAAwa,EAAAgc,GAEAA,GAAA3a,EACA/S,EAAAytB,IAAA7mB,GAAA8K,GAAAgc,EACAF,GAAAza,GAKA,SAAAmb,EAAA1f,EAAA5H,EAAA8K,GACA,KAAAA,EAAA,IACA,IAAAqB,EACA,GAAA2a,IACAA,EAAA,EAEA1tB,IADAytB,GACA,GAGA/b,GADAqB,EAAA/b,KAAAE,IAAAwa,EAAAgc,GAEAA,GAAA3a,EACA/S,EAAAytB,IAAA7mB,GAAA8K,GAAAgc,EACAF,GAAAza,GAQA,SAAAob,EAAAjQ,EAAAkQ,GACA,IACA74B,EADAiZ,EAAA0P,EAAAa,eAkBA,GAhBAqP,GAAA,IACAJ,EAAAxf,EAAA,MACA4f,GAAA,GAEAA,GAAA,IACAJ,EAAAxf,EAAA,MACA4f,GAAA,GAEAA,GAAA,IACAJ,EAAAxf,EAAA,MACA4f,GAAA,GAEAA,GAAA,IACAJ,EAAAxf,EAAA,MACA4f,GAAA,GAEAA,GAAA,IACA,IAAAvJ,EAAAqI,EAAA/iB,sBACA,GAAAikB,GAAA,OAAA74B,EAAA,EAA8CA,EAAAsvB,EAAArvB,QAAA44B,GAAA,IAA0C74B,EACxF64B,GAAA,EACAJ,EAAAxf,EAAAqW,EAAAiE,OAAAvzB,GAAA,GAGA,KAAc64B,GAAA,EAAoBA,GAAA,EAClCJ,EAAAxf,IAAA6f,eAAA,GACA7f,EAAA6f,gBAAAnQ,EAAAiC,kBAAA,IAKA,SAAAmO,EAAA9f,EAAA5H,EAAA8K,GAEA,IADA,IAAA6c,EAAA/f,EAAAof,OAAApf,EAAAggB,OAAAD,IACA7c,EAAA,IACA,IAAAqB,EAAA/b,KAAAE,IAAAwa,EAAA,KAAA6c,IACA7c,GAAAqB,EACAvE,EAAAof,OAAApf,EAAAggB,OAAAxuB,IAAAuuB,GAAA,IAAA3nB,GAAA8K,GAAA,KAAA6c,GAAAxb,EACAwb,GAAAxb,EAEAvE,EAAAof,OAAApf,EAAAggB,OAAAD,MAEA,SAAAE,EAAA5xB,EAAAgpB,GACAhpB,IAAA,EACA,QAAAtH,EAAA,EAAuBA,EAAA,EAAOA,IAG9B,YADAswB,IAAA,IADAhpB,IAAA,OAEAgpB,GAAAkH,GAEA,OAAAlH,EA8HA,SAAA6I,EAAAlgB,EAAAE,GACA,IACAnZ,EADAo5B,EAAA9hB,EAAAC,GAAA4B,EAAA6B,mBAAA,IAEA1F,EAAA,EACAS,EAAAoD,EAAAM,WACA5D,EAAAsD,EAAAM,WACA,IAAAzZ,GAAAmZ,EAAAwB,OAAAxB,EAAAM,YAAA,EAAiDzZ,EAAA,IAAOA,EAAA,CACxD,IAAAq5B,EAAA,EACAxe,EAAA,EAGA,GADA1B,EAAAqB,OAAAzE,EAAA,KAEA8E,GAAA,EACA1B,EAAAtD,KAAA,MAAAwjB,KAGA,GADAlgB,EAAAqB,OAAAzE,EAAA,KAEA8E,GAAA,EACAwe,GAAA,EACAlgB,EAAAtD,KAAA,MAAAwjB,KAGA,GADAlgB,EAAAqB,OAAAzE,EAAA,KAEA8E,GAAA,EACAwe,GAAA,EACAlgB,EAAAtD,KAAA,MAAAwjB,KAGA,GADAlgB,EAAAqB,OAAAzE,EAAA,KAEA8E,IACAwe,GAAA,EACAlgB,EAAAtD,KAAA,MAAAwjB,KAEAtjB,GAAA,EACAF,GAAA,EACA4iB,EAAAxf,EAAAogB,EAAAD,EAAAE,MAAAze,GAAAue,EAAA5hB,KAAAqD,IACAvF,GAAA8jB,EAAA5hB,KAAAqD,GAEA,OAAAvF,EAIA,SAAAikB,EAAAtgB,EAAAugB,EAAAnxB,EAAA8O,EAAAgC,GACA,IAAAigB,EAAA9hB,EAAAC,GAAAiiB,GACAlkB,EAAA,EACA,MAAAkkB,EAAA,OAAAlkB,EACA,QAAAtV,EAAAqI,EAA2BrI,EAAAmX,EAASnX,GAAA,GACpC,IAAAy5B,EAAA,EACAC,EAAA,EACA7gB,EAAAugB,EAAAvhB,KACAA,EAAAuhB,EAAAvhB,KACA8hB,EAAA,EACAtjB,EAAA8C,EAAAqB,OAAAxa,GACAsW,EAAA6C,EAAAqB,OAAAxa,EAAA,GACA,GAAAqW,IACA8C,EAAAtD,GAAA7V,GAAA,GAAA25B,IACAF,KAEAD,EAAA,KACAnjB,EAAA,KAEAsjB,GADAtjB,EAAA,IACA,EACAqjB,EAAA7gB,EACAxC,EAAA,IAEAC,EAAA,KAEAqjB,IAAA9gB,EACA8gB,GAFArjB,EAAA,GAGAojB,GAAA7gB,EACAvC,EAAA,IAEAuB,EAAA,IAEA,GAAAvB,IACAqjB,IAAA,EACAxgB,EAAAtD,GAAA7V,EAAA,MAAA25B,IACAF,KAEApjB,IAAAwB,EAAAvB,EACAojB,GAAAD,EACAA,GAAAL,EAAA5hB,KAAAnB,GACAoiB,EAAAxf,EAAAmgB,EAAAE,MAAAjjB,GAAAojB,GACAhB,EAAAxf,EAAA0gB,EAAAD,GACApkB,GAAAmkB,EAAAC,EAEA,OAAApkB,EAKA,SAAAskB,EAAA3gB,EAAAE,GACA,IAAA0gB,EAAA,EAAA5gB,EAAAa,cAAAtY,EAAA,GACAq4B,EAAA1gB,EAAAM,aAAAogB,EAAA1gB,EAAAM,YACA,IAAAnE,EAAAikB,EAAAtgB,EAAAE,EAAAkB,aAAA,KAAAwf,EAAA1gB,GAEA,OADA7D,GAAAikB,EAAAtgB,EAAAE,EAAAkB,aAAA,GAAAwf,EAAA1gB,EAAAM,WAAAN,GAGA,SAAA2gB,EAAA7gB,EAAAE,GACA,IAAA4gB,EAAAzkB,EACAukB,EAAAG,EACAD,EAAA5gB,EAAAM,WACA,IAAAzZ,EAAAmZ,EAAAgB,cAAA,EASA,OARA0f,EAAA5gB,EAAAa,cAAAnE,EAAA3V,GACAA,GAAAmZ,EAAAiB,cAAA,EAEAyf,EAAAE,IAAAF,EAAAE,IADAC,EAAA/gB,EAAAa,cAAAnE,EAAA3V,IAEA+5B,IAAAC,EAAAD,GACAzkB,EAAAikB,EAAAtgB,EAAAE,EAAAkB,aAAA,KAAAwf,EAAA1gB,GACA7D,GAAAikB,EAAAtgB,EAAAE,EAAAkB,aAAA,GAAAwf,EAAAG,EAAA7gB,GACA7D,GAAAikB,EAAAtgB,EAAAE,EAAAkB,aAAA,GAAA2f,EAAAD,EAAA5gB,GA4EA,SAAA8gB,IACA11B,KAAA21B,MAAA,EAcA,SAAAC,EAAAxR,EAAAyR,GACA,IACAC,EAAAC,EACAC,EACAC,EAAAC,EAHAxhB,EAAA0P,EAAAa,eA0BA,OAtBAiR,EAAAxhB,EAAAqf,OAEA,IADAkC,EAAAvhB,EAAAggB,MAAA,KACAuB,EAAAjC,EAAAC,eAAA,GACA6B,EAAAphB,EAAAof,OAAAmC,GAAA9B,aAAAT,EACAmC,EAAAF,MAAAG,EACAA,GAAA,IACAC,EAAA,EAAAE,EAAAC,EACAD,EAAAC,IAAAH,EAAA,EAAAE,EAAAC,EAAAlC,EAAAC,gBACA6B,GAAA,EAAAC,EAAArhB,EAAA4T,cAOAwN,GADAE,EAAA91B,EAAAmoB,aAAAjE,GAEAyR,EAAAF,OAAAK,EACAH,EAAAF,MAAA,KAAAE,EAAAF,MAAA,EAAAE,EAAAF,MAAA,EAA2GE,EAAAF,MAAAE,EAAAF,MAAA,EAC3GE,EAAAF,OAAAhC,EAAA,EACAmC,EAAA,GACAjnB,EAAA1N,IAAAg1B,QAAA,wCAEAL,EA3cA91B,KAAAqoB,aAAA,SAAAjE,GACA,IACAgS,EADA1hB,EAAA0P,EAAAa,eAIA,OAFAmR,EAAA,GAAA1hB,EAAAuW,cAAAlY,EAAAkZ,cAAA7H,EAAA2G,SAAArW,EAAAuW,eAAoG7G,EAAAgC,MAEpG,GADA,QAAAhC,EAAA2G,QAAA,GAAAqL,EAAAhS,EAAAoE,eAAA9T,EAAA2hB,UAuGAr2B,KAAAmvB,gBAAA,SAAAza,EAAAof,GACA,IAAA/H,EAAA,MACAA,EAAA4I,EAAA,IAAAb,EAAA,GAAA/H,GACAA,EAAA4I,EAAA,IAAAb,EAAA,GAAA/H,GACA,QAAAtwB,EAAA,EAAuBA,EAAAiZ,EAAA4T,aAAsB7sB,IAC7CswB,EAAA4I,EAAA,IAAAb,EAAAr4B,GAAAswB,GAEA+H,EAAA,GAAAwC,KAAAvK,GAAA,GACA+H,EAAA,GAAAwC,KAAA,IAAAvK,IA0VA/rB,KAAAu2B,gBAAA,SAAAnS,GACA,IACAjK,EACA2b,EAFAphB,EAAA0P,EAAAa,eAGAgR,EAAAvhB,EAAAggB,MAAA,EAGA,IAFA,GAAAuB,MAAAjC,EAAAC,eAAA,GACA9Z,EAAAzF,EAAAyF,WACA2b,EAAAF,EAAAxR,EAAA,IAAAsR,IAAA,IAOA,GANArB,EAAAjQ,EAAA0R,GAIAphB,EAAAkU,SAAA,EACAzO,EAAAwP,gBAAA,EACAjV,EAAAyc,eAAA,CACA,IAAAC,EAAA8B,EAAArS,aAAAnM,EAAA8hB,QACA9hB,EAAA0c,UAAA,EAAAl0B,KAAA0xB,MAAA,GAAAwC,EAAA,IAEA1c,EAAA2c,iBACA3c,EAAA+hB,iBAAA,EAAAv5B,KAAAikB,KAAA,GAAAjkB,KAAAsS,MAAAkF,EAAA4c,WAAA,WACA5c,EAAA+hB,iBAAA,IACAC,GAAAtS,EAAAP,MAAA,IAAA6S,GAAAtS,EAAAP,MAAA,IAAAnP,EAAAiiB,YAAAz5B,KAAA0xB,MAAA,MAAAla,EAAA4c,WAAA,SAUW5c,EAAAiiB,aAAA,KAGX32B,KAAAquB,eAAA,SAAAjK,EAAAtX,EAAAZ,GAGA,IAFA,IACAzQ,EADAiZ,EAAA0P,EAAAa,eAEA/Y,KAAA,GAEA,IADAkoB,EAAA1f,EAAA5H,EAAA,GACArR,EAAA,EAAqBA,EAAAu4B,EAAAC,iBAAsCx4B,EAC3DiZ,EAAAof,OAAAr4B,GAAA04B,cAAA,GAUAn0B,KAAA42B,iBAAA,SAAAxS,GACA,IACAjK,EADAzF,EAAA0P,EAAAa,eAEA9K,EAAAzF,EAAAyF,QACA,IAAA6b,EAAAh2B,KAAAqoB,aAAAjE,GACAiQ,EAAAjQ,EAAAjK,EAAA0O,eA/YA,SAAAzE,EAAA4R,GACA,IACA7b,EACAF,EAAAC,EAFAxF,EAAA0P,EAAAa,eAsBA,GAnBA9K,EAAAzF,EAAAyF,QACAzF,EAAAof,OAAApf,EAAAggB,OAAAD,IAAA,EACAhmB,EAAAC,KAAAgG,EAAAof,OAAApf,EAAAggB,OAAAxuB,IAAA,EAAAwO,EAAA4T,aAAA,GACAlE,EAAAoE,eAAA,KAAAgM,EAAA9f,EAAA,SAAoE8f,EAAA9f,EAAA,SACpE8f,EAAA9f,EAAA0P,EAAA2G,QAAA,GACAyJ,EAAA9f,EAAA,KACA8f,EAAA9f,EAAA0P,EAAA4G,iBAAA,OACAwJ,EAAA9f,IAAAuW,cAAA,GACAuJ,EAAA9f,IAAAwW,iBAAA,GACAsJ,EAAA9f,IAAA2hB,QAAA,GACA7B,EAAA9f,EAAA0P,EAAA+G,UAAA,GACAqJ,EAAA9f,EAAA0P,EAAAgH,KAAA/b,UAAA,GACAmlB,EAAA9f,IAAA2W,SAAA,GACAmJ,EAAA9f,EAAA0P,EAAAkH,UAAA,GACAkJ,EAAA9f,EAAA0P,EAAAmH,SAAA,GACAiJ,EAAA9f,EAAA0P,EAAAoH,SAAA,GACApH,EAAA4G,kBACAwJ,EAAA9f,EAAA,MAEA,GAAA0P,EAAA2G,QAAA,CAGA,IAFAyJ,EAAA9f,EAAAyF,EAAAwP,gBAAA,GACA,GAAAjV,EAAAmiB,aAAArC,EAAA9f,EAAAyF,EAAA2c,aAAA,GAA+EtC,EAAA9f,EAAAyF,EAAA2c,aAAA,GAC/E5c,EAAA,EAAsBA,EAAAxF,EAAAmiB,aAAuB3c,IAAA,CAC7C,IAAA6c,EACA,IAAAA,EAAA,EAA0BA,EAAA,EAAUA,IACpCvC,EAAA9f,EAAAyF,EAAAI,MAAAL,GAAA6c,GAAA,GAGA,IAAA9c,EAAA,EAAsBA,EAAA,EAAQA,IAC9B,IAAAC,EAAA,EAAwBA,EAAAxF,EAAAmiB,aAAuB3c,IAE/Csa,EAAA9f,GADAE,EAAAuF,EAAAC,GAAAH,GAAAC,IACAzE,eAAAb,EAAAmG,aAAA,IACAyZ,EAAA9f,EAAAE,EAAAM,WAAA,KACAsf,EAAA9f,EAAAE,EAAAwC,YAAA,GACAod,EAAA9f,EAAAE,EAAAoG,kBAAA,GACApG,EAAA8B,YAAAtB,EAAAwB,WACA4d,EAAA9f,EAAA,KACA8f,EAAA9f,EAAAE,EAAA8B,WAAA,GACA8d,EAAA9f,EAAAE,EAAA8G,iBAAA,GACA,IAAA9G,EAAAkB,aAAA,KAAAlB,EAAAkB,aAAA,OACA0e,EAAA9f,EAAAE,EAAAkB,aAAA,MACA,IAAAlB,EAAAkB,aAAA,KAAAlB,EAAAkB,aAAA,OACA0e,EAAA9f,EAAAE,EAAAkB,aAAA,MACA0e,EAAA9f,EAAAE,EAAA+D,cAAA,MACA6b,EAAA9f,EAAAE,EAAA+D,cAAA,MACA6b,EAAA9f,EAAAE,EAAA+D,cAAA,QAEA6b,EAAA9f,EAAA,KACA,IAAAE,EAAAkB,aAAA,KAAAlB,EAAAkB,aAAA,OACA0e,EAAA9f,EAAAE,EAAAkB,aAAA,MACA,IAAAlB,EAAAkB,aAAA,KAAAlB,EAAAkB,aAAA,OACA0e,EAAA9f,EAAAE,EAAAkB,aAAA,MACA,IAAAlB,EAAAkB,aAAA,KAAAlB,EAAAkB,aAAA,OACA0e,EAAA9f,EAAAE,EAAAkB,aAAA,MACA0e,EAAA9f,EAAAE,EAAAgB,cAAA,GACA4e,EAAA9f,EAAAE,EAAAiB,cAAA,IAEA2e,EAAA9f,EAAAE,EAAA4D,QAAA,GACAgc,EAAA9f,EAAAE,EAAA8D,eAAA,GACA8b,EAAA9f,EAAAE,EAAA6B,mBAAA,QAOA,IAHA+d,EAAA9f,EAAAyF,EAAAwP,gBAAA,GACA6K,EAAA9f,EAAAyF,EAAA2c,aAAApiB,EAAAmiB,cACA5c,EAAA,EACAC,EAAA,EAAsBA,EAAAxF,EAAAmiB,aAAuB3c,IAAA,CAC7C,IAAAtF,EACA4f,EAAA9f,GADAE,EAAAuF,EAAAC,GAAAH,GAAAC,IACAzE,eAAAb,EAAAmG,aAAA,IACAyZ,EAAA9f,EAAAE,EAAAM,WAAA,KACAsf,EAAA9f,EAAAE,EAAAwC,YAAA,GACAod,EAAA9f,EAAAE,EAAAoG,kBAAA,GACApG,EAAA8B,YAAAtB,EAAAwB,WACA4d,EAAA9f,EAAA,KACA8f,EAAA9f,EAAAE,EAAA8B,WAAA,GACA8d,EAAA9f,EAAAE,EAAA8G,iBAAA,GACA,IAAA9G,EAAAkB,aAAA,KAAAlB,EAAAkB,aAAA,OACA0e,EAAA9f,EAAAE,EAAAkB,aAAA,MACA,IAAAlB,EAAAkB,aAAA,KAAAlB,EAAAkB,aAAA,OACA0e,EAAA9f,EAAAE,EAAAkB,aAAA,MACA0e,EAAA9f,EAAAE,EAAA+D,cAAA,MACA6b,EAAA9f,EAAAE,EAAA+D,cAAA,MACA6b,EAAA9f,EAAAE,EAAA+D,cAAA,QAEA6b,EAAA9f,EAAA,KACA,IAAAE,EAAAkB,aAAA,KAAAlB,EAAAkB,aAAA,OACA0e,EAAA9f,EAAAE,EAAAkB,aAAA,MACA,IAAAlB,EAAAkB,aAAA,KAAAlB,EAAAkB,aAAA,OACA0e,EAAA9f,EAAAE,EAAAkB,aAAA,MACA,IAAAlB,EAAAkB,aAAA,KAAAlB,EAAAkB,aAAA,OACA0e,EAAA9f,EAAAE,EAAAkB,aAAA,MACA0e,EAAA9f,EAAAE,EAAAgB,cAAA,GACA4e,EAAA9f,EAAAE,EAAAiB,cAAA,IAEA2e,EAAA9f,EAAAE,EAAA8D,eAAA,GACA8b,EAAA9f,EAAAE,EAAA6B,mBAAA,GAGA2N,EAAA4G,kBACAmE,gBAAAza,IAAAof,OAAApf,EAAAggB,OAAAxuB,KAGA,IAAA8wB,EAAAtiB,EAAAggB,MACAhgB,EAAAggB,MAAAsC,EAAA,EAAAhD,EAAAC,eAAA,EACAvf,EAAAof,OAAApf,EAAAggB,OAAAP,aAAAzf,EAAAof,OAAAkD,GAAA7C,aAAA6B,EACAthB,EAAAggB,OAAAhgB,EAAAqf,OACAllB,EAAA1N,IAAAg1B,QAAA,qDAkSAc,CAAA7S,EAAA4R,GACA,IAAAjlB,EAAA,EAAA2D,EAAA4T,aAsBA,GArBAvX,GA/KA,SAAAqT,GACA,IAAAnK,EACAC,EACAlD,EACAkgB,EACAC,EAAA,EACAziB,EAAA0P,EAAAa,eACA9K,EAAAzF,EAAAyF,QACA,MAAAiK,EAAA2G,QACA,IAAA9Q,EAAA,EAAkCA,EAAA,EAAQA,IAC1C,IAAAC,EAAA,EAAwBA,EAAAxF,EAAAmiB,aAAuB3c,IAAA,CAC/C,IAAAtF,EAAAuF,EAAAC,GAAAH,GAAAC,GACAmC,EAAA1L,EAAAmJ,UAAAlF,EAAAoG,mBACAsB,EAAA3L,EAAAoJ,UAAAnF,EAAAoG,mBAEA,IADAkc,EAAA,EACAlgB,EAAA,EAA2BA,EAAApC,EAAA+G,UAAoB3E,KAC/C,GAAApC,EAAA2D,SAAAvB,KACAkd,EAAAxf,EAAAE,EAAA2D,SAAAvB,GAAAqF,GACA6a,GAAA7a,GAEA,KAAoBrF,EAAApC,EAAA8C,OAAiBV,KACrC,GAAApC,EAAA2D,SAAAvB,KACAkd,EAAAxf,EAAAE,EAAA2D,SAAAvB,GAAAsF,GACA4a,GAAA5a,GAEA1H,EAAA8B,YAAAtB,EAAAuB,WACAugB,GAAA7B,EAAA3gB,EAAAE,GAEAsiB,GAAA3B,EAAA7gB,EAAAE,GAGAuiB,GADAD,GAAAtC,EAAAlgB,EAAAE,QAMA,IADAqF,EAAA,EACAC,EAAA,EAAsBA,EAAAxF,EAAAmiB,aAAuB3c,IAAA,CAC7C,IACAze,EACA27B,EACAC,EAAA,EAIA,GAHAH,EAAA,EACAlgB,EAAA,EACAogB,EAAA,GANAxiB,EAAAuF,EAAAC,GAAAH,GAAAC,IAOAxD,YAAAtB,EAAAuB,WAAA,CACA,KAAoBygB,EAAA,EAAmBA,IAAA,CACvC,IAAAE,EAAA1iB,EAAA6H,oBAAA2a,GAAA,EACA1a,EAAA9H,EAAA8H,KAAA0a,GACA,IAAA37B,EAAA,EAA2BA,EAAA67B,EAAU77B,IAAAub,IACrCkd,EAAAxf,EAAAxX,KAAAC,IAAAyX,EAAA2D,SAAA,EAAAvB,EAAA,MAAA0F,GACAwX,EAAAxf,EAAAxX,KAAAC,IAAAyX,EAAA2D,SAAA,EAAAvB,EAAA,MAAA0F,GACAwX,EAAAxf,EAAAxX,KAAAC,IAAAyX,EAAA2D,SAAA,EAAAvB,EAAA,MAAA0F,GACA2a,GAAA,EAAA3a,EAGAwa,GAAA7B,EAAA3gB,EAAAE,OACa,CACb,KAAoBwiB,EAAA,EAAmBA,IAGvC,IAFAE,EAAA1iB,EAAA6H,oBAAA2a,GACA1a,EAAA9H,EAAA8H,KAAA0a,GACA37B,EAAA,EAA2BA,EAAA67B,EAAU77B,IAAAub,IACrCkd,EAAAxf,EAAAxX,KAAAC,IAAAyX,EAAA2D,SAAAvB,GAAA,GAAA0F,GACA2a,GAAA3a,EAGAwa,GAAA3B,EAAA7gB,EAAAE,GAGAuiB,GAAAE,GADAH,GAAAtC,EAAAlgB,EAAAE,IAIA,OAAAuiB,EAwGAI,CAAAnT,GACAiQ,EAAAjQ,EAAAjK,EAAAsP,gBACA1Y,GAAAoJ,EAAAsP,eACAtP,EAAAwP,kBAAAqM,EAAAjlB,GAAA,EAIA6kB,EAAAxR,EAAA,IAAAsR,IAAAhhB,EAAAkU,UACA/Z,EAAA1N,IAAAg1B,QAAA,wDAKA,EAAAhc,EAAAwP,iBAAAjV,EAAAkU,WACA/Z,EAAA1N,IAAAyb,OAAA,mSAAAzC,EAAAwP,gBAAAjV,EAAAkU,SAAAzO,EAAAsP,eAAAtP,EAAA0O,cAAA,EAAAnU,EAAA4T,aAAAvX,EAAAoJ,EAAAsP,eAAA,EAAA/U,EAAA4T,aAAAvX,IAAA,EAAAilB,GACAnnB,EAAA1N,IAAAg1B,QAAA,2DACAtnB,EAAA1N,IAAAg1B,QAAA,8EACAtnB,EAAA1N,IAAAg1B,QAAA,oCACAtnB,EAAA1N,IAAAg1B,QAAA,sCACAzhB,EAAAkU,SAAA,EAAAzO,EAAAwP,iBAEA+J,EAAA,KAKA,IAAAj4B,EACA,IAAAA,EAAA,EAAqBA,EAAAu4B,EAAAC,iBAAsCx4B,EAC3DiZ,EAAAof,OAAAr4B,GAAA04B,cAAAT,EAEAA,EAAA,EAEA,UAUA1zB,KAAAw3B,YAAA,SAAA9iB,EAAA5Y,EAAAyyB,EAAAjC,EAAAmL,GACA,IAAAC,EAAA/D,EAAA,EACA,GAAA+D,GAAA,WACA,MAAApL,GAAAoL,EAAApL,EACA,SAKA,GAHAzd,EAAAC,UAAA5I,EAAA,EAAApK,EAAAyyB,EAAAmJ,GACA/D,GAAA,EACAC,EAAA,EACA,GAAA6D,EAAA,CACA,IAAA1L,EAAAle,EAAA,GAUA,GATAke,EAAA,GAAArX,EAAA2d,UACAgB,EAAA/E,eAAAvC,EAAAjwB,EAAAyyB,EAAAmJ,GACAhjB,EAAA2d,UAAAtG,EAAA,GAIA2L,EAAA,IACAhjB,EAAA+X,eAAA2B,eAAAsJ,GAEAhjB,EAAAijB,kBAKA,IAJA,IAGAl8B,EAHAm8B,EAAA1pB,EAAA,UACA2pB,EAAAH,EACAI,GAAA,EAEA,GAAAA,GAkBA,GAjBAA,EAAA3E,EAAA4E,sBAAArjB,EAAAsjB,IAAAl8B,EAAAyyB,EAAAsJ,EAAAD,EAAA,GAAAA,EAAA,IASAC,EAAA,GACA,GAAAC,IAKAA,EAAA,GAEAA,EAAA,GAIA,GAAApjB,EAAA2c,eAAA,CACA,IAAA51B,EAAA,EAA6BA,EAAAq8B,EAAiBr8B,IAC9Cm8B,EAAA,GAAAn8B,GAAAiZ,EAAA4c,WAAA5c,EAAA4c,WAAAsG,EAAA,GAAAn8B,IAAuFm8B,EAAA,GAAAn8B,GAAAiZ,EAAA4c,aAAA5c,EAAA4c,YAAAsG,EAAA,GAAAn8B,IAEvF,GAAAiZ,EAAAmiB,aAAA,MAAAp7B,EAAA,EAAuDA,EAAAq8B,EAAiBr8B,IACxEm8B,EAAA,GAAAn8B,GAAAiZ,EAAA4c,WAAA5c,EAAA4c,WAAAsG,EAAA,GAAAn8B,IAAuFm8B,EAAA,GAAAn8B,GAAAiZ,EAAA4c,aAAA5c,EAAA4c,YAAAsG,EAAA,GAAAn8B,IAGvF,GAAAiZ,EAAAyc,gBAAA+B,EAAAvT,eAAAjL,EAAA8hB,OAAAoB,EAAA,KAAAA,EAAA,KAAAE,EAAApjB,EAAAmiB,eAAA7Z,EAAA0D,oBAAA,UAKA,OAAAgX,GAEA13B,KAAAi4B,kBAAA,SAAAvjB,GACAxO,EAAAsH,EAAAiZ,EAAAyR,mBACAxjB,EAAAggB,MAAAhgB,EAAAqf,MAAA,EACArf,EAAAof,OAAApf,EAAAggB,OAAAP,aAAA,EACAR,GAAA,EACAC,EAAA,EACAF,EAAA,GAGA,SAAAyE,EAAApX,EAAA5jB,EAAAoe,EAAA6c,GACAp4B,KAAAsT,KAAAyN,EACA/gB,KAAAoU,OAAAjX,EACA6C,KAAA+0B,MAAAxZ,EACAvb,KAAAiT,KAAAmlB,EA1gGAtoB,EAAAuoB,UAAA,aAIAtoB,EAAAwX,QAAA,IAAAxX,EAAA,GACAA,EAAAuoB,OAAA,IAAAvoB,EAAA,GACAA,EAAAyU,OAAA,IAAAzU,EAAA,GACAA,EAAAmW,QAAA,IAAAnW,EAAA,GACAA,EAAA6W,SAAA,IAAA7W,EAAA,GACAA,EAAAwoB,YAAAxoB,EAAA6W,SA4BA5W,EAAAyhB,OAAA,IAAAzhB,EAAA,GACAA,EAAA2hB,aAAA,IAAA3hB,EAAA,GACAA,EAAA0hB,aAAA,IAAA1hB,EAAA,GACAA,EAAAwhB,KAAA,IAAAxhB,EAAA,GACAA,EAAA6hB,QAAA,IAAA7hB,EAAA,GA0/BAgN,EAAA2D,aAAA,IAGA3D,EAAAwb,OAAA,IACAxb,EAAAiE,yBAAA,MACAjE,EAAA0D,oBAAA,EACA1D,EAAAyD,iBAAA,EACAzD,EAAA4B,yBAAA,EACA5B,EAAAkC,sBAAA,EACAlC,EAAAG,WAAA,GACAH,EAAAoB,UAAApB,EAAAG,WACAH,EAAAK,cAAA,KACAL,EAAAI,0BAAA,EACAJ,EAAAM,4BAAA,GACAN,EAAAQ,uBAAAR,EAAAK,cAAAL,EAAAI,0BAAAJ,EAAAM,4BAAA,EA4tBAsM,EAAAG,cAAA,IACAH,EAAAI,aAAA,KAulBAgJ,EAAA0D,GAAA,SAAAh3B,EAAAoR,GACA,OAAA5T,KAAA4nB,IAAAplB,GAAAxC,KAAA4nB,IAAAhU,GAAA5T,KAAA4nB,IAAAplB,EAAAoR,IAAA,KAAA5T,KAAA4nB,IAAAplB,GAAAxC,KAAA4nB,IAAAplB,EAAAoR,IAAA,KAAA5T,KAAA4nB,IAAAhU,IAEAkiB,EAAAyF,IAAA,SAAA/4B,EAAAoR,GACA,OAAAkiB,EAAA0D,GAAAh3B,EAAAoR,IAmqBA,IAAAiC,EAAA,GAoEA,SAAA2lB,EAAAC,GACA34B,KAAA+Q,KAAA4nB,EAEA,SAAAC,IAIA54B,KAAA64B,WAAA,EAGA74B,KAAA84B,UAAA,EAGA94B,KAAA+4B,UAAA,EAGA/4B,KAAAg5B,WAAA,EAGAh5B,KAAAi5B,SAAA,EACAj5B,KAAA+Q,KAAA,EAEA,SAAAmoB,IAGAl5B,KAAAgR,WAAA,SAAAC,EAAAkoB,KAQA,SAAAC,IAIAp5B,KAAAq5B,UAAA,EAIAr5B,KAAAs5B,eAAA,EAGAt5B,KAAAu5B,OAAA,EAGAv5B,KAAAw5B,YAAA,EAGAx5B,KAAAy5B,MAAA,EAGAz5B,KAAA4uB,MAAA,EAGA5uB,KAAAoR,EAAArD,EAAAqH,EAAAC,SAGArV,KAAA/C,EAAA8Q,EAAAqH,EAAAskB,SAGA15B,KAAA25B,OAAA5rB,EAAAqH,EAAAwkB,QAGA55B,KAAA65B,OAAA9rB,EAAAqH,EAAA0kB,QAGA95B,KAAA+5B,KAAAhsB,EAAAqH,EAAA4kB,QAGAh6B,KAAAi6B,KAAAlsB,EAAAqH,EAAA4kB,QAGAh6B,KAAAk6B,MAAAnsB,EAAAqH,EAAA+kB,QAAA,GAEA,SAAAC,IACAp6B,KAAAq6B,SAAA,EAGAr6B,KAAAggB,YAAA,EAGAhgB,KAAAigB,aAAA,EAGAjgB,KAAA8xB,cAAA,EAIA9xB,KAAAwoB,eAAA,EAIAxoB,KAAA6jB,MAAA,EAGA7jB,KAAAiyB,WAAA,EAGAjyB,KAAAkyB,YAAA,EAGAlyB,KAAAs6B,UAAA,EAGAt6B,KAAAmuB,cAAA,EAGAnuB,KAAAu6B,aAAA,EAGAv6B,KAAA8vB,QAAA,EAGA9vB,KAAAorB,KAAApb,EAAAyhB,OAGAzxB,KAAA4xB,UAAA,EAGA5xB,KAAA4rB,aAAA,EAGA5rB,KAAAmxB,gBAAA,EAGAnxB,KAAA23B,mBAAA,EAGA33B,KAAAw6B,wBAAA,EAMAx6B,KAAAomB,MAAA,EAGApmB,KAAAy6B,kBAAA,EAGAz6B,KAAAsrB,UAAA,EAGAtrB,KAAAurB,SAAA,EAGAvrB,KAAAmrB,UAAA,EAMAnrB,KAAAwrB,SAAA,EAGAxrB,KAAAgrB,iBAAA,EAGAhrB,KAAAyoB,YAAA,EAGAzoB,KAAAqmB,mBAAA,EACArmB,KAAAsiB,WAAA,EACAtiB,KAAA+kB,iBAAA,EACA/kB,KAAAglB,eAAA,EACAhlB,KAAA06B,cAAA,EACA16B,KAAA2lB,cAAA,EACA3lB,KAAA8lB,OAAA,EACA9lB,KAAAukB,IAAA,KAGAvkB,KAAAykB,WAAA,EAGAzkB,KAAA4kB,MAAA,EACA5kB,KAAAmmB,sBAAA,EACAnmB,KAAAkxB,qBAAA,EACAlxB,KAAA26B,qBAAA,EAIA36B,KAAA46B,aAAA,EAGA56B,KAAAiwB,YAAA,EAGAjwB,KAAAgyB,aAAA,EAGAhyB,KAAA66B,aAAA,EAGA76B,KAAA86B,cAAA,EAIA96B,KAAAqlB,cAAA,EACArlB,KAAAslB,oBAAA,EAGAtlB,KAAAoyB,SAAA,EAGApyB,KAAA+6B,UAAA,EAGA/6B,KAAAmyB,OAAA,EAGAnyB,KAAAixB,QAAA,EAGAjxB,KAAAwlB,SAAA,EAGAxlB,KAAAulB,SAAA,EAGAvlB,KAAAg7B,WAAA,EAGAh7B,KAAAi7B,iBAAA,EAGAj7B,KAAAylB,kBAAA,EACAzlB,KAAA+xB,aAAA,KAGA/xB,KAAAk7B,aAAA,EACAl7B,KAAA0lB,aAAA,EAGA1lB,KAAAmjB,MAAA,EAGAnjB,KAAAm7B,MAAA,EAGAn7B,KAAAo7B,aAAA,EAGAp7B,KAAA+qB,QAAA,EACA/qB,KAAA4vB,cAAA,EAGA5vB,KAAA6vB,gBAAA,EACA7vB,KAAAq7B,UAAA,EAGAr7B,KAAAs7B,SAAA,EAGAt7B,KAAAu7B,mBAAA,EACAv7B,KAAAilB,eAAA,KAEA,SAAAuW,EAAAC,GACA,IAAAC,EAAAD,EACAz7B,KAAA07B,WACA17B,KAAA27B,eAAA,SAAAvX,EAAAwX,EAAAC,EAAAC,GACA,IAKAC,EALArnB,EAAA0P,EAAAa,eACA+W,EAAAjuB,EAAAkuB,EAAAC,QACAC,EAAApuB,EAAA,KACAkb,EAAApb,EAAA,GACAqa,EAAA,EAEA/N,EAAAzF,EAAAyF,QACAiiB,EAAA,IAAA1D,EAAAxQ,GACAloB,KAAA07B,SAAAW,GAAApU,eAAA7D,EAAAgY,GACAlU,EAAAkU,EAAArrB,KACA,QAAAkJ,EAAA,EAAwBA,EAAAvF,EAAA0E,QAAkBa,IAAA,CAI1C8hB,EAAA/7B,KAAA07B,SAAA9qB,MAAA0rB,MAAAlY,EAAAwX,EAAA3S,EAAAf,EAAAjO,KACAvF,EAAA2W,UAAAjW,EAAAmnB,eACAv8B,KAAA07B,SAAAc,WAAA9nB,EAAAyF,QAAAF,GACAja,KAAA07B,SAAA9qB,MAAA6rB,YAAAxT,EAAA4S,EAAA5hB,GAAAiO,EAAA6T,IAEA,QAAA7hB,EAAA,EAA0BA,EAAAxF,EAAAmiB,aAAuB3c,IAAA,CACjD,IAAAqf,EAAAmD,EACArjB,EAAAc,EAAAC,GAAAH,GAAAC,GACAb,EAAA3C,YAAAtB,EAAAuB,YAEA4iB,EAAA,EACAmD,EAAAhoB,EAAAioB,IAAAC,YAAArD,IAEAA,EAAA,EACAmD,EAAAhoB,EAAAioB,IAAAE,kBAAAtD,GAEA7kB,EAAAooB,cAAA5/B,KAAAq0B,IAAA,MAAAmL,GAGA18B,KAAA07B,SAAAqB,gBAAAroB,EAAA2E,GACArZ,KAAA07B,SAAAsB,WAAAtoB,EAAA2E,EAAA8iB,KAMAn8B,KAAA07B,SAAA9qB,MAAAqsB,UAAA7Y,EAAA0X,EAAA7hB,GAAAC,GAAAb,EAAA2iB,GACAh8B,KAAA07B,SAAAwB,WAAA9Y,EAAA/K,EAAA2iB,EAAAG,EAAAjiB,EAAA+O,EAAA/O,KAEAla,KAAA07B,SAAAyB,qBAAAzoB,EAAAuF,EAAAC,IAGAla,KAAA07B,SAAAW,GAAA/S,aAAA5U,EAAAwT,IAGA,SAAAkV,IACAp9B,KAAAqe,UAAAtQ,EAAA,EAAAiP,EAAAoB,WAGApe,KAAAof,OAAA,EACApf,KAAAse,SAAAvQ,EAAAiP,EAAAQ,uBAAAR,EAAAoB,WAGApe,KAAAsf,MAAA,EACAtf,KAAAue,QAAAxQ,EAAAiP,EAAAQ,uBAAAR,EAAAoB,WAGApe,KAAAwf,KAAA,EACAxf,KAAAwe,UAAAzQ,EAAA,EAAAiP,EAAAoB,WAGApe,KAAAqf,OAAA,EACArf,KAAAye,SAAA1Q,EAAAiP,EAAAQ,uBAAAR,EAAAoB,WACApe,KAAAuf,MAAA,EACAvf,KAAA0e,QAAA3Q,EAAAiP,EAAAQ,uBAAAR,EAAAoB,WACApe,KAAAyf,KAAA,EAIAzf,KAAA6e,aAAA,EACA7e,KAAAgf,QAAA,EACAhf,KAAA8e,KAAA,EACA9e,KAAA+e,KAAA,EACA/e,KAAAq9B,UAAA,EACAr9B,KAAAs9B,MAAA,EACAt9B,KAAAqO,EAAAR,EAAA,EAAAmP,EAAA2D,aAAA3D,EAAAwb,QACAx4B,KAAA0f,EAAA7R,EAAA,EAAAmP,EAAA2D,aAAA3D,EAAAwb,QAQA,SAAA+E,EAAAC,EAAAC,EAAAC,EAAAC,GACA39B,KAAAoR,EAAAvD,EAAA,EAAAuH,EAAAC,SACArV,KAAA/C,EAAA4Q,EAAA,EAAAuH,EAAAskB,SACA15B,KAAA25B,OAAA9rB,EAAA,EAAAuH,EAAAwkB,QACA55B,KAAA65B,OAAAhsB,EAAA,EAAAuH,EAAA0kB,QACA,IAAA1oB,EAAApR,KAAAoR,EACAnU,EAAA+C,KAAA/C,EACA,GAAAjB,UAAAN,SAGAsE,KAAAw9B,KAAAxhC,UAAA,GACAgE,KAAAy9B,KAAAzhC,UAAA,GACAgE,KAAA09B,MAAA1hC,UAAA,GACAgE,KAAA29B,MAAA3hC,UAAA,GACA6S,EAAAC,UAAA9O,KAAAw9B,KAAA,EAAApsB,EAAA,EAAAlU,KAAAE,IAAA4C,KAAAw9B,KAAA9hC,OAAAsE,KAAAoR,EAAA1V,SACAmT,EAAAC,UAAA9O,KAAAy9B,KAAA,EAAAxgC,EAAA,EAAAC,KAAAE,IAAA4C,KAAAy9B,KAAA/hC,OAAAsE,KAAA/C,EAAAvB,SACAmT,EAAAC,UAAA9O,KAAA09B,MAAA,EAAA19B,KAAA25B,OAAA,EAAAz8B,KAAAE,IAAA4C,KAAA09B,MAAAhiC,OAAAsE,KAAA25B,OAAAj+B,SACAmT,EAAAC,UAAA9O,KAAA29B,MAAA,EAAA39B,KAAA65B,OAAA,EAAA38B,KAAAE,IAAA4C,KAAA29B,MAAAjiC,OAAAsE,KAAA65B,OAAAn+B,UA6BA,SAAAqY,IACA,IAAA6pB,EAAA,KACAvB,EAAA,KACAwB,EAAA,KACA79B,KAAAgR,WAAA,SAAAmoB,EAAA2E,EAAAC,GACAH,EAAAzE,EACAkD,EAAAyB,EACAD,EAAAE,GAKA/9B,KAAAmX,OAAA,SAAAlP,GACA,OAAA+1B,EAAA/1B,IAIA,IAIAg2B,EADAlqB,EAAAC,UACA,EACAkqB,EAAAnqB,EAAAmqB,MAUAC,EAAApqB,EAAAoqB,OAIAC,GAHArqB,EAAAE,WAGA,KAOAjU,KAAAoc,gBAAA,oNAGA,IAAA3D,EAAA,8CACAzY,KAAAyY,SAMAzY,KAAAq+B,YAAA,CAEA,IAAAd,EAAA,6IACA,iBACA,IAAAA,EAAA,kKAAAA,EAAA,kKAAAA,EAAA,8JAAAA,EAAA,8JAAAA,EAAA,gKAAAA,EAAA,kKAAAA,EAAA,kKAAAA,EAAA,uKACA,IAAAe,EAAAvwB,EAAAmwB,EAAAC,EAAA,GACAH,EAAAjwB,EAAAmwB,GACAK,EAAAxwB,EAAAkwB,GACA5rB,EAAAtE,EAAAkwB,GAyBA,SAAAO,EAAApa,EAAAqa,GACA,IAAAC,EAAAb,EAAAc,WAAAF,EAAAra,GAGA,OAFAsa,GAAAN,EACAM,EAAAxhC,KAAAq0B,IAAA,GAAAmN,EAAA,GAAAta,EAAAmB,UAwVA,SAAAqZ,EAAAhnB,GACA5X,KAAA/C,EAAA2a,EApXA5X,KAAAqS,QAqGArS,KAAA6+B,eAAA,SAAAza,GACA,IAEA3oB,EAFAiZ,EAAA0P,EAAAa,eACA9K,EAAAzF,EAAAyF,QAEA,MAAAzF,EAAAoqB,oBAAA,CAKA,IAJApqB,EAAAoqB,oBAAA,EACA3kB,EAAAwP,gBAAA,EA7EA,SAAAvF,GAOA,IANA,IAAA2a,EAAA3a,EAAAa,eAAAmU,IAAAhoB,EACA4tB,EAAA5a,EAAAa,eAAAmU,IAAAO,OACAsF,EAAA7a,EAAAa,eAAAmU,IAAAn8B,EACAiiC,EAAA9a,EAAAa,eAAAmU,IAAAS,OACAnlB,EAAA0P,EAAAa,eACAka,EAAA/a,EAAAoE,eACAxR,EAAA,EAAyBA,EAAA5B,EAAAC,QAAuB2B,IAAA,CAChD,IAAAlT,EAAA4Q,EAAAa,cAAAnE,EAAA4F,GACApE,EAAA8B,EAAAa,cAAAnE,EAAA4F,EAAA,GACA+nB,EAAA/nB,GAAAlH,EAAAuoB,UACA,QAAA58B,EAAAqI,EAA6BrI,EAAAmX,EAASnX,IAAA,CACtC,IACA2jC,EAAAZ,EAAApa,EADA3oB,EAAA0jC,EAAA,MAEAJ,EAAA/nB,GAAA9Z,KAAAE,IAAA2hC,EAAA/nB,GAAAooB,IAGA,IAAApoB,EAAA,EAAyBA,EAAA5B,EAAAwkB,OAAsB5iB,IAI/C,IAHAlT,EAAA4Q,EAAAa,cAAAokB,OAAA3iB,GACApE,EAAA8B,EAAAa,cAAAokB,OAAA3iB,EAAA,GACAgoB,EAAAhoB,GAAAlH,EAAAuoB,UACA58B,EAAAqI,EAA6BrI,EAAAmX,EAASnX,IAEtC2jC,EAAAZ,EAAApa,EADA3oB,EAAA0jC,EAAA,MAEAH,EAAAhoB,GAAA9Z,KAAAE,IAAA4hC,EAAAhoB,GAAAooB,GAGA,IAAApoB,EAAA,EAAyBA,EAAA5B,EAAAskB,QAAuB1iB,IAAA,CAIhD,IAHAlT,EAAA4Q,EAAAa,cAAAtY,EAAA+Z,GACApE,EAAA8B,EAAAa,cAAAtY,EAAA+Z,EAAA,GACAioB,EAAAjoB,GAAAlH,EAAAuoB,UACA58B,EAAAqI,EAA6BrI,EAAAmX,EAASnX,IAEtC2jC,EAAAZ,EAAApa,EADA3oB,EAAA0jC,EAAA,KAEAF,EAAAjoB,GAAA9Z,KAAAE,IAAA6hC,EAAAjoB,GAAAooB,GAEAH,EAAAjoB,IAAAtC,EAAAa,cAAAtY,EAAA+Z,EAAA,GAAAtC,EAAAa,cAAAtY,EAAA+Z,GAEA,IAAAA,EAAA,EAAyBA,EAAA5B,EAAA0kB,OAAsB9iB,IAAA,CAI/C,IAHAlT,EAAA4Q,EAAAa,cAAAskB,OAAA7iB,GACApE,EAAA8B,EAAAa,cAAAskB,OAAA7iB,EAAA,GACAkoB,EAAAloB,GAAAlH,EAAAuoB,UACA58B,EAAAqI,EAA6BrI,EAAAmX,EAASnX,IAEtC2jC,EAAAZ,EAAApa,EADA3oB,EAAA0jC,EAAA,KAEAD,EAAAloB,GAAA9Z,KAAAE,IAAA8hC,EAAAloB,GAAAooB,GAEAF,EAAAloB,IAAAtC,EAAAa,cAAAtY,EAAA,IAAAyX,EAAAa,cAAAtY,EAAA,IAIA,GAAAmnB,EAAA+N,MAAA,CACA,IAAAnb,EAAA,EAA2BA,EAAA5B,EAAAC,QAAuB2B,IAClD+nB,EAAA/nB,GAAA,MAEA,IAAAA,EAAA,EAA2BA,EAAA5B,EAAAwkB,OAAsB5iB,IACjDgoB,EAAAhoB,GAAA,MAEA,IAAAA,EAAA,EAA2BA,EAAA5B,EAAAskB,QAAuB1iB,IAClDioB,EAAAjoB,GAAA,MAEA,IAAAA,EAAA,EAA2BA,EAAA5B,EAAA0kB,OAAsB9iB,IACjDkoB,EAAAloB,GAAA,MAKAtC,EAAA0kB,IAAAxK,MAAA,GAAA1xB,KAAAsS,MAAAgvB,EAAApa,GAAA,IAWAib,CAAAjb,GACAma,EAAA,KACA9iC,EAAA,EAAqBA,EAAAwiC,EAAkBxiC,IACvC8iC,EAAA9iC,GAAAyB,KAAAq0B,IAAA91B,EAAA,KAEA,IAAAA,EAAA,EAAqBA,EAAAwiC,EAAA,EAAsBxiC,IAC3C4W,EAAA5W,KAAA,EAAAyB,KAAAq0B,IAAA,IAAAgN,EAAA9iC,GAAA8iC,EAAA9iC,EAAA,SAGA,IADA4W,EAAA5W,GAAA,GACAA,EAAA,EAAqBA,EAAAyiC,EAAWziC,IAChCuiC,EAAAviC,GAAAyB,KAAAq0B,IAAA,UAAA91B,EAAA,MAEA,IAAAA,EAAA,EAAqBA,GAAAyiC,EAAAC,EAAqB1iC,IAC1C6iC,EAAA7iC,GAAAyB,KAAAq0B,IAAA,OAAA91B,EAAA,IAAA0iC,IAIA,IAAA7a,EAAAgc,EAAAC,EAAAC,EAgBA,IAlBA5B,EAAA/gB,aAAAnI,IAGAjZ,EAAA2oB,EAAAuB,eAAA,OACA,KAAAlqB,GAAA,IACA6nB,EAAApmB,KAAAq0B,IAAA,GAAA91B,EAAA,OACAA,EAAA2oB,EAAAuB,eAAA,OACA,KAAAlqB,GAAA,IACA6jC,EAAApiC,KAAAq0B,IAAA,GAAA91B,EAAA,OACAA,EAAA2oB,EAAAuB,eAAA,QACA,KAAAlqB,GAAA,IACA8jC,EAAAriC,KAAAq0B,IAAA,GAAA91B,EAAA,OAIAA,EAAA2oB,EAAAuB,eAAA,QACA,KAAAlqB,GAAA,IACA+jC,EAAAD,EAAAriC,KAAAq0B,IAAA,GAAA91B,EAAA,MACAA,EAAA,EAAuBA,EAAA2Z,EAAAC,QAAqB5Z,IAE5CgjC,EAAAhjC,GAAA,EAAA6nB,EAAmC7nB,GAAA,GAAA6jC,EAA2B7jC,GAAA,GAAA8jC,EAA6BC,EAC3F9qB,EAAAwQ,MAAAua,SAAAhkC,GAAAgjC,EAEA,IAAAhjC,EAAA,EAAuBA,EAAA2Z,EAAAskB,QAAqBj+B,IAAA,CAC5C,IAAAgjC,EACAA,EAAAhjC,GAAA,EAAA6nB,EAAmC7nB,GAAA,GAAA6jC,EAA2B7jC,GAAA,GAAA8jC,EAA6BC,EAC3F9qB,EAAAwQ,MAAAwa,UAAAjkC,GAAAgjC,KASAz+B,KAAAs8B,MAAA,SAAAlY,EAAAwX,EAAA3S,EAAAf,EAAAjO,EAAAiP,GACA,IAEAnY,EAEAmJ,EAJAxF,EAAA0P,EAAAa,eACA0a,EAAA,EAEAxW,EAAAtb,EAAA,GAEAuuB,EAAA,IAAA1D,EAAAiH,GACAvW,EAAAiT,EAAArT,YAAA5E,EAAA8D,EAAAkU,EAAAlT,GAEA6S,GADA4D,EAAAvD,EAAArrB,MACAqY,EAKA,IAJA2S,EAAA/H,EAAA4L,uBAEA7D,EAAA/H,EAAA4L,sBAEA7uB,EAAA,EAAAmJ,EAAA,EAA8BA,EAAAxF,EAAAmiB,eAAuB3c,EAIrD+O,EAAA/O,GAAAhd,KAAAE,IAAA42B,EAAA6L,qBAAAF,EAAAjrB,EAAAmiB,cACA1N,EAAAjP,GAAA,EAAA+O,EAAA/O,GAAA0hB,EAAA3hB,GAAAC,GAAA,IAAA+O,EAAA/O,GACAiP,EAAAjP,GAAA,EAAAgO,EAAA,IAAAiB,EAAAjP,GAAA,EAAAgO,EAAA,GACAiB,EAAAjP,GAAA,IAAAiP,EAAAjP,GAAA,GACAiP,EAAAjP,GAAA+O,EAAA/O,GAAA8Z,EAAA6L,uBAAA1W,EAAAjP,GAAAhd,KAAAC,IAAA,EAAA62B,EAAA6L,qBAAA5W,EAAA/O,KACAnJ,GAAAoY,EAAAjP,GAEA,GAAAnJ,EAAAqY,EACA,IAAAlP,EAAA,EAAsBA,EAAAxF,EAAAmiB,eAAuB3c,EAC7CiP,EAAAjP,GAAAkP,EAAAD,EAAAjP,GAAAnJ,EAGA,IAAAmJ,EAAA,EAAoBA,EAAAxF,EAAAmiB,eAAuB3c,EAC3C+O,EAAA/O,IAAAiP,EAAAjP,GACAkP,GAAAD,EAAAjP,GAEA,IAAAnJ,EAAA,EAAAmJ,EAAA,EAA8BA,EAAAxF,EAAAmiB,eAAuB3c,EACrDnJ,GAAAkY,EAAA/O,GAEA,GAAAnJ,EAAAijB,EAAA4L,qBAEA,IAAA1lB,EAAA,EAAsBA,EAAAxF,EAAAmiB,eAAuB3c,EAC7C+O,EAAA/O,IAAA8Z,EAAA4L,qBACA3W,EAAA/O,IAAAnJ,EACAkY,EAAA/O,GAGA,OAAA6hB,GAEA/7B,KAAAy8B,YAAA,SAAAxT,EAAA4S,EAAA3T,EAAA6T,GAKA,IAAA+D,EAAA,QAAAjE,GAAA,GACAiE,EAAA,IAAAA,EAAA,GACAA,EAAA,KAAAA,EAAA,IACA,IAAAC,EAAA,KAAAD,GAAA7W,EAAA,GAAAA,EAAA,IACA8W,EAAA/L,EAAA6L,qBAAA5W,EAAA,KACA8W,EAAA/L,EAAA6L,qBAAA5W,EAAA,IAEA8W,EAAA,IAAAA,EAAA,GACA9W,EAAA,UACAA,EAAA,GAAA8W,EAAA,KACA9W,EAAA,GAAAf,IAAAe,EAAA,IAAA8W,GACA9W,EAAA,IAAA8W,IAEA9W,EAAA,IAAAA,EAAA,OACAA,EAAA,UAGA8W,EAAA9W,EAAA,GAAAA,EAAA,IACA8S,IACA9S,EAAA,GAAA8S,EAAA9S,EAAA,GAAA8W,EACA9W,EAAA,GAAA8S,EAAA9S,EAAA,GAAA8W,IAOA//B,KAAAggC,UAAA,SAAAtgC,EAAAuI,EAAAg4B,GAIA,IAAAC,EAAA,YAEAC,EAAAhxB,EAAAM,aAAAxH,EAAA,IACA4hB,EAAAnqB,IACAwX,EAAA,EAMA,OALAipB,GAAAF,EACApW,EAAA,QAAA3S,EAAA,EAAA/H,EAAAM,aAAAoa,EAAA,GAAAqW,IACAhpB,EAAA,IAAAA,EAAA,GACAipB,GAAAjpB,EACAipB,GAAAF,EAAAC,EARA,YASAhjC,KAAAq0B,IAAA,MAAA4O,IAOAngC,KAAAi9B,UAAA,SAAA7Y,EAAA0X,EAAAziB,EAAA+mB,GACA,IAEAC,EAFAC,EAAA,EACA5rB,EAAA0P,EAAAa,eAEArN,EAAA,EACA2oB,EAAA,EACAnH,EAAA1kB,EAAA0kB,IACA9nB,EAAA+H,EAAA/H,GACAkvB,EAAApc,EAAAG,KAAAxU,EAAA6W,SAAA,IACAkW,EAAApoB,EAAAooB,cAIA,IAHA1Y,EAAAG,KAAAxU,EAAA6W,UAAAxC,EAAAG,KAAAxU,EAAAuoB,SACAwE,EAAA,GAEAuD,EAAA,EAAsBA,EAAAhnB,EAAAonB,SAA0BJ,IAAA,CAMhDK,GAFAC,EAAAvc,EAAAG,KAAAxU,EAAAyU,QAAAJ,EAAAG,KAAAxU,EAAA6W,SAAAoZ,UAAA5G,EAAAG,OAAAH,EAAAhoB,EAAAivB,GAAAjH,EAAAxK,OAA6HwK,EAAAG,OAAAH,EAAAhoB,EAAAivB,KAC7H/4B,EAAA+R,EAAA/R,MAAA+4B,IAEAO,EAnUA,sBAoUAxvB,EAAA9J,GAAA,EACAu5B,EAAA,EACA,GAGAA,GADAC,EAAAxvB,EAAAsG,GAAAtG,EAAAsG,GAEAgpB,GAAAE,EAAAJ,EAAAI,EAAAJ,EAGAG,GADAE,EAAAzvB,IADAsG,GACAtG,EAAAsG,GAEAgpB,GAAAG,EAAAL,EAAAK,EAAAL,EACA9oB,YACWxG,EAAA,GACXyvB,EAAAF,GAAAJ,IACAF,GAAAjrB,EAAAkF,SAEAsmB,GADA34B,EAAA04B,EAAAjsB,EAAAwQ,MAAAua,SAAAY,MAEAO,EAAA34B,GAGA,GAAAu4B,IACAG,EAAAC,GAEAxc,EAAAgO,UACApuB,EAAA83B,EAAAkF,GAAA5vB,EAAAivB,IACA,IAEAp4B,EAAA44B,EAAA/E,EAAAmF,IAAA7vB,EAAAivB,GAAAvD,EAAA94B,EACA,GAAAw8B,IAAAv4B,GAAAyM,EAAAwQ,MAAAua,SAAAY,IACAM,EAAA14B,IAAA04B,EAAA14B,IAGAm4B,EAAAE,KAAA,GAAAE,EAAAG,EAA8DA,EAAAjsB,EAAAwQ,MAAAua,SAAAY,GAE9D,IAAAa,EAAA,IACA,GAAA7nB,EAAA3C,YAAAtB,EAAAuB,WAGA,IADA,IAAAsC,EAAA,IACA,GAAAA,KAAA+Z,EAAA0D,GAAAplB,EAAA2H,GAAA,IACAioB,EAAAjoB,EAGAI,EAAAnD,kBAAAgrB,EACA,QAAAlqB,EAAAqC,EAAA8nB,SAAyCd,EAAAhnB,EAAA+nB,OAAwBpqB,IAAAqpB,GAAA,GACjE,IAAA/4B,EAAAwJ,EACAuwB,EAGA,IAFAA,EAAAjd,EAAAG,KAAAxU,EAAAyU,QAAAJ,EAAAG,KAAAxU,EAAA6W,SAAAoZ,UAAA5G,EAAAG,OAAAH,EAAAn8B,EAAA+Z,GAAAoiB,EAAAxK,OAA8HwK,EAAAG,OAAAH,EAAAn8B,EAAA+Z,GAC9H1P,EAAA+R,EAAA/R,MAAA+4B,GACAvvB,EAAA,EAAqBA,EAAA,EAAOA,IAAA,CAC5B,IACA6vB,EACAD,EAAAE,EAwBA58B,EAEAiE,EA5BA44B,EAAA,EAGAzvB,EAAA9J,GAAA,EACAo5B,EAAAW,EAAA/5B,EACAs5B,EA1XA,sBA2XA,GACA,IAAAE,EAAAC,EAEAF,GADAC,EAAAxvB,EAAAsG,GAAAtG,EAAAsG,GAEAgpB,GAAAE,EAAAJ,EAAAI,EAAAJ,EAGAG,GADAE,EAAAzvB,IADAsG,GACAtG,EAAAsG,GAEAgpB,GAAAG,EAAAL,EAAAK,EAAAL,EACA9oB,YACaxG,EAAA,GACbyvB,EAAAQ,GAAAd,IACAvpB,GAAA5B,EAAAksB,SAEAV,GADA34B,EAAAo5B,EAAA3sB,EAAAwQ,MAAAwa,UAAA1oB,MAEA4pB,EAAA34B,GAGA04B,EAAA,GAAAH,EAAAI,EAAkDS,EAClDjd,EAAAgO,SAAAhO,EAAA2W,WACA/2B,EAAA83B,EAAAkF,GAAA/jC,EAAA+Z,GAAAlG,IACA,IAEA7I,EAAA44B,EAAA/E,EAAAmF,IAAAhkC,EAAA+Z,GAAAlG,GAAAgsB,EAAA94B,EACA,GAAAw8B,IAAAv4B,GAAAyM,EAAAwQ,MAAAwa,UAAA1oB,IACA2pB,EAAA14B,IAAA04B,EAAA14B,IAGAm4B,EAAAE,KAAA,GAAAE,EAAAG,EAAgEA,EAAAjsB,EAAAwQ,MAAAwa,UAAA1oB,GAEhEoN,EAAA8W,cACAkF,EAAAE,EAAA,GAAAF,EAAAE,EAAA,OAAAF,EAAAE,EAAA,OAAAF,EAAAE,EAAA,GAAAF,EAAAE,EAAA,MAAA5rB,EAAA+kB,OACA2G,EAAAE,EAAA,KAAAF,EAAAE,EAAA,OAAAF,EAAAE,EAAA,OAAAF,EAAAE,EAAA,KAAAF,EAAAE,EAAA,MAAA5rB,EAAA+kB,QAGA,OAAA8G,GAKAvgC,KAAAuhC,gBAAA,SAAAloB,EAAAmoB,EAAApwB,EAAAkH,GACA,IAAAmpB,EAAA,EACA7pB,EAAA4pB,EAAAvkC,EACAuU,EAAA6H,EAAApD,OACA,GAAA2B,EAAAyB,EAAAjD,OACA,QAAAhF,KAEAswB,EAAAroB,EAAA/H,GAAAsG,GACAA,IACA6pB,GAAAC,IACAA,EAAAroB,EAAA/H,GAAAsG,GACAA,IACA6pB,GAAAC,SAES,GAAA9pB,EAAAyB,EAAAnE,WAAA,CACT,IAAAysB,EAAA5zB,EAAA,GAGA,IAFA4zB,EAAA,KACAA,EAAA,GAAArpB,EACA,GAAAlH,KAEAswB,EAAAxkC,KAAA4nB,IAAAzL,EAAA/H,GAAAsG,IAAA+pB,EAAAnwB,EAAAoG,IACAA,IACA6pB,GAAAC,IACAA,EAAAxkC,KAAA4nB,IAAAzL,EAAA/H,GAAAsG,IAAA+pB,EAAAnwB,EAAAoG,IACAA,IACA6pB,GAAAC,SAGA,QAAAtwB,KAAA,CACA,IAAAswB,EACAA,EAAAxkC,KAAA4nB,IAAAzL,EAAA/H,GAAAsG,IAAA2mB,EAAA/sB,EAAAoG,IAAAU,EACAV,IACA6pB,GAAAC,IACAA,EAAAxkC,KAAA4nB,IAAAzL,EAAA/H,GAAAsG,IAAA2mB,EAAA/sB,EAAAoG,IAAAU,EACAV,IACA6pB,GAAAC,IAIA,OADAF,EAAAvkC,EAAA2a,EACA6pB,GAgBAzhC,KAAA4hC,WAAA,SAAAvoB,EAAA2iB,EAAA6F,EAAAC,EAAA9rB,GACA,IAEAgB,EACA5F,EAHA2wB,EAAA,EACAC,EAAA,EAGA/lB,EAAA,EACAgmB,EAAA,EACAC,EAAA,EACAnJ,GAAA,GACAnhB,EAAA,EACAW,EAAAc,EAAAd,SACA4pB,EAAA,EAEA,IADAL,EAAA7I,SAAA,EACAjiB,EAAA,EAAqBA,EAAAqC,EAAA+nB,OAAuBpqB,IAAA,CAC5C,IAiCAorB,EAjCAnlC,EAAAoc,EAAAjC,aAAAmB,EAAA4pB,MAAA,GAAA9oB,EAAAb,QAAAC,EAAAzB,GAAA,IAAAqC,EAAAX,eAAA,KAAAW,EAAAV,cAAAU,EAAAjT,OAAA4Q,IACAyqB,EAAA,EACA,SAAAzrB,KAAAsC,KAAAtB,IAAA/Z,EACAwkC,EAAAzrB,EAAAyrB,MAAAzqB,GACAY,GAAAyB,EAAA/R,MAAA0P,GACA6qB,EAAAE,KAAAN,EAAAzF,EAAAgG,KACAP,EAAAzrB,EAAAqsB,UAAArrB,OACW,CACX,IAGA4B,EAHAN,EAvfAgmB,EAufArhC,EAvfA8W,EAAAoqB,QAwfA/sB,EAAAiI,EAAA/R,MAAA0P,IAAA,EACAY,EAAAyB,EAAA/R,MAAA0P,GAAAqC,EAAAnD,oBAGA9E,GADAwH,EAAAS,EAAAnD,kBAAA0B,EAAA,GACA,EAAAgB,GAAA,EAAwD,GAExD,IAAA0pB,EAAA,IAAA1D,EAAAhnB,GACA6pB,EAAAzhC,KAAAuhC,gBAAAloB,EAAAipB,EAAAlxB,EAAAkH,GACAV,EAAA0qB,EAAArlC,EACA,MAAA+Y,IACAA,EAAAsC,KAAAtB,GAAA/Z,EACA+Y,EAAAyrB,MAAAzqB,GAAAyqB,GAEAA,EAAAI,EAAAE,KAAAN,EAAAzF,EAAAgG,KACAP,EAAAtyB,EAAAI,WAAArS,KAAAC,IAAAskC,EAAA,QACA,MAAAzrB,IACAA,EAAAqsB,UAAArrB,GAAAyqB,GAGA,MAAAzrB,IACAA,EAAAoB,YAAAiC,EAAAjC,aAEA8qB,GAAAT,EACAA,EAAA,IAEAW,EAAAllC,KAAAC,IAAA,KAAAskC,EAAA,MACAK,EAAA7I,UAAAmJ,IACAnmB,IACAgmB,GAAAR,GAEA1I,EAAA77B,KAAAC,IAAA47B,EAAA0I,GAMA,OAJAK,EAAA9I,WAAA/c,EACA6lB,EAAAhJ,UAAAoJ,EACAJ,EAAAjJ,WAAAoJ,EACAH,EAAA/I,YACA9c,GAQAjc,KAAAuiC,UAAA,SAAAne,EAAA/K,EAAAyiB,EAAA7hB,EAAAC,GACA,IACAlD,EAAAwrB,EACApxB,EACAyvB,EAAA4B,EAHA/tB,EAAA0P,EAAAa,eAIAyd,EAAA,GAAArpB,EAAAX,eAAA,KACAH,EAAAc,EAAAd,SACAyjB,EAAAjuB,EAAAkuB,EAAAC,QACAyG,EAAA50B,EAAAkuB,EAAAC,QACAuF,EAAA,IAAA7I,EACAqE,UAAA7Y,EAAA0X,EAAAziB,EAAA2iB,GACA4F,WAAAvoB,EAAA2iB,EAAA2G,EAAAlB,EAAA,MACA,IAAA7pB,EAAA,EAGA,IAFA4qB,EAAAnpB,EAAAupB,SACAvpB,EAAA3C,YAAAtB,EAAAuB,YAAA,GAAA0C,EAAAqC,mBAAA8mB,EAAA,IACAxrB,EAAA,EAAqBA,EAAAwrB,EAAYxrB,IAAA,CACjC,IAAAlT,EAAA4Q,EAAAa,cAAAnE,EAAA4F,GAEA6rB,GADAjwB,EAAA8B,EAAAa,cAAAnE,EAAA4F,EAAA,IACAlT,EACA,IAAA+8B,EAAA,EAAyBjpB,EAAAhF,EAASgF,IAClCipB,GAAAxnB,EAAA/H,GAAAsG,GAAAyB,EAAA/H,GAAAsG,GAEAipB,GAAAgC,EACAJ,EAAA,KACA/tB,EAAAoU,MAAAkY,GAAA/mB,GAAAC,GAAAlD,GAAAyrB,EAAA5B,EACAnsB,EAAAoU,MAAA6Z,KAAA1oB,GAAAC,GAAAlD,GAAAyrB,EAAAzG,EAAAhlB,GAAA2rB,EAAA3rB,GAAA6rB,EACA/G,EAAAkF,GAAA5vB,EAAA4F,GAAA,IAAAoN,EAAAgO,QAAAyO,GAAA/E,EAAAkF,GAAA5vB,EAAA4F,GAA+E6pB,EAAA,EAC/EnsB,EAAAoU,MAAAga,IAAA7oB,GAAAC,GAAAlD,GAAAyrB,EAAAvlC,KAAAC,IAAA0jC,EAAA/E,EAAAmF,IAAA7vB,EAAA4F,GAAAtC,EAAA0kB,IAAAhoB,EAAA4F,IACAtC,EAAAoU,MAAAia,QAAA9oB,GAAAC,GAAAlD,GAAA,EACA,GAAAqC,EAAAb,SAAAxB,GAAA,KAAAtC,EAAAoU,MAAAia,QAAA9oB,GAAAC,GAAAlD,IAAA0rB,EAAAjqB,EAAAzB,IACAA,EAAA5B,EAAAkF,UACA5F,EAAAoU,MAAAia,QAAA9oB,GAAAC,GAAAlD,IAAA0rB,EAAAnqB,EAAAvB,IAGA,GAAAqC,EAAA3C,YAAAtB,EAAAuB,WAEA,IADA6rB,EAAAxrB,EACAA,EAAAqC,EAAA8nB,SAAuCnqB,EAAA5B,EAAAskB,QAAuB1iB,IAC9D,CAAAlT,EAAA4Q,EAAAa,cAAAtY,EAAA+Z,GAEA6rB,GADAjwB,EAAA8B,EAAAa,cAAAtY,EAAA+Z,EAAA,IACAlT,EACA,IAHA,IACA8O,EAEAnX,EAAA,EAA2BA,EAAA,EAAOA,IAAA,CAClC,IAAAolC,EAAA,EAAAzvB,EAAAtN,EAAwCsN,EAAAwB,EAASxB,IACjDyvB,GAAAxnB,EAAA/H,GAAAsG,GAAAyB,EAAA/H,GAAAsG,GACAA,IAEAipB,EAAA3jC,KAAAC,IAAA0jC,EAAAgC,EAAA,OACAJ,EAAA,KACA/tB,EAAAoU,MAAAka,KAAA/oB,GAAAC,GAAA,EAAAlD,EAAAvb,GAAAgnC,EAAA5B,EACAnsB,EAAAoU,MAAAma,OAAAhpB,GAAAC,GAAA,EAAAlD,EAAAvb,GAAAgnC,EAAAzG,EAAAwG,GAAAG,EAAAH,GAAAK,EACA/G,EAAAkF,GAAA/jC,EAAA+Z,GAAAvb,GAAA,EAAAolC,GAAA/E,EAAAkF,GAAA/jC,EAAA+Z,GAAAvb,GAAyEolC,EAAA,GACzEzc,EAAAgO,SAAAhO,EAAA2W,YAAA8F,EAAA,GACAnsB,EAAAoU,MAAAoa,MAAAjpB,GAAAC,GAAA,EAAAlD,EAAAvb,GAAAgnC,EAAAvlC,KAAAC,IAAA0jC,EAAA/E,EAAAmF,IAAAhkC,EAAA+Z,GAAAvb,GAAAiZ,EAAA0kB,IAAAn8B,EAAA+Z,IACAtC,EAAAoU,MAAAqa,UAAAlpB,GAAAC,GAAA,EAAAlD,EAAAvb,IAAA,EAAA4d,EAAAV,cAAAld,GACAub,EAAA5B,EAAAksB,UACA5sB,EAAAoU,MAAAqa,UAAAlpB,GAAAC,GAAA,EAAAlD,EAAAvb,IAAAinC,EAAAnqB,EAAAiqB,IAEAA,KAIA9tB,EAAAoU,MAAAsa,QAAAnpB,GAAAC,GAAAb,EAAAjC,YACA1C,EAAAoU,MAAAua,aAAAppB,GAAAC,GAAAb,EAAA5D,eAAA4D,EAAA0B,aACArG,EAAAoU,MAAAwa,WAAArpB,GAAAC,GAAAb,EAAA0B,aACArG,EAAAoU,MAAA7M,KAAAhC,GAAAC,GAAAunB,EAAAzI,WACAtkB,EAAAoU,MAAAiQ,UAAA9e,GAAAC,GAAA,GAAAunB,EAAA1I,UACArkB,EAAAoU,MAAA+P,WAAA5e,GAAAC,GAAA,GAAAunB,EAAA5I,WACAnkB,EAAAoU,MAAAgQ,UAAA7e,GAAAC,GAAA,GAAAunB,EAAA3I,UACApkB,EAAAoU,MAAAmQ,SAAAhf,GAAAC,GAAAunB,EAAAxI,UA8BA,SAAAsK,IACAvjC,KAAAoX,YAAA,EACApX,KAAAmW,WAAA,EACAnW,KAAAsY,KAAAzK,EAAA,IACA7N,KAAAyhC,MAAA1zB,EAAA,IACA/N,KAAAqiC,UAAAt0B,EAAA,IAEA,SAAAoL,IAEAnZ,KAAAsR,GAAAvD,EAAA,KACA/N,KAAAiW,OAAApI,EAAA,KACA7N,KAAAuY,SAAA1K,EAAAouB,EAAAC,QACAl8B,KAAAqX,UAAA,EACArX,KAAAyV,eAAA,EACAzV,KAAAkV,WAAA,EACAlV,KAAAoW,OAAA,EACApW,KAAAoX,YAAA,EACApX,KAAAgb,kBAAA,EACAhb,KAAA0W,WAAA,EACA1W,KAAA0b,iBAAA,EACA1b,KAAA8V,aAAAjI,EAAA,GACA7N,KAAA2Y,cAAA9K,EAAA,GACA7N,KAAA4V,cAAA,EACA5V,KAAA6V,cAAA,EACA7V,KAAAwY,QAAA,EACAxY,KAAA0Y,eAAA,EACA1Y,KAAAyW,mBAAA,EACAzW,KAAA+a,aAAA,EACA/a,KAAA4iC,SAAA,EACA5iC,KAAAmhC,SAAA,EACAnhC,KAAAygC,SAAA,EACAzgC,KAAA0X,OAAA,EACA1X,KAAAohC,OAAA,EACAphC,KAAA2b,UAAA,EACA3b,KAAAsH,MAAAuG,EAAAouB,EAAAC,QACAl8B,KAAAoG,OAAAyH,EAAAouB,EAAAC,QACAl8B,KAAAwV,WAAA,EAGAxV,KAAAyc,oBAAA,KACAzc,KAAA0c,KAAA7O,EAAA,GACA7N,KAAAkW,kBAAA,EACA,IAAAhW,EAAAF,KACA,SAAAwjC,EAAAC,GACA,WAAA31B,WAAA21B,GAKAzjC,KAAA2L,OAAA,SAAA+3B,GAHA,IAAAD,EAIAvjC,EAAAoR,IAJAmyB,EAIAC,EAAApyB,GAHA,IAAAzT,aAAA4lC,IAIAvjC,EAAA+V,OAAAutB,EAAAE,EAAAztB,QACA/V,EAAAqY,SAAAirB,EAAAE,EAAAnrB,UACArY,EAAAmX,UAAAqsB,EAAArsB,UACAnX,EAAAuV,eAAAiuB,EAAAjuB,eACAvV,EAAAgV,WAAAwuB,EAAAxuB,WACAhV,EAAAkW,OAAAstB,EAAAttB,OACAlW,EAAAkX,YAAAssB,EAAAtsB,YACAlX,EAAA8a,kBAAA0oB,EAAA1oB,kBACA9a,EAAAwW,WAAAgtB,EAAAhtB,WACAxW,EAAAwb,iBAAAgoB,EAAAhoB,iBACAxb,EAAA4V,aAAA0tB,EAAAE,EAAA5tB,cACA5V,EAAAyY,cAAA6qB,EAAAE,EAAA/qB,eACAzY,EAAA0V,cAAA8tB,EAAA9tB,cACA1V,EAAA2V,cAAA6tB,EAAA7tB,cACA3V,EAAAsY,QAAAkrB,EAAAlrB,QACAtY,EAAAwY,eAAAgrB,EAAAhrB,eACAxY,EAAAuW,mBAAAitB,EAAAjtB,mBACAvW,EAAA6a,aAAA2oB,EAAA3oB,aACA7a,EAAA0iC,SAAAc,EAAAd,SACA1iC,EAAAihC,SAAAuC,EAAAvC,SACAjhC,EAAAugC,SAAAiD,EAAAjD,SACAvgC,EAAAwX,OAAAgsB,EAAAhsB,OACAxX,EAAAkhC,OAAAsC,EAAAtC,OACAlhC,EAAAyb,UAAA+nB,EAAA/nB,UACAzb,EAAAoH,MAAAk8B,EAAAE,EAAAp8B,OACApH,EAAAkG,OAAAo9B,EAAAE,EAAAt9B,QACAlG,EAAAsV,WAAAkuB,EAAAluB,WACAtV,EAAAuc,oBAAAinB,EAAAjnB,oBAAArO,MAAA,GACAlO,EAAAwc,KAAA8mB,EAAAE,EAAAhnB,MACAxc,EAAAgW,kBAAAwtB,EAAAxtB,mBA9qCAnD,EAAA4wB,KAAA,UACA5wB,EAAA6wB,KAAA,oBACA7wB,EAAA8wB,KAAA,oBACA9wB,EAAA+wB,KAAA,kCACA/wB,EAAAgxB,KAAA,kCACAhxB,EAAAixB,KAAA,wFACAjxB,EAAAkxB,KAAA,sFACAlxB,EAAAmxB,KAAA,gFACAnxB,EAAAoxB,MAAA,0KACApxB,EAAAqxB,MAAA,4KACArxB,EAAAsxB,MAAA,6KACAtxB,EAAAuxB,MAAA,gvBACAvxB,EAAAwxB,MAAA,kwBACAxxB,EAAAyxB,MAAA,+5BACAzxB,EAAA0xB,MAAA,m8BACA1xB,EAAA2xB,MAAA,+CACA3xB,EAAA4xB,MAAA,gDACA5xB,EAAA6xB,IAAA,UACA7xB,EAAA8xB,IAAA,oBACA9xB,EAAA+xB,IAAA,oBACA/xB,EAAAgyB,IAAA,oCACAhyB,EAAAiyB,IAAA,kCACAjyB,EAAAkyB,IAAA,4FACAlyB,EAAAmyB,IAAA,gGACAnyB,EAAAoyB,IAAA,oFACApyB,EAAAqyB,KAAA,mLACAryB,EAAAsyB,KAAA,yKACAtyB,EAAAuyB,KAAA,mKACAvyB,EAAAwyB,KAAA,kvBACAxyB,EAAAyyB,KAAA,muBACAzyB,EAAA0yB,OAAA,qvBACA1yB,EAAA2yB,KAAA,qvBACA3yB,EAAA4yB,KAAA,0tBACA5yB,EAAAwD,KAAA,mCACAxD,EAAAyD,KAAA,kCACAzD,EAAAC,GAAA,KAAAmlB,EAAA,mBAAAA,EAAA,IAAAplB,EAAA4wB,KAAA5wB,EAAA6xB,KAAA,IAAAzM,EAAA,IAAAplB,EAAA6wB,KAAA7wB,EAAA8xB,KAAA,IAAA1M,EAAA,IAAAplB,EAAA8wB,KAAA9wB,EAAA+xB,KAAA,IAAA3M,EAAA,mBAAAA,EAAA,IAAAplB,EAAA+wB,KAAA/wB,EAAAgyB,KAAA,IAAA5M,EAAA,IAAAplB,EAAAgxB,KAAAhxB,EAAAiyB,KAAA,IAAA7M,EAAA,IAAAplB,EAAAixB,KAAAjxB,EAAAkyB,KAAA,IAAA9M,EAAA,IAAAplB,EAAAkxB,KAAAlxB,EAAAmyB,KAAA,IAAA/M,EAAA,IAAAplB,EAAAmxB,KAAAnxB,EAAAoyB,KAAA,IAAAhN,EAAA,IAAAplB,EAAAoxB,MAAApxB,EAAAqyB,MAAA,IAAAjN,EAAA,IAAAplB,EAAAqxB,MAAArxB,EAAAsyB,MAAA,IAAAlN,EAAA,IAAAplB,EAAAsxB,MAAAtxB,EAAAuyB,MAAA,IAAAnN,EAAA,KAAAplB,EAAAuxB,MAAAvxB,EAAAwyB,MAAA,IAAApN,EAAA,SAAAplB,EAAA0yB,QAAA,IAAAtN,EAAA,KAAAplB,EAAAwxB,MAAAxxB,EAAAyyB,MAAA,IAAArN,EAAA,IAAAplB,EAAAyxB,MAAAzxB,EAAA2yB,MAAA,IAAAvN,EAAA,IAAAplB,EAAAyxB,MAAAzxB,EAAA2yB,MAAA,IAAAvN,EAAA,IAAAplB,EAAAyxB,MAAAzxB,EAAA2yB,MAAA,IAAAvN,EAAA,KAAAplB,EAAAyxB,MAAAzxB,EAAA2yB,MAAA,IAAAvN,EAAA,KAAAplB,EAAAyxB,MAAAzxB,EAAA2yB,MAAA,IAAAvN,EAAA,MAAAplB,EAAAyxB,MAAAzxB,EAAA2yB,MAAA,IAAAvN,EAAA,QAAAplB,EAAAyxB,MAAAzxB,EAAA2yB,MAAA,IAAAvN,EAAA,QAAAplB,EAAAyxB,MAAAzxB,EAAA2yB,MAAA,IAAAvN,EAAA,KAAAplB,EAAA0xB,MAAA1xB,EAAA4yB,MAAA,IAAAxN,EAAA,KAAAplB,EAAA0xB,MAAA1xB,EAAA4yB,MAAA,IAAAxN,EAAA,KAAAplB,EAAA0xB,MAAA1xB,EAAA4yB,MAAA,IAAAxN,EAAA,MAAAplB,EAAA0xB,MAAA1xB,EAAA4yB,MAAA,IAAAxN,EAAA,MAAAplB,EAAA0xB,MAAA1xB,EAAA4yB,MAAA,IAAAxN,EAAA,MAAAplB,EAAA0xB,MAAA1xB,EAAA4yB,MAAA,IAAAxN,EAAA,QAAAplB,EAAA0xB,MAAA1xB,EAAA4yB,MAAA,IAAAxN,EAAA,QAAAplB,EAAA0xB,MAAA1xB,EAAA4yB,MAAA,IAAAxN,EAAA,IAAAplB,EAAA2xB,MAAA3xB,EAAAwD,MAAA,IAAA4hB,EAAA,IAAAplB,EAAA4xB,MAAA5xB,EAAAyD,OAQAzD,EAAAwB,SAAA,gzDAQAxB,EAAAQ,QAAA,gEAQAR,EAAAS,QAAA,iHACAT,EAAAkZ,cAAA,8JAGAlZ,EAAAoa,iBAAA,gEAGApa,EAAA0H,WAAA,eAyYA1G,EAAAmqB,MAAA,IACAnqB,EAAAoqB,OAAA,IACApqB,EAAAE,WAAA,IACAF,EAAAC,UAAA,KAmuBA,IAAAioB,EAAA,GA2BA,SAAA2J,IACA,IAAA7d,EAEAsU,EAEAzrB,EAHA5Q,KAAAq8B,GAAA,KAEAr8B,KAAA4Q,MAAA,KAEA,IACAi1B,EADAxS,EAAA,IAAA6F,EAyLA,SAAA4M,EAAAz2B,GACArP,KAAAqP,UAoGA,SAAA02B,EAAA1sB,GACA,QAAArC,EAAA,EAAyBA,EAAAqC,EAAA3B,OAAuBV,IAChD,GAAAqC,EAAAd,SAAAvB,GAAAqC,EAAAV,cAAAU,EAAAjT,OAAA4Q,KAAA,WAEA,SAgBA,SAAAgvB,EAAA1jB,EAAA2jB,EAAAC,EAAAtxB,EAAAitB,GAQA,IAAAsE,EACA,OAAA7jB,GACA,QACA,OAEA2jB,EAAAjN,WAAA,GACAmN,EAAAD,EAAAjN,UAAAgN,EAAAhN,SACAiN,EAAAjN,UAAAgN,EAAAhN,WAAAkN,EAAAD,EAAAn1B,KAAAk1B,EAAAl1B,OAEAo1B,EAAAD,EAAAnN,UAAA,MAAAmN,EAAAnN,UAAAmN,EAAAn1B,MAAA,GAAAk1B,EAAAlN,UAAAkN,EAAAl1B,KAEA,MAEA,OACAo1B,EAAAD,EAAAlN,WAAAiN,EAAAjN,YAAAkN,EAAAlN,YAAAiN,EAAAjN,YAAAkN,EAAArN,WAAAoN,EAAApN,YAAAqN,EAAAlN,YAAAiN,EAAAjN,YAAAhG,EAAA0D,GAAAwP,EAAArN,WAAAoN,EAAApN,aAAAqN,EAAApN,UAAAmN,EAAAnN,UACA,MACA,OACAoN,EAAAnN,UAhCA,SAAA8I,EAAAjtB,GAEA,IADA,IARA6sB,EAQA2E,EAAA,MACApvB,EAAA,EAAyBA,EAAApC,EAAAwsB,OAAiBpqB,IAC1CovB,IAVA3E,EAUAI,EAAA7qB,GATA7H,EAAAI,WAAA,UAAAkyB,QAWA,OAAAvkC,KAAAC,IAAA,MAAAipC,GA2BAC,CAAAxE,EAAAjtB,GAEA,OACAuxB,EAAAD,EAAAnN,UAAAkN,EAAAlN,UACA,MACA,OACAoN,EAAAD,EAAApN,UAAAmN,EAAAnN,UACA,MACA,OACAqN,EAAAD,EAAApN,UAAAmN,EAAAnN,WAAAoN,EAAAnN,UAAAkN,EAAAlN,UACA,MACA,OACAoN,EAAAD,EAAAnN,WAAA,GAAAkN,EAAAlN,UAAA,IAAAmN,EAAAnN,WAAA,GAAAkN,EAAAlN,UAAA,GAAAkN,EAAAlN,UAAAmN,EAAAnN,UAAA,IAAAmN,EAAApN,UAAAmN,EAAAnN,WAAAoN,EAAAnN,WAAA,GAAAkN,EAAAlN,UAAA,GAAAkN,EAAAlN,UAAAmN,EAAAnN,UAAA,IAAAmN,EAAApN,UAAAmN,EAAAnN,UAAAmN,EAAApN,YAAAqN,EAAAnN,UAAA,GAAAkN,EAAAlN,WAAA,KAAAkN,EAAAlN,UAAAmN,EAAAnN,UAAA,IAAAmN,EAAApN,UAAAoN,EAAArN,WAAAoN,EAAAnN,UAAAmN,EAAApN,YAAAqN,EAAAnN,UAAA,GAAAkN,EAAAlN,WAAA,IAAAkN,EAAAlN,UAAAmN,EAAAnN,UAAA,KAAAmN,EAAApN,UAAAoN,EAAArN,WAAAqN,EAAArN,WAAAoN,EAAAnN,UAAAmN,EAAApN,WAAAoN,EAAApN,WACA,MACA,OACAsN,EAAAD,EAAArN,WAAAoN,EAAApN,YAAA7F,EAAA0D,GAAAwP,EAAArN,WAAAoN,EAAApN,aAAAqN,EAAApN,UAAAmN,EAAAnN,UACA,MACA,OACAqN,EAAAD,EAAArN,WAAAoN,EAAApN,YAAA7F,EAAA0D,GAAAwP,EAAArN,WAAAoN,EAAApN,cAAAqN,EAAAnN,UAAAkN,EAAAlN,WAAA/F,EAAA0D,GAAAwP,EAAAnN,UAAAkN,EAAAlN,YAAAmN,EAAApN,WAAAmN,EAAAnN,WACA,MACA,OACAqN,EAAAD,EAAAlN,WAAAiN,EAAAjN,YAAAkN,EAAArN,WAAAoN,EAAApN,WAWA,OARA,GAAAoN,EAAAjN,aAMAmN,KAAAD,EAAAn1B,KAAAk1B,EAAAl1B,MAEAo1B,EAyKA,SAAAG,EAAAliB,EAAA/K,EAAAwoB,EAAA1F,EAAAoK,GACA,IAAA7xB,EAAA0P,EAAAa,gBA9IA,SAAAb,EAAA/K,EAAAwoB,EAAA1F,EAAAoK,GACA,IACAC,EADA9xB,EAAA0P,EAAAa,eAGAuhB,EADA,GAAAntB,EAAAX,eACA,mBAEA,mBAGA,IADA,IAAA+tB,EAAA,EACAzvB,EAAA,EAAyBA,EAAAqC,EAAA3B,OAAuBV,IAChDyvB,EAAA5E,EAAA7qB,KAAAyvB,EAAA5E,EAAA7qB,IAEA,IAAA0vB,EAAAhyB,EAAAgyB,kBAIA,OAHA,GAAAA,IACAA,EAAAH,EAAA,EAA6C,GAE7CG,GACA,OACA,MACA,OACAD,EAAA,EAAAA,EAAAvpC,KAAAq0B,IAAAkV,EAAA,IAAkHA,GAAA,IAClH,MACA,OACA,QACAA,EAAA,EAAAA,EAAA,EAAkGA,GAAA,IAGlG,IAAA7uB,EAAA,EACA,IAAAZ,EAAA,EAAyBA,EAAAqC,EAAA3B,OAAuBV,IAAA,CAChD,IACA5F,EADA9J,EAAA+R,EAAA/R,MAAA0P,GAGA,GADAY,GAAAtQ,IACAu6B,EAAA7qB,GAAAyvB,GAAA,CACA,SAAA/xB,EAAAoE,mBACApE,EAAAwE,WAAAlC,GAAA,GAAAtC,EAAAwE,WAAAlC,GAAA,IACA,GAAAtC,EAAAwE,WAAAlC,IAAA,GAAAtC,EAAAgyB,mBAAA,OAGA,IADArtB,EAAAd,SAAAvB,KACA5F,GAAA9J,EAA0B8J,EAAA,EAAOA,IACjC+qB,EAAAvkB,EAAAxG,IAAAo1B,EACArK,EAAAvkB,EAAAxG,GAAAiI,EAAAhC,YAAAgC,EAAAhC,UAAA8kB,EAAAvkB,EAAAxG,IAEA,MAAAsD,EAAAgyB,kBAAA,SAqGAC,CAAAviB,EAAA/K,EAAAwoB,EAAA1F,EAAAoK,GAKA,IAAAl8B,EAAA07B,EAAA1sB,GACA,OAAAhP,MAIAA,EAAA,GAAAqK,EAAA0E,QAAAysB,EAAA3qB,eAAA7B,GAAmEwsB,EAAA1qB,mBAAAzG,EAAA2E,MAInE3E,EAAA4R,cAAA,IACA7X,EAAAC,KAAAgG,EAAAwE,WAAA,GACA,GAAAG,EAAAX,gBA9GA,SAAAW,EAAA8iB,GAGA,IAFA,IACAvkB,EAAA,EACAZ,EAAA,EAAyBA,EAAAqC,EAAA3B,OAAuBV,IAAA,CAChD,IAAA1P,EAAA+R,EAAA/R,MAAA0P,GACA/Z,EAAAoc,EAAAd,SAAAvB,GAGA,GAFA,GAAAqC,EAAAb,UAAAvb,GAAA2T,EAAA6H,OAAAzB,IACAY,GAAAtQ,EACA,MAAArK,GAAA,CACAA,IACA,QAAAmU,GAAA9J,EAAgC8J,EAAA,EAAOA,IACvC+qB,EAAAvkB,EAAAxG,IAVA,mBAWA+qB,EAAAvkB,EAAAxG,GAAAiI,EAAAhC,YAAAgC,EAAAhC,UAAA8kB,EAAAvkB,EAAAxG,IAGAiI,EAAAd,SAAAvB,GAAA/Z,GAAA,EAEAoc,EAAAb,QAAA,EACAa,EAAAX,eAAA,EA6FAkuB,CAAAvtB,EAAA8iB,GACA9xB,GAAA,GAEAgP,EAAA3C,YAAAtB,EAAAuB,YAAAjC,EAAAiE,cAAA,IACAtO,EA3FA,SAAAqK,EAAA2E,EAAA8iB,GACA,IAAAnlB,EACAuB,EAAAc,EAAAd,SACA,IAAAvB,EAAA,EAAqBA,EAAAqC,EAAAupB,SAAyB5rB,IAC9C,GAAAuB,EAAAvB,IAAA,YAEA,QAAA5Q,EAAA,EAA4BA,EAAA,EAAYA,IAAA,CACxC,IAAAsU,EAAA,EACAE,EAAA,EACA,IAAA5D,EAAAqC,EAAAupB,SAAAx8B,EAAgD4Q,EAAAqC,EAAAsC,UAA0B3E,GAAA,EAC1E0D,EAAAnC,EAAAvB,KAAA0D,EAAAnC,EAAAvB,IAEA,KAAgBA,EAAAqC,EAAA3B,OAAuBV,GAAA,EACvC4D,EAAArC,EAAAvB,KAAA4D,EAAArC,EAAAvB,IAEA,KAAA0D,EAAA,IAAAE,EAAA,IACA,GAAAvB,EAAAV,cAAAvS,IAAA,WAKAiT,EAAAV,cAAAvS,KACA,IAAAwR,EAAAlD,EAAAa,cAAAnE,EAAAiI,EAAAupB,UACA,IAAA5rB,EAAAqC,EAAAupB,SAAAx8B,EAAgD4Q,EAAAqC,EAAA3B,OAAuBV,GAAA,GACvE,IACA1P,EAAA+R,EAAA/R,MAAA0P,GACA/Z,EAAAsb,EAAAvB,GAEA,IADA/Z,GAAA,GAAAoc,EAAAX,iBACA,EACAH,EAAAvB,GAAA/Z,EACA2a,GAAA,EAAAtQ,MAFA,CAKAiR,EAAAvB,GAAA,EAEA,IAAA+B,EAAA,KAAA9b,GAAAoc,EAAAX,eAAA,GACAmuB,EAAAj2B,EAAAuG,OAAA4B,GAEAnB,GAAAtQ,GAAAlB,EAAA,GACA,QAAAgL,GAAA9J,EAAgC8J,EAAA,EAAOA,IACvC+qB,EAAAvkB,EAAAxG,IAAAy1B,EACA1K,EAAAvkB,EAAAxG,GAAAiI,EAAAhC,YAAAgC,EAAAhC,UAAA8kB,EAAAvkB,EAAAxG,IAEAwG,GAAAtQ,GAAA,EAAAlB,EAAA,IAGA,IAAAygC,EAAAj2B,EAAAuG,OAAA,KAEA,IADAS,GAAAyB,EAAA/R,MAAA0P,IAAA5Q,EAAA,GACAgL,GAAAiI,EAAA/R,MAAA0P,GAA8C5F,EAAA,EAAOA,IACrD+qB,EAAAvkB,EAAAxG,IAAAy1B,EACA1K,EAAAvkB,EAAAxG,GAAAiI,EAAAhC,YAAAgC,EAAAhC,UAAA8kB,EAAAvkB,EAAAxG,KAIA,SAqCA01B,CAAApyB,EAAA2E,EAAA8iB,IAAA4J,EAAA1sB,KAIAhP,IACAA,EAAA,GAAAqK,EAAA0E,QAAAysB,EAAA3qB,eAAA7B,GAAqEwsB,EAAA1qB,mBAAAzG,EAAA2E,KAErEhP,IAhjBArK,KAAAgR,WAAA,SAAAgX,EAAA8V,EAAA7sB,EAAAkoB,GACApR,EAAAC,EACAqU,EAAAyB,EACA99B,KAAAq8B,GAAAyB,EACAltB,EAAAK,EACAjR,KAAA4Q,MAAAK,EACA40B,EAAA1M,EACA9F,EAAAriB,WAAAJ,EAAAi1B,IAIA7lC,KAAAw8B,WAAA,SAAAriB,EAAAF,GACA,QAAAxe,EAAA,EAAuBA,EAAA,MAASA,EAAA,CAChC,IAAA2V,EAAA+I,EAAAC,GAAAH,GAAA,GAAA3I,GAAA7V,GACAuqB,EAAA7L,EAAAC,GAAAH,GAAA,GAAA3I,GAAA7V,GACA0e,EAAAC,GAAAH,GAAA,GAAA3I,GAAA7V,IAAA2V,EAAA4U,IAAA,GAAA7W,EAAAG,OACA6K,EAAAC,GAAAH,GAAA,GAAA3I,GAAA7V,IAAA2V,EAAA4U,IAAA,GAAA7W,EAAAG,SAmBAtP,KAAAg9B,WAAA,SAAAtoB,EAAA2E,EAAA8iB,GACA,IAAA9oB,EAAA,EACA6N,EAAA,EAAA7H,EAAAnD,kBASA,GARAmD,EAAAhC,UAAA,EAIA5I,EAAAC,KAAAytB,EAAAjb,EAAA,QACA7N,EAlBA,SAAAgG,EAAA8iB,EAAAjb,EAAA7N,GACAA,EAAA,EACA,QAAA5X,EAAA,EAAuBA,GAAAylB,IAAYzlB,EAAA,CACnC,IAAA2mC,EAAAllC,KAAA4nB,IAAAzL,EAAA/H,GAAA7V,IACA4X,GAAA+uB,EACAjG,EAAA1gC,GAAAyB,KAAA6pC,KAAA3E,EAAAllC,KAAA6pC,KAAA3E,IACAjG,EAAA1gC,GAAA4d,EAAAhC,YAAAgC,EAAAhC,UAAA8kB,EAAA1gC,IAEA,OAAA4X,EAUA2zB,CAAA3tB,EAAA8iB,EAAAjb,EAAA7N,IAGA,OACA,IAAAuE,EAAA,EACA,MAAAlD,EAAAoE,mBAAAlB,EAAA,GACA,QAAAnc,EAAA,EAAyBA,EAAA4d,EAAA+nB,OAAqB3lC,IAC9CiZ,EAAAwE,WAAAzd,GAAAmc,EAEA,SAGA,OADAnJ,EAAAC,KAAA2K,EAAApD,OAAA,UACA,GA2CAjW,KAAA+8B,gBAAA,SAAAroB,EAAA2E,GAIAA,EAAA5D,eAAA,EACA4D,EAAAnE,WAAA,EACAmE,EAAAjD,OAAA,EACAiD,EAAAjC,YAAA,IACAiC,EAAA2B,kBAAA,EACA3B,EAAAvD,aAAA,KACAuD,EAAAvD,aAAA,KACAuD,EAAAvD,aAAA,KACAuD,EAAAV,cAAA,KACAU,EAAAV,cAAA,KACAU,EAAAV,cAAA,KACAU,EAAAV,cAAA,KACAU,EAAAzD,cAAA,EACAyD,EAAAxD,cAAA,EACAwD,EAAAb,QAAA,EACAa,EAAAX,eAAA,EACAW,EAAA5C,mBAAA,EACA4C,EAAA0B,aAAA,EACA1B,EAAAupB,SAAAxtB,EAAAkF,QACAjB,EAAA8nB,SAAA/rB,EAAAksB,QACAjoB,EAAAonB,SAAA/rB,EAAAuyB,YAAA7xB,EAAAC,QAAAD,EAAAkF,QACAjB,EAAA+nB,OAAA/nB,EAAAonB,SACApnB,EAAA3B,OAAA2B,EAAAupB,SACAvpB,EAAAsC,UAAA,GACA,QAAA3E,EAAA,EAAyBA,EAAA5B,EAAAC,QAAuB2B,IAChDqC,EAAA/R,MAAA0P,GAAAtC,EAAAa,cAAAnE,EAAA4F,EAAA,GAAAtC,EAAAa,cAAAnE,EAAA4F,GACAqC,EAAAjT,OAAA4Q,GAAA,EAEA,GAAAqC,EAAA3C,YAAAtB,EAAAuB,WAAA,CACA,IAAAuwB,EAAAn5B,EAAA,KACAsL,EAAA8nB,SAAA,EACA9nB,EAAAupB,SAAA,EACA,GAAAvpB,EAAAqC,mBAKArC,EAAA8nB,SAAA,EACA9nB,EAAAupB,SAAA,EAAAluB,EAAA0E,QAAA,GAEAC,EAAA+nB,OAAA/nB,EAAAupB,SAAA,IAAAluB,EAAAuyB,YAAA7xB,EAAAskB,QAAAtkB,EAAAksB,SAAAjoB,EAAA8nB,UACA9nB,EAAA3B,OAAA2B,EAAAupB,SAAA,GAAAxtB,EAAAksB,QAAAjoB,EAAA8nB,UACA9nB,EAAAsC,UAAAtC,EAAA3B,OAAA,GACA2B,EAAAonB,SAAApnB,EAAAupB,SAMA,IAAApxB,EAAAkD,EAAAa,cAAAnE,EAAAiI,EAAAupB,UAEA,IADA/zB,EAAAC,UAAAuK,EAAA/H,GAAA,EAAA41B,EAAA,OACAlwB,EAAAqC,EAAA8nB,SAA2CnqB,EAAA5B,EAAAskB,QAAuB1iB,IAGlE,IAFA,IAAAlT,EAAA4Q,EAAAa,cAAAtY,EAAA+Z,GACApE,EAAA8B,EAAAa,cAAAtY,EAAA+Z,EAAA,GACA5Q,EAAA,EAAgCA,EAAA,EAAYA,IAC5C,QAAAgL,EAAAtN,EAAiCsN,EAAAwB,EAASxB,IAC1CiI,EAAA/H,GAAAE,KAAA01B,EAAA,EAAA91B,EAAAhL,GAIA,IAAAwR,EAAAyB,EAAAupB,SACA,IAAA5rB,EAAAqC,EAAA8nB,SAA2CnqB,EAAA5B,EAAAskB,QAAuB1iB,IAClEqC,EAAA/R,MAAAsQ,GAAAyB,EAAA/R,MAAAsQ,EAAA,GAAAyB,EAAA/R,MAAAsQ,EAAA,GAAAlD,EAAAa,cAAAtY,EAAA+Z,EAAA,GAAAtC,EAAAa,cAAAtY,EAAA+Z,GACAqC,EAAAjT,OAAAwR,GAAA,EACAyB,EAAAjT,OAAAwR,EAAA,KACAyB,EAAAjT,OAAAwR,EAAA,KACAA,GAAA,EAGAyB,EAAA7D,WAAA,EACA6D,EAAAoD,oBAAA7L,EAAAwL,gBAAA,MACA/C,EAAAqD,KAAA,KACArD,EAAAqD,KAAA,KACArD,EAAAqD,KAAA,KACArD,EAAAqD,KAAA,KACArD,EAAAnD,kBAAA,IAGAzH,EAAAC,KAAA2K,EAAAd,SAAA,GArHA,SAAA7D,EAAA2E,GACA,IAAAqlB,EAAAhqB,EAAA0kB,IACA9nB,EAAA+H,EAAA/H,GACA,GAAA+H,EAAA3C,YAAAtB,EAAAuB,WAEA,IADA,IAAAzU,GAAA,EACAm+B,EAAAjrB,EAAAwkB,OAAA,EAA6CyG,GAAA,IAAAn+B,EAAoBm+B,IAAA,CACjE,IAAAv8B,EAAA4Q,EAAAa,cAAAokB,OAAA0G,GACAztB,EAAA8B,EAAAa,cAAAokB,OAAA0G,EAAA,GACA8G,EAAAv2B,EAAAovB,UAAAtB,EAAAnF,OAAAmF,EAAA/E,OAAA0G,GAAA3B,EAAA9P,OACAla,EAAAwQ,MAAAua,SAAA,YAAA0H,GAAAzyB,EAAAwQ,MAAAua,SAAA,KACA,QAAA7nB,EAAAhF,EAAA,EAAiCgF,GAAA9T,EAAY8T,IAAA,CAC7C,KAAA1a,KAAA4nB,IAAAxT,EAAAsG,IAAAuvB,GAAqD,CACrDjlC,GAAA,EACA,MAFAoP,EAAAsG,GAAA,QAOA,QAAAwvB,EAAA,EAA0EA,EAAA,EAAWA,IAErF,IADAllC,GAAA,EACAm+B,EAAAjrB,EAAA0kB,OAAA,EAA+CuG,GAAA,IAAAn+B,EAAoBm+B,IAAA,CAEnEztB,GADA9O,EAAA,EAAA4Q,EAAAa,cAAAtY,EAAA,KAAAyX,EAAAa,cAAAtY,EAAA,IAAAyX,EAAAa,cAAAtY,EAAA,KAAAmqC,GAAA1yB,EAAAa,cAAAskB,OAAAwG,GAAA3rB,EAAAa,cAAAskB,OAAA,MACAnlB,EAAAa,cAAAskB,OAAAwG,EAAA,GAAA3rB,EAAAa,cAAAskB,OAAAwG,IADA,IAEAgH,EAAAz2B,EAAAovB,UAAAtB,EAAAnF,OAAAmF,EAAA7E,OAAAwG,GAAA3B,EAAA9P,OAEA,IADAla,EAAAwQ,MAAAwa,UAAA,YAAA2H,GAAA3yB,EAAAwQ,MAAAwa,UAAA,KACA9nB,EAAAhF,EAAA,EAAmCgF,GAAA9T,EAAY8T,IAAA,CAC/C,KAAA1a,KAAA4nB,IAAAxT,EAAAsG,IAAAyvB,GAAuD,CACvDnlC,GAAA,EACA,MAFAoP,EAAAsG,GAAA,IA4FA0vB,CAAA5yB,EAAA2E,IAKAysB,EAAAyB,eAAA,IAAAzB,EAAA,GACAA,EAAA0B,aAAA,IAAA1B,EAAA,GACAA,EAAA2B,eAAA,IAAA3B,EAAA,GAgDA9lC,KAAA0nC,wBAAA,SAAAhzB,EAAAE,EAAAonB,EAAA2L,GACA,IAAA9F,EAAA9zB,EAAAkuB,EAAAC,QACA,UAAAxnB,EAAAoE,kBAAAlE,EAAA8B,YAAAtB,EAAAuB,aAAA,QAAAjC,EAAAoE,iBAAA,CACAlI,EAAAgxB,WAAAhtB,EAAAonB,EAAA6F,EAAA,IAAAjJ,EAAA,MACA,QAAAhhB,EAAA,EAAuBA,EAAA,IAASA,IAAA,CAChC,IAAAtG,EAAA,EACA,GAAAsD,EAAAqB,OAAA2B,KAAAtG,EAAApU,KAAA4nB,IAAAlQ,EAAAtD,GAAAsG,KACA+vB,EAAA/vB,GAAAtG,EAEAsG,EAAA,MACAZ,EAAA,EACApC,EAAA8B,YAAAtB,EAAAuB,aAAAK,EAAA,GACA,GACA,IAAA4wB,EAAAC,EACAC,EAAAhkC,EACAwD,EAAAsN,EAAAtN,MAAA0P,GAEA,GADAY,GAAAtQ,IACAu6B,EAAA7qB,IAAA,KACAvI,EAAAs5B,KAAAJ,EAAA/vB,EAAAtQ,MACA0rB,EAAA0D,GAAAiR,EAAA/vB,EAAA,QACAgwB,GAAA,EAAA/F,EAAA7qB,IAAAglB,EAAAhlB,GACA6wB,EAAA,EACA/jC,EAAA,EACA,GACA,IAAA29B,EACA,IAAAqG,EAAA,EAA2BhkC,EAAAgkC,EAAAxgC,IAC3B0rB,EAAAyF,IAAAkP,EAAA7jC,EAAA8T,EAAAtQ,GAAAqgC,EAAA7jC,EAAA8T,EAAAkwB,EAAAxgC,IADkDwgC,KAIlD,GAAAF,GADAnG,EAAAkG,EAAA7jC,EAAA8T,EAAAtQ,GAAAqgC,EAAA7jC,EAAA8T,EAAAtQ,GAAAwgC,GACA,CACA,GAAAhkC,IAAA+jC,EAAAF,EAAA7jC,EAAA8T,EAAAtQ,EAAA,IACA,MAEAsgC,GAAAnG,EACA39B,GAAAgkC,QACWhkC,EAAAwD,GACX,IAAA0rB,EAAA0D,GAAAmR,EAAA,GACA,GACA3qC,KAAA4nB,IAAAlQ,EAAAtD,GAAAsG,EAAAtQ,KAAAugC,IAAAjzB,EAAAqB,OAAA2B,EAAAtQ,GAAA,WACWA,EAAA,YACF0P,EAAApC,EAAAwsB,QACTxsB,EAAAa,eAAAowB,EAAA9vB,mBAAArB,EAAAE,EAAA,QAmTA5U,KAAAk9B,WAAA,SAAA9Y,EAAA/K,EAAA2iB,EAAAG,EAAAjiB,EAAA+O,GACA,IAAAvU,EAAA0P,EAAAa,eACA+iB,EAAA,IAAA7uB,EACA8uB,EAAAl6B,EAAA,KACA8zB,EAAA9zB,EAAAkuB,EAAAC,QACAgM,EAAA,IAAAtP,EAEA5iB,EAAA,IAAAutB,EACA4E,EAAA,QACAC,GAAA,EACA7B,GAAA,EACA8B,EAAA,EAEA,GAnZA,SAAA3zB,EAAA2E,EAAAivB,EAAApuB,EAAAiiB,GACA,IAAAoM,EACAC,EAAA9zB,EAAA8zB,YAAAtuB,GACAuuB,GAAA,EACA3kC,EAAA4Q,EAAAg0B,SAAAxuB,GACAyuB,EAAA7C,EAAAyB,eAGA,IAFAluB,EAAAjC,YAAAtT,EACAwkC,GAAAjvB,EAAA0B,eACe,CACf,IAAAzC,EAEA,GADAiwB,EAAA1C,EAAA5uB,WAAAvC,EAAAynB,EAAA9iB,EAAA,MACA,GAAAmvB,GAAAD,GAAAD,EAAA,MACAC,EAAAD,GACAK,GAAA7C,EAAA2B,iBAAAgB,GAAA,GACAA,IAAAD,GAAA,GACAG,EAAA7C,EAAA0B,aACAlvB,EAAAkwB,IAEAG,GAAA7C,EAAA0B,eAAAiB,GAAA,GACAA,IAAAD,GAAA,GACAG,EAAA7C,EAAA2B,eACAnvB,GAAAkwB,GAEAnvB,EAAAjC,aAAAkB,EACAe,EAAAjC,YAAA,IACAiC,EAAAjC,YAAA,EACAqxB,GAAA,GAEApvB,EAAAjC,YAAA,MACAiC,EAAAjC,YAAA,IACAqxB,GAAA,GAGA,KAAAF,EAAAD,GAAAjvB,EAAAjC,YAAA,KACAiC,EAAAjC,cACAmxB,EAAA1C,EAAA5uB,WAAAvC,EAAAynB,EAAA9iB,EAAA,MAEA3E,EAAA8zB,YAAAtuB,GAAApW,EAAAuV,EAAAjC,aAAA,MACA1C,EAAAg0B,SAAAxuB,GAAAb,EAAAjC,YACAiC,EAAA5D,eAAA8yB,EA2WAK,CAAAl0B,EAAA2E,EAAA4P,EAAA/O,EAAAiiB,GACA,GAAAznB,EAAA4R,cAAA,WACA1V,EAAAgxB,WAAAvoB,EAAA2iB,EAAA6F,EAAAqG,EAAAlyB,GACAkyB,EAAAn3B,KAAAsI,EAAA5D,eACAuyB,EAAAr8B,OAAA0N,GACA,IAAAwvB,EAAA,EAEA,IADAh6B,EAAAC,UAAAqtB,EAAA,EAAA8L,EAAA,QACAG,GAAA,CACA,GACA,IACAU,EADAC,EAAA,IAAAnQ,EAEAoQ,EAAA,IAiBA,GAVAF,EADA,MAAAp0B,EAAAoE,iBACA,GAEA,EAQApE,EAAAuyB,YAAA,CACA,GAAApF,EAAAmG,EAAAtwB,QAAA,QACA,GAAAswB,EAAAtxB,YAAAtB,EAAAuB,aAAAkrB,EAAAmG,EAAAtwB,OAAA,MAAAmqB,EAAAmG,EAAAtwB,OAAA,YAEA,IAAA4uB,EAAAliB,EAAA4jB,EAAAnG,EAAA1F,EAAAoK,GAAA,MACA,GAAAyB,EAAAtvB,iBAAAswB,EAAA,KAOA,IAAAC,EAAAhgB,EAAA+e,EAAAjtB,aACA,GAAAkuB,GAAA,QAIA,MAAAjB,EAAAvyB,eAAAowB,EAAA5uB,WAAAvC,EAAAynB,EAAA6L,EAAAhyB,IAAAizB,GAAAjB,EAAA5wB,aAAA4xB,GACAhB,EAAA5wB,cAEA,GAAA4wB,EAAA5wB,YAAA4xB,EAAA,MACA,MAAAd,EAAAlP,WAAA,CACA,MAAAgP,EAAAvyB,eAAAowB,EAAA5uB,WAAAvC,EAAAynB,EAAA6L,EAAAhyB,IAAAmyB,GAAAH,EAAA5wB,aAAA4xB,GACAhB,EAAA5wB,cAEA,GAAA4wB,EAAA5wB,YAAA4xB,EAAA,MAYA,GAVAp4B,EAAAgxB,WAAAoG,EAAAhM,EAAA6F,EAAAkH,EAAA/yB,GACA+yB,EAAAh4B,KAAAi3B,EAAAvyB,eASA,IADAuwB,EAJA3sB,EAAA3C,YAAAtB,EAAAuB,WAEAyN,EAAA9B,WACa8B,EAAAW,iBACbmjB,EAAAa,EAAAf,EAAAnG,GAAA,KAEAsG,EAAA9uB,EAAA5D,eACAyyB,EAAAa,EACA1vB,EAAA1N,OAAAq8B,GACAa,EAAA,EACAh6B,EAAAC,UAAAqtB,EAAA,EAAA8L,EAAA,YAEA,MAAAvzB,EAAAw0B,gBAAA,CACA,KAAAL,EAAAC,GAAA,GAAAZ,EAAAlP,WAAA,MACA,MAAAtkB,EAAAgyB,mBAAAH,GAAAsC,EAAA,SACA,MAAAn0B,EAAAgyB,mBAAAH,GAAAyB,EAAA5wB,YAAAixB,EAAA,gBAGWL,EAAA5wB,YAAA4wB,EAAAtvB,eAAA,KACX,GAAAhE,EAAAgyB,kBACAH,EAOA6B,GAAA,GANAJ,EAAAr8B,OAAA0N,GACAxK,EAAAC,UAAAm5B,EAAA,EAAA9L,EAAA,OACA0M,EAAA,EACAR,EAAAL,EAAA5wB,YACAmvB,GAAA,GAKA6B,GAAA,EAQA,OAHAhkB,EAAAG,KAAAxU,EAAAyU,QAAAJ,EAAAG,KAAAxU,EAAA6W,SAAA/X,EAAAC,UAAAm5B,EAAA,EAAA9L,EAAA,OAEA,MAAAznB,EAAAoE,kBAAA4uB,wBAAAhzB,EAAA2E,EAAA2iB,EAAAG,GACA+L,EAAAlP,YAMAh5B,KAAAm9B,qBAAA,SAAAzoB,EAAAuF,EAAAC,GACA,IAAAC,EAAAzF,EAAAyF,QACAd,EAAAc,EAAAC,GAAAH,GAAAC,GAGA2rB,EAAA7rB,oBAAAtF,EAAAuF,EAAAC,EAAAC,GAGA,GAAAzF,EAAAoC,kBAAA+uB,EAAA9uB,oBAAArC,EAAA2E,GAGAgjB,EAAAhT,WAAA3U,EAAA2E,IAUArZ,KAAAmpC,mBAAA,SAAA/kB,EAAA/K,EAAA2iB,EAAAG,EAAAjiB,EAAAkvB,EAAArN,GACA,IAMAsN,EANA30B,EAAA0P,EAAAa,eACAqkB,EAAA,IAAAnwB,EACAowB,EAAAx7B,EAAA,KACAy7B,EAAAzN,EACA0N,EAAA1N,EAAA,EACA2N,GAAA3N,EAAAqN,GAAA,EAGAO,EAAA,EACA1C,EAAAvyB,EAAAuyB,YACAx4B,EAAAC,KAAA46B,EAAArzB,OAAA,GAGA,GACAvB,EAAAuyB,cAAAyC,EAAAF,EAAA,KAAiEvC,EACjE/J,WAAA9Y,EAAA/K,EAAA2iB,EAAAG,EAAAjiB,EAAAwvB,IAIA,GACAC,EAAA,EAIAF,EAAApwB,EAAA5D,eAGA6zB,EAAA39B,OAAA0N,GACAxK,EAAAC,UAAAqtB,EAAA,EAAAoN,EAAA,OAIAF,GADAtN,EAAA0N,EAAA,IACAL,EACAM,GAAA3N,EAAAqN,GAAA,IAMAC,EAAAtN,GADAqN,EAAAM,EAAA,IAEAA,GAAA3N,EAAAqN,GAAA,EACA,GAAAO,IACAA,EAAA,EAGAtwB,EAAA1N,OAAA29B,GACAz6B,EAAAC,UAAAy6B,EAAA,EAAApN,EAAA,eAGSkN,EAAA,IACT30B,EAAAuyB,cAKA,GAAA0C,GACA96B,EAAAC,UAAAw6B,EAAArzB,OAAA,EAAAoD,EAAApD,OAAA,QASAjW,KAAA4pC,cAAA,SAAAxlB,EAAAylB,GACA,IAAAn1B,EAAA0P,EAAAa,eAIAvQ,EAAAuW,cAAAvW,EAAAo1B,gBACA,IAAA9T,EAAAjO,EAAAM,aAAAjE,GAGA1P,EAAAuW,cAAA,EACA+K,EAAAjO,EAAAM,aAAAjE,GACA,QAAA3oB,EAAA,EAAuBA,GAAAiZ,EAAAq1B,gBAA0BtuC,IAAA,CACjDiZ,EAAAuW,cAAAxvB,EACA,IAAA2gC,EAAA,IAAA1D,EAAA1C,GACA6T,EAAApuC,GAAA4gC,EAAApU,eAAA7D,EAAAgY,GACApG,EAAAoG,EAAArrB,OAoBA/Q,KAAAgqC,gBAAA,SAAA5lB,EAAAwX,EAAAC,EAAAC,EAAAE,EAAA6N,EAAAT,EAAArN,EAAAkO,GACA,IACAvN,EADAhoB,EAAA0P,EAAAa,eAEAsU,EAAA,EACA2Q,EAAA,EACAn5B,EAAA,EACA2D,EAAAuW,cAAAvW,EAAAq1B,gBACA,IAAAI,EAAA9N,EAAApU,eAAA7D,EAAA,IAAAsU,EAAA,IAAAhkB,EAAA0E,QACAwwB,cAAAxlB,EAAAylB,GACA,QAAA5vB,EAAA,EAAwBA,EAAAvF,EAAA0E,QAAkBa,IAAA,CAC1C,IAAAmwB,EAAAx5B,EAAA0rB,MAAAlY,EAAAwX,EAAAG,EAAA9hB,GAAAkwB,EAAAlwB,EAAA,GACAvF,EAAA2W,UAAAjW,EAAAmnB,eACAC,WAAA9nB,EAAAyF,QAAAF,GACArJ,EAAA6rB,YAAAV,EAAA9hB,GAAA4hB,EAAA5hB,GAAAkwB,EAAAC,IAEA,QAAAlwB,EAAA,EAA0BA,EAAAxF,EAAAmiB,eAAuB3c,EAAA,CACjD,IAAAb,EAAA3E,EAAAyF,QAAAC,GAAAH,GAAAC,GACAb,EAAA3C,YAAAtB,EAAAuB,YAEA4iB,EAAA,QAAAr8B,KAAAmtC,IAAA,IAAAzO,EAAA3hB,GAAAC,GAAA,UACAwiB,EAAAhoB,EAAAioB,IAAAC,YAAArD,IAEAA,EAAA,QAAAr8B,KAAAmtC,IAAA,IAAAzO,EAAA3hB,GAAAC,GAAA,UACAwiB,EAAAhoB,EAAAioB,IAAAE,kBAAAtD,GAEA7kB,EAAAooB,cAAA5/B,KAAAq0B,IAAA,MAAAmL,GACAK,gBAAAroB,EAAA2E,GACA4wB,EAAAhwB,GAAAC,GAAAtJ,EAAAqsB,UAAA7Y,EAAA0X,EAAA7hB,GAAAC,GAAAb,EAAA2iB,EAAA/hB,GAAAC,IACA,GAAA+vB,EAAAhwB,GAAAC,KAAAgwB,EAAA,GACAd,EAAAnvB,GAAAC,GAAA,IACAnJ,GAAAgrB,EAAA9hB,GAAAC,IAGA,IAAAD,EAAA,EAAwBA,EAAAvF,EAAA0E,QAAkBa,IAC1C,IAAAC,EAAA,EAA0BA,EAAAxF,EAAAmiB,aAAuB3c,IACjDnJ,EAAA84B,EAAAn1B,EAAAq1B,mBACAhO,EAAA9hB,GAAAC,IAAA2vB,EAAAn1B,EAAAq1B,iBACAhO,EAAA9hB,GAAAC,IAAAnJ,GAEAq4B,EAAAnvB,GAAAC,GAAA6hB,EAAA9hB,GAAAC,KAAAkvB,EAAAnvB,GAAAC,GAAA6hB,EAAA9hB,GAAAC,IAGA,OAAAgwB,GAEAlqC,KAAAsqC,qBAAA,SAAA51B,EAAAsnB,EAAAoN,EAAArN,GACA,QAAA9hB,EAAA,EAAwBA,EAAAvF,EAAA0E,QAAkBa,IAC1C,QAAAC,EAAA,EAA0BA,EAAAxF,EAAAmiB,aAAuB3c,IAAA,CAIjD,IAHA,IAAAtF,EAAAF,EAAAyF,QAAAC,GAAAH,GAAAC,GACAkmB,EAAApE,EAAA/hB,GAAAC,GACAomB,EAAA,EACAtpB,EAAA,EAA6BA,EAAApC,EAAA6rB,SAAmBzpB,IAChDopB,EAAAE,MAAA,OAAAtpB,IAAA5B,EAAAC,QAAAD,EAAAC,QAEA,GAAAT,EAAA8B,YAAAtB,EAAAuB,WACA,IAAAK,EAAApC,EAAAusB,SAAyCnqB,EAAA5B,EAAAskB,QAAuB1iB,IAChEopB,EAAAE,MAAA,OAAAtpB,IAAA5B,EAAAskB,QAAAtkB,EAAAskB,QACA0G,EAAAE,MAAA,OAAAtpB,IAAA5B,EAAAskB,QAAAtkB,EAAAskB,QACA0G,EAAAE,MAAA,OAAAtpB,IAAA5B,EAAAskB,QAAAtkB,EAAAskB,QAGAqC,EAAA9hB,GAAAC,GAAA,EAAAhd,KAAAC,IAAAisC,EAAAnvB,GAAAC,GAAA,GAAA6hB,EAAA9hB,GAAAC,MAIAla,KAAAuqC,gBAAA,SAAAnmB,EAAAwX,EAAAE,EAAAE,EAAA6N,EAAA9N,GACA,IAIAyO,EAJA91B,EAAA0P,EAAAa,eACAilB,EAAA,EACAC,EAAA,EACAp5B,EAAA,EAEA,GAAAqT,EAAAwH,YAQAlX,EAAAuW,cAAA,EACAmR,EAAA,IAAA1D,EAAAyR,GACAK,EAAAnO,EAAApU,eAAA7D,EAAAgY,GACA+N,EAAA/N,EAAArrB,KACA84B,EAAA,GAAAW,MAZA,CACA91B,EAAAuW,cAAAvW,EAAAq1B,gBACA,IAAA3N,EAAA,IAAA1D,EAAAyR,GACA9N,EAAApU,eAAA7D,EAAAgY,GACA+N,EAAA/N,EAAArrB,KACA64B,cAAAxlB,EAAAylB,GACAW,EAAAX,EAAAn1B,EAAAq1B,iBAQA,QAAA9vB,EAAA,EAAwBA,EAAAvF,EAAA0E,QAAkBa,IAAA,CAC1CrJ,EAAA0rB,MAAAlY,EAAAwX,EAAAG,EAAA9hB,GAAAkwB,EAAAlwB,EAAA,GACAvF,EAAA2W,UAAAjW,EAAAmnB,cACAC,WAAA9nB,EAAAyF,QAAAF,GAEA,QAAAC,EAAA,EAA0BA,EAAAxF,EAAAmiB,eAAuB3c,EAAA,CACjD,IAAAb,EAAA3E,EAAAyF,QAAAC,GAAAH,GAAAC,GACAxF,EAAAooB,cAAA5/B,KAAAq0B,IAAA,MAAA7c,EAAAioB,IAAAC,aACAG,gBAAAroB,EAAA2E,GACA,GAAAzI,EAAAqsB,UAAA7Y,EAAA0X,EAAA7hB,GAAAC,GAAAb,EAAA2iB,EAAA/hB,GAAAC,MAAAgwB,EAAA,GACAn5B,GAAAgrB,EAAA9hB,GAAAC,IAGA,IAAAD,EAAA,EAAwBA,EAAAvF,EAAA0E,QAAkBa,IAC1C,IAAAC,EAAA,EAA0BA,EAAAxF,EAAAmiB,aAAuB3c,IACjDnJ,EAAAy5B,IACAzO,EAAA9hB,GAAAC,IAAAswB,EACAzO,EAAA9hB,GAAAC,IAAAnJ,GAIA,OAAAm5B,GAMAlqC,KAAAyqC,iBAAA,SAAArmB,EAAAwX,EAAAC,EAAA5S,EAAAyhB,EAAAC,GACA,IAEAC,EACA3wB,EACAC,EACA2wB,EALAn2B,EAAA0P,EAAAa,eACA9K,EAAAzF,EAAAyF,QAKA+N,EAAA,EACAxT,EAAAuW,cAAAvW,EAAAq1B,gBACA,IAAA3N,EAAA,IAAA1D,EAAAxQ,GAiCA,IAhCAyiB,EAAA,GAAAtO,EAAApU,eAAA7D,EAAAgY,GACAlU,EAAAkU,EAAArrB,KACA2D,EAAAuW,cAAA,EACA/C,EAAAH,EAAAM,aAAAjE,GAAA,EAAA1P,EAAA4T,aACAoiB,EAAA,GAAAxiB,GAAAxT,EAAA0E,QAAA1E,EAAAmiB,cACA3O,EAAA9D,EAAA+B,sBAAA/B,EAAAiX,UAAA,IACA,MAAA3mB,EAAAoE,mBAAAoP,GAAA,MACAA,GAAA9D,EAAAoE,eACAN,GAAA,EAAAxT,EAAA4T,aACAJ,GAAAxT,EAAA0E,QAAA1E,EAAAmiB,cAoBA+T,EAAA,YAAAxmB,EAAAqW,mBAAA,KACA,KAAAmQ,EAAA,IACAA,EAAA,IAAAA,EAAA,GACA3wB,EAAA,EAAoBA,EAAAvF,EAAA0E,QAAkBa,IAAA,CACtC,IAAA5G,EAAA,EACA,IAAA6G,EAAA,EAAsBA,EAAAxF,EAAAmiB,aAAuB3c,IAAA,CAE7C,GADA+O,EAAAhP,GAAAC,GAAAqM,IAAAqkB,EAAA1iB,GACA0T,EAAA3hB,GAAAC,GAAA,KACA,IAAAiP,EAAA5C,KAAAqV,EAAA3hB,GAAAC,GAAA,UACAb,EAAAc,EAAAC,GAAAH,GAAAC,GACA+O,EAAAhP,GAAAC,GAAAqM,IAAAqkB,EAAA1iB,GACA7O,EAAA3C,YAAAtB,EAAAuB,YACAwS,EAAAjB,EAAA,IAAAiB,EAAAjB,EAAA,GAEAiB,EAAA,EAAAjB,EAAA,EAAAiB,EAAA,EAAAjB,EAAA,EAA6EiB,EAAA,IAAAA,EAAA,GAC7EF,EAAAhP,GAAAC,IAAAiP,EAEAF,EAAAhP,GAAAC,GAAA8Z,EAAA6L,uBACA5W,EAAAhP,GAAAC,GAAA8Z,EAAA6L,sBAEAxsB,GAAA4V,EAAAhP,GAAAC,GAEA,GAAA7G,EAAA2gB,EAAA4L,qBACA,IAAA1lB,EAAA,EAAwBA,EAAAxF,EAAAmiB,eAAuB3c,EAC/C+O,EAAAhP,GAAAC,IAAA8Z,EAAA4L,qBACA3W,EAAAhP,GAAAC,IAAA7G,EAIA,GAAAqB,EAAA2W,UAAAjW,EAAAmnB,aAAA,IAAAtiB,EAAA,EAA8DA,EAAAvF,EAAA0E,QAAkBa,IAChFrJ,EAAA6rB,YAAAxT,EAAAhP,GAAA4hB,EAAA5hB,GAAAiO,EAAAxT,EAAAmiB,aAAA7C,EAAA4L,sBAKA,IADAiL,EAAA,EACA5wB,EAAA,EAAoBA,EAAAvF,EAAA0E,QAAkBa,IACtC,IAAAC,EAAA,EAAsBA,EAAAxF,EAAAmiB,aAAuB3c,IAC7C+O,EAAAhP,GAAAC,GAAA8Z,EAAA6L,uBAAA5W,EAAAhP,GAAAC,GAAA8Z,EAAA6L,sBACAgL,GAAA5hB,EAAAhP,GAAAC,GAKA,GAAA2wB,EAAAF,EAAA,GACA,IAAA1wB,EAAA,EAAsBA,EAAAvF,EAAA0E,QAAkBa,IACxC,IAAAC,EAAA,EAAwBA,EAAAxF,EAAAmiB,aAAuB3c,IAC/C+O,EAAAhP,GAAAC,IAAAywB,EAAA,GACA1hB,EAAAhP,GAAAC,IAAA2wB,GA6BA,SAAAC,IACA,IAAAC,EAAA,08JAAA57B,EAAAG,MAAA,sBAAAH,EAAAG,MAAA,sBAAAH,EAAAG,MAAA,sBAAAH,EAAAG,MAAA,qBAAAH,EAAAG,MAAA,qBAAAH,EAAAG,MAAA,qBAAAH,EAAAG,MAAA,oBAAAH,EAAAG,MAAA,2IAGA07B,EAAA,kxFACAC,EAAAD,EAAA51B,EAAAuB,YACAu0B,EAAAF,EAAA51B,EAAAuB,YACAw0B,EAAAH,EAAA51B,EAAAuB,YACAy0B,EAAAJ,EAAA51B,EAAAuB,YAWA00B,EAAA,wFAGA,SAAAC,EAAAx5B,EAAAy5B,EAAA7rC,GAGA,IAFA,IAiEAygC,EAAAtW,EA2BAvY,EA5FAk6B,EAAA,GACAz5B,EAAAw5B,EAAA,WACA9vC,GAAA,GAAyBA,EAAA,EAAOA,IAAA,CAChC,IAAAyb,EAAAja,EAAA4W,EACAqD,EAAA6zB,EAAAS,GAAA,IACAvuC,EAAA6U,EAAAC,GAAA,KAAAmF,EACArD,EAAA/B,EAAAy5B,EAAA,KAAAr0B,EACAA,EAAA6zB,EAAAS,GAAA,GACAvuC,GAAA6U,EAAAC,GAAA,KAAAmF,EACArD,GAAA/B,EAAAy5B,EAAA,KAAAr0B,EACAA,EAAA6zB,EAAAS,GAAA,GACAvuC,GAAA6U,EAAAC,GAAA,IAAAmF,EACArD,GAAA/B,EAAAy5B,EAAA,IAAAr0B,EACAA,EAAA6zB,EAAAS,GAAA,GACAvuC,GAAA6U,EAAAC,GAAA,IAAAmF,EACArD,GAAA/B,EAAAy5B,EAAA,IAAAr0B,EACAA,EAAA6zB,EAAAS,GAAA,GACAvuC,GAAA6U,EAAAC,EAAA,IAAAmF,EACArD,GAAA/B,EAAAy5B,GAAA,IAAAr0B,EACAA,EAAA6zB,EAAAS,GAAA,GACAvuC,GAAA6U,EAAAC,EAAA,IAAAmF,EACArD,GAAA/B,EAAAy5B,GAAA,IAAAr0B,EACAA,EAAA6zB,EAAAS,GAAA,GACAvuC,GAAA6U,EAAAC,EAAA,KAAAmF,EACArD,GAAA/B,EAAAy5B,GAAA,KAAAr0B,EACAA,EAAA6zB,EAAAS,GAAA,GACAvuC,GAAA6U,EAAAC,EAAA,KAAAmF,EACArD,GAAA/B,EAAAy5B,GAAA,KAAAr0B,EACAA,EAAA6zB,EAAAS,GAAA,GACAvuC,GAAA6U,EAAAy5B,GAAA,KAAAr0B,EACArD,GAAA/B,EAAAC,EAAA,KAAAmF,EACAA,EAAA6zB,EAAAS,GAAA,GACAvuC,GAAA6U,EAAAy5B,GAAA,KAAAr0B,EACArD,GAAA/B,EAAAC,EAAA,KAAAmF,EACAA,EAAA6zB,EAAAS,EAAA,GACAvuC,GAAA6U,EAAAy5B,GAAA,KAAAr0B,EACArD,GAAA/B,EAAAC,EAAA,KAAAmF,EACAA,EAAA6zB,EAAAS,EAAA,GACAvuC,GAAA6U,EAAAy5B,GAAA,IAAAr0B,EACArD,GAAA/B,EAAAC,EAAA,IAAAmF,EACAA,EAAA6zB,EAAAS,EAAA,GACAvuC,GAAA6U,EAAAy5B,EAAA,GAAAr0B,EACArD,GAAA/B,EAAAC,EAAA,GAAAmF,EACAA,EAAA6zB,EAAAS,EAAA,GACAvuC,GAAA6U,EAAAy5B,EAAA,IAAAr0B,EACArD,GAAA/B,EAAAC,GAAA,IAAAmF,EACAA,EAAA6zB,EAAAS,EAAA,GACAvuC,GAAA6U,EAAAy5B,EAAA,KAAAr0B,EACArD,GAAA/B,EAAAC,GAAA,KAAAmF,EACAA,EAAA6zB,EAAAS,EAAA,GACAvuC,GAAA6U,EAAAy5B,EAAA,KAAAr0B,EAOAA,GANArD,GAAA/B,EAAAC,GAAA,KAAAmF,IAKAja,GAAA8tC,EAAAS,EAAA,IAEA9rC,EAAA,KAAAjE,GAAAoY,EAAA5W,EACAyC,EAAA,KAAAjE,GAAAsvC,EAAAS,EAAA,GAAAt0B,EACAs0B,GAAA,GACAD,IACAx5B,IAIA8B,EAAA/B,EAAAy5B,GAAA,IAAAR,EAAAS,GAAA,IACAvuC,EAAA6U,EAAAy5B,GAAA,IAAAR,EAAAS,GAAA,GACA33B,IAAA/B,EAAAy5B,GAAA,IAAAz5B,EAAAy5B,EAAA,KAAAR,EAAAS,GAAA,GACAvuC,GAAA6U,EAAAy5B,GAAA,IAAAR,EAAAS,GAAA,GACA33B,IAAA/B,EAAAy5B,GAAA,IAAAz5B,EAAAy5B,EAAA,KAAAR,EAAAS,GAAA,GACAvuC,GAAA6U,EAAAy5B,GAAA,KAAAR,EAAAS,EAAA,GACA33B,IAAA/B,EAAAy5B,GAAA,KAAAz5B,EAAAy5B,EAAA,KAAAR,EAAAS,GAAA,GACAvuC,GAAA6U,EAAAy5B,GAAA,KAAAR,EAAAS,EAAA,GACA33B,IAAA/B,EAAAy5B,GAAA,KAAAz5B,EAAAy5B,EAAA,MAAAR,EAAAS,GAAA,GACAvuC,GAAA6U,EAAAy5B,EAAA,IAAAR,EAAAS,EAAA,GACA33B,IAAA/B,EAAAy5B,GAAA,KAAAz5B,EAAAy5B,EAAA,MAAAR,EAAAS,GAAA,GACAvuC,GAAA6U,EAAAy5B,EAAA,IAAAR,EAAAS,EAAA,GACA33B,IAAA/B,EAAAy5B,GAAA,KAAAz5B,EAAAy5B,EAAA,MAAAR,EAAAS,GAAA,GACAvuC,GAAA6U,EAAAy5B,EAAA,KAAAR,EAAAS,EAAA,GACA33B,IAAA/B,EAAAy5B,GAAA,KAAAz5B,EAAAy5B,EAAA,MAAAR,EAAAS,GAAA,GAEArL,GADAljC,GAAA6U,EAAAy5B,EAAA,MACA13B,EACAgW,EAAA5sB,EAAA4W,EACAA,EAAAnU,EAAA,IACAzC,EAAAyC,EAAA,IAAAmU,EACAnU,EAAA,IAAAmqB,EAAAhW,EACAnU,EAAA,IAAAygC,EAAAljC,EACAyC,EAAA,IAAAygC,EAAAljC,EACAyC,EAAA,IAAAmqB,EAAAhW,EAIAvC,EAAA5R,EAAA,IAAAA,EAAA,GACAA,EAAA,IAAAA,EAAA,IACAA,EAAA,IAAA4R,EAAAy5B,EAAAS,GAAA,MACAl6B,EAAA5R,EAAA,IAAAA,EAAA,GACAA,EAAA,IAAAA,EAAA,IACAA,EAAA,IAAA4R,EAAAy5B,EAAAS,GAAA,MACAl6B,EAAA5R,EAAA,IAAAA,EAAA,GACAA,EAAA,IAAAA,EAAA,IACAA,EAAA,IAAA4R,EAAAy5B,EAAAS,GAAA,MACAl6B,EAAA5R,EAAA,IAAAA,EAAA,GACAA,EAAA,IAAAA,EAAA,IACAA,EAAA,IAAA4R,EAAAy5B,EAAAS,GAAA,MACAl6B,EAAA5R,EAAA,IAAAA,EAAA,GACAA,EAAA,IAAAA,EAAA,IACAA,EAAA,IAAA4R,EAAAy5B,EAAAS,GAAA,OACAl6B,EAAA5R,EAAA,IAAAA,EAAA,GACAA,EAAA,IAAAA,EAAA,IACAA,EAAA,IAAA4R,EAAAy5B,EAAAS,GAAA,OACAl6B,EAAA5R,EAAA,IAAAA,EAAA,GACAA,EAAA,IAAAA,EAAA,IACAA,EAAA,IAAA4R,EAAAnC,EAAAG,MACAgC,EAAA5R,EAAA,IAAAA,EAAA,GACAA,EAAA,IAAAA,EAAA,IACAA,EAAA,IAAA4R,EAAAnC,EAAAG,MAAA5P,EAAA,GACAA,EAAA,IAAAA,EAAA,GACAA,EAAA,KAAAA,EAAA,GACAA,EAAA,KAAAA,EAAA,IACA4R,EAAA5R,EAAA,GACAA,EAAA,GAAAA,EAAA,IAAA4R,EACA5R,EAAA,IAAAA,EAAA,IAAA4R,EACAA,EAAA5R,EAAA,GACAA,EAAA,GAAAA,EAAA,IAAA4R,EACA5R,EAAA,IAAAA,EAAA,IAAA4R,EACAA,EAAA5R,EAAA,IACAA,EAAA,IAAAA,EAAA,IAAA4R,EACA5R,EAAA,IAAAA,EAAA,IAAA4R,EACAA,EAAA5R,EAAA,IACAA,EAAA,IAAAA,EAAA,IAAA4R,EACA5R,EAAA,IAAAA,EAAA,IAAA4R,EACAA,EAAA5R,EAAA,IAAAA,EAAA,GACAA,EAAA,IAAAA,EAAA,IACAA,EAAA,IAAA4R,EAAAy5B,EAAAS,GAAA,OACAl6B,EAAA5R,EAAA,IAAAA,EAAA,GACAA,EAAA,IAAAA,EAAA,IACAA,EAAA,IAAA4R,EAAAy5B,EAAAS,GAAA,OACAl6B,EAAA5R,EAAA,IAAAA,EAAA,IACAA,EAAA,KAAAA,EAAA,IACAA,EAAA,IAAA4R,EAAAy5B,EAAAS,GAAA,OACAl6B,EAAA5R,EAAA,IAAAA,EAAA,IACAA,EAAA,KAAAA,EAAA,IACAA,EAAA,IAAA4R,EAAAy5B,EAAAS,GAAA,OACAl6B,EAAA5R,EAAA,IAAAA,EAAA,IACAA,EAAA,KAAAA,EAAA,IACAA,EAAA,IAAA4R,EAAAy5B,EAAAS,GAAA,OACAl6B,EAAA5R,EAAA,IAAAA,EAAA,IACAA,EAAA,KAAAA,EAAA,IACAA,EAAA,IAAA4R,EAAAy5B,EAAAS,GAAA,OACAl6B,GAAA5R,EAAA,IAAAA,EAAA,IACAA,EAAA,KAAAA,EAAA,IACAA,EAAA,IAAA4R,EAAAy5B,EAAAS,GAAA,OACAl6B,GAAA5R,EAAA,IAAAA,EAAA,IACAA,EAAA,KAAAA,EAAA,IACAA,EAAA,IAAA4R,EAAAy5B,EAAAS,GAAA,OACAl6B,EAAA5R,EAAA,GAAAA,EAAA,GACAA,EAAA,IAAAA,EAAA,GACAA,EAAA,GAAA4R,EAAAy5B,EAAAS,GAAA,OACAl6B,EAAA5R,EAAA,GAAAA,EAAA,GACAA,EAAA,IAAAA,EAAA,GACAA,EAAA,GAAA4R,EAAAy5B,EAAAS,GAAA,OACAl6B,EAAA5R,EAAA,GAAAA,EAAA,IACAA,EAAA,IAAAA,EAAA,IACAA,EAAA,IAAA4R,EAAAy5B,EAAAS,GAAA,MACAl6B,EAAA5R,EAAA,GAAAA,EAAA,IACAA,EAAA,IAAAA,EAAA,IACAA,EAAA,IAAA4R,EAAAy5B,EAAAS,GAAA,MACAl6B,EAAA5R,EAAA,IAAAA,EAAA,IACAA,EAAA,KAAAA,EAAA,IACAA,EAAA,IAAA4R,EAAAy5B,EAAAS,GAAA,MACAl6B,GAAA5R,EAAA,IAAAA,EAAA,IACAA,EAAA,KAAAA,EAAA,IACAA,EAAA,IAAA4R,EAAAy5B,EAAAS,GAAA,MACAl6B,EAAAnC,EAAAG,OAAA5P,EAAA,GAAAA,EAAA,KACAA,EAAA,IAAAA,EAAA,IACAA,EAAA,IAAA4R,EACAA,EAAAnC,EAAAG,OAAA5P,EAAA,GAAAA,EAAA,KACAA,EAAA,IAAAA,EAAA,IACAA,EAAA,IAAA4R,EACAA,EAAAnC,EAAAG,QAAA5P,EAAA,IAAAA,EAAA,KACAA,EAAA,KAAAA,EAAA,IACAA,EAAA,IAAA4R,EAAA5R,EAAA,IACA4R,EAAAnC,EAAAG,QAAA5P,EAAA,IAAAA,EAAA,KACAA,EAAA,KAAAA,EAAA,IACAA,EAAA,IAAA4R,EAAA5R,EAAA,IACA4R,EAAA5R,EAAA,GACAA,EAAA,KAAAA,EAAA,GACAA,EAAA,IAAA4R,EACA5R,EAAA,GAAAA,EAAA,IAAA4R,EACA5R,EAAA,KAAA4R,EACAA,EAAA5R,EAAA,GACAA,EAAA,KAAAA,EAAA,IACAA,EAAA,KAAA4R,EACA5R,EAAA,GAAAA,EAAA,IAAA4R,EACA5R,EAAA,KAAA4R,EACAA,EAAA5R,EAAA,IACAA,EAAA,KAAAA,EAAA,IACAA,EAAA,KAAA4R,EACA5R,EAAA,IAAAA,EAAA,IAAA4R,EACA5R,EAAA,KAAA4R,EACAA,EAAA5R,EAAA,IACAA,EAAA,KAAA4R,EACA5R,EAAA,IAAAA,EAAA,IAAA4R,EACA5R,EAAA,KAAA4R,EACAA,EAAA5R,EAAA,IACAA,EAAA,KAAA4R,EACA5R,EAAA,IAAAA,EAAA,IAAA4R,EACA5R,EAAA,KAAA4R,EACAA,EAAA5R,EAAA,IACAA,EAAA,KAAA4R,EACA5R,EAAA,IAAAA,EAAA,IAAA4R,EACA5R,EAAA,KAAA4R,EACAA,EAAA5R,EAAA,IACAA,EAAA,KAAA4R,EACA5R,EAAA,IAAAA,EAAA,GAAA4R,EACA5R,EAAA,IAAA4R,EACAA,EAAA5R,EAAA,IACAA,EAAA,IAAAA,EAAA,GAAA4R,EACA5R,EAAA,IAAA4R,EACAA,EAAAnC,EAAAG,OAAA5P,EAAA,GAAAA,EAAA,IACAA,EAAA,IAAAA,EAAA,GACAA,EAAA,GAAA4R,EACAA,EAAAnC,EAAAG,OAAA5P,EAAA,GAAAA,EAAA,IACAA,EAAA,IAAAA,EAAA,GACAA,EAAA,GAAA4R,EACAA,EAAAnC,EAAAG,OAAA5P,EAAA,IAAAA,EAAA,KACAA,EAAA,KAAAA,EAAA,IACAA,EAAA,IAAA4R,EACAA,EAAAnC,EAAAG,OAAA5P,EAAA,IAAAA,EAAA,KACAA,EAAA,KAAAA,EAAA,IACAA,EAAA,IAAA4R,EACAA,GAAAnC,EAAAG,OAAA5P,EAAA,GAAAA,EAAA,KACAA,EAAA,IAAAA,EAAA,IACAA,EAAA,IAAA4R,EAAA5R,EAAA,GACA4R,GAAAnC,EAAAG,OAAA5P,EAAA,GAAAA,EAAA,KACAA,EAAA,IAAAA,EAAA,IACAA,EAAA,IAAA4R,EAAA5R,EAAA,GACA4R,GAAAnC,EAAAG,OAAA5P,EAAA,IAAAA,EAAA,KACAA,EAAA,KAAAA,EAAA,IACAA,EAAA,IAAA4R,EAAA5R,EAAA,IACA4R,GAAAnC,EAAAG,OAAA5P,EAAA,IAAAA,EAAA,KACAA,EAAA,KAAAA,EAAA,IACAA,EAAA,IAAA4R,EAAA5R,EAAA,IACA4R,EAAA5R,EAAA,IAAAA,EAAA,IACAA,EAAA,IAAA4R,EACAA,EAAA5R,EAAA,IAAA4R,EACA5R,EAAA,IAAA4R,EACAA,EAAA5R,EAAA,IAAA4R,EACA5R,EAAA,IAAA4R,EACAA,EAAA5R,EAAA,IAAAA,EAAA,IACAA,EAAA,IAAA4R,EACAA,EAAA5R,EAAA,IAAA4R,EACA5R,EAAA,IAAA4R,EACAA,EAAA5R,EAAA,IAAA4R,EACA5R,EAAA,IAAA4R,EACAA,EAAA5R,EAAA,IAAAA,EAAA,GACAA,EAAA,IAAA4R,EACAA,EAAA5R,EAAA,GAAA4R,EACA5R,EAAA,GAAA4R,EACAA,EAAA5R,EAAA,IAAA4R,EACA5R,EAAA,IAAA4R,EACAA,EAAA5R,EAAA,GAAA4R,EACA5R,EAAA,GAAA4R,EACAA,EAAA5R,EAAA,IAAA4R,EACA5R,EAAA,IAAA4R,EACAA,EAAA5R,EAAA,IAAA4R,EACA5R,EAAA,IAAA4R,EACAA,EAAA5R,EAAA,IAAA4R,EACA5R,EAAA,IAAA4R,EACAA,EAAA5R,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAA4R,EACAA,EAAA5R,EAAA,IAAA4R,EACA5R,EAAA,IAAA4R,EACAA,EAAA5R,EAAA,IAAA4R,EACA5R,EAAA,IAAA4R,EACAA,EAAA5R,EAAA,GAAA4R,EACA5R,EAAA,GAAA4R,EACAA,EAAA5R,EAAA,GAAA4R,EACA5R,EAAA,GAAA4R,EACAA,EAAA5R,EAAA,IAAA4R,EACA5R,EAAA,IAAA4R,EACAA,EAAA5R,EAAA,IAAA4R,EACA5R,EAAA,IAAA4R,EACAA,EAAA5R,EAAA,GAAA4R,EACA5R,EAAA,GAAA4R,EACAA,EAAA5R,EAAA,GAAA4R,EACA5R,EAAA,GAAA4R,EACAA,EAAA5R,EAAA,IAAA4R,EACA5R,EAAA,IAAA4R,EACAA,EAAA5R,EAAA,IAAA4R,EACA5R,EAAA,IAAA4R,EACAA,EAAA5R,EAAA,IAAA4R,EACA5R,EAAA,IAAA4R,EACAA,EAAA5R,EAAA,IAAA4R,EACA5R,EAAA,IAAA4R,EACAA,EAAA5R,EAAA,IAAA4R,EACA5R,EAAA,IAAA4R,EACAA,EAAA5R,EAAA,IAAA4R,EACA5R,EAAA,IAAA4R,EACAA,EAAA5R,EAAA,GACAA,EAAA,IAAAA,EAAA,IACAA,EAAA,KAAA4R,EACAA,EAAA5R,EAAA,GACAA,EAAA,IAAAA,EAAA,IACAA,EAAA,KAAA4R,EACAA,EAAA5R,EAAA,IACAA,EAAA,KAAAA,EAAA,IACAA,EAAA,KAAA4R,EACAA,EAAA5R,EAAA,IACAA,EAAA,KAAAA,EAAA,IACAA,EAAA,KAAA4R,EACAA,EAAA5R,EAAA,GACAA,EAAA,IAAAA,EAAA,IACAA,EAAA,KAAA4R,EACAA,EAAA5R,EAAA,GACAA,EAAA,IAAAA,EAAA,IACAA,EAAA,KAAA4R,EACAA,EAAA5R,EAAA,IACAA,EAAA,KAAAA,EAAA,GACAA,EAAA,IAAA4R,EACAA,EAAA5R,EAAA,IACAA,EAAA,KAAAA,EAAA,GACAA,EAAA,IAAA4R,EACAA,EAAA5R,EAAA,GACAA,EAAA,IAAAA,EAAA,IACAA,EAAA,KAAA4R,EACAA,EAAA5R,EAAA,GACAA,EAAA,IAAAA,EAAA,IACAA,EAAA,KAAA4R,EACAA,EAAA5R,EAAA,IACAA,EAAA,KAAAA,EAAA,IACAA,EAAA,KAAA4R,EACAA,EAAA5R,EAAA,IACAA,EAAA,KAAAA,EAAA,IACAA,EAAA,KAAA4R,EACAA,EAAA5R,EAAA,IACAA,EAAA,KAAAA,EAAA,IACAA,EAAA,KAAA4R,EACAA,EAAA5R,EAAA,IACAA,EAAA,KAAAA,EAAA,IACAA,EAAA,KAAA4R,EACAA,EAAA5R,EAAA,IACAA,EAAA,KAAAA,EAAA,GACAA,EAAA,IAAA4R,EACAA,EAAA5R,EAAA,IACAA,EAAA,KAAAA,EAAA,GACAA,EAAA,IAAA4R,EAaA,SAAAm6B,EAAAC,EAAAC,GACA,QAAAv6B,EAAA,EAAuBA,EAAA,EAAOA,IAAA,CAC9B,IAAAw6B,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAGAJ,GAFAE,EAAAL,EAAAC,EAAA,GAAAX,EAAA51B,EAAAuB,YAAA,GAAA+0B,EAAAC,EAAA,MACAC,EAAAF,EAAAC,EAAA,GAAAX,EAAA51B,EAAAuB,YAAA,GAAA+0B,EAAAC,EAAA,IAEAG,EAAAC,EAAAH,EAGAI,GAFAD,EAAAL,EAAAC,EAAA,IAAAX,EAAA51B,EAAAuB,YAAA,GAAA+0B,EAAAC,EAAA,KACAC,EAAAF,EAAAC,EAAA,GAAAX,EAAA51B,EAAAuB,YAAA,GAAA+0B,EAAAC,EAAA,IAEAM,GAAAF,EAAAH,EACAA,EAAA,uBAAAF,EAAAC,EAAA,GAAAX,EAAA51B,EAAAuB,YAAA,GAAA+0B,EAAAC,EAAA,KAGAI,EAAA,uBAAAL,EAAAC,EAAA,IAAAX,EAAA51B,EAAAuB,YAAA,GAAA+0B,EAAAC,EAAA,IAGAD,EAAAC,EAAA,wBAAAE,EAAAD,EAGAF,EAAAC,EAAA,0BAAAK,EAAAD,EAGAD,EAAA,kBAAAA,EAAA,sBAGAE,EAAA,GAAAA,EAAA,sBAAAD,EACAL,EAAAC,EAAA,GAAAG,EAAAE,EACAN,EAAAC,EAAA,GAAAG,EAAAE,EACAH,EAAA,GAAAA,EAAA,sBAAAD,EACAK,EAAA,kBAAAA,EAAA,sBAGAP,EAAAC,EAAA,GAAAE,EAAAI,EACAP,EAAAC,EAAA,IAAAE,EAAAI,EACAN,KAGA,SAAAO,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAC,EAEAV,EAAAC,EAAAU,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EA6BAb,EAAAC,EAAAa,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EA5BAtB,EAAAQ,EAAA,IAAAA,EAAA,GACAG,EAAAH,EAAA,IAAAA,EAAA,IACAI,EAAAJ,EAAA,IAAAA,EAAA,IACAK,EAAAL,EAAA,GAAAA,EAAA,GACAM,EAAAN,EAAA,GAAAA,EAAA,GACAO,EAAAP,EAAA,GAAAA,EAAA,GACAQ,EAAAR,EAAA,GAAAA,EAAA,GACAF,EAAAC,EAAA,IAAAM,EAAAE,EAAAC,GAAAF,EAAAN,EAAA,IACAE,GAAAG,EAAAE,EAAAC,GAAA3B,EAAA,KAAAyB,EAAAN,EAAA,IACAC,GAAAT,EAAAW,EAAAC,GAAAvB,EAAA,IACAiB,EAAAC,EAAA,GAAAE,EAAAC,EACAJ,EAAAC,EAAA,GAAAE,EAAAC,EACAT,GAAAO,EAAA,IAAAA,EAAA,KAAAnB,EAAA,IACAyB,IAAAzB,EAAA,IAAAmB,EAAA,GACAC,EAAAT,EAAAX,EAAA,IAAAY,EAAAU,EAAAtB,EAAA,IAAAuB,EAAAvB,EAAA,IACAqB,GAAAG,EAAAxB,EAAA,IAAAyB,EAAAC,EAAA1B,EAAA,IAAA2B,EAAA3B,EAAA,IACAiB,EAAAC,EAAA,GAAAE,EAAAC,EACAJ,EAAAC,EAAA,GAAAE,EAAAC,EACAD,EAAAT,EAAAX,EAAA,IAAAY,EAAAU,EAAAtB,EAAA,IAAAuB,EAAAvB,EAAA,IACAqB,GAAAG,EAAAxB,EAAA,IAAAyB,EAAAC,EAAA1B,EAAA,IAAA2B,EAAA3B,EAAA,IACAiB,EAAAC,EAAA,GAAAE,EAAAC,EACAJ,EAAAC,EAAA,IAAAE,EAAAC,EACAD,EAAAT,EAAAX,EAAA,IAAAY,EAAAU,EAAAtB,EAAA,IAAAuB,EAAAvB,EAAA,IACAqB,EAAAG,EAAAxB,EAAA,IAAAyB,EAAAC,EAAA1B,EAAA,IAAA2B,EAAA3B,EAAA,IACAiB,EAAAC,EAAA,IAAAE,EAAAC,EACAJ,EAAAC,EAAA,IAAAE,EAAAC,EAIAP,EAAAK,EAAA,GAAAA,EAAA,GACAS,EAAAT,EAAA,GAAAA,EAAA,GACAU,EAAAV,EAAA,GAAAA,EAAA,GACAW,EAAAX,EAAA,IAAAA,EAAA,GACAY,EAAAZ,EAAA,IAAAA,EAAA,IACAa,EAAAb,EAAA,IAAAA,EAAA,IACAc,EAAAd,EAAA,IAAAA,EAAA,IACAF,EAAAC,EAAA,GAAAY,EAAAE,EAAAC,GAAAF,EAAAZ,EAAA,KACAC,GAAAU,EAAAE,EAAAC,GAAAjC,EAAA,KAAA+B,EAAAZ,EAAA,KACAE,GAAAP,EAAAc,EAAAC,GAAA7B,EAAA,IACAiB,EAAAC,EAAA,IAAAE,EAAAC,EACAJ,EAAAC,EAAA,IAAAE,EAAAC,EACAN,GAAAI,EAAA,GAAAA,EAAA,IAAAnB,EAAA,IACA+B,EAAAZ,EAAA,IAAAY,EAAA/B,EAAA,IACAoB,EAAAU,EAAA9B,EAAA,IAAA+B,EAAAC,EAAAhC,EAAA,IAAAiC,EAAAjC,EAAA,IACAqB,EAAAP,EAAAd,EAAA,IAAAe,EAAAa,EAAA5B,EAAA,IAAA6B,EAAA7B,EAAA,IACAiB,EAAAC,EAAA,GAAAE,EAAAC,EACAJ,EAAAC,EAAA,GAAAE,EAAAC,EACAD,GAAAU,EAAA9B,EAAA,IAAA+B,EAAAC,EAAAhC,EAAA,IAAAiC,EAAAjC,EAAA,IACAqB,EAAAP,EAAAd,EAAA,IAAAe,EAAAa,EAAA5B,EAAA,IAAA6B,EAAA7B,EAAA,IACAiB,EAAAC,EAAA,GAAAE,EAAAC,EACAJ,EAAAC,EAAA,GAAAE,EAAAC,EACAD,GAAAU,EAAA9B,EAAA,IAAA+B,EAAAC,EAAAhC,EAAA,IAAAiC,EAAAjC,EAAA,IACAqB,EAAAP,EAAAd,EAAA,IAAAe,EAAAa,EAAA5B,EAAA,IAAA6B,EAAA7B,EAAA,IACAiB,EAAAC,EAAA,IAAAE,EAAAC,EACAJ,EAAAC,EAAA,IAAAE,EAAAC,EAGAvsC,KAAAotC,WAAA,SAAA14B,EAAA24B,EAAAC,GAGA,IAFA,IAAAC,EAAAF,EACAG,EAAA,IACAtzB,EAAA,EAAwBA,EAAAxF,EAAAmiB,aAAuB3c,IAAA,CAC/C,QAAAD,EAAA,EAA0BA,EAAAvF,EAAA0E,QAAkBa,IAAA,CAO5C,IANA,IAAA8c,EACAniB,EAAAF,EAAAyF,QAAAC,GAAAH,GAAAC,GACAuzB,EAAA74B,EAAAtD,GACAo8B,EAAA,EACAC,EAAAj5B,EAAAk5B,UAAA1zB,GAAA,EAAAD,GACA4zB,EAAA,EACA50B,EAAA,EAA2BA,EAAA,EAAYA,IAOvC,IANAqyB,EAAAiC,EAAAC,EAAAG,EAAAE,IACAvC,EAAAiC,EAAAC,EAAA,GAAAG,EAAAE,EAAA,IACAA,GAAA,EACAL,GAAA,GAGAzW,EAAA,EAA4BA,EAAA,GAAWA,GAAA,EACvC4W,EAAAE,EAAA,GAAA9W,KAAA,EAMA,IAAAA,EAAA,EAA0BA,EAAA,GAAWA,IAAA2W,GAAA,IACrC,IAAA3oC,EAAA6P,EAAA8B,WACAo3B,EAAAp5B,EAAAk5B,UAAA1zB,GAAAD,GACA8zB,EAAAr5B,EAAAk5B,UAAA1zB,GAAA,EAAAD,GAEA,GADA,GAAArF,EAAA8G,kBAAAqb,EAAA,IAAAhyB,EAAA,GACA2P,EAAAs5B,WAAAjX,GAAA,MACAtoB,EAAAC,KAAA++B,EAAAC,EAAA,EAAAA,EAAA,UACe,CACf,GAAAh5B,EAAAs5B,WAAAjX,GAAA,EACA,IAAA9d,EAAA,EAAiCA,EAAA,GAAQA,IACzC80B,EAAA90B,GAAAoyB,EAAAtU,KAAAriB,EAAAs5B,WAAAjX,GAGA,GAAAhyB,GAAAqQ,EAAAuB,WAAA,CACA,IAAAsC,GAAA,EAAuCA,EAAA,EAAOA,IAAA,CAC9C,IAAA/B,EAAA8zB,EAAA51B,EAAAuB,YAAAsC,EAAA,GACAw0B,EAAAC,EAAA,EAAAz0B,EAAA,GAAA60B,EAAA,EAAA70B,GAAAoyB,EAAAtU,IAAA7f,EAAA42B,EAAA,EAAA70B,GAAAoyB,EAAAtU,IACA0W,EAAAC,EAAA,EAAAz0B,EAAA,IAAA60B,EAAA,GAAA70B,GAAAoyB,EAAAtU,IAAA7f,EAAA42B,EAAA,GAAA70B,GAAAoyB,EAAAtU,IACA0W,EAAAC,EAAA,EAAAz0B,EAAA,IAAA60B,EAAA,GAAA70B,GAAAoyB,EAAAtU,IAAA7f,EAAA42B,EAAA,GAAA70B,GAAAoyB,EAAAtU,IACA0W,EAAAC,EAAA,EAAAz0B,EAAA,IAAA80B,EAAA,EAAA90B,GAAAoyB,EAAAtU,IAAA7f,EAAA62B,EAAA,EAAA90B,GAAAoyB,EAAAtU,IACA0W,EAAAC,EAAA,EAAAz0B,EAAA,IAAA80B,EAAA,EAAA90B,GAAAoyB,EAAAtU,IAAA7f,EAAA62B,EAAA,EAAA90B,GAAAoyB,EAAAtU,IACA0W,EAAAC,EAAA,EAAAz0B,EAAA,IAAA80B,EAAA,EAAA90B,GAAAoyB,EAAAtU,IAAA7f,EAAA62B,EAAA,EAAA90B,GAAAoyB,EAAAtU,IAEA0U,EAAAgC,EAAAC,OACiB,CACjB,IAAA/F,EAAA55B,EAAA,IACA,IAAAkL,GAAA,EAAuCA,EAAA,EAAOA,IAAA,CAC9C,IAAAvZ,EAAAoR,EACApR,EAAAsrC,EAAAjmC,GAAAkU,EAAA,IAAA80B,EAAA90B,EAAA,GAAAoyB,EAAAtU,IAAAiU,EAAAjmC,GAAAkU,EAAA,IAAA80B,EAAA,EAAA90B,GAAAoyB,EAAAtU,IACAjmB,EAAAk6B,EAAAjmC,GAAAkU,EAAA,GAAA60B,EAAA70B,EAAA,GAAAoyB,EAAAtU,IAAAiU,EAAAjmC,GAAAkU,EAAA,IAAA60B,EAAA,EAAA70B,GAAAoyB,EAAAtU,IACA4Q,EAAA1uB,EAAA,GAAAvZ,EAAAoR,EAAAm6B,EAAA,EAAAhyB,EAAA,GACA0uB,EAAA1uB,EAAA,IAAAvZ,EAAAurC,EAAA,EAAAhyB,EAAA,GAAAnI,EAEAo7B,EAAAuB,EAAAC,EAAA/F,IAKA,GAAA5iC,GAAAqQ,EAAAuB,YAAA,GAAAogB,EACA,IAAA9d,EAAA,EAA+BA,GAAA,IAAQA,EAAA,CACvC,IAAAg1B,EAAAC,EACAD,EAAAR,EAAAC,EAAAz0B,GAAAkyB,EAAA,GAAAlyB,GAAAw0B,EAAAC,GAAA,EAAAz0B,GAAAmyB,EAAA,GAAAnyB,GACAi1B,EAAAT,EAAAC,EAAAz0B,GAAAmyB,EAAA,GAAAnyB,GAAAw0B,EAAAC,GAAA,EAAAz0B,GAAAkyB,EAAA,GAAAlyB,GACAw0B,EAAAC,GAAA,EAAAz0B,GAAAg1B,EACAR,EAAAC,EAAAz0B,GAAAi1B,IAOA,GAFAX,EAAAD,EACAE,EAAA,IACA,GAAA94B,EAAA0E,QACA,QAAA3d,EAAA,EAA2BA,EAAA,GAAQA,IACnCoT,EAAAC,UAAA4F,EAAAk5B,UAAA1zB,GAAA,GAAAze,GAAA,EAAAiZ,EAAAk5B,UAAA1zB,GAAA,GAAAze,GAAA,QAMA,SAAA0yC,IACAnuC,KAAAihC,IAAA,IAAAmN,EACApuC,KAAAghC,GAAA,IAAAoN,EAuEA,SAAAh5B,IACA,IAAAi5B,EAAAj5B,EAAAi5B,UACA9R,EAAAnnB,EAAAmnB,aAIAxU,EAAA,KACA/nB,KAAA69B,IAAA,KACA,IAAAA,EAAA,KACAxK,EAAA,KACAziB,EAAA,KAEA5Q,KAAAgR,WAAA,SAAAgX,EAAA+V,EAAA9sB,EAAAwiB,GACA1L,EAAAC,EACAhoB,KAAA69B,IAAAE,EACAF,EAAAE,EACA1K,EAAAI,EACA7iB,EAAAK,GAEA,IAAAq9B,EAAA,IAAAxD,EA4LA9qC,KAAAuuC,sBAAA,SAAAnqB,EAAAoqB,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EACAC,EAAAtgC,EAAA,OAIAsgC,EAAA,UAAAX,EACAW,EAAA,UAAAX,EACAW,EAAA,UAAAX,EACAW,EAAA,UAAAX,EACA,IAKAY,EALAC,EAAAxgC,EAAA,OACAwgC,EAAA,UAAAb,EACAa,EAAA,UAAAb,EACAa,EAAA,UAAAb,EACAa,EAAA,UAAAb,EAEA,IAMAc,EACA/0B,EAAAD,EAPAi1B,EAAA,YACAx6B,EAAA0P,EAAAa,eACAkqB,EAAAjhC,EAAA,OACA2tB,EAAA,QACAD,EAAA,cACAwT,EAAA,cAyBA,GAtBAF,EAAA,GAAAV,EACAU,EAAA,GAAAT,EACA,GAAA/5B,EAAA26B,wBA7GA,SAAAjrB,EAAA8qB,GACA,IACAh1B,EAAAD,EADAvF,EAAA0P,EAAAa,eAEA,MAAAvQ,EAAA26B,uBAAA,CACA,IAAA5zC,EAAAmc,EACA03B,EAAAvhC,EAAA,MACAwhC,EAAAxhC,EAAA,MAEA,IADA2G,EAAA26B,uBAAA,EACA5zC,EAAA,EAAAmc,EAAA,EAA4Bnc,EAAA,WAAAiZ,EAAA0E,WAAmC3d,EAC/DA,EAAA,IAAAiZ,EAAA0E,SACAk2B,EAAA7zC,GAAA,EACA,GAAAiZ,EAAAmiB,eAAA0Y,EAAA9zC,GAAA,KAEA6zC,EAAA7zC,GAAAyzC,EAAA,GAAAt3B,GACA,GAAAlD,EAAAmiB,eAAA0Y,EAAA9zC,GAAAyzC,EAAA,GAAAt3B,MACAA,GAGA,IAAAqC,EAAA,EAAsBA,EAAAvF,EAAA0E,QAAkBa,IACxC,IAAAC,EAAA,EAAwBA,EAAAxF,EAAAmiB,aAAuB3c,IAC/CxF,EAAAyF,QAAAC,GAAAH,GAAAC,GAAAxD,WAAAtB,EAAAuB,WAGA23B,EAAAlB,WAAA14B,EAAA46B,EAAAC,IAuFAF,CAAAjrB,EAAA8qB,GAYAx6B,EAAA2hB,QAAA,GACA3hB,EAAA86B,UAAA96B,EAAA+6B,UAAA,IACA/6B,EAAA86B,UAAAprB,EAAAoE,eACA9T,EAAA2hB,QAAA,GAIA,GAAA3hB,EAAAg7B,SAAA,CAKA,IACAC,EAAA,YACAC,EAAA,EACAC,EAAAhiC,EAAA,GACA,IAAAoM,EAAA,EAAsBA,EAAAvF,EAAA0E,QAAkBa,IAAA,CACxC,IAAAC,EAAA,EAAwBA,EAAAxF,EAAAmiB,aAAuB3c,IAC/Cy1B,EAAAz1B,GAAAg1B,EAAAh1B,GACA01B,EAAA,QAAA31B,EAAA7E,EAAAi5B,UAOA,OALAjqB,EAAAG,KAAAxU,EAAA6W,UAAAxC,EAAAG,KAAAxU,EAAAuoB,OACAuF,EAAAiS,kBAAA1rB,EAAAurB,EAAAC,EAAA31B,EAAA60B,EAAAE,EAAApT,EAAA3hB,GAAAm1B,EAAAn1B,GAAAk1B,EAAAl1B,GAAA41B,GAEAhS,EAAAkS,iBAAA3rB,EAAAurB,EAAAC,EAAA31B,EAAA60B,EAAAE,EAAApT,EAAA3hB,GAAAm1B,EAAAn1B,GAAAk1B,EAAAl1B,GAAA41B,IAEA,SAKA,IAJAzrB,EAAAgH,MAAApb,EAAA2hB,eACAkK,EAAA5hB,GAAAk1B,EAAAl1B,GAAA,GAAAk1B,EAAAl1B,GAAA,GACA4hB,EAAA5hB,GAAA,IAAA4hB,EAAA5hB,GAAAk1B,EAAAl1B,GAAA,GAAA4hB,EAAA5hB,KAEAC,EAAA,EAAwBA,EAAAxF,EAAAmiB,aAAuB3c,IAAA,CAC/C,IAAAb,EAAA3E,EAAAyF,QAAAC,GAAAH,GAAAC,GACAb,EAAA3C,WAAAm5B,EAAA31B,GACAb,EAAAqC,iBAAA,SAIA,IAAAzB,EAAA,EAAwCA,EAAAvF,EAAA0E,QAAkBa,IAC1D,IAAAC,EAAA,EAAwBA,EAAAxF,EAAAmiB,aAAuB3c,IAC/CxF,EAAAyF,QAAAC,GAAAH,GAAAC,GAAAxD,WAAAtB,EAAAwB,UACAlC,EAAAyF,QAAAC,GAAAH,GAAAC,GAAAwB,iBAAA,EACA0zB,EAAAn1B,GAAAC,GAAA0hB,EAAA3hB,GAAAC,GAAA,IAWA,GAlQA,SAAAxF,GACA,IAAAs7B,EAAAC,EACA,MAAAv7B,EAAA0kB,IAAAC,UAoBA,GAhBA4W,EAAAv7B,EAAAw7B,YAAA,MACAF,EAAAt7B,EAAAw7B,YAAA,MACA,GAAAx7B,EAAAmiB,cACAoZ,GAAAv7B,EAAAw7B,YAAA,MACAF,GAAAt7B,EAAAw7B,YAAA,QAEAD,KACAD,MAEA,GAAAt7B,EAAA0E,UACA62B,EAAA/yC,KAAAC,IAAA8yC,EAAAD,IAEAC,GAAA,IACAA,GAAAv7B,EAAA0kB,IAAAE,gBAGA,OACA5kB,EAAA0kB,IAAAG,QAAA,EACA7kB,EAAA0kB,IAAAG,OAAA,EAEoD7kB,EAAA0kB,IAAAG,OAAA7kB,EAAA0kB,IAAAI,cACpD9kB,EAAA0kB,IAAAG,OAAA7kB,EAAA0kB,IAAAI,aAGA9kB,EAAA0kB,IAAAI,YAAA,MACS,CACT,IAAA2W,EAAA,MAAAF,EAAA,OACAv7B,EAAA0kB,IAAAG,QAAA4W,GACAz7B,EAAA0kB,IAAAG,QAAA,KAAA4W,EAAA,KACAz7B,EAAA0kB,IAAAG,OAAA4W,IACAz7B,EAAA0kB,IAAAG,OAAA4W,IAGAz7B,EAAA0kB,IAAAI,aAAA2W,EACAz7B,EAAA0kB,IAAAG,OAAA4W,EAEsDz7B,EAAA0kB,IAAAG,OAAA7kB,EAAA0kB,IAAAI,cACtD9kB,EAAA0kB,IAAAG,OAAA7kB,EAAA0kB,IAAAI,aAIA9kB,EAAA0kB,IAAAI,YAAA2W,OA5CAz7B,EAAA0kB,IAAAG,OAAA,EAwPA6W,CAAA17B,GAGA45B,EAAAlB,WAAA14B,EAAAw6B,EAAA,GAAAA,EAAA,IAGAx6B,EAAA2W,SAAAjW,EAAAi7B,aACAjsB,EAAAwN,SACAld,EAAA2W,SAAAjW,EAAAmnB,kBACS,GAAAnY,EAAAgH,MAAApb,EAAA2hB,aAAA,CAaT,IAAA2e,EAAA,EACAC,EAAA,EACA,IAAAt2B,EAAA,EAAsBA,EAAAvF,EAAA0E,QAAkBa,IACxC,IAAAC,EAAA,EAAwBA,EAAAxF,EAAAmiB,aAAuB3c,IAC/Co2B,GAAAlB,EAAAn1B,GAAAC,GACAq2B,GAAA3U,EAAA3hB,GAAAC,GAGA,GAAAo2B,GAAA,EAAAC,EAAA,CACA,IAAAC,EAAA97B,EAAAyF,QAAAC,GAAA,GACAq2B,EAAA/7B,EAAAyF,QAAAC,GAAA1F,EAAA0E,QAAA,GACAo3B,EAAA,GAAA95B,YAAA85B,EAAA,GAAA95B,YAAA+5B,EAAA,GAAA/5B,YAAA+5B,EAAA,GAAA/5B,aACAhC,EAAA2W,SAAAjW,EAAAmnB,eAWA,GAPA7nB,EAAA2W,UAAAkR,GACAwS,EAAAC,EACAC,EAAAG,IAEAL,EAAAD,EACAG,EAAArT,GAEAxX,EAAAkW,UAAA,MAAA5lB,EAAAoU,MACA,IAAA7O,EAAA,EAAsBA,EAAAvF,EAAA0E,QAAkBa,IACxC,IAAAC,EAAA,EAAwBA,EAAAxF,EAAAmiB,aAAuB3c,IAC/CxF,EAAAoU,MAAA4nB,SAAAz2B,GAAAvF,EAAAg8B,SAAAz2B,GACAvF,EAAAoU,MAAA+S,cAAA5hB,GAAA4hB,EAAA5hB,GACAvF,EAAAoU,MAAA+mB,UAAA51B,GAAAC,GAAAxF,EAAAyF,QAAAC,GAAAH,GAAAC,GAAAxD,WACAhC,EAAAoU,MAAA8S,GAAA3hB,GAAAC,GAAA+0B,EAAAh1B,GAAAC,GACArL,EAAAC,UAAA4F,EAAAyF,QAAAC,GAAAH,GAAAC,GAAA5I,GAAA,EAAAoD,EAAAoU,MAAAxX,GAAA2I,GAAAC,GAAA,OAIAxF,EAAA2W,UAAAkR,IACA7nB,EAAAoU,MAAA6nB,IAAA12B,GAAAC,GAAAxF,EAAAoU,MAAA6nB,IAAA12B,GAAAC,EAAA,GACArL,EAAAC,UAAA4F,EAAAoU,MAAA8nB,OAAA32B,GAAAC,EAAA,KAAAxF,EAAAoU,MAAA8nB,OAAA32B,GAAAC,GAAA,EAAAxF,EAAAoU,MAAA8nB,OAAA32B,GAAAC,GAAAxe,SAOA,GAAA0oB,EAAAG,KAAAxU,EAAAwX,SAAAnD,EAAAG,KAAAxU,EAAAmW,QAAA,CACA,IAAAzqB,EACAgjC,EACA,IAAAhjC,EAAA,EAAqBA,EAAA,GAAQA,IAC7BiZ,EAAAwQ,MAAA2rB,SAAAp1C,GAAAiZ,EAAAwQ,MAAA2rB,SAAAp1C,EAAA,GAGA,IADAgjC,EAAA,EACAxkB,EAAA,EAAsBA,EAAAvF,EAAA0E,QAAkBa,IACxC,IAAAC,EAAA,EAAwBA,EAAAxF,EAAAmiB,aAAuB3c,IAC/CukB,GAAAwQ,EAAAh1B,GAAAC,GAKA,IAFAxF,EAAAwQ,MAAA2rB,SAAA,IAAApS,EACAA,EAAA/pB,EAAAwQ,MAAA2rB,SAAA,GACAp1C,EAAA,EAAqBA,EAAA,EAAOA,IAC5BgjC,IAAA/pB,EAAAwQ,MAAA2rB,SAAAp1C,GAAAiZ,EAAAwQ,MAAA2rB,SAAA,GAAAp1C,IAAA2Z,EAAA07B,QAAAr1C,GAGA,IADAgjC,EAAA,KAAA/pB,EAAA0E,QAAA1E,EAAAmiB,aAAA4H,EACAxkB,EAAA,EAAsBA,EAAAvF,EAAA0E,QAAkBa,IACxC,IAAAC,EAAA,EAAwBA,EAAAxF,EAAAmiB,aAAuB3c,IAC/C+0B,EAAAh1B,GAAAC,IAAAukB,EAUA,GANA/pB,EAAAinB,8BAAAvX,EAAA6qB,EAAApT,EAAAkT,GAGAhnB,EAAA6O,iBAAAxS,GACAyqB,EAAA9mB,EAAAyP,YAAA9iB,EAAAg6B,EAAAC,EAAAC,EAAA,GACAxqB,EAAA+J,cAAAkF,EAAArH,YAAA5H,GACAA,EAAAkW,UAAA,MAAA5lB,EAAAoU,MAAA,CACA,IAAA5O,EAAA,EAAsBA,EAAAxF,EAAAmiB,aAAuB3c,IAAA,CAC7C,IAAAtC,EACA,IAAAA,EAAA,EAAuBA,EAAAy2B,EAAez2B,IACtClD,EAAAoU,MAAAioB,QAAA72B,GAAAtC,GAAAlD,EAAAoU,MAAAioB,QAAA72B,GAAAtC,EAAAwM,EAAAiX,WAEA,IAAAzjB,EAAAy2B,EAA+Bz2B,EAAA,KAAUA,IACzClD,EAAAoU,MAAAioB,QAAA72B,GAAAtC,GAAAs3B,EAAAh1B,GAAAtC,EAAAy2B,GAGAz9B,EAAAogC,gBAAA5sB,EAAA2qB,GAGA,OAvSA,SAAAr6B,GACA,IAAAuF,EAAAC,EAOA,IANAxF,EAAAu8B,wBAAAv8B,EAAAuW,eAAA,KACAvW,EAAAu8B,wBAAA,SACA,GAAAv8B,EAAAmiB,eACAniB,EAAAu8B,wBAAAv8B,EAAAuW,eAAAvW,EAAA2W,YACA3W,EAAAu8B,wBAAA,IAAAv8B,EAAA2W,aAEApR,EAAA,EAAoBA,EAAAvF,EAAA0E,UAAkBa,EACtC,IAAAC,EAAA,EAAsBA,EAAAxF,EAAAmiB,eAAuB3c,EAAA,CAC7C,IAAAg3B,EAAA,EAAAx8B,EAAAyF,QAAAC,GAAAH,GAAAC,GAAAxD,WACA,GAAAhC,EAAAyF,QAAAC,GAAAH,GAAAC,GAAAwB,mBAAAw1B,EAAA,GACAx8B,EAAAy8B,uBAAAz8B,EAAAuW,eAAAimB,KACAx8B,EAAAy8B,uBAAAz8B,EAAAuW,eAAA,KACAvW,EAAAy8B,uBAAA,IAAAD,KACAx8B,EAAAy8B,uBAAA,UAuRAC,CAAA18B,GACAm6B,GAGA,SAAAwC,IAIArxC,KAAAqT,IAAA,EAGArT,KAAAmsB,KAAA,EAGAnsB,KAAAosB,KAAA,EAGApsB,KAAAqsB,IAAA,EAGArsB,KAAAssB,KAAA,EAGAtsB,KAAAusB,IAAA,KACAvsB,KAAAksB,cAAA,EACAlsB,KAAAouB,cAAA,EACApuB,KAAAkuB,eAAA,EAEA,SAAAojB,IACAtxC,KAAAoa,GAAA,0BACApa,KAAA2pB,gBAAA,EACA3pB,KAAA82B,aAAA,EACA92B,KAAA6oB,cAAA,EACA7oB,KAAAypB,eAAA,EACAzpB,KAAAua,MAAA,CAAA1M,EAAA,GAAAA,EAAA,IACA,QAAAoM,EAAA,EAAsBA,EAAA,EAAQA,IAC9B,QAAAC,EAAA,EAAwBA,EAAA,EAAQA,IAChCla,KAAAoa,GAAAH,GAAAC,GAAA,IAAAf,EAIA,SAAAi1B,IACApuC,KAAAoR,EAAArD,EAAAqH,EAAAC,SACArV,KAAA/C,EAAAiR,EAAA,CAAAkH,EAAAskB,QAAA,IACA,IAAAx5B,EAAAF,KACAA,KAAA2L,OAAA,SAAA4lC,GACA1iC,EAAAC,UAAAyiC,EAAAngC,EAAA,EAAAlR,EAAAkR,EAAA,EAAAgE,EAAAC,SACA,QAAA5Z,EAAA,EAAuBA,EAAA2Z,EAAAskB,QAAqBj+B,IAC5C,QAAAmc,EAAA,EAAyBA,EAAA,EAAOA,IAChC1X,EAAAjD,EAAAxB,GAAAmc,GAAA25B,EAAAt0C,EAAAxB,GAAAmc,IAWA,SAAA45B,IACAxxC,KAAAyxC,iBAAAvjC,EAAA,OACAlO,KAAA0xC,YAAA7jC,EAAA,GACA7N,KAAA6wC,SAAA9iC,EAAA,IACA/N,KAAAy/B,SAAA1xB,EAAAqH,EAAAC,SACArV,KAAA0/B,UAAA3xB,EAAAqH,EAAAskB,SAGA15B,KAAAmlB,WAAA,EACAnlB,KAAAolB,aAAA,EAOA,SAAA4O,IACA,IAAA2d,EAAA,GA2HA,SAAAC,IACA5xC,KAAAm0B,aAAA,EACAn0B,KAAAy0B,IAAA,EACAz0B,KAAAkG,IAAAsH,EAAAmkC,GA/GA3xC,KAAAyuB,SAAA,EACAzuB,KAAAqvC,uBAAA,EACArvC,KAAA8+B,oBAAA,EACA9+B,KAAA6xC,0BAAA,EACA7xC,KAAA8xC,MAAA5jC,EAAA,GAAA8lB,EAAA+d,SAGA/xC,KAAAoZ,QAAA,EAGApZ,KAAAgyC,YAAA,EAGAhyC,KAAA62B,aAAA,EAGA72B,KAAAiyC,eAAA,EACAjyC,KAAAkyC,qBAAA,EACAlyC,KAAAmyC,QAAA,EAGAnyC,KAAA8pC,gBAAA,EAGA9pC,KAAA+pC,gBAAA,EACA/pC,KAAAirB,cAAA,EACAjrB,KAAAkrB,iBAAA,EACAlrB,KAAAqrB,SAAA,EAGArrB,KAAAoyC,SAAA,EACApyC,KAAAqyC,SAAA,EAGAryC,KAAAsyC,UAAA,EACAtyC,KAAAuyC,UAAA,EAGAvyC,KAAAsmB,cAAA,EAMAtmB,KAAA0mC,kBAAA,EAOA1mC,KAAA8Y,gBAAA,EAGA9Y,KAAA0vC,SAAA,EAMA1vC,KAAAwyC,mBAAA,EAGAxyC,KAAA2Y,cAAA,EAGA3Y,KAAA8W,iBAAA,EAGA9W,KAAAkpC,gBAAA,EACAlpC,KAAAma,QAAA,IAAAm3B,EACAtxC,KAAA0wC,SAAA3iC,EAAA,GAGA/N,KAAAq2B,QAAA,EACAr2B,KAAAyvC,SAAA,EACAzvC,KAAAwvC,SAAA,EAGAxvC,KAAAyyC,SAAA,KACAzyC,KAAAqyB,UAAA,EACAryB,KAAA0oC,SAAA76B,EAAA,GACA7N,KAAAwoC,YAAA36B,EAAA,GACA7N,KAAA88B,cAAA,EACA98B,KAAA6W,OAAAhJ,EAAA,KACA7N,KAAAkZ,WAAArL,EAAAouB,EAAAC,QAGAl8B,KAAAinC,aAAA,EACAjnC,KAAA0yC,UAAA,IAAAzrC,MAAA,GACAjH,KAAA2yC,UAAA,IAAA1rC,MAAA,EAAA+sB,EAAA4e,IAAA,GACA5yC,KAAA6yC,MAAA7kC,EAAA,GACAhO,KAAAsoB,aAAA,EACAtoB,KAAA4tC,UAAA1/B,EAAA,QAAAkH,EAAA09B,UACA9yC,KAAAguC,WAAAjgC,EAAA,IAmBA/N,KAAA8zB,OAAA,IAAA7sB,MAAA+sB,EAAAC,gBACAj0B,KAAA00B,MAAA,EACA10B,KAAA+zB,MAAA,EACA/zB,KAAAu0B,eAAA,EAGAv0B,KAAA4oB,SAAA,EAGA5oB,KAAA0oB,QAAA,EACA1oB,KAAAuV,cAAA,IAAAgoB,EACAv9B,KAAA+yC,SAAAhlC,EAAAqH,EAAA4kB,QACAh6B,KAAAgzC,SAAAjlC,EAAAqH,EAAA4kB,QACAh6B,KAAAizC,KAAA/kC,EAAA,GAAAkH,EAAA4kB,SACAh6B,KAAAkzC,KAAAhlC,EAAA,GAAAkH,EAAA4kB,SACAh6B,KAAAmzC,MAAAjlC,EAAA,GAAAkH,EAAA4kB,SACAh6B,KAAAozC,MAAAllC,EAAA,GAAAkH,EAAA4kB,SACAh6B,KAAAqzC,MAAA,KACArzC,KAAAszC,MAAA,KACAtzC,KAAAy5B,MAAA,EAEAz5B,KAAAihC,IAAA,IAAAh6B,MAAA,GACAjH,KAAAghC,GAAA,IAAA/5B,MAAA,GAGAjH,KAAAmvC,SAAAphC,EAAA,GAGA/N,KAAAkwC,YAAAhiC,EAAA,OAGAlO,KAAAuzC,iBAAAxlC,EAAA,GAGA/N,KAAAwzC,MAAAzlC,EAAAqH,EAAAC,SACArV,KAAAyzC,MAAA1lC,EAAAqH,EAAAskB,SACA15B,KAAA0zC,KAAA7lC,EAAAuH,EAAAC,SACArV,KAAA2zC,KAAA9lC,EAAAuH,EAAAC,SACArV,KAAA4zC,KAAA/lC,EAAAuH,EAAAskB,SACA15B,KAAA6zC,KAAAhmC,EAAAuH,EAAAskB,SACA15B,KAAA8zC,QAAA,EACA9zC,KAAA+zC,QAAA,EACA/zC,KAAAg0C,MAAA1lC,EAAA,CAAA8G,EAAA4kB,OAAA,IACAh6B,KAAAi0C,QAAA3lC,EAAA,CAAA8G,EAAA4kB,OAAA,IACAh6B,KAAAk0C,WAAArmC,EAAAuH,EAAA4kB,QACAh6B,KAAAm0C,WAAAtmC,EAAAuH,EAAA4kB,QACAh6B,KAAAo0C,YAAArmC,EAAAqH,EAAA4kB,QACAh6B,KAAAq0C,SAAAtmC,EAAAqH,EAAA4kB,QACAh6B,KAAAs0C,SAAAvmC,EAAAqH,EAAA4kB,QACAh6B,KAAAu0C,gBAAA,EACAv0C,KAAAw0C,gBAAA,EACAx0C,KAAA47B,GAAA7tB,EAAA,GACA/N,KAAAy0C,eAAA,EACAz0C,KAAA00C,eAAA,EACA10C,KAAA20C,kBAAA,EAGA30C,KAAA40C,cAAA/mC,EAAA,GAGA7N,KAAAklB,MAAA,IAAAssB,EAGAxxC,KAAAysB,eAAA,IAAA4kB,EAGArxC,KAAAo5B,IAAA,KACAp5B,KAAA28B,IAAA,KACA38B,KAAA6wB,YAAA,EACA7wB,KAAA+wB,cAAA,EACA/wB,KAAA23B,mBAAA,EACA33B,KAAAmxB,gBAAA,EACAnxB,KAAAqxB,gBAAA,EACArxB,KAAAsxB,WAAA,EACAtxB,KAAAoxB,UAAA,EACApxB,KAAA60C,eAAA,EACA70C,KAAAw2B,OAAA,KAGAx2B,KAAAy2B,iBAAA,EAGAz2B,KAAA22B,YAAA,EACA32B,KAAAixC,wBAAA3iC,EAAA,QAGAtO,KAAAmxC,uBAAA7iC,EAAA,QAEAtO,KAAA8oB,MAAA,KACA9oB,KAAAg4B,IAAA,KACAh4B,KAAA80C,mBAAA,EAEA90C,KAAA+0C,YAAA,KACA/0C,KAAAg1C,YAAA,KACAh1C,KAAA27B,eAAA,KACA,QAAAlgC,EAAA,EAAqBA,EAAAuE,KAAAghC,GAAAtlC,OAAoBD,IACzCuE,KAAAghC,GAAAvlC,GAAA,IAAA2yC,EAEA,IAAA3yC,EAAA,EAAqBA,EAAAuE,KAAAihC,IAAAvlC,OAAqBD,IAC1CuE,KAAAihC,IAAAxlC,GAAA,IAAA2yC,EAEA,IAAA3yC,EAAA,EAAqBA,EAAAuE,KAAA8zB,OAAAp4B,OAAwBD,IAC7CuE,KAAA8zB,OAAAr4B,GAAA,IAAAm2C,EAGA,SAAAqD,IACA,IAAA7uC,EAAA2H,EAAAqH,EAAA+kB,SACA+a,EAAAnnC,EAAAqH,EAAA+/B,UAAA,GACAC,EAAA,qJACA,SAAAC,EAAAC,EAAAC,EAAArpC,GACA,IACAspC,EACAC,EACA7gC,EAHA8gC,EAAA,EAKA5wC,EAAAywC,GADArpC,IAAA,GAEAspC,EAAA,EACA,GACA,IAAA96B,EAAAC,EACAlf,EAAAk6C,EAAAC,EAAAC,EAAAC,EACAA,EAAAN,GAAA,EAGAK,GADAD,EAAAJ,GAAA,IADAG,EAAAH,GAGAA,EAAAI,GAAA,EAEAhhC,GADA6gC,EAAAF,GACAO,EACA,GAEAC,EAAAT,EAAAG,EAAA,GAAAH,EAAAG,EAAAE,GACAK,EAAAV,EAAAG,EAAA,GAAAH,EAAAG,EAAAE,GACAM,EAAAX,EAAAG,EAAAG,GAAAN,EAAAG,EAAAI,GACAK,EAAAZ,EAAAG,EAAAG,GAAAN,EAAAG,EAAAI,GACAP,EAAAG,EAAAG,GAAAI,EAAAE,EACAZ,EAAAG,EAAA,GAAAO,EAAAE,EACAZ,EAAAG,EAAAI,GAAAE,EAAAE,EACAX,EAAAG,EAAAE,GAAAI,EAAAE,EACAF,EAAAT,EAAA1gC,EAAA,GAAA0gC,EAAA1gC,EAAA+gC,GACAK,EAAAV,EAAA1gC,EAAA,GAAA0gC,EAAA1gC,EAAA+gC,GACAM,EAAA9mC,EAAAG,MAAAgmC,EAAA1gC,EAAAihC,GACAK,EAAA/mC,EAAAG,MAAAgmC,EAAA1gC,EAAAghC,GACAN,EAAA1gC,EAAAghC,GAAAI,EAAAE,EACAZ,EAAA1gC,EAAA,GAAAohC,EAAAE,EACAZ,EAAA1gC,EAAAihC,GAAAE,EAAAE,EACAX,EAAA1gC,EAAA+gC,GAAAI,EAAAE,EACArhC,GAAA4gC,EACAC,GAAAD,QACWC,EAAA3wC,GAGX,IAFA6V,EAAAy6B,EAAAM,EAAA,GACAh7B,EAAA06B,EAAAM,EAAA,GACAj6C,EAAA,EAAqBA,EAAAq6C,EAAQr6C,IAAA,CAC7B,IAAAof,EAAAD,EACAC,EAAA,IAAAH,IACAE,EAAA,EAAAF,EAAAC,EACA86B,EAAAF,EAAA95C,EACAmZ,EAAA2gC,EAAAI,EAAAl6C,EACA,GACA,IAAAiE,EAAAoR,EAAA0J,EAAAw7B,EAAAD,EAAAI,EAAAD,EAAAE,EAAAH,EAAAI,EACAvlC,EAAA8J,EAAA06B,EAAAG,EAAAE,GAAA96B,EAAAy6B,EAAA1gC,EAAA+gC,GACAj2C,EAAAmb,EAAAy6B,EAAAG,EAAAE,GAAA/6B,EAAA06B,EAAA1gC,EAAA+gC,GACAI,EAAAT,EAAAG,EAAA,GAAA/1C,EACAs2C,EAAAV,EAAAG,EAAA,GAAA/1C,EACAy2C,EAAAb,EAAA1gC,EAAA,GAAA9D,EACA0J,EAAA86B,EAAA1gC,EAAA,GAAA9D,EACAA,EAAA8J,EAAA06B,EAAAG,EAAAI,GAAAh7B,EAAAy6B,EAAA1gC,EAAAihC,GACAn2C,EAAAmb,EAAAy6B,EAAAG,EAAAI,GAAAj7B,EAAA06B,EAAA1gC,EAAAihC,GACAI,EAAAX,EAAAG,EAAAG,GAAAl2C,EACAw2C,EAAAZ,EAAAG,EAAAG,GAAAl2C,EACA22C,EAAAf,EAAA1gC,EAAAghC,GAAA9kC,EACAslC,EAAAd,EAAA1gC,EAAAghC,GAAA9kC,EACAA,EAAA4J,EAAAw7B,EAAAv7B,EAAA07B,EACA32C,EAAAib,EAAAu7B,EAAAx7B,EAAA27B,EACAf,EAAAG,EAAAG,GAAAI,EAAAt2C,EACA41C,EAAAG,EAAA,GAAAO,EAAAt2C,EACA41C,EAAA1gC,EAAAihC,GAAAM,EAAArlC,EACAwkC,EAAA1gC,EAAA+gC,GAAAQ,EAAArlC,EACAA,EAAA6J,EAAAy7B,EAAA17B,EAAAu7B,EACAv2C,EAAAgb,EAAA07B,EAAAz7B,EAAAs7B,EACAX,EAAA1gC,EAAAghC,GAAAp7B,EAAA9a,EACA41C,EAAA1gC,EAAA,GAAA4F,EAAA9a,EACA41C,EAAAG,EAAAI,GAAAE,EAAAjlC,EACAwkC,EAAAG,EAAAE,GAAAI,EAAAjlC,EACA8D,GAAA4gC,EACAC,GAAAD,QACaC,EAAA3wC,GAEb6V,GADAE,EAAAF,GACAy6B,EAAAM,EAAA,GAAAh7B,EAAA06B,EAAAM,EAAA,GACAh7B,EAAAG,EAAAu6B,EAAAM,EAAA,GAAAh7B,EAAA06B,EAAAM,EAAA,GAEAA,GAAA,QACSF,EAAAtpC,GAET,IAAAoqC,EAAA,2cACAt2C,KAAAu2C,UAAA,SAAA7hC,EAAA8hC,EAAAC,EAAA36C,EAAA4uB,GACA,QAAA5Z,EAAA,EAAuBA,EAAA,EAAOA,IAAA,CAC9B,IAAA7I,EAAAmN,EAAA+/B,UAAA,EACAl8B,EAAA,WAAAnI,EAAA,GACA8G,EAAAxC,EAAA+/B,UAAA,IACA,GACA,IAAAa,EAAAD,EAAAG,EAAAD,EAAA/+B,EACAzb,EAAA,IAAA66C,EAAA1+B,GAAA,GAGAm+B,GAFAC,EAAAd,EAAAz5C,GAAAK,EAAA26C,GAAA/rB,EAAAjvB,EAAAwd,KACA/B,EAAAg+B,EAAA,IAAAz5C,GAAAK,EAAA26C,GAAA/rB,EAAAjvB,EAAAwd,EAAA,MAEA+8B,GAAA9+B,EAGA++B,GAFAC,EAAAhB,EAAAz5C,EAAA,IAAAK,EAAA26C,GAAA/rB,EAAAjvB,EAAAwd,EAAA,MACA/B,EAAAg+B,EAAA,GAAAz5C,GAAAK,EAAA26C,GAAA/rB,EAAAjvB,EAAAwd,EAAA,MAEAi9B,GAAAh/B,EACAjP,GAAA,EACAuuC,EAAA1lC,GAAA7I,EAAA,GAAA+tC,EAAAE,EACAM,EAAA1lC,GAAA7I,EAAA,GAAA+tC,EAAAE,EACAM,EAAA1lC,GAAA7I,EAAA,GAAA8tC,EAAAE,EACAO,EAAA1lC,GAAA7I,EAAA,GAAA8tC,EAAAE,EAGAF,GAFAC,EAAAd,EAAAz5C,EAAA,GAAAK,EAAA26C,GAAA/rB,EAAAjvB,EAAAwd,EAAA,KACA/B,EAAAg+B,EAAA,IAAAz5C,GAAAK,EAAA26C,GAAA/rB,EAAAjvB,EAAAwd,EAAA,MAEA+8B,GAAA9+B,EAGA++B,GAFAC,EAAAhB,EAAAz5C,EAAA,IAAAK,EAAA26C,GAAA/rB,EAAAjvB,EAAAwd,EAAA,MACA/B,EAAAg+B,EAAA,GAAAz5C,GAAAK,EAAA26C,GAAA/rB,EAAAjvB,EAAAwd,EAAA,MAEAi9B,GAAAh/B,EACAs/B,EAAA1lC,GAAA7I,EAAAmN,EAAA+/B,UAAA,KAAAa,EAAAE,EACAM,EAAA1lC,GAAA7I,EAAAmN,EAAA+/B,UAAA,KAAAa,EAAAE,EACAM,EAAA1lC,GAAA7I,EAAAmN,EAAA+/B,UAAA,KAAAY,EAAAE,EACAO,EAAA1lC,GAAA7I,EAAAmN,EAAA+/B,UAAA,KAAAY,EAAAE,UACWr+B,GAAA,GACXy9B,EAAAmB,EAAA1lC,GAAA7I,EAAAmN,EAAA+/B,UAAA,KAGAn1C,KAAA02C,SAAA,SAAAhiC,EAAAxM,EAAAuuC,EAAA36C,EAAA4uB,GACA,IAAAisB,EAAAvhC,EAAA+kB,QAAA,IACAlyB,EAAAmN,EAAA+kB,QAAA,EACA,GACA,IAAA6b,EAAAD,EAAAG,EAAAD,EAAA/+B,EACAzb,EAAA,IAAA66C,EAAAK,GAGAZ,GAFAC,EAAA5vC,EAAA3K,GAAAK,EAAA26C,GAAA/rB,EAAAjvB,KACAyb,EAAA9Q,EAAA3K,EAAA,KAAAK,EAAA26C,GAAA/rB,EAAAjvB,EAAA,MAEAu6C,GAAA9+B,EAGA++B,GAFAC,EAAA9vC,EAAA3K,EAAA,KAAAK,EAAA26C,GAAA/rB,EAAAjvB,EAAA,OACAyb,EAAA9Q,EAAA3K,EAAA,KAAAK,EAAA26C,GAAA/rB,EAAAjvB,EAAA,MAEAy6C,GAAAh/B,EAEAhP,EAAA,GADAD,GAAA,IACA+tC,EAAAE,EACAhuC,EAAAD,EAAA,GAAA+tC,EAAAE,EACAhuC,EAAAD,EAAA,GAAA8tC,EAAAE,EACA/tC,EAAAD,EAAA,GAAA8tC,EAAAE,EAGAF,GAFAC,EAAA5vC,EAAA3K,EAAA,GAAAK,EAAA26C,GAAA/rB,EAAAjvB,EAAA,KACAyb,EAAA9Q,EAAA3K,EAAA,KAAAK,EAAA26C,GAAA/rB,EAAAjvB,EAAA,MAEAu6C,GAAA9+B,EAGA++B,GAFAC,EAAA9vC,EAAA3K,EAAA,KAAAK,EAAA26C,GAAA/rB,EAAAjvB,EAAA,OACAyb,EAAA9Q,EAAA3K,EAAA,KAAAK,EAAA26C,GAAA/rB,EAAAjvB,EAAA,MAEAy6C,GAAAh/B,EACAhP,EAAAD,EAAAmN,EAAA+kB,QAAA,KAAA6b,EAAAE,EACAhuC,EAAAD,EAAAmN,EAAA+kB,QAAA,KAAA6b,EAAAE,EACAhuC,EAAAD,EAAAmN,EAAA+kB,QAAA,KAAA4b,EAAAE,EACA/tC,EAAAD,EAAAmN,EAAA+kB,QAAA,KAAA4b,EAAAE,UACSU,GAAA,GACTtB,EAAAntC,EAAAD,EAAAmN,EAAA+kB,QAAA,IAEAn6B,KAAA42C,SAAA,SAAAliC,GAIA,QAAAjZ,EAAA,EAA8FA,EAAA2Z,EAAA+kB,QAAqB1+B,IACnH2K,EAAA3K,GAAA,OAAAyB,KAAA25C,IAAA,EAAA35C,KAAA45C,IAAAr7C,EAAA,IAAA2Z,EAAA+kB,SAAA,IAAAj9B,KAAA25C,IAAA,EAAA35C,KAAA45C,IAAAr7C,EAAA,IAAA2Z,EAAA+kB,SAEA,IAAA1+B,EAAA,EAAuBA,EAAA2Z,EAAA+/B,UAAA,EAA2B15C,IAClDy5C,EAAAz5C,GAAA,MAAAyB,KAAA25C,IAAA,EAAA35C,KAAA45C,IAAAr7C,EAAA,IAAA2Z,EAAA+/B,aA+GA,SAAA4B,IACA,IAAAC,EAAA,IAAA/B,EACAgC,EAAA,kBACAC,EAAA,EACAC,EAAA,GACAC,EAAA,EACAC,EAAA,GACAC,EAAA,IACAC,EAAA,aAAAniC,EAAA+kB,QAAA,GAIAqd,EAAA,GAIAC,EAAA,GACAC,EAAA,YACA,SAAAC,EAAA1vC,GACA,OAAAA,EA4CA,SAAA2vC,EAAAhH,EAAAl8B,GAEA,IADA,IAAAmjC,EAAA,EACAp8C,EAAA,EAAuBA,EAAA2Z,EAAA+kB,QAAA,IAAyB1+B,EAChDo8C,GAAAjH,EAAAn1C,GAAAiZ,EAAA0kB,IAAAc,MAAAz+B,GAGA,OADAo8C,GAAAN,EAGA,SAAAO,EAAA1zB,EAAA2zB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA5B,EAAA36C,EAAA4uB,GACA,IAAAhW,EAAA0P,EAAAa,eACA,GAAAwxB,EAAA,EACAO,EAAAN,SAAAhiC,EAAAujC,EAAAC,GAAAzB,EAAA36C,EAAA4uB,GACAssB,EAAAT,UAAA7hC,EAAAyjC,EAAAC,GAAA3B,EAAA36C,EAAA4uB,QACS,MAAA+rB,EAAA,CACT,QAAA7+B,EAAAxC,EAAA+kB,QAAA,EAA2CviB,GAAA,IAAQA,EAAA,CACnD,IAAAxG,EAAA6mC,EAAAC,EAAA,GAAAtgC,GACAoO,EAAAiyB,EAAAC,EAAA,GAAAtgC,GACAqgC,EAAAC,EAAA,GAAAtgC,IAAAxG,EAAA4U,GAAA7W,EAAAG,MAAA,GACA2oC,EAAAC,EAAA,GAAAtgC,IAAAxG,EAAA4U,GAAA7W,EAAAG,MAAA,GAEA,QAAAwB,EAAA,EAAyBA,GAAA,IAAQA,EACjC,IAAA8G,EAAAxC,EAAA+/B,UAAA,EAA+Cv9B,GAAA,IAAQA,EACvDxG,EAAA+mC,EAAAC,EAAA,GAAAtnC,GAAA8G,GACAoO,EAAAmyB,EAAAC,EAAA,GAAAtnC,GAAA8G,GACAugC,EAAAC,EAAA,GAAAtnC,GAAA8G,IAAAxG,EAAA4U,GAAA7W,EAAAG,MAAA,GACA6oC,EAAAC,EAAA,GAAAtnC,GAAA8G,IAAAxG,EAAA4U,GAAA7W,EAAAG,MAAA,GAQA,IAFAyoC,EAAA,GAAAJ,EAAAM,EAAAC,EAAA,OACAH,EAAA,IAAAA,EAAA,GACAngC,EAAAxC,EAAA+kB,QAAA,IAA6CviB,GAAA,IAAQA,EAAA,CACrD,IAAA0gC,EAAAL,EAAAC,EAAA,GAAA9iC,EAAA+kB,QAAA,EAAAviB,GACA2gC,EAAAN,EAAAC,EAAA,GAAA9iC,EAAA+kB,QAAA,EAAAviB,GACAmgC,EAAA3iC,EAAA+kB,QAAA,EAAAviB,GAAA+/B,EAAA,IAAAW,IAAAC,MAEA,IAAAznC,EAAA,EAAuBA,GAAA,IAAQA,EAG/B,IAFAknC,EAAAlnC,GAAA,GAAAqnC,EAAAC,EAAA,GAAAtnC,GAAA,GACAknC,EAAAlnC,GAAA,IAAAknC,EAAAlnC,GAAA,GACA8G,EAAAxC,EAAA+/B,UAAA,IAAiDv9B,GAAA,IAAQA,EACzD0gC,EAAAH,EAAAC,EAAA,GAAAtnC,GAAAsE,EAAA+/B,UAAA,EAAAv9B,GACA2gC,EAAAJ,EAAAC,EAAA,GAAAtnC,GAAAsE,EAAA+/B,UAAA,EAAAv9B,GACAogC,EAAAlnC,GAAAsE,EAAA+/B,UAAA,EAAAv9B,GAAA+/B,EAAA,IAAAW,IAAAC,MAIA,IAAAC,EAAA,EACA,IAAA5gC,EAAA,GAA0BA,EAAAxC,EAAAqjC,SAAsB7gC,IAChD4gC,GAAAT,EAAAngC,GAIA,GAFAlD,EAAAy6B,SAAAsH,GAAA+B,EAEAp0B,EAAAkW,SAAA,CACA,IAAA1iB,EAAA,EAAyBA,EAAAxC,EAAAqjC,SAAsB7gC,IAC/ClD,EAAAoU,MAAA8nB,OAAAyH,GAAA5B,GAAA7+B,GAAAlD,EAAAoU,MAAA4vB,YAAAjC,GAAA7+B,GACAlD,EAAAoU,MAAA4vB,YAAAjC,GAAA7+B,GAAAmgC,EAAAngC,GAEAlD,EAAAoU,MAAA8S,GAAAyc,GAAA5B,GAAA/hC,EAAAknB,GAAA6a,GAIA,GAAAryB,EAAA6W,kBAAAwb,EAAA,IAEA/hC,EAAAw7B,YAAAmI,GAAA5B,GAAA/hC,EAAA6+B,iBAAAkD,GACA/hC,EAAA6+B,iBAAAkD,GAAAmB,EAAAG,EAAArjC,IAkBA,IAOAikC,EACAC,EACAC,EATAC,EAAA,EAGAC,EAAA,GAGAC,EAAA,GAWAz9B,EAAA,4DAMA09B,EAAA,wVACAC,EAAA,yIACAC,EAAA,mNAGA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAzoC,EAAA4D,EAAA8kC,GACA,IAAA1d,EA6BA2C,EAAAzY,EA5BA,GAAAszB,EAAAD,EAAA,CACA,KAAAC,EAAAD,EAAAT,GAAmD,OAAAS,EAAAC,EAAnDxd,EAAAwd,EAAAD,MACS,CACT,GAAAA,GAAAC,EAAAV,EAAA,OAAAS,EAAAC,EACAxd,EAAAud,EAAAC,EAGA,GADAD,GAAAC,EACAxoC,EAAA,MACA,GAAAgrB,GAAA6c,EACA,OAAAU,EAEA,IAAA59C,EAAA,EAAA0T,EAAAM,aAAAqsB,EAAA,IACA,OAAAud,EAAAH,EAAAz9C,GAcA,OANAA,EAAA,EAAA0T,EAAAM,aAAAqsB,EAAA,IAEAwd,EADA,GAAAE,EACA9kC,EAAA0kB,IAAAa,KAAAsf,GAAA7kC,EAAA0kB,IAAAG,OAEA7kB,EAAA0kB,IAAAW,KAAAwf,GAAA7kC,EAAA0kB,IAAAG,OAEA8f,EAAAR,EAAAS,EAC0DD,EAAAC,GAE1D7a,EAAA,EACAhjC,GAAA,KAAAgjC,EAAA0a,EAAA19C,IACAuqB,EAAA7W,EAAAM,aAAA4pC,EAAAC,EAAA,OACAD,IAAAJ,EAAAx9C,GAAAgjC,GAAAzY,EAAAyY,IAEAhjC,EAAA,GAAA49C,EACAA,EAAAF,EAAA19C,GAEA49C,EAAAJ,EAAAx9C,GAEA,IAAAg+C,EAAA,yIAGA,SAAAC,EAAAL,EAAAC,EAAAxoC,GACA,IAAAgrB,EAOA,GANAud,EAAA,IACAA,EAAA,GAEAC,EAAA,IACAA,EAAA,GAEAD,GAAA,EACA,OAAAC,EAEA,GAAAA,GAAA,EACA,OAAAD,EAOA,GAJAvd,EADAwd,EAAAD,EACAC,EAAAD,EAEAA,EAAAC,GAEA,GAAAxoC,MAAA,GACA,GAAAgrB,GAAA6c,EACA,OAAAU,EAAAC,EAEA,IAAA79C,EAAA,EAAA0T,EAAAM,aAAAqsB,EAAA,IACA,OAAAud,EAAAC,GAAAG,EAAAh+C,GAGA,OAAAqgC,EAAA8c,EACAS,EAAAC,GAEAD,EAAAC,IACAD,EAAAC,GAEAD,GA6FA,SAAAM,EAAAjlC,EAAAklC,EAAA9W,EAAA2T,EAAAoD,GACA,IAAAC,EAAAhpC,EACAipC,EAAA,EACAC,EAAA,EACA,IAAAF,EAAAhpC,EAAA,EAAwBgpC,EAAA1kC,EAAAskB,UAAsB5oB,IAAAgpC,EAAA,CAI9C,IAHA,IAAAG,EAAAvlC,EAAAm/B,KAAAiG,GACA/F,EAAAr/B,EAAAq/B,QACAmG,EAAAD,EAAAlG,EAAAkG,EAAAlG,EACAjjC,EAAAopC,GAEAH,GAAAH,EAAA9oC,GACAkpC,GAAAlX,EAAAhyB,GACAA,IAIA,GAFA4D,EAAAssB,GAAAyV,GAAAx5C,EAAA68C,GAAAD,GAAAE,EACArlC,EAAAusB,IAAAwV,GAAAx5C,EAAA68C,GAAAD,GAAAG,EACAlpC,GAAAijC,EAAA,GACA+F,EACA,MAGA,IAAAK,EAAAzlC,EAAAioB,IAAAyd,YAAAN,GACAO,EAAA,EAAAF,EACAJ,EAAAI,EAAAP,EAAA9oC,GACAkpC,EAAAG,EAAArX,EAAAhyB,GACA4D,EAAAssB,GAAAyV,GAAAx5C,EAAA68C,GAAAD,IAAAE,EACArlC,EAAAusB,IAAAwV,GAAAx5C,EAAA68C,GAAAD,IAAAG,EACAD,EAAAM,EAAAT,EAAA9oC,GACAkpC,EAAAK,EAAAvX,EAAAhyB,GAGA,KAAcgpC,EAAA1kC,EAAAskB,UAAsBogB,EACpCplC,EAAAssB,GAAAyV,GAAAx5C,EAAA68C,GAAAD,GAAA,EACAnlC,EAAAusB,IAAAwV,GAAAx5C,EAAA68C,GAAAD,GAAA,EAKA,SAAAS,EAAA5lC,EAAAklC,EAAA9W,EAAA2T,GACA,IAAAqD,EAAAhpC,EACAipC,EAAA,EACAC,EAAA,EACA,IAAAF,EAAAhpC,EAAA,EAAwBgpC,EAAA1kC,EAAAC,UAAsBvE,IAAAgpC,EAAA,CAI9C,IAHA,IAAAS,EAAA7lC,EAAAi/B,KAAAmG,GACAhG,EAAAp/B,EAAAo/B,QACAoG,EAAAK,EAAAzG,EAAAyG,EAAAzG,EACAhjC,EAAAopC,GAEAH,GAAAH,EAAA9oC,GACAkpC,GAAAlX,EAAAhyB,GACAA,IAIA,GAFA4D,EAAAssB,GAAAyV,GAAArlC,EAAA0oC,GAAAC,EACArlC,EAAAusB,IAAAwV,GAAArlC,EAAA0oC,GAAAE,EACAlpC,GAAAgjC,EAAA,GACAgG,EACA,MAGA,IAAAK,EAAAzlC,EAAAioB,IAAA6d,YAAAV,GACAO,EAAA,EAAAF,EACAJ,EAAAI,EAAAP,EAAA9oC,GACAkpC,EAAAG,EAAArX,EAAAhyB,GACA4D,EAAAssB,GAAAyV,GAAArlC,EAAA0oC,IAAAC,EACArlC,EAAAusB,IAAAwV,GAAArlC,EAAA0oC,IAAAE,EACAD,EAAAM,EAAAT,EAAA9oC,GACAkpC,EAAAK,EAAAvX,EAAAhyB,GAGA,KAAcgpC,EAAA1kC,EAAAC,UAAsBykC,EACpCplC,EAAAssB,GAAAyV,GAAArlC,EAAA0oC,GAAA,EACAplC,EAAAusB,IAAAwV,GAAArlC,EAAA0oC,GAAA,EAGA,SAAAW,EAAAr2B,EAAA4zB,EAAA4B,EAAA9W,EAAA2T,EAAAoD,GACA,IACAjiC,EAAA9G,EADA4D,EAAA0P,EAAAa,eAEA,IAAAnU,EAAA8G,EAAA,EAAuB9G,EAAA4D,EAAAq/B,UAAiBjjC,EAAA,CAIxC,IAHA,IAAA4pC,EAAA,EACAC,EAAA,EACAzuC,EAAAwI,EAAAw/B,WAAApjC,GACArV,EAAA,EAAyBA,EAAAyQ,IAAOzQ,IAAAmc,EAAA,CAChC,IAAAgjC,EAAA5C,EAAA6B,GAAAjiC,GACA8iC,GAAAE,EACAD,EAAAC,IAAAD,EAAAC,GAEAhB,EAAA9oC,GAAA4pC,EAEA,IAAA9iC,EAAA9G,EAAA,EAAuBA,EAAA4D,EAAAq/B,QAAiBjjC,IAAA,CACxC,IAAAyoC,EAAA7kC,EAAAu/B,QAAAnjC,GAAA,GACA+pC,EAAAnmC,EAAA2+B,MAAAz7B,KAAAgiC,EAAAL,GAEA,MADAA,EACAA,GAAA7kC,EAAAu/B,QAAAnjC,GAAA,IACA+pC,GAAAnmC,EAAA2+B,MAAAz7B,GAAAgiC,EAAAL,KACA3hC,IACA2hC,EAGA,IAAAtxC,EAAAmvC,EAAA1iC,EAAAy+B,MAAAsD,GAAA3lC,GAGA,GAFAgyB,EAAAhyB,GAAA5T,KAAAE,IAAAy9C,EAAA5yC,GAEAyM,EAAAkgC,cAAA,EAAA6B,IAAArhC,EAAAuB,WAAA,CACA1O,EAAAovC,EAAA3iC,EAAA0+B,MAAAqD,GAAA3lC,GAAA,IACA5I,EAAA46B,EAAAhyB,GACAgyB,EAAAhyB,GAAA5T,KAAAE,IAAA6K,EAAAC,GAEAwM,EAAA0+B,MAAAqD,GAAA3lC,GAAA4D,EAAAy+B,MAAAsD,GAAA3lC,GACA4D,EAAAy+B,MAAAsD,GAAA3lC,GAAA+pC,EAEA,KAAc/pC,GAAAsE,EAAA4kB,SAAqBlpB,EACnC8oC,EAAA9oC,GAAA,EACAgyB,EAAAhyB,GAAA,EA0BA,SAAAgqC,EAAA7yC,EAAAC,EAAA8d,GACA,OAAAA,GAAA,EACA/d,EAEA+d,GAAA,EAAA9d,EACAA,EAAA,EACAhL,KAAAq0B,IAAAtpB,EAAAC,EAAA8d,GAAA9d,EAEA,EAIA,IAAA6yC,EAAA,2DACA,SAAAC,EAAAC,EAAAne,GAEA,IADA,IAAAoe,EAAA,OACApB,EAAA,EAAwBA,EAAA1kC,EAAAskB,QAAA,EAA0BogB,IAClD,QAAAD,EAAA,EAA8BA,EAAA,EAAYA,IAAA,CAC1C,IAAA5Y,EAAAga,EAAAha,IAAAhkC,EAAA68C,GAAAD,GACA,GAAA5Y,EAAA,GACA,IAAAh5B,EAAAg5B,EAAAnE,EACAkE,EAAAia,EAAAja,GAAA/jC,EAAA68C,GAAAD,GACA7Y,EAAA/4B,IAEAizC,GADAla,EAAA,KAAA/4B,EACA8yC,EAAAjB,IAAA,GAAA7C,GAEA8D,EAAAjB,GAAA3qC,EAAAI,WAAAyxB,EAAA/4B,KAMA,OAAAizC,EAIA,IAAAC,EAAA,oGACA,SAAAC,EAAAH,EAAAne,GAEA,IADA,IAAAue,EAAA,SACAvB,EAAA,EAAwBA,EAAA1kC,EAAAC,QAAA,EAA0BykC,IAAA,CAClD,IAAA7Y,EAAAga,EAAAha,IAAA7vB,EAAA0oC,GACA,GAAA7Y,EAAA,GACA,IAAAh5B,EAAAg5B,EAAAnE,EACAkE,EAAAia,EAAAja,GAAA5vB,EAAA0oC,GACA9Y,EAAA/4B,IAEAozC,GADAra,EAAA,KAAA/4B,EACAkzC,EAAArB,IAAA,GAAA7C,GAEAkE,EAAArB,GAAA3qC,EAAAI,WAAAyxB,EAAA/4B,KAKA,OAAAozC,EAEA,SAAAC,EAAA5mC,EAAAqjC,EAAA6B,EAAAz8C,EAAAgtC,GACA,IAAAr5B,EAAA8G,EACA,IAAA9G,EAAA8G,EAAA,EAAuB9G,EAAA4D,EAAAo/B,UAAiBhjC,EAAA,CACxC,IAEArV,EAFAi/C,EAAA,EACAC,EAAA,EAEA,IAAAl/C,EAAA,EAAqBA,EAAAiZ,EAAAy/B,WAAArjC,KAAuBrV,IAAAmc,EAAA,CAC5C,IAAAgjC,EAAA7C,EAAAngC,GACA8iC,GAAAE,EACAD,EAAAC,IAAAD,EAAAC,GAEAhB,EAAA9oC,GAAA4pC,EACAv9C,EAAA2T,GAAA6pC,EACAxQ,EAAAr5B,GAAA4pC,EAAAhmC,EAAA0/B,YAAAtjC,IAGA,SAAAyqC,EAAA7mC,EAAAvX,EAAAgtC,EAAAqR,GACA,IAAAC,EAAAlgC,EAAA7f,OAAA,EACAoV,EAAA,EACApR,EAAAyqC,EAAAr5B,GAAAq5B,EAAAr5B,EAAA,GAWA,IAVApR,EAAA,IACAi7C,EAAAx9C,EAAA2T,IACA3T,EAAA2T,EAAA,KAAA6pC,EAAAx9C,EAAA2T,EAAA,KAEAmI,EAAA,GADAvZ,EAAA,MAAAi7C,EAAAj7C,OAAAgV,EAAAy/B,WAAArjC,GAAA4D,EAAAy/B,WAAArjC,EAAA,SAEA2qC,IAAAxiC,EAAAwiC,GACAD,EAAA1qC,GAAAmI,GAEAuiC,EAAA1qC,GAAA,EAEAA,EAAA,EAAmBA,EAAA4D,EAAAo/B,QAAA,EAAqBhjC,IAAA,CAGxC,IAAA6pC,EAIA1hC,GANAvZ,EAAAyqC,EAAAr5B,EAAA,GAAAq5B,EAAAr5B,GAAAq5B,EAAAr5B,EAAA,IACA,IACA6pC,EAAAx9C,EAAA2T,EAAA,IACA3T,EAAA2T,KAAA6pC,EAAAx9C,EAAA2T,IACA6pC,EAAAx9C,EAAA2T,EAAA,KAAA6pC,EAAAx9C,EAAA2T,EAAA,KAEAmI,EAAA,GADAvZ,EAAA,MAAAi7C,EAAAj7C,OAAAgV,EAAAy/B,WAAArjC,EAAA,GAAA4D,EAAAy/B,WAAArjC,GAAA4D,EAAAy/B,WAAArjC,EAAA,SAEA2qC,IAAAxiC,EAAAwiC,GACAD,EAAA1qC,GAAAmI,GAEAuiC,EAAA1qC,GAAA,GAGApR,EAAAyqC,EAAAr5B,EAAA,GAAAq5B,EAAAr5B,IACA,IACA6pC,EAAAx9C,EAAA2T,EAAA,IACA3T,EAAA2T,KAAA6pC,EAAAx9C,EAAA2T,KAEAmI,EAAA,GADAvZ,EAAA,MAAAi7C,EAAAj7C,OAAAgV,EAAAy/B,WAAArjC,EAAA,GAAA4D,EAAAy/B,WAAArjC,GAAA,MAEA2qC,IAAAxiC,EAAAwiC,GACAD,EAAA1qC,GAAAmI,GAEAuiC,EAAA1qC,GAAA,EAGA,IAAAggC,EAAA,qHA0QA,SAAA4K,EAAAt3B,EAAAtoB,EAAA4uB,EAAA+rB,EAAA4B,EAAAN,EAAAE,EAAAC,GACA,IAAAxjC,EAAA0P,EAAAa,eACA,GAAAwxB,EAAA,EACAO,EAAAN,SAAAhiC,EAAAujC,EAAAC,GAAAzB,EAAA36C,EAAA4uB,QACS,MAAA+rB,EACT,QAAA7+B,EAAAxC,EAAA+kB,QAAA,EAAwGviB,GAAA,IAAQA,EAAA,CAChH,IAAAxG,EAAA6mC,EAAAC,EAAA,GAAAtgC,GACAoO,EAAAiyB,EAAAC,EAAA,GAAAtgC,GACAqgC,EAAAC,EAAA,GAAAtgC,IAAAxG,EAAA4U,GAAA7W,EAAAG,MAAA,GACA2oC,EAAAC,EAAA,GAAAtgC,IAAAxG,EAAA4U,GAAA7W,EAAAG,MAAA,GAOA,IAFAyoC,EAAA,GAAAJ,EAAAM,EAAAC,EAAA,OACAH,EAAA,IAAAA,EAAA,GACAngC,EAAAxC,EAAA+kB,QAAA,IAA6CviB,GAAA,IAAQA,EAAA,CACrD,IAAA0gC,EAAAL,EAAAC,EAAA,GAAA9iC,EAAA+kB,QAAA,EAAAviB,GACA2gC,EAAAN,EAAAC,EAAA,GAAA9iC,EAAA+kB,QAAA,EAAAviB,GACAmgC,EAAA3iC,EAAA+kB,QAAA,EAAAviB,GAAA+/B,EAAA,IAAAW,IAAAC,MAGA,IAAAC,EAAA,EACA,IAAA5gC,EAAA,GAA0BA,EAAAxC,EAAAqjC,SAAsB7gC,IAChD4gC,GAAAT,EAAAngC,GAIA,GAFAlD,EAAAy6B,SAAAsH,GAAA+B,EAEAp0B,EAAAkW,SAAA,CACA,IAAA1iB,EAAA,EAAyBA,EAAAxC,EAAAqjC,SAAsB7gC,IAC/ClD,EAAAoU,MAAA8nB,OAAAyH,GAAA5B,GAAA7+B,GAAAlD,EAAAoU,MAAA4vB,YAAAjC,GAAA7+B,GACAlD,EAAAoU,MAAA4vB,YAAAjC,GAAA7+B,GAAAmgC,EAAAngC,GAEAlD,EAAAoU,MAAA8S,GAAAyc,GAAA5B,GAAA/hC,EAAAknB,GAAA6a,IAGA,SAAAkF,EAAAv3B,EAAAtoB,EAAA4uB,EAAA+rB,EAAAoD,EAAA7B,EAAAG,EAAAC,GACA,IAAA1jC,EAAA0P,EAAAa,eAIA,GAHA,GAAA40B,GAAApD,EAAA,GACAO,EAAAT,UAAA7hC,EAAAyjC,EAAAC,GAAA3B,EAAA36C,EAAA4uB,GAEA,GAAA+rB,EACA,QAAA7+B,EAAAxC,EAAA+/B,UAAA,EAA0Gv9B,GAAA,IAAQA,EAAA,CAClH,IAAAxG,EAAA+mC,EAAAC,EAAA,GAAAyB,GAAAjiC,GACAoO,EAAAmyB,EAAAC,EAAA,GAAAyB,GAAAjiC,GACAugC,EAAAC,EAAA,GAAAyB,GAAAjiC,IAAAxG,EAAA4U,GAAA7W,EAAAG,MAAA,GACA6oC,EAAAC,EAAA,GAAAyB,GAAAjiC,IAAAxG,EAAA4U,GAAA7W,EAAAG,MAAA,GAOA,IAFA0oC,EAAA6B,GAAA,GAAA1B,EAAAC,EAAA,GAAAyB,GAAA,GACA7B,EAAA6B,GAAA,IAAA7B,EAAA6B,GAAA,GACAjiC,EAAAxC,EAAA+/B,UAAA,IAA+Cv9B,GAAA,IAAQA,EAAA,CACvD,IAAA0gC,EAAAH,EAAAC,EAAA,GAAAyB,GAAAzkC,EAAA+/B,UAAA,EAAAv9B,GACA2gC,EAAAJ,EAAAC,EAAA,GAAAyB,GAAAzkC,EAAA+/B,UAAA,EAAAv9B,GACAogC,EAAA6B,GAAAzkC,EAAA+/B,UAAA,EAAAv9B,GAAA+/B,EAAA,IAAAW,IAAAC,OAKA,SAAAqD,EAAAx3B,EAAAi0B,EAAA5B,EAAAsB,GACA,IAAArjC,EAAA0P,EAAAa,eACA,GAAAb,EAAA6W,kBAAAwb,EAAA,IAEA/hC,EAAAw7B,YAAAmI,GAAA5B,GAAA/hC,EAAA6+B,iBAAAkD,GACA/hC,EAAA6+B,iBAAAkD,GAAAmB,EAAAG,EAAArjC,IA3UA1U,KAAA+vC,iBAAA,SAAA3rB,EAAAtoB,EAAA4uB,EAAA2tB,EAAAwD,EAAAC,EAAAC,EAAAC,EAAApL,EAAAqL,GAKA,IAQAC,EAAAzF,EACA3lC,EAAArV,EAAAmc,EAAAqB,EACA6gC,EAAAD,EAEAsC,EAwNAh5B,EApOAzO,EAAA0P,EAAAa,eACAm3B,EAAAluC,EAAA,GAAAkH,EAAA+kB,UACAkiB,EAAAnuC,EAAA,KAAAkH,EAAA+/B,YACAmH,EAAAvuC,EAAAqH,EAAA4kB,OAAA,GACAuiB,EAAAxuC,EAAAqH,EAAA4kB,OAAA,GACA8I,EAAA/0B,EAAAqH,EAAA4kB,OAAA,GACA6V,EAAAhiC,EAAA,GACA2uC,EAAA3uC,EAAA,GAIA4uC,EAAAvuC,EAAA,SAEAwuC,EAAA7uC,EAAAuH,EAAA4kB,OAAA,GACA2iB,GAAA9uC,EAAAuH,EAAA4kB,OAAA,GAUA,IATAvrB,EAAAC,KAAAiuC,GAAA,GACAT,EAAAxnC,EAAAmiB,aACAzS,EAAAgH,MAAApb,EAAA2hB,eAAAuqB,EAAA,GACAC,EAAA/3B,EAAAG,KAAAxU,EAAAwX,QAAA,GAAA7S,EAAAgU,QAAA,EAAAhU,EAAAkU,SAAAlU,EAAAgU,QAAA,GAAyGtE,EAAAG,KAAAxU,EAAAyU,QAAAJ,EAAAG,KAAAxU,EAAA6W,UAAAxC,EAAAG,KAAAxU,EAAAuoB,OACzG,GACS,EAITme,EAAA,EAAqBA,EAAA/hC,EAAAmiB,aAAwB4f,IAAA,CAC7C,IAAAmG,GAAA9gD,EAAA26C,GACAoG,GAAAnyB,EAAA,QAAA+sB,EAAA,IACA,IAAAh8C,EAAA,EAAqBA,EAAA,IAASA,IAAA,CAC9B,IAAAoX,GAAAO,GAGA,IAFAP,GAAA+pC,GAAAC,GAAAphD,EAAA,IACA2X,GAAA,EACAwE,EAAA,EAAuBA,GAAA6/B,EAAA,OAA4B7/B,GAAA,EACnD/E,IAAAi+B,EAAAl5B,IAAAglC,GAAAC,GAAAphD,EAAAmc,GAAAglC,GAAAC,GAAAphD,EAAAg8C,EAAA7/B,IACAxE,IAAA09B,EAAAl5B,EAAA,IAAAglC,GAAAC,GAAAphD,EAAAmc,EAAA,GAAAglC,GAAAC,GAAAphD,EAAAg8C,EAAA7/B,EAAA,IAEA6kC,EAAAhG,GAAAh7C,GAAAoX,GAAAO,GAEAyoC,EAAAxD,GAAA5B,GAAAzV,GAAAr1B,OAAA+I,EAAAssB,GAAAyV,IACAoF,EAAAxD,GAAA5B,GAAAxV,IAAAt1B,OAAA+I,EAAAusB,IAAAwV,IACAyF,EAAA,IAC4EJ,EAAAzD,GAAA5B,GAAAzV,GAAAr1B,OAAA+I,EAAAssB,GAAAyV,EAAA,IAC5EqF,EAAAzD,GAAA5B,GAAAxV,IAAAt1B,OAAA+I,EAAAusB,IAAAwV,EAAA,KAGA,IAAAA,EAAA,EAAqBA,EAAAyF,EAAczF,IAAA,CACnC,IAMAqG,GAJAC,GAAAhvC,EAAA,IACAivC,GAAA,UACAC,GAAAlvC,EAAA,IACAmvC,GAAA,EAEA//C,GAAA4Q,EAAAqH,EAAA4kB,QACAmQ,GAAAp8B,EAAAqH,EAAA4kB,QACAmjB,GAAA,UACApF,GAAAhqC,EAAAqH,EAAAqjC,UACAT,GAAA9pC,EAAA,GAAAkH,EAAAgoC,aAOA,IAAA3hD,EAAA,EAAqBA,EAAA,EAAOA,IAC5BshD,GAAAthD,GAAAiZ,EAAAwQ,MAAAusB,iBAAAgF,GAAAh7C,EAAA,GACAwhD,GAAAxhD,GAAAshD,GAAAthD,GAAAiZ,EAAAwQ,MAAAusB,iBAAAgF,GAAAh7C,EAAA,GACAuhD,GAAA,IAAAD,GAAAthD,GAEA,MAAAg7C,EACA,IAAAh7C,EAAA,EAAuBA,EAAA,IAASA,IAAA,CAChC,IAAA2V,GAAA4U,GACA5U,GAAAqrC,EAAA,GAAAhhD,GACAuqB,GAAAy2B,EAAA,GAAAhhD,GACAghD,EAAA,GAAAhhD,GAAA2V,GAAA4U,GACAy2B,EAAA,GAAAhhD,GAAA2V,GAAA4U,GAIA,IAAAq3B,GAAAZ,EAAA,EAAAhG,GACA6G,GAAA,EACA,IAAA7hD,EAAA,EAAuBA,EAAA,EAAOA,IAAA,CAG9B,IAFA,IAAA8hD,GAAAD,GAAA,GACAhnC,GAAA,EACoBgnC,GAAAC,GAAaD,KACjChnC,GAAApZ,KAAA4nB,IAAAu4B,GAAAC,OAAAhnC,GAAApZ,KAAA4nB,IAAAu4B,GAAAC,MAEA5oC,EAAAwQ,MAAAusB,iBAAAgF,GAAAh7C,GAAAshD,GAAAthD,EAAA,GAAA6a,GACA0mC,GAAA,EAAAvhD,EAAA,IAAA6a,GACAA,GAAAymC,GAAAthD,EAAA,KACA6a,IAAAymC,GAAAthD,EAAA,KAEA6a,GADeymC,GAAAthD,EAAA,QAAA6a,GACfymC,GAAAthD,EAAA,SAAA6a,IACe,EACf2mC,GAAAxhD,EAAA,GAAA6a,GAGA,GAAA8N,EAAAkW,SAAA,CACA,IAAAryB,GAAAg1C,GAAA,GACA,IAAAxhD,EAAA,EAAuBA,EAAA,GAAQA,IAC/BwM,GAAAg1C,GAAAxhD,KAAAwM,GAAAg1C,GAAAxhD,IAEAiZ,EAAAoU,MAAA6nB,IAAA0H,GAAA5B,GAAA/hC,EAAAoU,MAAA00B,SAAA/G,GACA/hC,EAAAoU,MAAA00B,SAAA/G,GAAAxuC,GAGA,IADA60C,GAAA,GAAArG,EAAA/hC,EAAAwQ,MAAAE,aAAA1Q,EAAAwQ,MAAAC,WACA1pB,EAAA,EAAqBA,EAAA,GAAQA,IAC7B,GAAA0hD,GAAA1hD,EAAA,IAAAwhD,GAAAxhD,GAAAqhD,KAAAK,GAAA1hD,EAAA,GAAAA,EAAA,KAKA,IAAAA,EAAA,EAAqBA,EAAA,EAAOA,KAE5BuhD,GAAAvhD,EAAA,GAAAuhD,GAAAvhD,GACAuhD,GAAAvhD,EAAA,GAAAuhD,GAAAvhD,GAEAuhD,GAAAvhD,GAAAuhD,GAAAvhD,EAAA,IAEA,MACA0hD,GAAA1hD,GAAA,EACA,GAAAA,IAAA0hD,GAAA,OA8BA,IA3BA,GAAAA,GAAA,OAAAzoC,EAAAwQ,MAAAwsB,YAAA+E,KAAA0G,GAAA,MACA,GAAAzoC,EAAAwQ,MAAAwsB,YAAA+E,IAAA0G,GAAA,GAAAA,GAAA,GAAAA,GAAA,GAAAA,GAAA,QACAD,GAAA,EACA,GAAAC,GAAA,OAAAA,GAAA,KAAAA,GAAA,MACA,GAAAA,GAAA,OAAAA,GAAA,KAAAA,GAAA,MACA,GAAAA,GAAA,OAAAA,GAAA,KAAAA,GAAA,OAEA1G,EAAA,EACA+F,EAAA/F,GAAAyG,GAEA,GAAAA,KACAV,EAAA,GAAAA,EAAA,MAMA5L,EAAA6F,GAAA/hC,EAAAy6B,SAAAsH,GAKAqB,EAAA1zB,EAAA2zB,GAAAC,GADAoE,EACA,EAAA3F,EAFA4F,EAEA,EAAA5F,EAAA4B,EAAA5B,EAAA36C,EAAA4uB,GAGA4wB,EAAA5mC,EAAAqjC,GAAAuE,EAAAn/C,GAAAgtC,IACAoR,EAAA7mC,EAAAvX,GAAAgtC,GAAAuS,GACA7C,EAAA,EAA0BA,EAAA,EAAYA,IAAA,CACtC,IAAAE,GAAAC,GAGA,IAFAS,EAAAr2B,EAAA4zB,GAAAuE,EAAAzZ,EAAA2T,EAAAoD,GACAF,EAAAjlC,EAAA6nC,EAAAzZ,EAAA2T,EAAAoD,GACAC,EAAA,EAAwBA,EAAA1kC,EAAAskB,QAAsBogB,IAAA,CAG9C,GAFAE,GAAAtlC,EAAAusB,IAAAwV,GAAAx5C,EAAA68C,GAAAD,GACAG,IAxuBA,GAyuBAmD,GAAAtD,IAAA,MAAAsD,GAAAtD,EAAA,IACA,IAAA4D,GAAA,GAAA5D,IAAA,IACAvjC,GAAAwkC,EAAApmC,EAAAusB,IAAAwV,GAAAx5C,EAAA68C,GAAA2D,IAAAzD,GA1uBA,GA0uBAmC,GACAnC,GAAA98C,KAAAE,IAAA48C,GAAA1jC,IAEA,GAAA6mC,GAAAtD,IACA4D,GAAA,GAAA5D,IAAA,IACAvjC,GAAAwkC,EAAApmC,EAAAusB,IAAAwV,GAAAx5C,EAAA68C,GAAA2D,IAAAzD,GAAAxC,EAAA2E,GACAnC,GAAA98C,KAAAE,IAAA48C,GAAA1jC,MACe,GAAAujC,GAAA,GAAAsD,GAAAtD,EAAA,OAAAA,GAAA,GAAAnlC,EAAAwQ,MAAAwsB,YAAA+E,MACfgH,GAAA,GAAA5D,IAAA,IACAvjC,GAAAwkC,EAAApmC,EAAAusB,IAAAwV,GAAAx5C,EAAA68C,GAAA2D,IAAAzD,GAAAxC,EAAA2E,GACAnC,GAAA98C,KAAAE,IAAA48C,GAAA1jC,KAEAyjC,GAAAgD,GAAA,EAAAlD,EAAA,GAAAkD,GAAA,EAAAlD,EAAA,GAAAkD,GAAA,EAAAlD,EAAA,GACA,EAAAkD,GAAA,EAAAlD,EAAA,GAAAE,KACAC,IAAA,GACA,EAAA+C,GAAA,EAAAlD,EAAA,GAAAE,KAAAC,IAAA,KAEAtlC,EAAAusB,IAAAwV,GAAAx5C,EAAA68C,GAAAD,GAAAG,IASA,IANAtlC,EAAAwQ,MAAAwsB,YAAA+E,GAAA0G,GAAA,GAIAlkC,EAAA,EAEAnI,EAAA,EAAuBA,EAAA4D,EAAAo/B,QAAiBhjC,IAAA,CAQxC,IAHA,IAAAyoC,GAAA7kC,EAAAs/B,MAAAljC,GAAA,GACA4sC,GAAApB,EAAA/C,IAAAh+B,EAAAmhC,EAAAnD,KACAsB,GAAAnmC,EAAA4+B,MAAAr6B,KAAAykC,KACAnE,IAAA7kC,EAAAs/B,MAAAljC,GAAA,IACA4sC,GAAApB,EAAA/C,IAAAh+B,EAAAmhC,EAAAnD,KACAsB,GAAAzB,EAAAyB,GAAAnmC,EAAA4+B,MAAAr6B,KAAAykC,GAAAnE,MAAAzoC,EAAA4D,EAAA,GAEAmmC,IAAA,iBAcAnmC,EAAAkgC,cAAA,EAAA6B,IAAArhC,EAAAuB,WAAAmsB,EAAAhyB,GAAA+pC,GAAiF/X,EAAAhyB,GAAAgqC,EAAA59C,KAAAE,IAAAy9C,GAAA39C,KAAAE,IAAA85C,EAAAxiC,EAAAu+B,KAAAwD,GAAA3lC,GAAAqmC,EAAAziC,EAAAw+B,KAAAuD,GAAA3lC,KAAA+pC,GAAAsB,GACjFznC,EAAAw+B,KAAAuD,GAAA3lC,GAAA4D,EAAAu+B,KAAAwD,GAAA3lC,GACA4D,EAAAu+B,KAAAwD,GAAA3lC,GAAA+pC,GAGA,KAAgB/pC,GAAAsE,EAAA4kB,SAAqBlpB,EACrCwrC,EAAAxrC,GAAA,EACAgyB,EAAAhyB,GAAA,EAEAwpC,EAAA5lC,EAAA4nC,EAAAxZ,EAAA2T,GAkBA,IAhBAryB,EAAAgH,MAAApb,EAAAyhB,QAAArN,EAAAgH,MAAApb,EAAA2hB,cACAvN,EAAAsB,aAAA,GArjBA,SAAAtB,EAAA0X,GACA,IAAApnB,EAAA0P,EAAAa,eACA,GAAAvQ,EAAAmiB,aAAA,GACA,QAAAijB,EAAA,EAA0BA,EAAA1kC,EAAAC,QAAsBykC,IAAA,CAChD,IAAA1oC,EAAAsD,EAAAusB,IAAA,GAAA7vB,EAAA0oC,GACA9zB,EAAAtR,EAAAusB,IAAA,GAAA7vB,EAAA0oC,GACAplC,EAAAusB,IAAA,GAAA7vB,EAAA0oC,IAAA9zB,EAAA8V,EACApnB,EAAAusB,IAAA,GAAA7vB,EAAA0oC,IAAA1oC,EAAA0qB,EAEA,IAAAge,EAAA,EAA0BA,EAAA1kC,EAAAskB,QAAsBogB,IAChD,QAAAD,EAAA,EAAgCA,EAAA,EAAYA,IAC5CzoC,EAAAsD,EAAAusB,IAAA,GAAAhkC,EAAA68C,GAAAD,GACA7zB,EAAAtR,EAAAusB,IAAA,GAAAhkC,EAAA68C,GAAAD,GACAnlC,EAAAusB,IAAA,GAAAhkC,EAAA68C,GAAAD,IAAA7zB,EAAA8V,EACApnB,EAAAusB,IAAA,GAAAhkC,EAAA68C,GAAAD,IAAAzoC,EAAA0qB,GAwiBA6hB,CAAAv5B,IAAAsB,cAGAtB,EAAAgH,MAAApb,EAAA2hB,eApiBA,SAAAjd,GACA,QAAAolC,EAAA,EAAwBA,EAAA1kC,EAAAC,QAAsBykC,IAC+E,KAAAplC,EAAAusB,IAAA,GAAA7vB,EAAA0oC,GAAA,KAAAplC,EAAAusB,IAAA,GAAA7vB,EAAA0oC,IAAAplC,EAAAusB,IAAA,GAAA7vB,EAAA0oC,GAAA,KAAAplC,EAAAusB,IAAA,GAAA7vB,EAAA0oC,IAAA,CAC7H,IAAA8D,EAAAlpC,EAAA8+B,MAAAsG,GAAAplC,EAAAssB,GAAA,GAAA5vB,EAAA0oC,GACA+D,EAAA3gD,KAAAC,IAAAuX,EAAAusB,IAAA,GAAA7vB,EAAA0oC,GAAA58C,KAAAE,IAAAsX,EAAAusB,IAAA,GAAA7vB,EAAA0oC,GAAA8D,IACAA,EAAAlpC,EAAA8+B,MAAAsG,GAAAplC,EAAAssB,GAAA,GAAA5vB,EAAA0oC,GACA,IAAAgE,EAAA5gD,KAAAC,IAAAuX,EAAAusB,IAAA,GAAA7vB,EAAA0oC,GAAA58C,KAAAE,IAAAsX,EAAAusB,IAAA,GAAA7vB,EAAA0oC,GAAA8D,IACAlpC,EAAAusB,IAAA,GAAA7vB,EAAA0oC,GAAA+D,EACAnpC,EAAAusB,IAAA,GAAA7vB,EAAA0oC,GAAAgE,EAEA,IAAAhE,EAAA,EAAwBA,EAAA1kC,EAAAskB,QAAsBogB,IAC9C,QAAAD,EAAA,EAA8BA,EAAA,EAAYA,IAC1CnlC,EAAAusB,IAAA,GAAAhkC,EAAA68C,GAAAD,GAAA,KAAAnlC,EAAAusB,IAAA,GAAAhkC,EAAA68C,GAAAD,IAAAnlC,EAAAusB,IAAA,GAAAhkC,EAAA68C,GAAAD,GAAA,KAAAnlC,EAAAusB,IAAA,GAAAhkC,EAAA68C,GAAAD,KACA+D,EAAAlpC,EAAA++B,MAAAqG,GAAAplC,EAAAssB,GAAA,GAAA/jC,EAAA68C,GAAAD,GACAgE,EAAA3gD,KAAAC,IAAAuX,EAAAusB,IAAA,GAAAhkC,EAAA68C,GAAAD,GAAA38C,KAAAE,IAAAsX,EAAAusB,IAAA,GAAAhkC,EAAA68C,GAAAD,GAAA+D,IACAA,EAAAlpC,EAAA++B,MAAAqG,GAAAplC,EAAAssB,GAAA,GAAA/jC,EAAA68C,GAAAD,GACAiE,EAAA5gD,KAAAC,IAAAuX,EAAAusB,IAAA,GAAAhkC,EAAA68C,GAAAD,GAAA38C,KAAAE,IAAAsX,EAAAusB,IAAA,GAAAhkC,EAAA68C,GAAAD,GAAA+D,IACAlpC,EAAAusB,IAAA,GAAAhkC,EAAA68C,GAAAD,GAAAgE,EACAnpC,EAAAusB,IAAA,GAAAhkC,EAAA68C,GAAAD,GAAAiE,GAohBAC,CAAArpC,GACAyO,EAAAiB,EAAAjB,MACAjmB,KAAA4nB,IAAA3B,GAAA,GA9gBA,SAAAzO,EAAAyO,EAAA66B,GACA,IAAAC,EAAA96B,EACA+6B,EAAAhhD,KAAAq0B,IAAA,GAAAysB,GACA76B,GAAA,EACA86B,GAAA,EACA,QAAAnE,EAAA,EAAwBA,EAAA1kC,EAAAC,QAAsBykC,IAE9Cpb,EAAAhqB,EAAA0kB,IAAAW,KAAArlB,EAAAg/B,KAAAoG,IAAAoE,GACAC,EAAAjhD,KAAAE,IAAAF,KAAAC,IAAAuX,EAAAusB,IAAA,GAAA7vB,EAAA0oC,GAAApb,GAAAxhC,KAAAC,IAAAuX,EAAAusB,IAAA,GAAA7vB,EAAA0oC,GAAApb,KAGAvb,GAFAi7B,EAAAlhD,KAAAC,IAAAuX,EAAAusB,IAAA,GAAA7vB,EAAA0oC,GAAApb,KACA2f,EAAAnhD,KAAAC,IAAAuX,EAAAusB,IAAA,GAAA7vB,EAAA0oC,GAAApb,MAGA0f,GADA3f,EAAA0f,EAAAF,GAAAG,EAAAC,GAEAA,GAAA5f,GAEA/pB,EAAAusB,IAAA,GAAA7vB,EAAA0oC,GAAA58C,KAAAE,IAAAghD,EAAA1pC,EAAAusB,IAAA,GAAA7vB,EAAA0oC,IACAplC,EAAAusB,IAAA,GAAA7vB,EAAA0oC,GAAA58C,KAAAE,IAAAihD,EAAA3pC,EAAAusB,IAAA,GAAA7vB,EAAA0oC,IAGA,IADAoE,GAAA9oC,EAAA+/B,UAAA//B,EAAA+kB,QACA2f,EAAA,EAAwBA,EAAA1kC,EAAAskB,QAAsBogB,IAC9C,QAAAD,EAAA,EAA8BA,EAAA,EAAYA,IAAA,CAC1C,IAAAsE,EAAAC,EAAAC,EAAA3f,EAMAD,EALAC,EAAAhqB,EAAA0kB,IAAAa,KAAAvlB,EAAAk/B,KAAAkG,IAAAoE,GACAC,EAAAjhD,KAAAE,IAAAF,KAAAC,IAAAuX,EAAAusB,IAAA,GAAAhkC,EAAA68C,GAAAD,GAAAnb,GAAAxhC,KAAAC,IAAAuX,EAAAusB,IAAA,GAAAhkC,EAAA68C,GAAAD,GAAAnb,KAGAvb,GAFAi7B,EAAAlhD,KAAAC,IAAAuX,EAAAusB,IAAA,GAAAhkC,EAAA68C,GAAAD,GAAAnb,KACA2f,EAAAnhD,KAAAC,IAAAuX,EAAAusB,IAAA,GAAAhkC,EAAA68C,GAAAD,GAAAnb,MAGA0f,GADA3f,EAAA0f,EAAAh7B,GAAAi7B,EAAAC,GAEAA,GAAA5f,GAEA/pB,EAAAusB,IAAA,GAAAhkC,EAAA68C,GAAAD,GAAA38C,KAAAE,IAAAsX,EAAAusB,IAAA,GAAAhkC,EAAA68C,GAAAD,GAAAuE,GACA1pC,EAAAusB,IAAA,GAAAhkC,EAAA68C,GAAAD,GAAA38C,KAAAE,IAAAsX,EAAAusB,IAAA,GAAAhkC,EAAA68C,GAAAD,GAAAwE,IA6eAC,CAAA5pC,EAAAyO,EAAAiB,EAAAmB,SAAA7Q,EAAA0kB,IAAAG,SAlXA,SAAAnV,EAAAo4B,EAAAP,EAAApM,GACA,IAAAn7B,EAAA0P,EAAAa,eACAb,EAAA2N,cAAA3iB,EAAAO,qBAAA,GAAA6sC,EAAA,OAAAA,EAAA,KAAAA,EAAA,GAAAA,EAAA,MAIA,QAAA/F,EAAA,EAAyBA,EAAA/hC,EAAAmiB,aAAwB4f,IACjD5G,EAAA4G,GAAArhC,EAAAwB,UACAwN,EAAA2N,cAAA3iB,EAAAQ,wBAAA4sC,EAAA/F,GAAA,GACAryB,EAAA2N,cAAA3iB,EAAAS,qBAAA2sC,EAAA/F,GAAA,GACA,GAAA+F,EAAA/F,GACA/hC,EAAAkgC,cAAA6B,IAAArhC,EAAAuB,aAAAk5B,EAAA4G,GAAArhC,EAAAmpC,YAEA1O,EAAA4G,GAAArhC,EAAAuB,WACAjC,EAAAkgC,cAAA6B,IAAArhC,EAAAwB,YACAlC,EAAAkgC,cAAA6B,GAAArhC,EAAAopC,YAEA9pC,EAAAkgC,cAAA6B,IAAArhC,EAAAmpC,YAAA7pC,EAAAkgC,cAAA6B,GAAArhC,EAAAuB,aAEAslC,EAAAxF,GAAA/hC,EAAAkgC,cAAA6B,GACA/hC,EAAAkgC,cAAA6B,GAAA5G,EAAA4G,GAkWAgI,CAAAr6B,EAAAo4B,EAAAP,EAAApM,GAGA4G,EAAA,EAAqBA,EAAAyF,EAAczF,IAAA,CACnC,IAAAiI,GAEA35C,GACAk2C,GAFA0D,GAAA,EAGAlI,EAAA,GACAiI,GAAA1C,EACA2C,IAAA,EACA55C,GAAAqQ,EAAAwB,UACAqlC,EAAA,IAAA7mC,EAAAuB,YAAAslC,EAAA,IAAA7mC,EAAAuB,aAAA5R,GAAAqQ,EAAAuB,YACAskC,GAAAa,EAAAzD,GAAA5B,EAAA,KAEAiI,GAAA3C,EACA4C,GAAA,EACA55C,GAAAk3C,EAAAxF,GACAwE,GAAAY,EAAAxD,GAAA5B,IAEA1xC,IAAAqQ,EAAAuB,WAAA+nC,GAAAC,GAAAlI,GAAAuE,EAAAC,GAAAvmC,EAAAooB,eAA8F4hB,GAAAC,GAAAlI,GAAA2E,EAAAH,GAAAvmC,EAAAooB,eAC9F1Y,EAAAkW,WAAA5lB,EAAAoU,MAAA8S,GAAAyc,GAAA5B,GAAAiI,GAAAC,GAAAlI,IAEA,UAuEA,IAAAmI,EAAA,qHAiJA,SAAAC,EAAAnqC,EAAA+hC,EAAAoD,GACA,MAAAA,EACA,QAAA/oC,EAAA,EAAyBA,EAAA4D,EAAAq/B,QAAiBjjC,IAC1C4D,EAAA0+B,MAAAqD,GAAA3lC,GAAA4D,EAAAy+B,MAAAsD,GAAA3lC,GACA4D,EAAAy+B,MAAAsD,GAAA3lC,GAAA,EAIA,SAAAguC,GAAApqC,EAAA+hC,GACA,QAAA3lC,EAAA,EAAuBA,EAAA4D,EAAAo/B,QAAiBhjC,IACxC4D,EAAAw+B,KAAAuD,GAAA3lC,GAAA4D,EAAAu+B,KAAAwD,GAAA3lC,GACA4D,EAAAu+B,KAAAwD,GAAA3lC,GAAA,EA2CA,SAAAiuC,GAAA36B,EAAA4zB,EAAA4B,EAAA9W,EAAA2T,EAAAoD,GACA,IAGAp+C,EAAAmc,EAAA9G,EAHA4D,EAAA0P,EAAAa,eACA9nB,EAAA,IAAA6hD,MAAA5pC,EAAA4kB,QACAmQ,EAAAp8B,EAAAqH,EAAA4kB,QAEA2iB,EAAA,IAAAp2B,IAAAnR,EAAA4kB,QACA,IAAAlpB,EAAA8G,EAAA,EAAuB9G,EAAA4D,EAAAq/B,UAAiBjjC,EAAA,CACxC,IAAA4pC,EAAA,EACAC,EAAA,EACAzuC,EAAAwI,EAAAw/B,WAAApjC,GACA,IAAArV,EAAA,EAAqBA,EAAAyQ,IAAOzQ,IAAAmc,EAAA,CAC5B,IAAAgjC,EAAA5C,EAAA6B,GAAAjiC,GACA8iC,GAAAE,EACAD,EAAAC,IAAAD,EAAAC,GAEAhB,EAAA9oC,GAAA4pC,EACAv9C,EAAA2T,GAAA6pC,EACAxQ,EAAAr5B,GAAA4pC,EAAAxuC,EAEA,KAAc4E,EAAAsE,EAAA4kB,SAAoBlpB,EAClC3T,EAAA2T,GAAA,EACAq5B,EAAAr5B,GAAA,EAGA,IAhEA,SAAA4D,EAAAvX,EAAAgtC,EAAAqR,GACA,IAAAC,EAAAlgC,EAAA7f,OAAA,EACAoV,EAAA,EACApR,EAAAyqC,EAAAr5B,GAAAq5B,EAAAr5B,EAAA,GAWA,IAVApR,EAAA,IACAi7C,EAAAx9C,EAAA2T,IACA3T,EAAA2T,EAAA,KAAA6pC,EAAAx9C,EAAA2T,EAAA,KAEAmI,EAAA,GADAvZ,EAAA,MAAAi7C,EAAAj7C,OAAAgV,EAAAw/B,WAAApjC,GAAA4D,EAAAw/B,WAAApjC,EAAA,SAEA2qC,IAAAxiC,EAAAwiC,GACAD,EAAA1qC,GAAAmI,GAEAuiC,EAAA1qC,GAAA,EAEAA,EAAA,EAAmBA,EAAA4D,EAAAq/B,QAAA,EAAqBjjC,IAAA,CAGxC,IAAA6pC,EAIA1hC,GANAvZ,EAAAyqC,EAAAr5B,EAAA,GAAAq5B,EAAAr5B,GAAAq5B,EAAAr5B,EAAA,IACA,IACA6pC,EAAAx9C,EAAA2T,EAAA,IACA3T,EAAA2T,KAAA6pC,EAAAx9C,EAAA2T,IACA6pC,EAAAx9C,EAAA2T,EAAA,KAAA6pC,EAAAx9C,EAAA2T,EAAA,KAEAmI,EAAA,GADAvZ,EAAA,MAAAi7C,EAAAj7C,OAAAgV,EAAAw/B,WAAApjC,EAAA,GAAA4D,EAAAw/B,WAAApjC,GAAA4D,EAAAw/B,WAAApjC,EAAA,SAEA2qC,IAAAxiC,EAAAwiC,GACAD,EAAA1qC,GAAAmI,GAEAuiC,EAAA1qC,GAAA,GAGApR,EAAAyqC,EAAAr5B,EAAA,GAAAq5B,EAAAr5B,IACA,IACA6pC,EAAAx9C,EAAA2T,EAAA,IACA3T,EAAA2T,KAAA6pC,EAAAx9C,EAAA2T,KAEAmI,EAAA,GADAvZ,EAAA,MAAAi7C,EAAAj7C,OAAAgV,EAAAw/B,WAAApjC,EAAA,GAAA4D,EAAAw/B,WAAApjC,GAAA,MAEA2qC,IAAAxiC,EAAAwiC,GACAD,EAAA1qC,GAAAmI,GAEAuiC,EAAA1qC,GAAA,EA0BAmuC,CAAAvqC,EAAAvX,EAAAgtC,EAAAwS,GACA/kC,EAAA9G,EAAA,EAAuBA,EAAA4D,EAAAq/B,QAAiBjjC,IAAA,CACxC,IAEAouC,EAAAC,EACAl3C,EAAA4yC,EAAAuE,EAHA7F,EAAA7kC,EAAAu/B,QAAAnjC,GAAA,GACAuuC,EAAA3qC,EAAAu/B,QAAAnjC,GAAA,GAQA,IALAouC,EAAAvC,EAAApD,GACA4F,EAAA,EACAtE,EAAAnmC,EAAA2+B,MAAAz7B,GAAAgiC,EAAAL,GAAAh+B,EAAAohC,EAAApD,MACA3hC,IACA2hC,EACAA,GAAA8F,GACAH,GAAAvC,EAAApD,GACA4F,GAAA,EAEAtE,EAAAnB,EAAAmB,EADA5yC,EAAAyM,EAAA2+B,MAAAz7B,GAAAgiC,EAAAL,GAAAh+B,EAAAohC,EAAApD,IACAA,EAAAzoC,KACA8G,IACA2hC,EAIAsB,GADAuE,EAAA,GAAA7jC,EADA2jC,GAAA,IAAAA,IAAA,EAAAC,IAGArc,EAAAhyB,GAAA+pC,EACAnmC,EAAA0+B,MAAAqD,GAAA3lC,GAAA4D,EAAAy+B,MAAAsD,GAAA3lC,GACA4D,EAAAy+B,MAAAsD,GAAA3lC,GAAA+pC,EAQA5yC,EAAA9K,EAAA2T,GACA7I,GAAAyM,EAAAs+B,SAAAliC,GACA7I,GAAAm3C,EACAtc,EAAAhyB,GAAA7I,IACA66B,EAAAhyB,GAAA7I,GAGAyM,EAAAooB,cAAA,IACAgG,EAAAhyB,IAAA4D,EAAAooB,eAEAgG,EAAAhyB,GAAA8oC,EAAA9oC,KACAgyB,EAAAhyB,GAAA8oC,EAAA9oC,IAEA4D,EAAAooB,cAAA,IACAgG,EAAAhyB,IAAA4D,EAAAooB,eAGA,KAAchsB,EAAAsE,EAAA4kB,SAAoBlpB,EAClC8oC,EAAA9oC,GAAA,EACAgyB,EAAAhyB,GAAA,EAGA,SAAAwuC,GAAA5qC,EAAAqjC,EAAAuE,EAAAxZ,EAAA2T,GACA,IAGA3lC,EAHA3T,EAAA4Q,EAAAqH,EAAA4kB,QACAmQ,EAAAp8B,EAAAqH,EAAA4kB,QACA0iB,EAAA7uC,EAAAuH,EAAA4kB,OAAA,GAIAshB,EAAA5mC,EAAAqjC,EAAAuE,EAAAn/C,EAAAgtC,GACAoR,EAAA7mC,EAAAvX,EAAAgtC,EAAAuS,GAIA,IAAAzjC,EAAA,EACA,IAAAnI,EAAA,EAAmBA,EAAA4D,EAAAo/B,QAAiBhjC,IAAA,CACpC,IAAA7I,EAAA4yC,EAAAuE,EACA7F,EAAA7kC,EAAAs/B,MAAAljC,GAAA,GACAuuC,EAAA3qC,EAAAs/B,MAAAljC,GAAA,GACAouC,EAAA,EACAC,EAAA,EAMA,IALAD,EAAAxC,EAAAnD,GACA4F,GAAA,EACAtE,EAAAnmC,EAAA4+B,MAAAr6B,GAAAqjC,EAAA/C,GAAAh+B,EAAAmhC,EAAAnD,MACAtgC,IACAsgC,EACAA,GAAA8F,GACAH,GAAAxC,EAAAnD,GACA4F,GAAA,EAGAtE,EADAnB,EAAAmB,EADA5yC,EAAAyM,EAAA4+B,MAAAr6B,GAAAqjC,EAAA/C,GAAAh+B,EAAAmhC,EAAAnD,IACAA,EAAAzoC,KAEAmI,IACAsgC,EAgBA,GAZAsB,GADAuE,EAAA,GAAA7jC,EADA2jC,GAAA,IAAAA,IAAA,EAAAC,IAcAzqC,EAAAkgC,cAAA,EAAA6B,IAAArhC,EAAAuB,WAAA,CACA,IAAA4oC,EAAArI,EAAAxiC,EAAAu+B,KAAAwD,GAAA3lC,GAEAgyB,EAAAhyB,GADAyuC,EAAA,EACAriD,KAAAE,IAAAy9C,EAAA0E,GAaAriD,KAAAE,IAAAy9C,EAAAyB,EAAAxrC,GAAA0mC,OAEW,CACX,IAAAgI,EAAArI,EAAAziC,EAAAw+B,KAAAuD,GAAA3lC,GACA2uC,EAAAvI,EAAAxiC,EAAAu+B,KAAAwD,GAAA3lC,GAEA0uC,GAAA,IACAA,EAAA3E,GAEA4E,GAAA,IACAA,EAAA5E,GAGA0E,EADA7qC,EAAAkgC,cAAA,EAAA6B,IAAArhC,EAAAwB,UACA1Z,KAAAE,IAAAqiD,EAAAD,GAEAC,EAEA3c,EAAAhyB,GAAA5T,KAAAE,IAAAy9C,EAAA0E,GAEA7qC,EAAAw+B,KAAAuD,GAAA3lC,GAAA4D,EAAAu+B,KAAAwD,GAAA3lC,GACA4D,EAAAu+B,KAAAwD,GAAA3lC,GAAA+pC,EAQA5yC,EAAA9K,EAAA2T,GACA7I,GAAAyM,EAAAq+B,SAAAjiC,GACA7I,GAAAm3C,EACAtc,EAAAhyB,GAAA7I,IACA66B,EAAAhyB,GAAA7I,GAGAyM,EAAAooB,cAAA,IACAgG,EAAAhyB,IAAA4D,EAAAooB,eAEAgG,EAAAhyB,GAAAwrC,EAAAxrC,KACAgyB,EAAAhyB,GAAAwrC,EAAAxrC,IAEA4D,EAAAooB,cAAA,IACAgG,EAAAhyB,IAAA4D,EAAAooB,eAGA,KAAchsB,EAAAsE,EAAA4kB,SAAoBlpB,EAClCwrC,EAAAxrC,GAAA,EACAgyB,EAAAhyB,GAAA,EAqCA,SAAA4uC,GAAA9F,EAAA9W,EAAA6c,EAAAC,EAAA5B,EAAA76B,EAAAjX,GAIA,IAHA,IAEA4xC,EAAAD,EAFAI,EAAA,EAAA96B,EACA+6B,EAAA/6B,EAAA,EAAAjmB,KAAAq0B,IAAA,GAAAysB,GAAA,EAEAltC,EAAA,EAAuBA,EAAA5E,IAAO4E,EAAA,CAC9B,IAAA+uC,EAAAjG,EAAA,GAAA9oC,GACAgvC,EAAAlG,EAAA,GAAA9oC,GACAivC,EAAAjd,EAAA,GAAAhyB,GACAkvC,EAAAld,EAAA,GAAAhyB,GACAstC,EAAAtb,EAAA,GAAAhyB,GACAutC,EAAAvb,EAAA,GAAAhyB,GACA,GAAAivC,GAAA,KAAAC,MAAA,KAAAD,EAAA,CACA,IAAAE,EAAAN,EAAA7uC,GAAAgvC,EACArM,EAAAkM,EAAA7uC,GAAA+uC,EACAhC,EAAA3gD,KAAAC,IAAAihD,EAAAlhD,KAAAE,IAAAihD,EAAA4B,IACAnC,EAAA5gD,KAAAC,IAAAkhD,EAAAnhD,KAAAE,IAAAghD,EAAA3K,SAEAoK,EAAAO,EACAN,EAAAO,EAEA,GAAAl7B,EAAA,GACA,IAAAg7B,EAAA+B,EACAxhB,EAAAkhB,EAAA9uC,GAAAotC,EAKA,GAJAC,EAAAjhD,KAAAE,IAAAF,KAAAC,IAAA4iD,EAAArhB,GAAAxhC,KAAAC,IAAA6iD,EAAAthB,KAGAwhB,GAFA9B,EAAAlhD,KAAAC,IAAA0gD,EAAAnf,KACA2f,EAAAnhD,KAAAC,IAAA2gD,EAAApf,KAEA,GAAAyf,EAAAF,EAAAiC,EAAA,CACA,IAAAzhB,EAAA0f,EAAAF,EAAAiC,EACA9B,GAAA3f,EACA4f,GAAA5f,EAEAof,EAAA3gD,KAAAE,IAAAghD,EAAAP,GACAC,EAAA5gD,KAAAE,IAAAihD,EAAAP,GAEAD,EAAAgC,IACAhC,EAAAgC,GAEA/B,EAAAgC,IACAhC,EAAAgC,GAEAhd,EAAA,GAAAhyB,GAAA+sC,EACA/a,EAAA,GAAAhyB,GAAAgtC,GAwIA,SAAAqC,GAAAC,EAAAC,GACA,IACAC,EAMA,OAJAA,EAHAF,GAEA,EACA,IAHAA,IAKAC,KAEA,GACA,EAEAnjD,KAAAmtC,IAAAiW,EAAA5I,GAEA,SAAA6I,GAAAF,GACA,IAAAG,EACAC,EAoBArvC,EACAyjB,EAnBA5sB,EAAA,EAGA,IAAAA,EAAA,EAAqBk4C,GAAAl4C,EAAAo4C,GAAA,MAAgCp4C,GAAA,GAGrD,IAFAmJ,EAAAnJ,EACA4sB,EAAA,EACA33B,KAAA4nB,IAAA+P,EAAAzjB,GAAA,OAEA+uC,GADAl4C,GAAA4sB,EAAAzjB,GAAA,EACAivC,GAAA,EACAxrB,EAAA5sB,EAEAmJ,EAAAnJ,EASA,IANAu4C,EAAApvC,EAGAnJ,EAAA,EAGAA,EAAA,EAAqBk4C,GAAAl4C,EAAAo4C,GAAA,MAAgCp4C,GAAA,GAGrD,IAFAmJ,EAAA,EACAyjB,EAAA5sB,EACA/K,KAAA4nB,IAAA+P,EAAAzjB,GAAA,OAEA+uC,GADAl4C,GAAA4sB,EAAAzjB,GAAA,EACAivC,GAAA,EACAjvC,EAAAnJ,EAEA4sB,EAAA5sB,EAGAw4C,EAAA5rB,EAGA,IAEAp5B,EAFA4X,EAAA,EAGA,IAAA5X,EAAA,EAAqBA,GAFrB,MAE6BA,EAG7B4X,GADA8sC,GADAl4C,EAAAu4C,EAAA/kD,GAAAglD,EAAAD,GAHA,IAIAH,GAKA,OADA,MAAAhtC,GAAAotC,EAAAD,IAOA,SAAAE,GAAAN,GACA,IAAAO,EAAA14C,EAAAq4C,EAAA5e,EASA,OARAif,EAAAP,EAIAn4C,GAHA04C,MAAA,IAAmC,MACnC,IAAAA,GAAA,IAEA,IADAjf,EAAAif,EAAA,IACAjf,EAAA,EAAAA,GACS,GAET4e,EAAA,eADAK,GAAA,MACA,KAAAzjD,KAAA6pC,KAAA,EAAA4Z,QACA,MACAA,EAAAzjD,KAAAmtC,KAAApiC,EAAAq4C,GAAA5I,GAUAiJ,GAAA,UAKA,SAAAC,GAAAC,GAGA,OAFAA,EAAA,IAAAA,EAAA,GACAA,GAAA,KACA,GAAA3jD,KAAA4jD,KAAA,IAAAD,GAAA,IAAA3jD,KAAA4jD,KAAAD,IAAA,OAEA,SAAAE,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAxD,EAAAyD,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAGAjmD,EAHAkmD,EAAA5zC,EAAAqH,EAAA4kB,OAAA,GACA4nB,EAAAN,GAAAI,EAAA,aACA3lC,EAAAlO,EAAAuH,EAAAqjC,UAEA6I,GAAAC,EACA,IAAA3pC,EAAA,EACAiqC,EAAA,EACA,IAAApmD,EAAA,EAAmBA,EAAA2Z,EAAA4kB,OAAoBv+B,IAAA,CACvC,IACAqmD,EAGA,IAFAC,EAAAnB,GAAAU,EAAA1pC,GACA+pC,EAAAlmD,GAAA6lD,EAAA1pC,EACAkqC,EAAAlqC,EAAsBgpC,GAAAU,EAAAQ,GAAAC,EAAAzK,GAAAwK,GAAAP,EAAA,EAA8DO,KAGpF,IAFAd,EAAAvlD,GAAAqmD,EAAAlqC,EACAiqC,EAAApmD,EAAA,EACAmc,EAAAkqC,GACA/lC,EAAAnE,KAAAnc,EAEA,GAAAmc,EAAA2pC,EAAA,GACA3pC,EAAA2pC,EAAA,IACA9lD,EACA,OAGAkmD,EAAAlmD,GAAA6lD,EAAA1pC,EACA,QAAAZ,EAAA,EAAyBA,EAAA0qC,EAAa1qC,IAAA,CACtC,IAAAgrC,EAAAC,EAAAn+C,EAAA8O,EACAsvC,EACAp+C,EAAA09C,EAAAxqC,GACApE,EAAA4uC,EAAAxqC,EAAA,IACAgrC,EAAA,EAAA9kD,KAAA0xB,MAAA,GAAA6yB,GAAA39C,EAAA,MACA,IAAAk+C,EAAA,IACAC,EAAA,EAAA/kD,KAAA0xB,MAAA,GAAA6yB,GAAA7uC,EAAA,MACA2uC,EAAA,IAAAU,EAAAV,EAAA,GACAL,EAAAlqC,IAAA+E,EAAAimC,GAAAjmC,EAAAkmC,IAAA,EACAhB,EAAAjqC,GAAA+E,EAAAkmC,GACA,IAAAE,EAAAP,EAAAhvC,EAIAyuC,EAAArqC,IAAAmrC,EAAAR,EAAAV,EAAAjqC,MAAA2qC,EAAAV,EAAAjqC,GAAA,GAAA2qC,EAAAV,EAAAjqC,KACAqqC,EAAArqC,GAAA,EACAqqC,EAAArqC,GAAA,EAEAqqC,EAAArqC,GAAA,IACAqqC,EAAArqC,GAAA,GAGAkrC,EAAAtB,GAAAU,EAAAE,EAAAxqC,GAAAyqC,GACAS,EAAAhlD,KAAAE,IAAA8kD,EAAA,WACAtE,EAAA5mC,GAAA9Z,KAAAq0B,IAAA,WAAAr0B,KAAA25C,IAAA35C,KAAA45C,GAAAoL,IAAA,KAEAtqC,EAAA,EACA,QAAAqB,EAAA,EAAuBA,EAAA4oC,EAAQ5oC,IAAA,CAC/B,IACA8oC,EAAAK,EADAlrC,EAAA8pC,EAAA/nC,GAEA8oC,EAAAnB,GAAAU,EAAA1pC,GACAwqC,EAAAxB,GAAAU,GAAA1pC,EAAAV,EAAA,IACAiqC,EAAAloC,GAAA,IAAA8oC,EAAAK,GACAL,EAAAnB,GAAAU,GAAA1pC,EAAA,KACAwqC,EAAAxB,GAAAU,GAAA1pC,EAAAV,EAAA,KACAkqC,EAAAnoC,GAAAmpC,EAAAL,EACAnqC,GAAAV,EAEA,OAAA2qC,EAEA,SAAAQ,GAAArO,EAAAsO,EAAAnB,EAAAC,EAAAmB,EAAAC,GACA,IAKA5qC,EALA6qC,EAAAv0C,EAAA,CAAAkH,EAAA4kB,OAAA5kB,EAAA4kB,SAMA0oB,EAAA,EASA,GAAAF,EACA,QAAA/mD,EAAA,EAAyBA,EAAA6mD,EAAW7mD,IACpC,IAAAmc,EAAA,EAAuBA,EAAA0qC,EAAW1qC,IAAA,CAClC,IAAAiS,EAAA62B,GAAAS,EAAA1lD,GAAA0lD,EAAAvpC,IAAAwpC,EAAAxpC,GACA6qC,EAAAhnD,GAAAmc,GAAAiS,EAAA04B,EAAA9mD,QAIA,IAAAmc,EAAA,EAAqBA,EAAA0qC,EAAW1qC,IAChC,KAAAyoC,EAAA,GAAAnjD,KAAAE,IAAA,GAAA+jD,EAAAvpC,GAAA,IACA+qC,EAAApC,GAAAF,GACA,IAAA5kD,EAAA,EAA2BA,EAAA6mD,EAAW7mD,IACtCouB,EAAA84B,EAAAxC,GAAAgB,EAAA1lD,GAAA0lD,EAAAvpC,GAAAyoC,GAAAe,EAAAxpC,GACA6qC,EAAAhnD,GAAAmc,GAAAiS,EAAA04B,EAAA9mD,GAIA,IAAAA,EAAA,EAAuBA,EAAA6mD,EAAW7mD,IAAA,CAClC,IAAAmc,EAAA,EAAqBA,EAAA0qC,KACrBG,EAAAhnD,GAAAmc,GAAA,GADgCA,KAIhC,IADAo8B,EAAAv4C,GAAA,GAAAmc,EACAA,EAAA0qC,EAAA,EAA6B1qC,EAAA,KAC7B6qC,EAAAhnD,GAAAmc,GAAA,GADoCA,KAGpCo8B,EAAAv4C,GAAA,GAAAmc,EACA8qC,GAAA1O,EAAAv4C,GAAA,GAAAu4C,EAAAv4C,GAAA,KAEA,IAAA6a,EAAAvI,EAAA20C,GACAzpC,EAAA,EACA,IAAAxd,EAAA,EAAuBA,EAAA6mD,EAAW7mD,IAClC,IAAAmc,EAAAo8B,EAAAv4C,GAAA,GAA+Bmc,GAAAo8B,EAAAv4C,GAAA,GAAkBmc,IACjDtB,EAAA2C,KAAAwpC,EAAAhnD,GAAAmc,GAGA,OAAAtB,EAEA,SAAAssC,GAAAnkB,GACA,IAAAyjB,EAAAtB,GAAAniB,GAEA,OADAyjB,EAAAhlD,KAAAE,IAAA8kD,EAAA,WACAhlD,KAAAq0B,IAAA,WAAAr0B,KAAA25C,IAAA35C,KAAA45C,GAAAoL,IAAA,KAkOA,SAAAW,GAAApkB,EAAA17B,GA6BA,OAJA07B,GAAA,KAAAA,EAAA,MACAA,GAAA,IACAA,EAAAvhC,KAAAC,IAAA,GAAAshC,GACA,KAAAvhC,KAAAq0B,IAAAkN,GAAA,QAAAvhC,KAAAmtC,KAAA,GAAAntC,KAAAq0B,IAAAkN,EAAA,UAAAvhC,KAAAmtC,KAAA,IAAAntC,KAAAq0B,IAAAkN,EAAA,qBAAA17B,GAAA7F,KAAAq0B,IAAAkN,EAAA,GAhmBAz+B,KAAA8vC,kBAAA,SAAA1rB,EAAAtoB,EAAA4uB,EAAA2tB,EAAAwD,EAAAC,EAAAC,EAAAC,EAAApL,EAAAqL,GACA,IAAAvnC,EAAA0P,EAAAa,eAGA8yB,EAAAhqC,EAAAqH,EAAAqjC,UACAT,EAAA9pC,EAAA,GAAAkH,EAAAgoC,aACAhB,EAAAluC,EAAA,GAAAkH,EAAA+kB,UACAkiB,EAAAnuC,EAAA,KAAAkH,EAAA+/B,YACAyE,EAAA1rC,EAAA,GAAAkH,EAAA4kB,SACA8I,EAAA50B,EAAA,GAAAkH,EAAA4kB,SACA8oB,EAAA50C,EAAA,OAEAivC,EAAA,0CACAX,EAAA3uC,EAAA,GACAk1C,EAAA3+B,EAAAgH,MAAApb,EAAA2hB,aAAA,EAAAjd,EAAAmiB,cA9dA,SAAAzS,EAAAtoB,EAAA4uB,EAAA2tB,EAAAwD,EAAAC,EAAAlL,EAAAkS,EAAA3F,EAAAX,GAKA,IAJA,IAAAC,EAAAvuC,EAAA,SACAwG,EAAA0P,EAAAa,eACA+9B,EAAAtuC,EAAAmiB,aACAksB,EAAA3+B,EAAAgH,MAAApb,EAAA2hB,aAAA,EAAAqxB,EACAvM,EAAA,EAAyBA,EAAAuM,EAAiBvM,IAAA,CAC1CmG,OAAA9gD,EAAA26C,GAEA,IADA,IAAAoG,EAAAnyB,EAAA,QAAA+sB,EAAA,IACAh8C,EAAA,EAAyBA,EAAA,IAASA,IAAA,CAClC,IAAAoX,EAAAO,EACAP,EAAA+pC,OAAAC,EAAAphD,EAAA,IACA2X,EAAA,EACA,QAAAwE,EAAA,EAA2BA,GAAA6/B,EAAA,OAA4B7/B,GAAA,EACvD/E,GAAA+rC,EAAAhnC,IAAAglC,OAAAC,EAAAphD,EAAAmc,GAAAglC,OAAAC,EAAAphD,EAAAg8C,EAAA7/B,IACAxE,GAAAwrC,EAAAhnC,EAAA,IAAAglC,OAAAC,EAAAphD,EAAAmc,EAAA,GAAAglC,OAAAC,EAAAphD,EAAAg8C,EAAA7/B,EAAA,IAEA6kC,EAAAhG,GAAAh7C,GAAAoX,EAAAO,EAEAyoC,EAAAxD,GAAA5B,GAAAzV,GAAAr1B,OAAA+I,EAAAssB,GAAAyV,IACAoF,EAAAxD,GAAA5B,GAAAxV,IAAAt1B,OAAA+I,EAAAusB,IAAAwV,IACAsM,EAAA,IAC4EjH,EAAAzD,GAAA5B,GAAAzV,GAAAr1B,OAAA+I,EAAAssB,GAAAyV,EAAA,IAC5EqF,EAAAzD,GAAA5B,GAAAxV,IAAAt1B,OAAA+I,EAAAusB,IAAAwV,EAAA,KAGA,IAAAA,EAAA,EAAyBA,EAAAsM,EAAiBtM,IAAA,CAC1C,IAAAwG,EAAAlvC,EAAA,IACAgvC,EAAAhvC,EAAA,IACAivC,EAAA,UACAK,EAAAZ,EAAA,EAAAhG,GACA6G,EAAA,EACAR,EAAA,GAAArG,EAAA/hC,EAAAwQ,MAAAE,aAAA1Q,EAAAwQ,MAAAC,WACA+3B,EAAA,EACA,MAAAzG,EACA,IAAAh7C,EAAA,EAAAmc,EAAA,IAAoCA,EAAA,IAAOnc,IAAAmc,EAAA,CAC3C,IAAAxG,EAAAqrC,EAAA,GAAAhhD,GACAuqB,EAAAy2B,EAAA,GAAAhhD,GACAghD,EAAA,GAAAhhD,GAAA2V,EAAA4U,EACAy2B,EAAA,GAAAhhD,GAAA2V,EAAA4U,EAKA,IAAAvqB,EAAA,EAAyBA,EAAA,EAAOA,IAChCshD,EAAAthD,GAAAiZ,EAAAwQ,MAAAusB,iBAAAgF,GAAAh7C,EAAA,GACAwhD,EAAAxhD,GAAAshD,EAAAthD,GAAAiZ,EAAAwQ,MAAAusB,iBAAAgF,GAAAh7C,EAAA,GACAuhD,EAAA,IAAAD,EAAAthD,GAEA,IAAAA,EAAA,EAAyBA,EAAA,EAAOA,IAAA,CAGhC,IAFA,IAAA8hD,EAAAD,EAAA,GACAhnC,EAAA,EACkBgnC,EAAAC,EAAaD,IAC/BhnC,EAAApZ,KAAA4nB,IAAAu4B,EAAAC,MAAAhnC,EAAApZ,KAAA4nB,IAAAu4B,EAAAC,KAEA5oC,EAAAwQ,MAAAusB,iBAAAgF,GAAAh7C,GAAAshD,EAAAthD,EAAA,GAAA6a,EACA0mC,EAAA,EAAAvhD,EAAA,IAAA6a,EACAA,EAAAymC,EAAAthD,EAAA,KACA6a,GAAAymC,EAAAthD,EAAA,KAEA6a,EADaymC,EAAAthD,EAAA,QAAA6a,EACbymC,EAAAthD,EAAA,SAAA6a,GAEA,EAEA2mC,EAAAxhD,EAAA,GAAA6a,EAEA,IAAA7a,EAAA,EAAyBA,EAAA,IAAOA,EAAA,CAChC,IAAAs+C,EAAAgD,EAAA,EAAAthD,EAAA,GAAAshD,EAAA,EAAAthD,EAAA,GAAAshD,EAAA,EAAAthD,EAAA,GACAwnD,EAAA,EACA,EAAAlG,EAAA,EAAAthD,EAAA,GAAAs+C,IACAkJ,GAAA,GACA,EAAAlG,EAAA,EAAAthD,EAAA,GAAAs+C,IACAkJ,GAAA,KAGAH,EAAArM,GAAAh7C,GAAAwnD,EAEA,GAAA7+B,EAAAkW,SAAA,CACA,IAAAryB,EAAAg1C,EAAA,GACA,IAAAxhD,EAAA,EAA2BA,EAAA,GAAQA,IACnCwM,EAAAg1C,EAAAxhD,KACAwM,EAAAg1C,EAAAxhD,IAGAiZ,EAAAoU,MAAA6nB,IAAA0H,GAAA5B,GAAA/hC,EAAAoU,MAAA00B,SAAA/G,GACA/hC,EAAAoU,MAAA00B,SAAA/G,GAAAxuC,EAEA,IAAAxM,EAAA,EAAyBA,EAAA,GAAQA,IACjC,GAAA0hD,EAAA1G,GAAAh7C,EAAA,IAAAwhD,EAAAxhD,GAAAqhD,IACAK,EAAA1G,GAAAh7C,EAAA,GAAAA,EAAA,KAYA,IAAAA,EAAA,EAAyBA,EAAA,EAAOA,IAAA,CAChC,IAAA0kC,EAAA6c,EAAAvhD,EAAA,GACAouB,EAAAmzB,EAAAvhD,GACAyB,KAAAC,IAAAgjC,EAAAtW,GACA,KACAsW,EAAA,IAAAtW,KAAA,IAAAsW,IACA,GAAA1kC,GAAA0hD,EAAA1G,GAAA,IAAA0G,EAAA1G,GAAAh7C,KACA0hD,EAAA1G,GAAA,MAEA0G,EAAA1G,GAAAh7C,GAAA,GAIA0hD,EAAA1G,GAAA,IAAA/hC,EAAAwQ,MAAAwsB,YAAA+E,KACA0G,EAAA1G,GAAA,MAEA,GAAA/hC,EAAAwQ,MAAAwsB,YAAA+E,IAAA0G,EAAA1G,GAAA,GAAA0G,EAAA1G,GAAA,GAAA0G,EAAA1G,GAAA,GAAA0G,EAAA1G,GAAA,QACAyG,EAAA,EACA,GAAAC,EAAA1G,GAAA,OAAA0G,EAAA1G,GAAA,KACA0G,EAAA1G,GAAA,MAEA,GAAA0G,EAAA1G,GAAA,OAAA0G,EAAA1G,GAAA,KACA0G,EAAA1G,GAAA,MAEA,GAAA0G,EAAA1G,GAAA,OAAA0G,EAAA1G,GAAA,KACA0G,EAAA1G,GAAA,OAGAA,EAAA,EACA+F,EAAA/F,GAAAyG,EAEA,GAAAA,IACAV,EAAA,GAAAA,EAAA,MAMA5L,EAAA6F,GAAA/hC,EAAAy6B,SAAAsH,IAqVAyM,CAAA9+B,EAAAtoB,EAAA4uB,EAAA2tB,EAAAwD,EAAAC,EAAAlL,EAAAkS,EAAA3F,EAAAX,GA9FA,SAAAp4B,EAAAo4B,GACA,IAAA9nC,EAAA0P,EAAAa,eACAb,EAAA2N,cAAA3iB,EAAAO,qBAAA,GAAA6sC,EAAA,OAAAA,EAAA,KAAAA,EAAA,GAAAA,EAAA,MACA,QAAA/F,EAAA,EAAyBA,EAAA/hC,EAAAmiB,aAAwB4f,IACjDryB,EAAA2N,cAAA3iB,EAAAQ,wBACA4sC,EAAA/F,GAAA,GAEAryB,EAAA2N,cAAA3iB,EAAAS,qBACA2sC,EAAA/F,GAAA,GAuFA0M,CAAA/+B,EAAAo4B,GAEA,QAAA/F,EAAA,EAA2BA,EAAAsM,EAAiBtM,IAG5CiF,EAAAt3B,EAAAtoB,EAAA4uB,EAAA+rB,EAAA4B,EAAAN,EADAqE,EADAgH,EAAA,EAAA3M,GAGAmF,EAAAx3B,EAAAi0B,EAAA5B,EAAAsB,GACA,GAAAyE,EAAA4G,GACA9D,GAAA5qC,EAAAqjC,EAAA6B,EAAAnD,GAAA3T,EAAA2T,MAEAqI,GAAApqC,EAAA+hC,GAQA,IALA+F,EAAA,GAAAA,EAAA,OACAp4B,EAAAgH,MAAApb,EAAA2hB,cACA+tB,GAAA9F,EAAA9W,EAAApuB,EAAA2/B,SAAA3/B,EAAA0kB,IAAAW,KAAA3V,EAAAmB,SAAA7Q,EAAA0kB,IAAAG,OAAAnV,EAAAjB,MAAAzO,EAAAo/B,SAGA2C,EAAA,EAA2BA,EAAAsM,EAAiBtM,IAE5C,GAAA+F,EADA4G,EAAA,EAAA3M,IAEA6D,EAAA5lC,EAAAklC,EAAAnD,GAAA3T,EAAA2T,MAKA,QAAAoD,EAAA,EAA8BA,EAAA,EAAYA,IAAA,CAC1C,IAAApD,EAAA,EAA6BA,EAAAsM,IAAiBtM,EAE9C,GAAA+F,EADA4G,EAAA,EAAA3M,GAEAoI,EAAAnqC,EAAA+hC,EAAAoD,IAGA8B,EAAAv3B,EAAAtoB,EAAA4uB,EAAA+rB,EAAAoD,EAAA7B,EADAqE,EACA+G,GACArE,GAAA36B,EAAA4zB,EAAA4B,EAAAnD,GAAA3T,EAAA2T,KAAAoD,IAQA,IALA2C,EAAA,GAAAA,EAAA,OACAp4B,EAAAgH,MAAApb,EAAA2hB,cACA+tB,GAAA9F,EAAA9W,EAAApuB,EAAA4/B,SAAA5/B,EAAA0kB,IAAAa,KAAA7V,EAAAmB,SAAA7Q,EAAA0kB,IAAAG,OAAAnV,EAAAjB,MAAAzO,EAAAq/B,SAGA0C,EAAA,EAA6BA,EAAAsM,IAAiBtM,EAE9C,GAAA+F,EADA4G,EAAA,EAAA3M,IAEAkD,EAAAjlC,EAAAklC,EAAAnD,GAAA3T,EAAA2T,KAAAoD,GAIA,IAAApD,EAAA,EAA2BA,EAAAsM,EAAiBtM,IAAA,CAC5C,IAAA2M,EACA,MAAA5G,EADA4G,EAAA,EAAA3M,GAIA,QAAAqD,EAAA,EAA4BA,EAAA1kC,EAAAskB,QAAsBogB,IAAA,CAClD,IAAAuJ,EAAAt1C,EAAA,GACA,IAAA8rC,EAAA,EAAkCA,EAAA,EAAYA,IAAA,CAC9C,IAAAG,EAAAtlC,EAAAusB,IAAAwV,GAAAx5C,EAAA68C,GAAAD,GAEA,GADAG,GAn7CA,GAo7CAmD,EAAA1G,GAAAoD,IAAA,MAAAsD,EAAA1G,GAAAoD,EAAA,IACA,IAAA4D,EAAA,GAAA5D,IAAA,IACAvjC,EAAAwkC,EAAApmC,EAAAusB,IAAAwV,GAAAx5C,EAAA68C,GAAA2D,GAAAzD,EAAAsJ,KACAtJ,EAAA98C,KAAAE,IAAA48C,EAAA1jC,QACiB,GAAA6mC,EAAA1G,GAAAoD,IACjB4D,EAAA,GAAA5D,IAAA,IACAvjC,EAAAwkC,EAAApmC,EAAAusB,IAAAwV,GAAAx5C,EAAA68C,GAAA2D,GAAAzD,EAtEA,GAsEAxC,GACAwC,EAAA98C,KAAAE,IAAA48C,EAAA1jC,KACiB,GAAAujC,GAAA,GAAAsD,EAAA1G,GAAAoD,EAAA,OAAAA,GAAA,GAAAnlC,EAAAwQ,MAAAwsB,YAAA+E,MACjBgH,EAAA,GAAA5D,IAAA,IACAvjC,EAAAwkC,EAAApmC,EAAAusB,IAAAwV,GAAAx5C,EAAA68C,GAAA2D,GAAAzD,EA1EA,GA0EAxC,GACAwC,EAAA98C,KAAAE,IAAA48C,EAAA1jC,IAEA0jC,GAAA8I,EAAArM,GAAAoD,GACAwJ,EAAAxJ,GAAAG,EAEA,IAAAH,EAAA,EAAkCA,EAAA,EAAYA,IAC9CnlC,EAAAusB,IAAAwV,GAAAx5C,EAAA68C,GAAAD,GAAAwJ,EAAAxJ,IAKA,IAAApD,EAAA,EAAyBA,EAAAsM,EAAiBtM,IAC1C/hC,EAAAwQ,MAAAwsB,YAAA+E,GAAA0G,EAAA1G,GAAA,GAOA,IA5KA,SAAAryB,EAAAo4B,EAAAP,GAKA,IAJA,IAAAvnC,EAAA0P,EAAAa,eAIAwxB,EAAA,EAAyBA,EAAA/hC,EAAAmiB,aAAwB4f,IAAA,CACjD,IAAA5G,EAAAz6B,EAAAwB,UACA,GAAA4lC,EAAA/F,GACA/hC,EAAAkgC,cAAA6B,IAAArhC,EAAAuB,aAAAk5B,EAAAz6B,EAAAmpC,YAEA1O,EAAAz6B,EAAAuB,WACAjC,EAAAkgC,cAAA6B,IAAArhC,EAAAwB,YACAlC,EAAAkgC,cAAA6B,GAAArhC,EAAAopC,YAEA9pC,EAAAkgC,cAAA6B,IAAArhC,EAAAmpC,YAAA7pC,EAAAkgC,cAAA6B,GAAArhC,EAAAuB,aAEAslC,EAAAxF,GAAA/hC,EAAAkgC,cAAA6B,GACA/hC,EAAAkgC,cAAA6B,GAAA5G,GAwJA0T,CAAAn/B,EAAAo4B,EAAAP,GAGAxF,EAAA,EAAyBA,EAAAsM,EAAiBtM,IAAA,CAC1C,IAAAiI,EACAC,EACA55C,EACAk2C,EACAxE,EAAA,GACAiI,EAAA1C,EACA2C,GAAA,EACA55C,EAAAqQ,EAAAwB,UACAqlC,EAAA,IAAA7mC,EAAAuB,YAAAslC,EAAA,IAAA7mC,EAAAuB,aAAA5R,EAAAqQ,EAAAuB,YACAskC,EAAAa,EAAAzD,GAAA5B,EAAA,KAEAiI,EAAA3C,EACA4C,EAAA,EACA55C,EAAAk3C,EAAAxF,GACAwE,EAAAY,EAAAxD,GAAA5B,IAEA1xC,GAAAqQ,EAAAuB,WACA+nC,EAAAC,EAAAlI,GAAAuE,EAAAC,EAAAvmC,EAAAooB,eAEA4hB,EAAAC,EAAAlI,GAAA2E,EAAAH,EAAAvmC,EAAAooB,eAEA1Y,EAAAkW,WACA5lB,EAAAoU,MAAA8S,GAAAyc,GAAA5B,GAAAiI,EAAAC,EAAAlI,IAGA,UAqOAz2C,KAAAwjD,cAAA,SAAAp/B,GACA,IACA3oB,EAsJA0nB,EAvJAzO,EAAA0P,EAAAa,eAEAw+B,GAAA,EACAC,EAAA,GAEAC,EAAA,EACAC,EAAA,EACAC,GAAA,KACAC,GAAA,IACA3C,EAAApzC,EAAAqH,EAAA4kB,QACAonB,EAAArzC,EAAAqH,EAAA4kB,QACAuoB,EAAAx0C,EAAAqH,EAAA4kB,QACAsnB,EAAAl9B,EAAAoE,eACA,OAAApE,EAAAsW,eACA,QACA,OACA+oB,GAAA,EACA,MACA,OACAA,EAAAr/B,EAAAG,KAAAxU,EAAA6W,UAAAxC,EAAAG,KAAAxU,EAAAuoB,OACA,MACA,OACAmrB,GAAA,EACA,MACA,OACAC,EAAA,EACAC,GAAA,KACAC,GAAA,MACAC,GAAA,KACAC,GAAA,KAKA,IAFApvC,EAAAigC,kBAAA,IACAjgC,EAAAkgC,cAAA,GAAAlgC,EAAAkgC,cAAA,GAAAx/B,EAAAwB,UACAnb,EAAA,EAAmBA,EAAA,IAAOA,EAAA,CAC1B,QAAAmc,EAAA,EAAyBA,EAAAxC,EAAA4kB,SAAoBpiB,EAC7ClD,EAAAu+B,KAAAx3C,GAAAmc,GAAA,KACAlD,EAAAw+B,KAAAz3C,GAAAmc,GAAA,KACAlD,EAAAy+B,MAAA13C,GAAAmc,GAAAlD,EAAA0+B,MAAA33C,GAAAmc,GAAA,EAEA,QAAAkiC,EAAA,EAA0BA,EAAA1kC,EAAAC,QAAsBykC,IAChDplC,EAAAssB,GAAAvlC,GAAA2V,EAAA0oC,GAAA,KACAplC,EAAAusB,IAAAxlC,GAAA2V,EAAA0oC,GAAA,KAEA,IAAAliC,EAAA,EAAyBA,EAAA,IAAOA,EAAA,CAChC,IAAAkiC,EAAA,EAA4BA,EAAA1kC,EAAAskB,QAAsBogB,IAClDplC,EAAAssB,GAAAvlC,GAAAwB,EAAA68C,GAAAliC,GAAA,KACAlD,EAAAusB,IAAAxlC,GAAAwB,EAAA68C,GAAAliC,GAAA,KAEAlD,EAAAwQ,MAAAwsB,YAAAj2C,GAAA,EAEA,IAAAmc,EAAA,EAAyBA,EAAA,EAAOA,IAChClD,EAAAwQ,MAAAusB,iBAAAh2C,GAAAmc,GAAA,GAOA,IAJAlD,EAAA6+B,iBAAA,GAAA7+B,EAAA6+B,iBAAA,KAGA7+B,EAAAo/B,QAAAiN,GAAArsC,EAAAy/B,WAAAz/B,EAAAi/B,KAAAj/B,EAAAg/B,KAAAyN,EAAAC,EAAA1sC,EAAA8+B,MAAA9+B,EAAAioB,IAAA6d,YAAA8G,EAAAlsC,EAAA+kB,QAAAzlB,EAAAa,cAAAnE,EAAAgE,EAAA+kB,QAAA,KAAA/kB,EAAAC,SACA5Z,EAAA,EAAmBA,EAAAiZ,EAAAo/B,QAAiBr4C,IAAA,CACpC,IAAAsoD,EAAAJ,EACAxC,EAAA1lD,IAAAioD,IACAK,EAAAH,GAAAzC,EAAA1lD,GAAAioD,IA1DA,GA0DAA,GAAAC,GA1DA,GA0DAxC,EAAA1lD,KA1DA,GA0DAioD,IAEAnB,EAAA9mD,GAAAyB,KAAAq0B,IAAA,GAAAwyB,EAAA,IACArvC,EAAAy/B,WAAA14C,GAAA,EACAiZ,EAAA0/B,YAAA34C,GAAA,EAAAiZ,EAAAy/B,WAAA14C,GAEAiZ,EAAA0/B,YAAA34C,GAAA,EAKA,IAFAiZ,EAAA4+B,MAAA+O,GAAA3tC,EAAAs/B,MAAAt/B,EAAAo/B,QAAAqN,EAAAC,EAAAmB,EAAAkB,GACA7rC,EAAA,EACAnc,EAAA,EAAmBA,EAAAiZ,EAAAo/B,QAAiBr4C,IAAA,CAEpCwM,EAAA6H,EAAAuoB,UACA,QAAApf,EAAA,EAAyBA,EAAAvE,EAAAy/B,WAAA14C,GAAuBwd,IAAArB,IAAA,CAChD,IAAAipC,EAAAS,EAAA1pC,GAAA,IAAAxC,EAAA+kB,SAIA6pB,EAAAhkD,KAAA2+B,WAAA,IAAAkiB,EAAAz8B,GAAA,GACA4/B,EAAA9mD,KAAAq0B,IAAA,MAAAyyB,GAEA/7C,GADA+7C,GAAAtvC,EAAAy/B,WAAA14C,MACAwM,EAAA+7C,GAEAtvC,EAAA0kB,IAAAW,KAAAt+B,GAAAwM,GASAA,EAAA,GAAAk5C,EAAA1lD,GAAA,OACA,IACAwM,EAAA,KAEAA,GAAA,KACAA,GAAA,IAEAA,GAAA,EACAyM,EAAAq+B,SAAAt3C,GAAAyB,KAAAq0B,IAAA,GAAAtpB,EAAA,IAAAyM,EAAAy/B,WAAA14C,GAMA,IAFAiZ,EAAAq/B,QAAAgN,GAAArsC,EAAAw/B,WAAAx/B,EAAAm/B,KAAAn/B,EAAAk/B,KAAAuN,EAAAC,EAAA1sC,EAAA++B,MAAA/+B,EAAAioB,IAAAyd,YAAAkH,EAAAlsC,EAAA+/B,UAAAzgC,EAAAa,cAAAtY,EAAAmY,EAAA+/B,UAAA,IAAA//B,EAAAskB,SACA9hB,EAAA,EACAnc,EAAA,EAAmBA,EAAAiZ,EAAAq/B,QAAiBt4C,IAAA,CACpC,IAAAwM,EAOA,IANA87C,EAAAF,EACA1C,EAAA1lD,IAAAioD,IACAK,EAAAD,GAAA3C,EAAA1lD,GAAAioD,IA7GA,GA6GAA,GAAAG,GA7GA,GA6GA1C,EAAA1lD,KA7GA,GA6GAioD,IAEAnB,EAAA9mD,GAAAyB,KAAAq0B,IAAA,GAAAwyB,EAAA,IACA97C,EAAA6H,EAAAuoB,UACApf,EAAA,EAAyBA,EAAAvE,EAAAw/B,WAAAz4C,GAAuBwd,IAAArB,IAAA,CAChD,IACAosC,EADAnD,EAAAS,EAAA1pC,GAAA,IAAAxC,EAAA+/B,WAKA6O,EAAAhkD,KAAA2+B,WAAA,IAAAkiB,EAAAz8B,GAAA,GACA4/B,EAAA9mD,KAAAq0B,IAAA,MAAAyyB,GAEA/7C,GADA+7C,GAAAtvC,EAAAw/B,WAAAz4C,MACAwM,EAAA+7C,GAEAtvC,EAAA0kB,IAAAa,KAAAx+B,GAAAwM,EAKAA,EAAA,EAAAk5C,EAAA1lD,GAAA,KACA0lD,EAAA1lD,GAAA,KACAwM,GAAA,MAAA/K,KAAA+mD,IAAA,EAAAh8C,IAEAk5C,EAAA1lD,GAAA,KACAwM,GAAA,MAAA/K,KAAA+mD,IAAA,EAAAh8C,IAEAA,GAAA,KACAA,GAAA,IAEAA,GAAA,EACAyM,EAAAs+B,SAAAv3C,GAAAyB,KAAAq0B,IAAA,GAAAtpB,EAAA,IAAAyM,EAAAw/B,WAAAz4C,GAEAiZ,EAAA2+B,MAAAgP,GAAA3tC,EAAAu/B,QAAAv/B,EAAAq/B,QAAAoN,EAAAC,EAAAmB,EAAAkB,GAxsDA9K,EAAAz7C,KAAAq0B,IAAA,IAAAunB,EAAA,OACAF,EAAA17C,KAAAq0B,IAAA,IAAAwnB,EAAA,OACAF,EAAA37C,KAAAq0B,IAAA,GAAAynB,EAAA,IAwsDAhC,EAAAJ,SAAAliC,GACAA,EAAA+kB,MAAAv8B,KAAAmtC,KAAA,EAAA4M,GAx2DA,IAw2DAqK,EAAA,MAGAn+B,EAv2DA,IAw2DA,MAAAiB,EAAAuB,iBAAAxC,EAAA,GACAjmB,KAAA4nB,IAAAV,EAAAjB,OAAA,IAAAA,EAAAiB,EAAAjB,OACAiB,EAAAjB,QAIA,QAAArS,EAAA,EAAyBA,EAAA4D,EAAAo/B,QAAiBhjC,IAC1C4D,EAAAs/B,MAAAljC,GAAA,GAAA4D,EAAAo/B,QAAA,IAAAp/B,EAAAs/B,MAAAljC,GAAA,GAAA4D,EAAAo/B,QAAA,GAMA,IAAAoQ,EAAA,IAAAxvC,EAAA0E,QAAAkoC,EAIA,GAHA5sC,EAAA0kB,IAAAK,MAAAv8B,KAAAq0B,IAAA,QAAA2yB,GACAxvC,EAAA0kB,IAAAG,OAAA,IACA7kB,EAAA0kB,IAAAI,YAAA,GACA,GAAApV,EAAA6M,QAAA,CACA,IACAkzB,EAAA//B,EAAAoE,eAAApT,EAAA+kB,QACAiqB,EAAA,EAEA,IADAvD,EAAA,EACAplD,EAAA,EAAqBA,EAAA2Z,EAAA+kB,QAAA,IAAyB1+B,EAC9ColD,GAAAsD,EACAzvC,EAAA0kB,IAAAc,MAAAz+B,GAAA,EAAAyB,KAAAq0B,IAAA,GAAAvxB,KAAA2+B,WAAAkiB,EAAAz8B,GAAA,IACAggC,GAAA1vC,EAAA0kB,IAAAc,MAAAz+B,GAGA,IADA2oD,EAAA,EAAAA,EACA3oD,EAAA2Z,EAAA+kB,QAAA,IAAuC1+B,GAAA,GACvCiZ,EAAA0kB,IAAAc,MAAAz+B,IAAA2oD,EAIA,IAAAtzC,EAAA8G,EAAA,EAA6B9G,EAAA4D,EAAAq/B,UAAiBjjC,EAC9C,IAAArV,EAAA,EAAuBA,EAAAiZ,EAAAw/B,WAAApjC,KAAuBrV,IAC9Cmc,EAGA,IAAA9G,EAAA8G,EAAA,EAA6B9G,EAAA4D,EAAAo/B,UAAiBhjC,EAC9C,IAAArV,EAAA,EAAuBA,EAAAiZ,EAAAy/B,WAAArjC,KAAuBrV,IAC9Cmc,EAKA,IADAA,EAAA,EACAnc,EAAA,EAAmBA,EAAAiZ,EAAAo/B,QAAiBr4C,IACpColD,EAAAS,GAAA1pC,EAAAlD,EAAAy/B,WAAA14C,GAAA,MAAA2Z,EAAA+kB,SACAzlB,EAAA2/B,SAAA54C,GAAAmnD,GAAA/B,GACAjpC,GAAAlD,EAAAy/B,WAAA14C,GAEA,KAAcA,EAAA2Z,EAAA4kB,SAAoBv+B,EAClCiZ,EAAA2/B,SAAA54C,GAAA,EAGA,IADAmc,EAAA,EACAnc,EAAA,EAAmBA,EAAAiZ,EAAAq/B,QAAiBt4C,IACpColD,EAAAS,GAAA1pC,EAAAlD,EAAAw/B,WAAAz4C,GAAA,MAAA2Z,EAAA+/B,WACAzgC,EAAA4/B,SAAA74C,GAAAmnD,GAAA/B,GACAjpC,GAAAlD,EAAAw/B,WAAAz4C,GAEA,KAAcA,EAAA2Z,EAAA4kB,SAAoBv+B,EAClCiZ,EAAA4/B,SAAA74C,GAAA,EAEA,UAmCAuE,KAAA2+B,WAAA,SAAAF,EAAAra,GACA,IAAAsa,EACA,OAAAta,EAAA6M,SACA,OACAyN,EAAAmkB,GAAApkB,EAAA,GACA,MACA,OAEAC,EAAAmkB,GAAApkB,GAAA,GACA,MACA,OACAC,EAAAmkB,GAAApkB,EAAA,GACA,MACA,OAEAC,EAAAmkB,GAAApkB,EAAA,KACA,MACA,OACAC,EAAAmkB,GAAApkB,EAAAra,EAAAoB,UACA,MACA,QACAkZ,EAAAmkB,GAAApkB,EAAA,GAGA,OAAAC,GAGA,SAAAjY,IACA,IA0BAyM,EACAnL,EACAzR,EACA1F,EACAyzC,EA9BAnkD,EAAAF,KAEAymB,EAAAe,GAAA,IACAf,EAAAgB,GAAA,IACAhB,EAAAiB,GAAA,IACAjB,EAAAkB,GAAA,IACAlB,EAAAmB,GAAA,IACAnB,EAAAK,GAAA,IACAL,EAAAE,GAAA,IACAF,EAAAQ,GAAA,IACAR,EAAAoB,GAAA,IACApB,EAAAW,GAAA,IACAX,EAAAC,MAAA,IACAD,EAAAO,SAAA,KACAP,EAAAU,QAAA,KACAV,EAAAa,OAAA,KACAb,EAAAS,cAAA,KACAT,EAAAY,aAAA,KACAZ,EAAAI,OAAA,KACAJ,EAAAM,YAAA,KAMAN,EAAAyR,kBADA,OAOA,IACA7E,EAEAixB,EACAC,EAJA1mB,EAAA,IAAAkZ,EAoBA,SAAApa,IAIA38B,KAAA48B,YAAA,EAGA58B,KAAA68B,kBAAA,EAGA78B,KAAAw6C,YAAAzsC,EAAAqH,EAAAC,SAGArV,KAAAo6C,YAAArsC,EAAAqH,EAAAskB,SAEA,SAAA8qB,IACAxkD,KAAAykD,WAAA,EAEA,SAAAC,EAAAj5B,EAAAk5B,GACA3kD,KAAAgwB,QAAA20B,EAlCA3kD,KAAA4kD,IAAA,IAAAxvC,EACApV,KAAAgR,WAAA,SAAAsiB,EAAAtL,EAAA68B,EAAA5zC,EAAA6zC,EAAArxB,EAAAD,EAAAuxB,EAAAC,GACA9xB,EAAAI,EACAvL,EAAAC,EACA1R,EAAAuuC,EACAj0C,EAAAK,EACAozC,EAAAS,EACAzxB,EAAAI,EAEA6wB,EAAAS,EACAR,EAAAS,EACAhlD,KAAA4kD,IAAA5zC,WAAA+W,EAAA8V,EAAAjtB,EAAAyiB,IAyBA,IAAA3E,EAAA,WAqFA,SAAAu2B,EAAAh9C,GACA,OAAAA,EAAA,IACAA,GAAA,IACA/K,KAAA25C,IAAA35C,KAAA45C,GAAA,EAAA7uC,GAkFA,SAAAi9C,EAAAC,EAAAC,GACA,OAAAD,GACA,WAEA,OADAC,EAAAr6B,QAAA,EACA,EACA,UAEA,OADAq6B,EAAAr6B,QAAA,EACA,EACA,UAEA,OADAq6B,EAAAr6B,QAAA,EACA,EACA,WAEA,OADAq6B,EAAAr6B,QAAA,EACA,EACA,UAEA,OADAq6B,EAAAr6B,QAAA,EACA,EACA,UAEA,OADAq6B,EAAAr6B,QAAA,EACA,EACA,WAEA,OADAq6B,EAAAr6B,QAAA,EACA,EACA,UAEA,OADAq6B,EAAAr6B,QAAA,EACA,EACA,SAEA,OADAq6B,EAAAr6B,QAAA,EACA,EACA,QAEA,OADAq6B,EAAAr6B,QAAA,GACA,GAMA,SAAAs6B,EAAAC,EAAAv6B,EAAAw6B,GACAA,EAAA,OAAAx6B,EAAA,GAEA,IADA,IAAAU,EAAA1Y,EAAAkZ,cAAAlB,GAAA,GACAtvB,EAAA,EAAuBA,GAAA,GAASA,IAChCsX,EAAAkZ,cAAAlB,GAAAtvB,GAAA,GACAyB,KAAA4nB,IAAA/R,EAAAkZ,cAAAlB,GAAAtvB,GAAA6pD,GAAApoD,KAAA4nB,IAAA2G,EAAA65B,KAAA75B,EAAA1Y,EAAAkZ,cAAAlB,GAAAtvB,IAGA,OAAAgwB,EAOA,SAAAI,EAAAy5B,EAAAv6B,EAAAw6B,GACAA,EAAA,OAAAx6B,EAAA,GACA,QAAAtvB,EAAA,EAAuBA,GAAA,GAASA,IAChC,GAAAsX,EAAAkZ,cAAAlB,GAAAtvB,GAAA,GACAsX,EAAAkZ,cAAAlB,GAAAtvB,IAAA6pD,EACA,OAAA7pD,EAIA,SAEA,SAAA+pD,EAAAC,EAAAh6B,GAWA,IAAAi6B,EAAA,KAAAhB,EAAA,WAAAA,EAAA,aAAAA,EAAA,aAAAA,EAAA,aAAAA,EAAA,YAAAA,EAAA,aAAAA,EAAA,YAAAA,EAAA,aAAAA,EAAA,cAAAA,EAAA,cAAAA,EAAA,eAAAA,EAAA,cAAAA,EAAA,eAAAA,EAAA,eAAAA,EAAA,eAAAA,EAAA,eAAAA,EAAA,YACAiB,EAAAzlD,EAAA+lB,wBAAAwF,GACAg6B,EAAAhB,WAAAiB,EAAAC,GAAA31B,QAktBA,SAAA41B,EAAAxhC,GACA,IAAAyhC,EAAAzwC,EAAA+kB,QAAA/V,EAAAiX,UAAAjmB,EAAAi5B,UAIA,OADAwX,EAAA3oD,KAAAC,IAAA0oD,EAAA,IAAAzhC,EAAAiX,UAAA,IAwFA,SAAAyqB,EAAA1hC,EAAAoqB,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAmX,EAAA7lD,EAAA0kD,IAAArW,sBAAAnqB,EAAAoqB,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,OADAxqB,EAAAkX,WACAyqB,EAEA,SAAAC,IACAhmD,KAAAimD,KAAA,EACAjmD,KAAAkmD,MAAA,EAEA,SAAAC,IACAnmD,KAAAomD,SAAA,EAWA,SAAAC,EAAAp+C,EAAAq+C,EAAAl1C,GAKA,IAAAm1C,EAAArpD,KAAA45C,GAAAwP,GACAr+C,GAAAmJ,GACA,IAAAnJ,EAAA,GACAA,EAAA,IAAAA,EAAA,GACA,IAAA8J,EAAA9J,EAAA,GACAu+C,EAAA,OAAAtpD,KAAA25C,IAAA,EAAA5uC,EAAA/K,KAAA45C,IAAA,IAAA55C,KAAA25C,IAAA,EAAA5uC,EAAA/K,KAAA45C,IACA,OAAA55C,KAAA4nB,IAAA/S,GAAA,KAAAw0C,EAAArpD,KAAA45C,GAAsD0P,EAAAtpD,KAAAupD,IAAAr1C,EAAAm1C,EAAAx0C,IAAA7U,KAAA45C,GAAA1lC,EAAAW,GAEtD,SAAA20C,EAAAtiC,EAAAuiC,EAAAC,EAAAC,EAAA3X,EAAA4X,EAAA/lC,EAAAqlC,EAAAlsC,GACA,IACAze,EAEAwd,EAHAvE,EAAA0P,EAAAa,eAEArN,EAAA,EAEAmvC,EAAA3iC,EAAAoE,eAvBA,SAAAw+B,EAAAvrD,EAAAmc,GACA,UAAAA,EAAAovC,EAAApvC,EAAAnc,EAAAmc,GAAAnc,EAsBAurD,CAAA5iC,EAAAoE,eAAApE,EAAA0N,eACAi1B,EAAA/yB,EAAA4e,MAAAmU,EAAA/yB,EAAA4e,KACA,IAAAqU,EAAA/pD,KAAA4nB,IAAApQ,EAAAu9B,eAAA/0C,KAAA0xB,MAAA,GAAAla,EAAAu9B,iBAAA,SACAqU,EAAA,EAAA5xC,EAAAu9B,eACAqU,EAAA,IAAAA,EAAA,GACA,IAAAY,EAAA,GACA,GAAAA,EAAA,KAAAA,EAEA,IAAAC,GADAD,GAAAD,GACA,EACA,MAAAvyC,EAAAm9B,0BAAA,CAGA,IAFAn9B,EAAAg+B,UAAA,GAAA3kC,EAAAo5C,GACAzyC,EAAAg+B,UAAA,GAAA3kC,EAAAo5C,GACA1rD,EAAA,EAAqBA,GAAA,EAAAsrD,IAActrD,EACnCiZ,EAAAi+B,UAAAl3C,GAAAsS,EAAAo5C,GAIA,IAFAzyC,EAAAm+B,MAAA,KACAn+B,EAAAm+B,MAAA,KACAj7B,EAAA,EAAqBA,GAAA,EAAAmvC,EAAcnvC,IAAA,CACnC,IAAAvE,EAAA,EACA9X,GAAAqc,EAAAmvC,IAAA,EAAAA,GACA,IAAAtrD,EAAA,EAAuBA,GAAAyrD,EAAezrD,IACtC4X,GAAAqB,EAAAi+B,UAAA/6B,GAAAnc,GAAA4qD,EAAA5qD,EAAAF,EAAA+qD,EAAAY,GAEA,IAAAzrD,EAAA,EAAuBA,GAAAyrD,EAAezrD,IACtCiZ,EAAAi+B,UAAA/6B,GAAAnc,IAAA4X,EAGAqB,EAAAm9B,0BAAA,EAEA,IAAAa,EAAAh+B,EAAAg+B,UAAAx4B,GACA,IAAAjB,EAAA,EAAmBA,EAAA4tC,EAAiB5tC,IAAA,CACpC,IAAAmuC,EACAC,EAGA,GAFAD,EAAAnuC,EAAAvE,EAAAu9B,eAEAiV,GADAtvC,EAAA,EAAA1a,KAAA0xB,MAAAw4B,EAAA1yC,EAAAm+B,MAAA34B,KACAgtC,EAAA,GAAAnmC,EAAA,MACAxlB,EAAA6rD,EAAA1yC,EAAAm+B,MAAA34B,IAAAtC,EAAAsvC,EAAA,MACAG,EAAA,EAAAnqD,KAAA0xB,MAAA,EAAArzB,EAAAwrD,IAAA,IACA,IAAAO,EAAA,EACA,IAAA7rD,EAAA,EAAqBA,GAAAyrD,IAAezrD,EAAA,CACpC,IAAAqmD,EAAArmD,EAAAmc,EAAAsvC,EAAA,EAGAI,IADAxF,EAAA,EAAApP,EAAAyU,EAAArF,GAAA5S,EAAA4X,EAAAhF,IACAptC,EAAAi+B,UAAA0U,GAAA5rD,GAEAkrD,EAAAC,EAAA3tC,GAAAquC,EAQA,GANAlB,WAAAlpD,KAAAE,IAAA2jB,EAAAmmC,EAAAtvC,EAAAsvC,EAAA,GAKAxyC,EAAAm+B,MAAA34B,IAAAksC,WAAAntC,EAAAvE,EAAAu9B,eACAmU,YAAAe,EACA,IAAA1rD,EAAA,EAAqBA,EAAA0rD,EAAe1rD,IACpCi3C,EAAAj3C,GAAAyzC,EAAA4X,EAAAV,WAAA3qD,EAAA0rD,OAES,CACT,IAAAI,EAAAJ,EAAAf,WAOA,IAAA3qD,EAAA,EAAqBA,EAAA8rD,IAAa9rD,EAClCi3C,EAAAj3C,GAAAi3C,EAAAj3C,EAAA2qD,YAEA,IAAAxuC,EAAA,EAAqBnc,EAAA0rD,IAAe1rD,IAAAmc,EACpC86B,EAAAj3C,GAAAyzC,EAAA4X,EAAAlvC,GAGA,OAAAqB,EAEA,SAAAuuC,EAAApjC,EAAA0tB,EAAA2V,EAAAX,EAAAY,EAAAC,GACA,IAAAjzC,EAAA0P,EAAAa,eACA,GAAAvQ,EAAAu9B,eAAA,OAAAv9B,EAAAu9B,eAAA,OACA,QAAA/3B,EAAA,EAA0BA,EAAAxF,EAAAmiB,aAAuB3c,IAAA,CACjD,IAAA0tC,EAAA,IAAAzB,EACAwB,EAAAzB,MAAAQ,EAAAtiC,EAAA0tB,EAAA53B,GAAAxF,EAAAy9B,QAAA/tB,EAAAiX,UAAAosB,EAAAvtC,GAAA4sC,EAAAY,EAAAE,EAAA1tC,GACAytC,EAAA1B,KAAA2B,EAAAxB,aAES,CACTuB,EAAAzB,MAAAhpD,KAAAE,IAAAgnB,EAAAiX,UAAAqsB,GACAC,EAAA1B,KAAA0B,EAAAzB,MACA,QAAAzqD,EAAA,EAAyBA,EAAAksD,EAAAzB,QAAczqD,EACvCq2C,EAAA,GAAAp9B,EAAAy9B,QAAA12C,GAAAgsD,EAAA,GAAAX,EAAArrD,GACA,GAAAiZ,EAAAmiB,eAAAib,EAAA,GAAAp9B,EAAAy9B,QAAA12C,GAAAgsD,EAAA,GAAAX,EAAArrD,KAtlCAuE,KAAA6nD,UAAA,WACA,IAAAzjC,EAAA,IAAAgW,EAEA,UA9EA,SAAAhW,GACA,IAAA1P,EAwEA,OAvEA0P,EAAAiW,SAAA3L,EACAha,EAAA0P,EAAAa,eAAA,IAAA+O,EAKA5P,EAAAgH,KAAApb,EAAA6hB,QACAzN,EAAAmH,SAAA,EACAnH,EAAA0N,cAAA,MACA1N,EAAAnE,aAAA,EACAmE,EAAApE,aAAA,EACAoE,EAAA+J,cAAA,EACA/J,EAAA0L,SAAA,EACA1L,EAAA2N,aAAA,KACArd,EAAAiE,eAAA,EACAyL,EAAA6L,YAAA,EACA7L,EAAA4N,aAAA,EACA5N,EAAAyW,cAAA,EACAzW,EAAA0W,eAAA,EACA1W,EAAAG,IAAAxU,EAAAwX,QACAnD,EAAAQ,MAAA,EACAR,EAAAoB,UAAA,EACApB,EAAA+B,sBAAA,IACA/B,EAAA8M,qBAAA,EACA9M,EAAAuW,qBAAA,EACAvW,EAAAwW,aAAA,EACAlmB,EAAAo1B,gBAAA,EACAp1B,EAAAq1B,gBAAA,GACA3lB,EAAA9B,YAAA,EACA8B,EAAAW,kBAAA,EACAX,EAAAjB,OAAA,EACAzO,EAAAu9B,eAAA,EACAv9B,EAAAg0B,SAAA,OACAh0B,EAAAg0B,SAAA,OACAh0B,EAAA8zB,YAAA,KACA9zB,EAAA8zB,YAAA,KACA9zB,EAAAooB,cAAA,EACApoB,EAAAwQ,MAAAC,YAAA,EACAzQ,EAAAwQ,MAAAE,cAAA,EACAhB,EAAAP,OAAA,EACAO,EAAA4W,YAAA,EACA5W,EAAA6M,SAAA,EACA7M,EAAA6W,kBAAA,EACA7W,EAAAqB,kBAAA,EACArB,EAAA8W,YAAA,KACA9W,EAAAsB,cAAA,EAUAhR,EAAAw9B,qBAAA98B,EAAA0yC,SAAA1yC,EAAA2yC,UACA3jC,EAAAyL,gBAAA,EACAnb,EAAAy9B,QAAA/8B,EAAA0yC,SAAA1yC,EAAA4yC,UAGA5jC,EAAA+M,gBAAA,EACA/M,EAAAuT,mBAAA,EACAjjB,EAAAijB,mBAAA,EACAjjB,EAAAyc,gBAAA,EACAzc,EAAA2c,gBAAA,EACA3c,EAAA0c,UAAA,EACA1c,EAAAmgC,eAAA,EACAngC,EAAA+hB,iBAAA,EACA/hB,EAAAiiB,aAAA,EACAvS,EAAA0B,OAAA,EACA1B,EAAAoW,wBAAA,EACA,EAIAytB,CAAA7jC,GAEA,MAEAA,EAAAmX,mBAAA,EACAnX,IAOApkB,KAAAimB,wBAAA,SAAAwF,GACA,IAAAy8B,EAAA,2DACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAA,EAAAJ,EAAA,IACAG,EAAA,GACAD,EAAAF,EAAA,IACAC,EAAA,GAKA,QAAAr3C,EAAA,EAAuBA,EAAA,GAAQA,IAC/B,GAAA5T,KAAAC,IAAAsuB,EAAAy8B,EAAAp3C,EAAA,KAAA2a,EAAA,CACA68B,EAAAJ,EAAAp3C,EAAA,GACAu3C,EAAAv3C,EAAA,EACAs3C,EAAAF,EAAAp3C,GACAq3C,EAAAr3C,EACA,MAGA,OAAAw3C,EAAA78B,IAAA28B,EACAD,EAEAE,GA+VAroD,KAAAuoD,iBAAA,SAAAnkC,GACA,IAAA1P,EAAA0P,EAAAa,eAiDA,GAhDAvQ,EAAA+Z,SAAA,EACA,MAAA/Z,EAAA0kB,MAAA1kB,EAAA0kB,IAAA,IAAAA,GACA,MAAA1kB,EAAAioB,MAAAjoB,EAAAioB,IAAA,IAAAA,GACA,MAAAjoB,EAAA8hB,SAAA9hB,EAAA8hB,OAAA,IAAA4G,GACA1oB,EAAAs9B,YAAA5tB,EAAAnE,aACA,GAAAvL,EAAAs9B,cAAA5tB,EAAAgH,KAAApb,EAAAwhB,MACA9c,EAAAmiB,aAAAzS,EAAAgH,MAAApb,EAAAwhB,KAAA,IACA9c,EAAA2W,SAAAjW,EAAAmnB,aACAnY,EAAAgH,MAAApb,EAAAwhB,OAAApN,EAAAwN,UAAA,GAGAxN,EAAAG,KAAAxU,EAAAwX,SAAA,KAAAnD,EAAA+B,uBAAA,GAAA/B,EAAAgC,QAAAhC,EAAAgC,MAAAhC,EAAA+B,uBACA/B,EAAAG,KAAAxU,EAAAwX,SAAAnD,EAAAG,KAAAxU,EAAA6W,UAAAxC,EAAAG,KAAAxU,EAAAuoB,SACAlU,EAAAwH,aAAA,GAEAxH,EAAAG,KAAAxU,EAAAwX,SAAA,GAAAnD,EAAAgC,OACA4M,EAAA0D,GAAAtS,EAAAqW,kBAAA,KAAArW,EAAAqW,kBAAA,QAIArW,EAAAG,KAAAxU,EAAAwX,SAAAnD,EAAAqW,kBAAA,IACA,GAAArW,EAAAoE,iBAAApE,EAAAoE,eAAAggC,iBAAAjiC,IAAA,IAAAnC,EAAA0N,iBAMA1N,EAAAgC,MAAA,KAAAhC,EAAAoE,eAAA9T,EAAAmiB,cAAA,IAAAzS,EAAAqW,mBACA/lB,EAAAwW,iBAAAg6B,EAAA9gC,EAAAoE,eAAApE,GACAA,EAAAwH,cAKAxH,EAAAgC,MAAAi/B,EAAAjhC,EAAAgC,MAAAhC,EAAA2G,QAAA3G,EAAAoE,kBAEA,GAAApE,EAAAoE,iBACApE,EAAAoE,eAAA,MACApE,EAAA+B,sBAAAjpB,KAAAC,IAAAinB,EAAA+B,sBAAA,GACA/B,EAAA+B,sBAAAjpB,KAAAE,IAAAgnB,EAAA+B,sBAAA,KACW/B,EAAAoE,eAAA,MACXpE,EAAA+B,sBAAAjpB,KAAAC,IAAAinB,EAAA+B,sBAAA,GACA/B,EAAA+B,sBAAAjpB,KAAAE,IAAAgnB,EAAA+B,sBAAA,OAEA/B,EAAA+B,sBAAAjpB,KAAAC,IAAAinB,EAAA+B,sBAAA,IACA/B,EAAA+B,sBAAAjpB,KAAAE,IAAAgnB,EAAA+B,sBAAA,OAGA,GAAA/B,EAAA6L,YAAA,CACA,IAAAD,EAAA,KACA,OAAA5L,EAAAG,KACA,KAAAxU,EAAAwX,QAGAi+B,EADAC,EAAA,IAAAjB,EACApgC,EAAAgC,OACA4J,EAAAy1B,EAAAhB,WACA,MAEA,KAAA10C,EAAAmW,QAEA,IAAAu/B,EACAD,EADAC,EAAA,IAAAjB,EACApgC,EAAA+B,uBACA6J,EAAAy1B,EAAAhB,WACA,MAEA,KAAA10C,EAAAyU,OAEA,IAAAvc,EAAA,8DACA,MAAAmc,EAAAQ,OAAAR,EAAAQ,OAAA,GACA,IAAAllB,EAAAuI,EAAAmc,EAAAQ,OACA9T,EAAA7I,EAAAmc,EAAAQ,MAAA,GACA+1B,EAAAv2B,EAAAK,WACAuL,EAAAy4B,WAAA/oD,EAAAoR,EAAA6pC,QAEA3qB,EAAA,MAEA,MAEA,QAEA/nB,EAAA,gEACA,GAAAmc,EAAAQ,OAAAR,EAAAQ,OAAA,GACAllB,EAAAuI,EAAAmc,EAAAQ,OACA9T,EAAA7I,EAAAmc,EAAAQ,MAAA,GACA+1B,EAAAv2B,EAAAK,WACAuL,EAAAy4B,WAAA/oD,EAAAoR,EAAA6pC,IAEA3qB,EAAA,MAIA5L,EAAAgH,MAAApb,EAAAwhB,MAAApN,EAAAG,KAAAxU,EAAAwX,SAAAnD,EAAAG,KAAAxU,EAAAmW,UAAA8J,GAAA,KACA5L,EAAA6L,YAAA,EAAAD,EA2BA,GAzBA,GAAA5L,EAAAoE,iBACA,EAAApE,EAAA6L,YAAA7L,EAAA0N,gBACA1N,EAAA6L,YAAA7L,EAAA0N,cAAA,GAEA1N,EAAAoE,eAjcA,SAAAyH,EAAAy4B,GAMA,IAAAC,EAAA,MAEA,OADAD,GAAA,KAAAC,EAAA,KAAoED,GAAA,MAAAC,EAAA,MAAiED,GAAA,KAAAC,EAAA,KAAiED,GAAA,KAAAC,EAAA,KAAiED,GAAA,MAAAC,EAAA,MAAiED,GAAA,KAAAC,EAAA,KAAiED,GAAA,KAAAC,EAAA,KAAiED,GAAA,MAAAC,EAAA,MAAiED,GAAA,MAAAC,EAAA,MAC3gB,GAAA14B,EAAA04B,GACA14B,GAAA,QAAA04B,EAAA,OACA14B,GAAA,QAAA04B,EAAA,MACA14B,GAAA,QAAA04B,EAAA,MACA14B,GAAA,OAAA04B,EAAA,OACA14B,GAAA,OAAA04B,EAAA,MACA14B,GAAA,OAAA04B,EAAA,MACA14B,GAAA,OAAA04B,EAAA,OACA14B,GAAA,OAAA04B,EAAA,KACAD,EAAAC,EAKAD,EAAA,MACA,KAEAA,EAAA,KACA,MAEAA,EAAA,KACA,KAEAA,EAAA,MACA,KAEAA,EAAA,KACA,MAEAA,EAAA,KACA,KAEAA,EAAA,MACA,KAEAA,EAAA,IACA,MAEA,IAEAC,GAiZAC,CAAA,EAAAxkC,EAAA6L,YAAA7L,EAAA0N,gBAEA1N,EAAA6L,YAAA/yB,KAAAE,IAAA,MAAAgnB,EAAA6L,aACA7L,EAAA6L,YAAA/yB,KAAAE,IAAAgnB,EAAAoE,eAAA,EAAApE,EAAA6L,aACA7L,EAAAG,KAAAxU,EAAAwX,UACAnD,EAAAqW,kBAAA,GAAArW,EAAAoE,eAAA9T,EAAAmiB,cAAA,IAAAzS,EAAAgC,QAEAhC,EAAAG,KAAAxU,EAAAmW,UACA9B,EAAAqW,kBAAA,GAAArW,EAAAoE,eAAA9T,EAAAmiB,cAAA,IAAAzS,EAAA+B,wBAKA/B,EAAA+J,eACA/J,EAAA+M,gBAAA,EACA/M,EAAAuT,mBAAA,EACAjjB,EAAA2c,gBAAA,GAEA3c,EAAAyc,eAAA/M,EAAA+M,eACAzc,EAAAijB,kBAAAvT,EAAAuT,kBACAjjB,EAAAijB,oBAAAjjB,EAAA2c,gBAAA,GACA3c,EAAAyc,gBACA+B,EAAAjV,iBAAAvJ,EAAA8hB,OAAApS,EAAAoE,iBAAAxL,EAAA4B,yBAEA,OADAwF,EAAAa,eAAA,MACA,EA2CA,OAxCAvQ,EAAAijB,oBAAAvT,EAAAmW,cACA,MAAA7lB,EAAAsjB,KACAusB,EAAAsE,gBAAAn0C,EAAAsjB,KAEAtjB,EAAAsjB,IAAAusB,EAAAuE,mBAEAp0C,EAAA0E,QAAAgL,EAAAoE,gBAAA,SAGApE,EAAAiX,UAAA,IAAA3mB,EAAA0E,QACAgL,EAAAwL,cAAAxa,EAAA0yC,SACApzC,EAAAu9B,eAAA7tB,EAAA0N,cAAA1N,EAAAoE,eA6BApE,EAAAG,KACA,KAAAxU,EAAAuoB,OACA,KAAAvoB,EAAAyU,OACA,KAAAzU,EAAA6W,SAGAxC,EAAAqW,kBADA,wCACArW,EAAAQ,OAEA,MACA,KAAA7U,EAAAmW,QACA9B,EAAAqW,kBAAA,GAAArW,EAAAoE,eAAA9T,EAAAmiB,cAAA,IAAAzS,EAAA+B,uBACA,MACA,QACA/B,EAAAqW,kBAAA,GAAArW,EAAAoE,eAAA9T,EAAAmiB,cAAA,IAAAzS,EAAAgC,OAoCA,GA9BAhC,EAAAgH,MAAApb,EAAA6hB,UACAzN,EAAAgH,KAAApb,EAAA2hB,cAEAvN,EAAA4N,aAAA,GACAtd,EAAA49B,UAAA,EAAAluB,EAAA4N,aACA5N,EAAA0W,eAAA,EAAApmB,EAAA69B,UAAA,GAAAnuB,EAAA4N,aAAA5N,EAAA0W,eAAkGpmB,EAAA69B,UAAA,EAAAnuB,EAAA4N,aAClGtd,EAAA49B,WAAAluB,EAAAoE,eACA9T,EAAA69B,WAAAnuB,EAAAoE,iBAEA9T,EAAA49B,UAAA,EACA59B,EAAA69B,UAAA,GAEAnuB,EAAA6L,YAAA,GACAvb,EAAA29B,SAAA,EAAAjuB,EAAA6L,YACA7L,EAAAyW,cAAA,GACAnmB,EAAA09B,SAAA,GAAAhuB,EAAA6L,YAAA7L,EAAAyW,cACAnmB,EAAA09B,SAAA,IAAA19B,EAAA09B,SAAA,IAEA19B,EAAA09B,SAAA,EAAAhuB,EAAA6L,YAEAvb,EAAA09B,UAAAhuB,EAAAoE,eACA9T,EAAA29B,UAAAjuB,EAAAoE,iBAEA9T,EAAA09B,SAAA,EACA19B,EAAA29B,SAAA,GA7aA,SAAAjuB,GACA,IAAA1P,EAAA0P,EAAAa,eACA8jC,EAAA,GACAC,GAAA,EACA,GAAAt0C,EAAA09B,SAAA,GAEA,IADA,IAAA6W,EAAA,IACAlyB,EAAA,EAA4BA,GAAA,GAAYA,KACxC8pB,EAAA9pB,EAAA,KACAriB,EAAA29B,WACA0W,EAAA7rD,KAAAE,IAAA2rD,EAAAhyB,IAEAriB,EAAA09B,SAAAyO,KAAAnsC,EAAA29B,WACA4W,EAAA/rD,KAAAE,IAAA6rD,EAAAlyB,IAOAriB,EAAA09B,SADA,KAAA6W,GACAF,EAAA,SAEAE,EAAA,QAEAv0C,EAAA29B,SAAA0W,EAAA,GAYA,GAPAr0C,EAAA69B,UAAA,GACA79B,EAAA69B,UAAA,YACA79B,EAAA49B,UAAA,EACA59B,EAAA69B,UAAA,EACA1jC,EAAA1N,IAAAg1B,QAAA,uEAGAzhB,EAAA69B,UAAA,GACA,IAAA2W,GAAA,EACA,IAAAnyB,EAAA,EAA4BA,GAAA,GAAYA,KACxC8pB,EAAA9pB,EAAA,KACAriB,EAAA49B,YACA0W,EAAA9rD,KAAAC,IAAA6rD,EAAAjyB,IAEAriB,EAAA49B,UAAAuO,KAAAnsC,EAAA69B,YACA2W,EAAAhsD,KAAAC,IAAA+rD,EAAAnyB,IAMAriB,EAAA49B,UAAA0W,EAAA,GAEAt0C,EAAA69B,WADA,GAAA2W,GACAF,EAAA,SAEAE,EAAA,QAGA,IAAAnyB,EAAA,EAA0BA,EAAA,GAAWA,IAAA,CACrC,IAAAoyB,EAAAC,EACAvI,EAAA9pB,EAAA,GAEAoyB,EADAz0C,EAAA69B,UAAA79B,EAAA49B,UACA2S,GAAAvwC,EAAA69B,UAAAsO,IAAAnsC,EAAA69B,UAAA79B,EAAA49B,UAAA,QAEA,EAGA8W,EADA10C,EAAA29B,SAAA39B,EAAA09B,SACA6S,GAAApE,EAAAnsC,EAAA09B,WAAA19B,EAAA29B,SAAA39B,EAAA09B,SAAA,QAEA,EAEA19B,EAAAs5B,WAAAjX,GAAAoyB,EAAAC,GA0WAC,CAAAjlC,GAGA1P,EAAAwW,iBAAAg6B,EAAA9gC,EAAAoE,eAAApE,GACA1P,EAAAwW,iBAAA,EAEA,OADA9G,EAAAa,eAAA,MACA,EAEA,GAAAb,EAAAG,KAAAxU,EAAAwX,SACA,GAAAnD,EAAAwH,YACAlX,EAAAuW,cAAA,OAIA,GAFA7G,EAAAgC,MAAAi/B,EAAAjhC,EAAAgC,MAAAhC,EAAA2G,QAAA3G,EAAAoE,gBACA9T,EAAAuW,cAAAY,EAAAzH,EAAAgC,MAAAhC,EAAA2G,QAAA3G,EAAAoE,gBACA9T,EAAAuW,eAAA,EAEA,OADA7G,EAAAa,eAAA,MACA,OAIAvQ,EAAAuW,cAAA,EAEA7G,EAAAkW,WAAAlW,EAAA+J,cAAA,GACA,MAAAzZ,EAAAoU,QAAA1E,EAAA+J,cAAA,GACApG,EAAAkQ,kBAAAvjB,GAEA,IADA,IAwBAuE,EAxBArB,EAAAlD,EAAAwW,iBAAA,EAAA9G,EAAA2G,QAAA,GAAA3G,EAAAoE,eAAA,UACA/sB,EAAA,EAAuBA,EAAA2Z,EAAAC,QAAA,EAAyB5Z,IAChDiZ,EAAAa,cAAAnE,EAAA3V,GAAAmV,EAAAytB,YAAAzmB,GAAAxG,EAAA3V,GAEA,IAAAA,EAAA,EAAuBA,EAAA2Z,EAAAwkB,OAAA,EAAwBn+B,IAAA,CAC/C,IAAA6wB,GAAA5X,EAAAa,cAAAnE,EAAA,IAAAsD,EAAAa,cAAAnE,EAAA,KAAAgE,EAAAwkB,OACA91B,EAAA4Q,EAAAa,cAAAnE,EAAA,IAAA3V,EAAA6wB,EACA5X,EAAAa,cAAAokB,OAAAl+B,GAAAqI,EAGA,IADA4Q,EAAAa,cAAAokB,OAAAvkB,EAAAwkB,QAAA,IACAn+B,EAAA,EAAuBA,EAAA2Z,EAAAskB,QAAA,EAAyBj+B,IAChDiZ,EAAAa,cAAAtY,EAAAxB,GAAAmV,EAAAytB,YAAAzmB,GAAA3a,EAAAxB,GAEA,IAAAA,EAAA,EAAuBA,EAAA2Z,EAAA0kB,OAAA,EAAwBr+B,IAC/C6wB,GAAA5X,EAAAa,cAAAtY,EAAA,IAAAyX,EAAAa,cAAAtY,EAAA,KAAAmY,EAAA0kB,OACAh2B,EAAA4Q,EAAAa,cAAAtY,EAAA,IAAAxB,EAAA6wB,EACA5X,EAAAa,cAAAskB,OAAAp+B,GAAAqI,EASA,IAPA4Q,EAAAa,cAAAskB,OAAAzkB,EAAA0kB,QAAA,IACA,GAAA1V,EAAA2G,QAAArW,EAAA4T,aAAA,GAAA5T,EAAAmiB,aAAA,MAAqGniB,EAAA4T,aAAA,GAAA5T,EAAAmiB,aAAA,MACrGzS,EAAA4G,mBAAAtW,EAAA4T,cAAA,GA/SA,SAAAlE,GACA,IAAA1P,EAAA0P,EAAAa,eACAb,EAAAkX,SAAA,EACAlX,EAAAoW,wBACA8pB,EAAAgF,gBAAAllC,GAEA1P,EAAAu8B,wBAAA3iC,EAAA,QACAoG,EAAAy8B,uBAAA7iC,EAAA,QACAoG,EAAA4c,WAAA,EACAlN,EAAA+J,cAAAkF,EAAAvF,WAAA1J,GAuSAmlC,CAAAnlC,GACA1P,EAAA+Z,SAAAC,EAGAzV,EAAA,EAAqBA,EAAA,GAAQA,IAC7BvE,EAAAwQ,MAAA2rB,SAAA53B,GAAA,IAAAvE,EAAA0E,QAAA1E,EAAAmiB,aAIA,QAFA,GAAAzS,EAAA6M,UAAA7M,EAAA6M,QAAA,GAEA7M,EAAAG,KACA,KAAAxU,EAAAuoB,OACAlU,EAAAG,IAAAxU,EAAA6W,SAEA,KAAA7W,EAAA6W,SAEA,MAAAxC,EAAA8W,cACA9W,EAAA8W,aAAA,GAEA5kB,EAAAkQ,aAAApC,EAAA,OAAAA,EAAAQ,MAAA,GAQAR,EAAA0L,QAAA,IAAA1L,EAAA0L,QAAA05B,sBACAplC,EAAA0L,QAAA,IAAA1L,EAAA0L,QAAA,GACA1L,EAAA0L,QAAA,IAAA1L,EAAA0L,QAAA,GACApb,EAAAioB,IAAAC,YAAAxY,EAAAiB,cACA3Q,EAAAioB,IAAAE,kBAAAzY,EAAAkB,oBAGAlB,EAAAY,cAAAtQ,EAAAuyB,aAAA,EAA6DvyB,EAAAuyB,YAAA7iB,EAAAoE,eAAA,KAC7D9T,EAAAinB,eAAA,IAAA8tB,oBAAApF,GACA,MAEA,KAAAt0C,EAAAyU,OAEAlO,EAAAkQ,aAAApC,EAAA,OAAAA,EAAAQ,MAAA,GACAlQ,EAAAioB,IAAAC,YAAAxY,EAAAiB,cACA3Q,EAAAioB,IAAAE,kBAAAzY,EAAAkB,oBAGAlB,EAAAY,cAAAtQ,EAAAuyB,aAAA,EAA6DvyB,EAAAuyB,YAAA7iB,EAAAoE,eAAA,KAK7DpE,EAAA0L,QAAA,IAAA1L,EAAA0L,QAAA,GACA1L,EAAA0L,QAAA,IAAA1L,EAAA0L,QAAA05B,sBACA90C,EAAAinB,eAAA,IAAA+tB,oBAAArF,GACA,MAEA,QAEA,IAAAsF,EAGAj1C,EAAAuyB,aAAA,EACA7iB,EAAA0L,QAAA,IAAA1L,EAAA0L,QAAA05B,uBACAG,EAAAvlC,EAAAG,MACAxU,EAAAwX,UAAAnD,EAAA+B,sBAAA/B,EAAAgC,OACA9P,EAAAkQ,aAAApC,IAAA+B,sBAAA,GACA/B,EAAAG,IAAAolC,EACAj1C,EAAAioB,IAAAC,YAAAxY,EAAAiB,cACA3Q,EAAAioB,IAAAE,kBAAAzY,EAAAkB,oBACAqkC,GAAA55C,EAAAwX,QACA7S,EAAAinB,eAAA,IAAAH,EAAA6oB,GAEA3vC,EAAAinB,eAAA,IAAAiuB,iBAAAvF,GAKA,GAAAjgC,EAAAG,KAAAxU,EAAAwX,QAAA,CAQA,GAPA7S,EAAAo1B,gBAAA,EAGAp1B,EAAAq1B,gBAAA,GAGA3lB,EAAAoE,eAAA,OAAA9T,EAAAq1B,gBAAA,GACA,GAAA3lB,EAAA8M,uBACA9M,EAAA8M,qBAAAm0B,EAAAjhC,EAAA8M,qBAAA9M,EAAA2G,QAAA3G,EAAAoE,gBACA9T,EAAAo1B,gBAAAje,EAAAzH,EAAA8M,qBAAA9M,EAAA2G,QAAA3G,EAAAoE,gBACA9T,EAAAo1B,gBAAA,YAEA,MAAA1lB,EAAAuW,uBACAvW,EAAAuW,qBAAA0qB,EAAAjhC,EAAAuW,qBAAAvW,EAAA2G,QAAA3G,EAAAoE,gBACA9T,EAAAq1B,gBAAAle,EAAAzH,EAAAuW,qBAAAvW,EAAA2G,QAAA3G,EAAAoE,gBACA9T,EAAAq1B,gBAAA,YAEA3lB,EAAA8M,qBAAAne,EAAAkZ,cAAA7H,EAAA2G,SAAArW,EAAAo1B,iBACA1lB,EAAAuW,qBAAA5nB,EAAAkZ,cAAA7H,EAAA2G,SAAArW,EAAAq1B,iBACA3lB,EAAA+B,sBAAAjpB,KAAAE,IAAA2V,EAAAkZ,cAAA7H,EAAA2G,SAAArW,EAAAq1B,iBAAA3lB,EAAA+B,uBACA/B,EAAA+B,sBAAAjpB,KAAAC,IAAA4V,EAAAkZ,cAAA7H,EAAA2G,SAAArW,EAAAo1B,iBAAA1lB,EAAA+B,uBAkDA,OAhDA/B,EAAA+W,OACAzmB,EAAAioB,IAAAC,aAAAxY,EAAAgX,aACA1mB,EAAAioB,IAAAE,mBAAAzY,EAAAgX,cAzfA,SAAAhX,GACA,IAAA1P,EAAA0P,EAAAa,eACA,OAAAb,EAAA0L,SACA,QACA,OACApb,EAAAg7B,SAAA,EACAh7B,EAAA4R,cAAA,EACA5R,EAAAgyB,kBAAA,EACAhyB,EAAA89B,mBAAA,EACA99B,EAAAoC,iBAAA,EACApC,EAAAw0B,gBAAA,EACA,MACA,OACA9kB,EAAA0L,QAAA,EAEA,OAKApb,EAAAg7B,SAAA,EACAh7B,EAAA4R,cAAA,EACA5R,EAAAgyB,kBAAA,EACAhyB,EAAA89B,mBAAA,EACA99B,EAAAoC,iBAAA,EACApC,EAAAw0B,gBAAA,EACA,MACA,OASA,OACAx0B,EAAAg7B,SAAA,EACA,GAAAh7B,EAAA4R,gBAAA5R,EAAA4R,cAAA,GACA5R,EAAAgyB,kBAAA,EACAhyB,EAAA89B,mBAAA,GACA,GAAA99B,EAAAiE,gBAAAjE,EAAAiE,cAAA,GACAjE,EAAAoC,iBAAA,EACApC,EAAAw0B,gBAAA,EACA,MACA,OACAx0B,EAAAg7B,SAAA,EACA,GAAAh7B,EAAA4R,gBAAA5R,EAAA4R,cAAA,GACA5R,EAAAgyB,kBAAA,EACAhyB,EAAA89B,mBAAA,GACA,GAAA99B,EAAAiE,gBAAAjE,EAAAiE,cAAA,GACAjE,EAAAoC,iBAAA,EACApC,EAAAw0B,gBAAA,EACA,MACA,OACAx0B,EAAAg7B,SAAA,EACA,GAAAh7B,EAAA4R,gBAAA5R,EAAA4R,cAAA,GACA5R,EAAAgyB,kBAAA,EACAhyB,EAAA89B,mBAAA,GACA,GAAA99B,EAAAiE,gBAAAjE,EAAAiE,cAAA,GACAjE,EAAAoC,iBAAA,EACApC,EAAAw0B,gBAAA,EACA,MACA,OACAx0B,EAAAg7B,SAAA,EACA,GAAAh7B,EAAA4R,gBAAA5R,EAAA4R,cAAA,GACA,GAAA5R,EAAAoE,kBAAApE,EAAAoE,gBAAA,GACApE,EAAAgyB,kBAAA,EACAhyB,EAAA89B,mBAAA,GACA,GAAA99B,EAAAiE,gBAAAjE,EAAAiE,cAAA,GACAjE,EAAAoC,iBAAA,EACApC,EAAAw0B,gBAAA,EACA,MACA,OAUA,OACAx0B,EAAAg7B,SAAA,EACA,GAAAh7B,EAAA4R,gBAAA5R,EAAA4R,cAAA,GACA,GAAA5R,EAAAoE,kBAAApE,EAAAoE,gBAAA,GACApE,EAAAgyB,kBAAA,EACAhyB,EAAA89B,mBAAA,GACA,GAAA99B,EAAAiE,gBAAAjE,EAAAiE,cAAA,GACAjE,EAAAoC,iBAAA,EAIApC,EAAAw0B,gBAAA,GA6ZA2gB,CAAAzlC,GAGAA,EAAA4W,WAAA,EAAAtmB,EAAA0kB,IAAAC,UAAA,EAAsD3kB,EAAA0kB,IAAAC,UAAAjV,EAAA4W,WACtDtmB,EAAA0kB,IAAAE,eAAAp8B,KAAAq0B,IAAA,GAAAnN,EAAAqB,mBAAA,IACA,MAAArB,EAAA2N,eACA3N,EAAA2N,aAAA3iB,EAAAM,qBAWA0U,EAAA2N,cAAA3iB,EAAAM,qBAAA0U,EAAAgH,MAAApb,EAAA2hB,cAAAvN,EAAAgH,MAAApb,EAAAyhB,SACArN,EAAA2N,aAAA3iB,EAAAO,qBAEAyU,EAAA9B,WAAA,IAAA8B,EAAA9B,WAAA,GACA8B,EAAAW,iBAAA,IAAAX,EAAAW,iBAAA,GACAX,EAAAjB,MAAA,IAAAiB,EAAAjB,MAAA,GACAiB,EAAAuB,cAAA,EAAAvB,EAAAuB,cACAvB,EAAAa,eAAAC,MAAAC,WAAA,IAAAf,EAAAa,eAAAC,MAAAC,WAAA4xB,EAAA+S,cACA1lC,EAAAa,eAAAC,MAAAE,aAAA,IAAAhB,EAAAa,eAAAC,MAAAE,aAAA2xB,EAAAgT,gBACA3lC,EAAAP,MAAA,IAAAO,EAAAP,MAAA,GACAO,EAAA6M,QAAA,IAAA7M,EAAA6M,QAAA,GACA7M,EAAAoB,SAAA,IAAApB,EAAAoB,SAAA,GACApB,EAAA6W,iBAAA,IAAA7W,EAAA6W,iBAAA,GACA7W,EAAAsB,aAAA,IAAAtB,EAAAsB,aAAA,GACA,MAAAtB,EAAA8W,cAAA9W,EAAA8W,aAAA,GASAxmB,EAAA86B,SAAA96B,EAAA+6B,SAAA,EACArrB,EAAAG,KAAAxU,EAAAwX,UAAA7S,EAAA86B,SAAA96B,EAAA+6B,SAAA,MAAArrB,EAAA2G,QAAA,GAAA3G,EAAAgC,MAAAhC,EAAAoE,eAAA,GACA5X,EAAAiuB,eAAAza,GACAyZ,EAAA2lB,cAAAp/B,GACA,GASApkB,KAAAgqD,kBAAA,SAAA5lC,EAAA6lC,EAAAC,EAAAC,GACA,IAGAtb,EACAub,EAKAC,EACAC,EAVA51C,EAAA0P,EAAAa,eACAnpB,EAAAyS,EAAA,UACAg8C,EAAA,EASAC,EAAA91C,EAAAw9B,qBAAA98B,EAAA2yC,UACAlC,EAAAD,EAAAxhC,GACA,GAAA1P,EAAAw9B,qBAAA,EACA,SAiBA,IAfArD,EAAA,EACAzqB,EAAA0N,eAAA1N,EAAAoE,iBAKAgiC,GAAA,GAAApmC,EAAAoE,eAAApE,EAAA0N,gBAEAu4B,EAAAjmC,EAAAiX,UAAAmvB,EAAApmC,EAAAiX,WACA,MAAAgvB,GAAAjmC,EAAAiX,WACAjX,EAAAyL,gBAAAw6B,EACAC,GAAAE,EAAAH,GAAAjmC,EAAAiX,UAIAivB,EAAA,GAAAC,GAAA,IACA,IAAAE,EAAA5E,EAAAnxC,EAAAy9B,QACAuY,EAAAtmC,EAAAkX,SACAmvB,GAAArmC,EAAA0N,eACA24B,GAAArmC,EAAAoE,gBACA,OAAAiiC,EAAA,MACAA,EAAA,IAAAA,EAAA,GACAL,EAAAD,EAAAtb,EACA,GAAAsb,IAAAC,EAAA,GAEAF,GADAK,EAAAvqD,KAAA2qD,mBAAAvmC,EAAAtoB,EAAA,GAAAA,EAAA,GAAA2uD,EAAAR,EAAAC,EAAAE,GAEAvb,GAAA0b,EACAD,GAAAI,GAAAtmC,EAAAkX,SAAA,IAMA,GADA5mB,EAAAw9B,qBAAA,EACAqY,EAAA,EACA,OAAAA,EAMA,GAJAH,EAAAD,EAAAtb,EACA,GAAAsb,IAAAC,EAAA,GACAriC,EAAAwO,gBAAAnS,IACAmmC,EAAAxiC,EAAAyP,YAAA9iB,EAAAu1C,EAAAC,EAAAE,EAAA,IACA,EACA,OAAAG,EAMA,GAJAL,GAAAK,EAEAH,EAAAD,GADAtb,GAAA0b,GAEA,GAAAJ,IAAAC,EAAA,GACAhmC,EAAAoW,uBAAA,CAGA,GAFA8pB,EAAAsG,gBAAAxmC,IACAmmC,EAAAxiC,EAAAyP,YAAA9iB,EAAAu1C,EAAAC,EAAAE,EAAA,IACA,EACA,OAAAG,EAEA1b,GAAA0b,EAEA,OAAA1b,GAEA7uC,KAAA2qD,mBAAA,SAAAvmC,EAAAymC,EAAAC,EAAApD,EAAAhZ,EAAAC,EAAAC,GACA,IAAAl6B,EAAA0P,EAAAa,eACAwiC,EAAA,YACA,GAAA/yC,EAAA+Z,UAAAC,EAAA,SACA,MAAAg5B,EAAA,UArFA,SAAAhzC,EAAAgzC,IACA,MAAAhzC,EAAAqgC,aAAArgC,EAAAogC,mBAAA4S,KACAhzC,EAAAqgC,YAAAhnC,EAAA25C,GACAhzC,EAAAsgC,YAAAjnC,EAAA25C,GACAhzC,EAAAogC,mBAAA4S,GAkFAqD,CAAAr2C,EAAAgzC,GACAD,EAAA,GAAA/yC,EAAAqgC,YACA0S,EAAA,GAAA/yC,EAAAsgC,YACA,QAAAv5C,EAAA,EAAuBA,EAAAisD,EAAcjsD,IACrCgsD,EAAA,GAAAhsD,GAAAovD,EAAApvD,GACAiZ,EAAAs9B,YAAA,IAAAyV,EAAA,GAAAhsD,GAAAqvD,EAAArvD,IAEA,OASA,SAAA2oB,EAAAymC,EAAAC,EAAApD,EAAAhZ,EAAAC,EAAAC,GACA,IAEAmX,EACAtqD,EACAye,EACA2rC,EACAmF,EANAt2C,EAAA0P,EAAAa,eACAgmC,EAAA,EAMAnZ,EAAA,YACA2V,EAAA,YACA,GAAA/yC,EAAA+Z,UAAAC,EAAA,SACA,MAAAg5B,EAAA,SAEA,IADAsD,EAAAjjC,EAAAyP,YAAA9iB,EAAAg6B,EAAAC,EAAAC,EAAA,IACA,SAAAoc,EAKA,GAJArc,GAAAqc,EACAC,GAAAD,EACAvD,EAAA,GAAAoD,EACApD,EAAA,GAAAqD,EACA93B,EAAAyF,IAAArU,EAAAP,MAAA,IAAAmP,EAAAyF,IAAArU,EAAAP,MAAA,GACA,IAAApoB,EAAA,EAAqBA,EAAAisD,IAAcjsD,EACnCgsD,EAAA,GAAAhsD,IAAA2oB,EAAAP,MACA,GAAAnP,EAAAmiB,eAAA4wB,EAAA,GAAAhsD,IAAA2oB,EAAAP,OAGA,GAAAmP,EAAAyF,IAAArU,EAAA6N,WAAA,IAAAe,EAAAyF,IAAArU,EAAA6N,WAAA,GACA,IAAAx2B,EAAA,EAAqBA,EAAAisD,IAAcjsD,EACnCgsD,EAAA,GAAAhsD,IAAA2oB,EAAA6N,WAGA,GAAAe,EAAAyF,IAAArU,EAAA8N,YAAA,IAAAc,EAAAyF,IAAArU,EAAA8N,YAAA,GACA,IAAAz2B,EAAA,EAAqBA,EAAAisD,IAAcjsD,EACnCgsD,EAAA,GAAAhsD,IAAA2oB,EAAA8N,YAGA,MAAA9N,EAAAnE,cAAA,GAAAvL,EAAAmiB,aACA,IAAAp7B,EAAA,EAAqBA,EAAAisD,IAAcjsD,EACnCgsD,EAAA,GAAAhsD,GAAA,IAAAgsD,EAAA,GAAAhsD,GAAAgsD,EAAA,GAAAhsD,IACAgsD,EAAA,GAAAhsD,GAAA,EAGAoqD,EAAAD,EAAAxhC,GACA0tB,EAAA,GAAAp9B,EAAAo9B,MAAA,GACAA,EAAA,GAAAp9B,EAAAo9B,MAAA,GAEA,IADA,IAAAgV,EAAA,EACAY,EAAA,IACA,IAAAwD,EAAA,YACAjF,EAAA,EACAC,EAAA,EACAgF,EAAA,GAAAzD,EAAA,GACAyD,EAAA,GAAAzD,EAAA,GACA,IAAA0D,EAAA,IAAAnF,EAIA,GAHAwB,EAAApjC,EAAA0tB,EAAAoZ,EAAApE,EAAAY,EAAAyD,GACAlF,EAAAkF,EAAAlF,KACAC,EAAAiF,EAAAjF,MACAxxC,EAAAyc,iBAAAzc,EAAAijB,mBAAAzE,EAAAvT,eAAAjL,EAAA8hB,OAAAsb,EAAA,GAAAp9B,EAAAy9B,QAAAL,EAAA,GAAAp9B,EAAAy9B,QAAA+T,EAAAxxC,EAAAmiB,eAAA7Z,EAAA0D,oBAAA,SAaA,GAZAgnC,GAAAzB,EACAa,GAAAb,EACAvxC,EAAAmiB,aAEAniB,EAAAy9B,SAAA+T,EAIAxxC,EAAAw9B,qBAAA,IACAx9B,EAAAw9B,qBAAA98B,EAAA0yC,SAAA1yC,EAAA2yC,WAEArzC,EAAAw9B,sBAAAgU,EACAxxC,EAAAy9B,SAAA0T,EAAA,CACA,IAAAuF,EAAAxc,EAAAqc,EAGA,GAFA,GAAArc,IAAAwc,EAAA,IACArF,EAAAD,EAAA1hC,EAAA0tB,EAAA,GAAAA,EAAA,GAAApD,EAAAC,EAAAyc,IACA,SAAArF,EAKA,IAJApX,GAAAoX,EACAkF,GAAAlF,EACArxC,EAAAy9B,SAAA/tB,EAAAiX,UACA3mB,EAAAw9B,sBAAA9tB,EAAAiX,UACAnhB,EAAA,EAAwBA,EAAAxF,EAAAmiB,aAAuB3c,IAC/C,IAAAze,EAAA,EAAyBA,EAAAiZ,EAAAy9B,QAAiB12C,IAC1Cq2C,EAAA53B,GAAAze,GAAAq2C,EAAA53B,GAAAze,EAAA2oB,EAAAiX,YAKA,OAAA4vB,EA5FAI,CAAAjnC,EAAAqjC,EAAA,GAAAA,EAAA,GAAAC,EAAAhZ,EAAAC,EAAAC,IAiOA,SAAA0c,IAGAtrD,KAAAgR,WAAA,SAAAu6C,EAAAC,KAKA,SAAAC,IAIAzrD,KAAAgR,WAAA,SAAA06C,EAAAC,EAAAC,KAMA,SAAAC,KACA,SAAAC,IAGA9rD,KAAAgR,WAAA,SAAA+6C,EAAAv4B,KAmEA,SAAAw4B,KACAhsD,KAAAisD,WAAA,EACAjsD,KAAAksD,QAAA,EACAlsD,KAAAmsD,SAAA,EACAnsD,KAAA5D,WAAA,EAEA,SAAAgwD,GAAAC,GACA,OAAAA,EAAAzwD,WAAA,OAAAywD,EAAAzwD,WAAA,OAAAywD,EAAAzwD,WAAA,MAAAywD,EAAAzwD,WAAA,GAn9LAqgC,EAAAC,OAAA,EAAA9mB,EAAAskB,QA2nDAtkB,EAAA0yC,SAAA,IASA1yC,EAAA2yC,UAAA,KAIA3yC,EAAA4yC,UAAA,GACA5yC,EAAAi5B,UAAA,IAAAj5B,EAAA4yC,UAGA5yC,EAAAk3C,SAAA,IAGAl3C,EAAA09B,QAAA,GAGA19B,EAAA4kB,OAAA,GAGA5kB,EAAAkF,QAAA,GACAlF,EAAAksB,QAAA,GAGAlsB,EAAAC,QAAA,GACAD,EAAAskB,QAAA,GACAtkB,EAAAwkB,OAAA,EACAxkB,EAAA0kB,OAAA,EAGA1kB,EAAA+kB,QAAA,KACA/kB,EAAAqjC,SAAArjC,EAAA+kB,QAAA,IACA/kB,EAAA+/B,UAAA,IACA//B,EAAAgoC,WAAAhoC,EAAA+/B,UAAA,IACA//B,EAAAwB,UAAA,EACAxB,EAAAopC,WAAA,EACAppC,EAAAuB,WAAA,EACAvB,EAAAmpC,UAAA,EAYAnpC,EAAAi7B,aAAA,EACAj7B,EAAAm3C,YAAA,EACAn3C,EAAAmnB,aAAA,EACAnnB,EAAAo3C,YAAA,EACAp3C,EAAA07B,QAAA,4FAudA9c,EAAA+d,OAAA,KAAA38B,EAAA0yC,SAAA1yC,EAAA4yC,UACAh0B,EAAAC,eAAA,IACAD,EAAA6L,qBAAA,KACA7L,EAAA4L,qBAAA,KACA5L,EAAA4e,IAAA,IAo0HAoZ,GAAAS,KAAAL,GAAA,QACAJ,GAAAU,KAAAN,GAAA,QACAJ,GAAAW,KAAAP,GAAA,QACAJ,GAAAroD,KAAAyoD,GAAA,QACAJ,GAAAY,WAAA,SAAAC,GACA,IAAA31C,EAAA,IAAA80C,GACAl4B,EAAA+4B,EAAAC,UAAA,MACA,GAAAd,GAAAS,MAAA34B,IAGA+4B,EAAAC,UAAA,MACAd,GAAAU,MAAAG,EAAAC,UAAA,OAGAd,GAAAW,MAAAE,EAAAC,UAAA,SAGA,IAAAC,EAAAF,EAAAC,UAAA,OACAzgC,EAAA,GACA,OAAA0gC,GACA,QACA,QACA71C,EAAAi1C,SAAAU,EAAAG,UAAA3gC,EAAA,MACAnV,EAAA9a,WAAAywD,EAAAC,UAAAzgC,EAAA,MACA,MACA,QACA,0CAEAA,GAAA0gC,EAGA,IAFA,IAAAppD,EAAAqoD,GAAAroD,KACAod,EAAA,EACApd,GAAAmwB,IACAA,EAAA+4B,EAAAC,UAAAzgC,GAAA,GACAtL,EAAA8rC,EAAAC,UAAAzgC,EAAA,MACA1oB,GAAAmwB,IAGAzH,GAAAtL,EAAA,EAIA,OAFA7J,EAAAg1C,QAAAnrC,EACA7J,EAAA+0C,WAAA5/B,EAAA,EACAnV,IAEA+kB,EAAAC,OAAA,EAAA9mB,EAAAskB,QACAnsB,EAAA0/C,WAnHA,SAAAd,EAAA5G,EAAAliC,GACA,GAAArnB,UAAAN,SACAwR,QAAAC,MAAA,8DACAg/C,EAAA,EACA5G,EAAA,MACAliC,EAAA,KAEA,IAAAU,EAAA,IAAA0C,EACAymC,EAAA,IAAA5B,EACAp4B,EAAA,IAAAlW,EACA+K,EAAA,IAAAiL,EACA1c,EAAA,IAAA+K,EACAzQ,EAAA,IAAAmD,EACAswC,EAAA,IAAAze,EACAvS,EAAA,IAAAzJ,EACAwJ,EAAA,IAAAljB,EACAo0C,EAAA,IAAAwH,EACAzvB,EAAA,IAAAvU,EACA8V,EAAA,IAAAjtB,EACAw8C,EAAA,IAAA1B,EACAt4B,EAAA,IAAA04B,EACA9nC,EAAA/S,WAAAkiB,EAAAnL,EAAAzR,EAAA1F,EAAAyzC,EAAAhxB,EAAAD,EAAAkxB,EAAAnxB,GACApL,EAAA/W,WAAAkiB,EAAAC,EAAAC,EAAAC,GACAixB,EAAAtzC,WAAA+W,EAAAqL,GACA9c,EAAAtF,WAAA+S,GACAsgC,EAAArzC,WAAA+W,EAAAsU,EAAAzrB,EAAAgtB,GACAhtB,EAAAI,WAAA4sB,EAAAvB,EAAAtY,EAAA6gC,IAAA/mB,KACAxB,EAAArrB,WAAA+W,GACA6V,EAAA5sB,WAAAJ,GACAyiB,EAAAriB,WAAA+S,EAAAgE,EAAAqL,GACA85B,EAAAl8C,WAAAm8C,EAAAh6B,GACAg6B,EAAAn8C,WAAAoiB,EAAAkxB,EAAAhuC,GACA,IAAA8N,EAAAL,EAAA8jC,YACAzjC,EAAAnE,aAAAksC,EACA/nC,EAAA0N,cAAAyzB,EACAnhC,EAAAgC,MAAA/C,EACAe,EAAAgH,KAAApb,EAAAyhB,OACArN,EAAA0L,QAAA,EACA1L,EAAA+J,cAAA,EACA/J,EAAAiC,mBAAA,EACAjC,EAAAoW,wBAAA,EACAzW,EAAAwkC,iBAAAnkC,GAAA,IACAgpC,EAAA,KACAxe,EAAA,OAAAwe,EAAA,KACA1e,EAAAlhC,EAAAohC,GACA5uC,KAAAqtD,aAAA,SAAAC,EAAAC,GACA,GAAApB,IACAoB,EAAAD,GAEAA,EAAA5xD,OAAA0xD,IACAA,EAAAE,EAAA5xD,OAEAgzC,EAAAlhC,EADAohC,EAAA,OAAAwe,EAAA,OAGA,IAAAI,EAAAzpC,EAAA4mC,mBAAAvmC,EAAAkpC,EAAAC,EAAAD,EAAA5xD,OAAAgzC,EAAA,EAAAE,GACA,WAAAlhC,UAAAghC,EAAA+e,SAAA,EAAAD,KAEAxtD,KAAA0tD,MAAA,WACA,IAAAF,EAAAzpC,EAAAimC,kBAAA5lC,EAAAsqB,EAAA,EAAAE,GACA,WAAAlhC,UAAAghC,EAAA+e,SAAA,EAAAD,MAyDAjgD,EAAAy+C,aAEAz+C,IACA,IAAAogD,EAEAC,EACAC,EACAhoD,EACAioD,EACAC,EACAC,EAAA,WACAF,EAAA,IAEAG,EAAA,SAAAC,GACAJ,EAAAlqD,KAAA,IAAA8J,UAAAwgD,KAqDAhuD,KAAA8F,UAAA,SAAAhC,GACA,OAAAA,EAAAL,KAAAiC,KACA,WArDAuoD,EAsDAnqD,EAAAL,KAAAkC,OArDAA,EAAAsoD,GAAA,GACAH,IAqDA,MACA,cApDA,SAAAI,GAEA,GADAR,EAAArgD,EAAAy+C,UAAAY,WAAA,IAAAhwD,SAAAwxD,IACA,CAOA,IAAAvB,EAAA,IAAAj/C,WAAAwgD,EAAAR,EAAA3B,WAAA2B,EAAA1B,QAAA,GAGA,GAFA2B,EAAA,IAAAD,EAAAzB,SAAAU,EAAA,IAAAj/C,WAAAggD,EAAA1B,SAAA,EAAA0B,EAAAzB,WACA4B,EAAA,IAAAH,EAAAzB,SAAA,IAAAv+C,WAAAggD,EAAA1B,SAAA,EAAA0B,EAAAzB,gBAAAlwD,EACA2xD,EAAAzB,SAAA,EACA,QAAA1wD,EAAA,EAAqBA,EAAAoyD,EAAAnyD,OAAwBD,IAC7CoyD,EAAApyD,GAAAoxD,EAAA,EAAApxD,GACAsyD,EAAAtyD,GAAAoxD,EAAA,EAAApxD,EAAA,GAGAkyD,EAAA,IAAApgD,EAAA0/C,WAAAW,EAAAzB,SAAAyB,EAAAxxD,WAAAyJ,EAAAC,SAAA,IACA,IAAA8L,EAAAi8C,EAAAnyD,OACA,IAAAD,EAAA,EAAmBmW,GApCnB,KAoC4CnW,GApC5C,KAoC4C,CAC5C,IACA8xD,EADAD,EAAAO,EAAAJ,SAAAhyD,IArCA,MAuCAsyD,IACAR,EAAAQ,EAAAN,SAAAhyD,IAxCA,OA0CA,IAAAizC,EAAAif,EAAAN,aAAAC,EAAAC,GACAU,EAAAvf,GACA98B,GA5CA,KA6CA1R,KAAAyF,YAAA,CACAC,IAAA,WACAyoD,SAAA,EAAAz8C,EAAAi8C,EAAAnyD,eA5BAwE,KAAAyF,YAAA,CACAC,IAAA,QACA0oD,IAAA,sCAgDAC,CAAAvqD,EAAAL,KAAAoC,UACA,MACA,cApBA,WACA,GAAA6nD,EAAA,CAGA,IAAAlf,EAAAif,EAAAD,QACAO,EAAAvf,GACAxuC,KAAAyF,YAAA,CACAC,IAAA,MACAM,IAAA4nD,IAEAE,KAWAQ,GA5DA,IAAAL,IAiEAM,WACAnhD,IAAAohD,UAAAphD,EAAAqhD,QAAA,KAAqC,EAAArhD,EAAAshD,YAAA,MACrC,IAAAC,EAAA,IAAA1pD,KAAA,CAAAmI,GAAA,CACAvI,KAAA,2BAEA+pD,EAAAC,IAAAC,gBAAAH,GACA3zD,EAAAC,QAAA2zD,gCCx4Ue,SAAAG,EAAA/uB,GAIf,OAHA+uB,EAAAvwD,OAAAsE,eAAAtE,OAAA6B,eAAA,SAAA2/B,GACA,OAAAA,EAAA5/B,WAAA5B,OAAA6B,eAAA2/B,KAEAA,GCJe,SAAAgvB,EAAAC,GAaf,OATAD,EADA,oBAAAE,QAAA,kBAAAA,OAAAC,SACA,SAAAF,GACA,cAAAA,GAGA,SAAAA,GACA,OAAAA,GAAA,oBAAAC,QAAAD,EAAArsD,cAAAssD,QAAAD,IAAAC,OAAApwD,UAAA,gBAAAmwD,IAIAA,GCXe,SAAA9uD,EAAAH,EAAAC,GACf,OAAAA,GAAsB,WAAP+uD,EAAO/uD,IAAA,oBAAAA,ECHP,SAAAD,GACf,YAAAA,EACA,UAAAE,eAAA,6DAGA,OAAAF,EDESovD,CAAqBpvD,GAH9BC,EEDe,SAAAovD,EAAAC,GACf,kBACA,IACA5xD,EADA6xD,EAAgBR,EAAcO,GAG9B,GCRe,WACf,wBAAAE,kBAAAC,UAAA,SACA,GAAAD,QAAAC,UAAAC,KAAA,SACA,uBAAAC,MAAA,SAEA,IAEA,OADAC,KAAA9wD,UAAAyvD,SAAAtuD,KAAAuvD,QAAAC,UAAAG,KAAA,mBACA,EACG,MAAA9rD,GACH,UDDQ+rD,GAAwB,CAChC,IAAAC,EAAsBf,EAAcjvD,MAAA8C,YACpClF,EAAA8xD,QAAAC,UAAAF,EAAAzzD,UAAAg0D,QAEApyD,EAAA6xD,EAAAtoD,MAAAnH,KAAAhE,WAGA,OAAWqE,EAAyBL,KAAApC,IAfpCxC,EAAAgS,EAAA9B,EAAA,sBAAAikD,kCEAe,SAAAU,EAAA/vB,EAAA5pB,GAMf,OALA25C,EAAAvxD,OAAAsE,gBAAA,SAAAk9B,EAAA5pB,GAEA,OADA4pB,EAAA5/B,UAAAgW,EACA4pB,IAGAA,EAAA5pB,GCLe,SAAArT,EAAAN,EAAAC,GACf,uBAAAA,GAAA,OAAAA,EACA,UAAA9C,UAAA,sDAGA6C,EAAA3D,UAAAN,OAAAmE,OAAAD,KAAA5D,UAAA,CACA8D,YAAA,CACAC,MAAAJ,EACAlE,UAAA,EACAD,cAAA,KAGAoE,GAAkBqtD,EAActtD,EAAAC,GAbhCxH,EAAAgS,EAAA9B,EAAA,sBAAArI,mCCWA,IAAAgW,EAAQ7d,EAAQ,GAChB8Q,EAAA,oBAAAkjD,eAAAc,IACA55C,EAAApK,EAAAkjD,OAAAc,IAAA,uBACAxrC,EAAAxY,EAAAkjD,OAAAc,IAAA,sBACAlqC,EAAA9Z,EAAAkjD,OAAAc,IAAA,wBACAr8C,EAAA3H,EAAAkjD,OAAAc,IAAA,2BACA/vB,EAAAj0B,EAAAkjD,OAAAc,IAAA,wBACArmC,EAAA3d,EAAAkjD,OAAAc,IAAA,wBACAh5C,EAAAhL,EAAAkjD,OAAAc,IAAA,uBACAjoD,EAAAiE,EAAAkjD,OAAAc,IAAA,+BACAhoD,EAAAgE,EAAAkjD,OAAAc,IAAA,2BACAC,EAAAjkD,EAAAkjD,OAAAc,IAAA,wBACAE,EAAAlkD,EAAAkjD,OAAAc,IAAA,oBACAG,EAAAnkD,EAAAkjD,OAAAc,IAAA,oBACA7hD,EAAA,oBAAA+gD,eAAAC,SAgBA,SAAA3vC,EAAAhgB,GACA,QAAAoR,EAAA9U,UAAAN,OAAA,EAAA0R,EAAA,yDAAA1N,EAAAob,EAAA,EAA6GA,EAAAhK,EAAOgK,IAAA1N,GAAA,WAAAkjD,mBAAAt0D,UAAA8e,EAAA,KAhBpH,SAAApb,EAAAoR,EAAA1D,EAAA0N,EAAA9W,EAAAusD,EAAA17B,EAAA4J,GACA,IAAA/+B,EAAA,CAEA,GADAA,OAAA,OACA,IAAAoR,EAAApR,EAAAmF,MAAA,qIAAiK,CACjK,IAAAuM,EAAA,CAAAhE,EAAA0N,EAAA9W,EAAAusD,EAAA17B,EAAA4J,GACAkc,EAAA,GACAj7C,EAAAmF,MAAAiM,EAAA0/C,QAAA,iBACA,OAAAp/C,EAAAupC,SAEA8V,KAAA,sBAGA,MADA/wD,EAAAgxD,YAAA,EACAhxD,GAKAyrC,EAAA,2BAAAzrC,EAAA,4HAA0C0N,GAE1C,IAAAujD,EAAA,CACAC,UAAA,WACA,UAEAC,mBAAA,aACAC,oBAAA,aACAC,gBAAA,cAEAC,EAAA,GACA,SAAAC,EAAAvxD,EAAAoR,EAAA1D,GACApN,KAAA3B,MAAAqB,EACAM,KAAAkxD,QAAApgD,EACA9Q,KAAAmxD,KAAAH,EACAhxD,KAAAoxD,QAAAhkD,GAAAujD,EAUA,SAAAU,KAEA,SAAAC,EAAA5xD,EAAAoR,EAAA1D,GACApN,KAAA3B,MAAAqB,EACAM,KAAAkxD,QAAApgD,EACA9Q,KAAAmxD,KAAAH,EACAhxD,KAAAoxD,QAAAhkD,GAAAujD,EAdAM,EAAAjyD,UAAAuyD,iBAAA,GACAN,EAAAjyD,UAAAwyD,SAAA,SAAA9xD,EAAAoR,GACA,kBAAApR,GAAA,oBAAAA,GAAA,MAAAA,GAAAggB,EAAA,MACA1f,KAAAoxD,QAAAL,gBAAA/wD,KAAAN,EAAAoR,EAAA,aAEAmgD,EAAAjyD,UAAAyyD,YAAA,SAAA/xD,GACAM,KAAAoxD,QAAAP,mBAAA7wD,KAAAN,EAAA,gBAGA2xD,EAAAryD,UAAAiyD,EAAAjyD,UAOA,IAAA0yD,EAAAJ,EAAAtyD,UAAA,IAAAqyD,EACAK,EAAA5uD,YAAAwuD,EACAr4C,EAAAy4C,EAAAT,EAAAjyD,WACA0yD,EAAAC,sBAAA,EACA,IAAAC,EAAA,CACAhpD,QAAA,MAEAipD,EAAA,CACAjpD,QAAA,MAEAkpD,EAAApzD,OAAAM,UAAAwM,eACAumD,EAAA,CACAnzD,KAAA,EACA6K,KAAA,EACAuoD,QAAA,EACAC,UAAA,GAEA,SAAAC,EAAAxyD,EAAAoR,EAAA1D,GACA,IAAA0N,OAAA,EACA9W,EAAA,GACAusD,EAAA,KACA17B,EAAA,KACA,SAAA/jB,EAAA,IAAAgK,UAAA,IAAAhK,EAAArH,MAAAorB,EAAA/jB,EAAArH,UAAA,IAAAqH,EAAAlS,MAAA2xD,EAAA,GAAAz/C,EAAAlS,KAAAkS,EAAAghD,EAAA3xD,KAAA2Q,EAAAgK,KAAAi3C,EAAAvmD,eAAAsP,KAAA9W,EAAA8W,GAAAhK,EAAAgK,IACA,IAAA2jB,EAAAziC,UAAAN,OAAA,EACA,OAAA+iC,EAAAz6B,EAAAyG,SAAA2C,OAA8B,KAAAqxB,EAAA,CAC9B,QAAArtB,EAAAnK,MAAAw3B,GAAAkc,EAAA,EAAiCA,EAAAlc,EAAOkc,IAAAvpC,EAAAupC,GAAA3+C,UAAA2+C,EAAA,GACxC32C,EAAAyG,SAAA2G,EAEA,GAAA1R,KAAAqL,aAAA,IAAA+P,KAAA2jB,EAAA/+B,EAAAqL,kBAAA,IAAA/G,EAAA8W,KAAA9W,EAAA8W,GAAA2jB,EAAA3jB,IACA,OACAq3C,SAAA77C,EACAvR,KAAArF,EACAd,IAAA2xD,EACA9mD,IAAAorB,EACAx2B,MAAA2F,EACAouD,OAAAP,EAAAjpD,SAaA,SAAAypD,EAAA3yD,GACA,wBAAAA,GAAA,OAAAA,KAAAyyD,WAAA77C,EAWA,IAAAg8C,EAAA,OACAC,EAAA,GACA,SAAAC,EAAA9yD,EAAAoR,EAAA1D,EAAA0N,GACA,GAAAy3C,EAAA72D,OAAA,CACA,IAAAsI,EAAAuuD,EAAAE,MAMA,OALAzuD,EAAApG,OAAA8B,EACAsE,EAAA0uD,UAAA5hD,EACA9M,EAAAoH,KAAAgC,EACApJ,EAAAktD,QAAAp2C,EACA9W,EAAAyJ,MAAA,EACAzJ,EAEA,OACApG,OAAA8B,EACAgzD,UAAA5hD,EACA1F,KAAAgC,EACA8jD,QAAAp2C,EACArN,MAAA,GAGA,SAAAklD,EAAAjzD,GACAA,EAAA9B,OAAA,KACA8B,EAAAgzD,UAAA,KACAhzD,EAAA0L,KAAA,KACA1L,EAAAwxD,QAAA,KACAxxD,EAAA+N,MAAA,EACA,GAAA8kD,EAAA72D,QAAA62D,EAAA3uD,KAAAlE,GA4BA,SAAAkzD,EAAAlzD,EAAAoR,EAAA1D,GACA,aAAA1N,EAAA,EA3BA,SAAAmzD,EAAAnzD,EAAAoR,EAAA1D,EAAA0N,GACA,IAAA9W,SAAAtE,EACA,cAAAsE,GAAA,YAAAA,IAAAtE,EAAA,MACA,IAAA6wD,GAAA,EACA,UAAA7wD,EAAA6wD,GAAA,OAAyB,OAAAvsD,GACzB,aACA,aACAusD,GAAA,EACA,MACA,aACA,OAAA7wD,EAAAyyD,UACA,KAAA77C,EACA,KAAAoO,EACA6rC,GAAA,GAGA,GAAAA,EAAA,OAAAnjD,EAAA0N,EAAApb,EAAA,KAAAoR,EAAA,IAAAgiD,EAAApzD,EAAA,GAAAoR,GAAA,EAGA,GAFAy/C,EAAA,EACAz/C,EAAA,KAAAA,EAAA,IAAAA,EAAA,IACA7J,MAAA8rD,QAAArzD,GAAA,QAAAm1B,EAAA,EAAuCA,EAAAn1B,EAAAhE,OAAcm5B,IAAA,CAErD,IAAA4J,EAAA3tB,EAAAgiD,EADA9uD,EAAAtE,EAAAm1B,GACAA,GACA07B,GAAAsC,EAAA7uD,EAAAy6B,EAAArxB,EAAA0N,QACG,GAAA2jB,EAAA,OAAA/+B,GAAA,kBAAAA,EAAA,yBAAA++B,EAAApwB,GAAA3O,EAAA2O,IAAA3O,EAAA,eAAA++B,EAAA,yBAAAA,EAAA,IAAA/+B,EAAA++B,EAAAt+B,KAAAT,GAAAm1B,EAAA,IAA0L7wB,EAAAtE,EAAAszD,QAAAC,MAAsB1C,GAAAsC,EAAA7uD,IAAAjB,MAAA07B,EAAA3tB,EAAAgiD,EAAA9uD,EAAA6wB,KAAAznB,EAAA0N,OAAqD,WAAA9W,GAAA0b,EAAA,0BAAAtS,EAAA,GAAA1N,GAAA,qBAAyFhB,OAAA8N,KAAA9M,GAAAyM,KAAA,UAAkCiB,EAAA,IACnY,OAAAmjD,EAGAsC,CAAAnzD,EAAA,GAAAoR,EAAA1D,GAEA,SAAA0lD,EAAApzD,EAAAoR,GACA,wBAAApR,GAAA,OAAAA,GAAA,MAAAA,EAAAd,IAnEA,SAAAc,GACA,IAAAoR,EAAA,CACAoiD,IAAA,KACAC,IAAA,MAEA,cAAAzzD,GAAA8wD,QAAA,iBAAA9wD,GACA,OAAAoR,EAAApR,KA6DA0zD,CAAA1zD,EAAAd,KAAAkS,EAAA29C,SAAA,IAEA,SAAA4E,EAAA3zD,EAAAoR,GACApR,EAAA0L,KAAAjL,KAAAT,EAAAwxD,QAAApgD,EAAApR,EAAA+N,SAEA,SAAA6lD,EAAA5zD,EAAAoR,EAAA1D,GACA,IAAA0N,EAAApb,EAAA9B,OACAoG,EAAAtE,EAAAgzD,UACAhzD,IAAA0L,KAAAjL,KAAAT,EAAAwxD,QAAApgD,EAAApR,EAAA+N,SACAxG,MAAA8rD,QAAArzD,GAAA6zD,EAAA7zD,EAAAob,EAAA1N,EAAA,SAAA1N,GACA,OAAAA,IACG,MAAAA,IAAA2yD,EAAA3yD,OA3FH,SAAAA,EAAAoR,GACA,OACAqhD,SAAA77C,EACAvR,KAAArF,EAAAqF,KACAnG,IAAAkS,EACArH,IAAA/J,EAAA+J,IACApL,MAAAqB,EAAArB,MACA+zD,OAAA1yD,EAAA0yD,QAoFGoB,CAAA9zD,EAAAsE,IAAAtE,EAAAd,KAAAkS,KAAAlS,MAAAc,EAAAd,IAAA,OAAAc,EAAAd,KAAA4xD,QAAA8B,EAAA,YAAAllD,IAAA0N,EAAAlX,KAAAlE,IAEH,SAAA6zD,EAAA7zD,EAAAoR,EAAA1D,EAAA0N,EAAA9W,GACA,IAAAusD,EAAA,GACA,MAAAnjD,IAAAmjD,GAAA,GAAAnjD,GAAAojD,QAAA8B,EAAA,YAEAM,EAAAlzD,EAAA4zD,EADAxiD,EAAA0hD,EAAA1hD,EAAAy/C,EAAAz1C,EAAA9W,IAEA2uD,EAAA7hD,GAEA,SAAA2iD,IACA,IAAA/zD,EAAAkyD,EAAAhpD,QAEA,OADA,OAAAlJ,GAAAggB,EAAA,OACAhgB,EAEA,IAAAg0D,EAAA,CACAC,SAAA,CACA1nD,IAAA,SAAAvM,EAAAoR,EAAA1D,GACA,SAAA1N,EAAA,OAAAA,EACA,IAAAob,EAAA,GAEA,OADAy4C,EAAA7zD,EAAAob,EAAA,KAAAhK,EAAA1D,GACA0N,GAEAxO,QAAA,SAAA5M,EAAAoR,EAAA1D,GACA,SAAA1N,EAAA,OAAAA,EAEAkzD,EAAAlzD,EAAA2zD,EADAviD,EAAA0hD,EAAA,UAAA1hD,EAAA1D,IAEAulD,EAAA7hD,IAEArD,MAAA,SAAA/N,GACA,OAAAkzD,EAAAlzD,EAAA,WACA,aACS,OAETk0D,QAAA,SAAAl0D,GACA,IAAAoR,EAAA,GAIA,OAHAyiD,EAAA7zD,EAAAoR,EAAA,cAAApR,GACA,OAAAA,IAEAoR,GAEA+iD,KAAA,SAAAn0D,GAEA,OADA2yD,EAAA3yD,IAAAggB,EAAA,OACAhgB,IAGAiK,UAAA,WACA,OACAf,QAAA,OAGAkrD,UAAA7C,EACA8C,cAAAzC,EACA0C,cAAA,SAAAt0D,EAAAoR,GAeA,YAdA,IAAAA,MAAA,OACApR,EAAA,CACAyyD,SAAAj7C,EACA+8C,sBAAAnjD,EACAojD,cAAAx0D,EACAy0D,eAAAz0D,EACA00D,aAAA,EACAC,SAAA,KACAC,SAAA,OAEAD,SAAA,CACAlC,SAAAtoC,EACA0qC,SAAA70D,GAEAA,EAAA40D,SAAA50D,GAEA80D,WAAA,SAAA90D,GACA,OACAyyD,SAAAjqD,EACAusD,OAAA/0D,IAGAg1D,KAAA,SAAAh1D,GACA,OACAyyD,SAAA9B,EACAsE,MAAAj1D,EACAk1D,SAAA,EACAC,QAAA,OAGAC,KAAA,SAAAp1D,EAAAoR,GACA,OACAqhD,SAAA/B,EACArrD,KAAArF,EACAq1D,aAAA,IAAAjkD,EAAA,KAAAA,IAGAkkD,YAAA,SAAAt1D,EAAAoR,GACA,OAAA2iD,IAAAuB,YAAAt1D,EAAAoR,IAEAmkD,WAAA,SAAAv1D,EAAAoR,GACA,OAAA2iD,IAAAwB,WAAAv1D,EAAAoR,IAEAokD,UAAA,SAAAx1D,EAAAoR,GACA,OAAA2iD,IAAAyB,UAAAx1D,EAAAoR,IAEAqkD,oBAAA,SAAAz1D,EAAAoR,EAAA1D,GACA,OAAAqmD,IAAA0B,oBAAAz1D,EAAAoR,EAAA1D,IAEAgoD,cAAA,aACAC,gBAAA,SAAA31D,EAAAoR,GACA,OAAA2iD,IAAA4B,gBAAA31D,EAAAoR,IAEAwkD,QAAA,SAAA51D,EAAAoR,GACA,OAAA2iD,IAAA6B,QAAA51D,EAAAoR,IAEAykD,WAAA,SAAA71D,EAAAoR,EAAA1D,GACA,OAAAqmD,IAAA8B,WAAA71D,EAAAoR,EAAA1D,IAEAooD,OAAA,SAAA91D,GACA,OAAA+zD,IAAA+B,OAAA91D,IAEA+1D,SAAA,SAAA/1D,GACA,OAAA+zD,IAAAgC,SAAA/1D,IAEAg2D,SAAA1vC,EACA2vC,WAAA9hD,EACA+hD,SAAAzF,EACA3mD,cAAA0oD,EACA2D,aAAA,SAAAn2D,EAAAoR,EAAA1D,IACA,OAAA1N,QAAA,IAAAA,IAAAggB,EAAA,MAAAhgB,GACA,IAAAob,OAAA,EACA9W,EAAAiV,EAAA,GAAgBvZ,EAAArB,OAChBkyD,EAAA7wD,EAAAd,IACAi2B,EAAAn1B,EAAA+J,IACAg1B,EAAA/+B,EAAA0yD,OACA,SAAAthD,EAAA,MACA,IAAAA,EAAArH,MAAAorB,EAAA/jB,EAAArH,IAAAg1B,EAAAozB,EAAAjpD,cACA,IAAAkI,EAAAlS,MAAA2xD,EAAA,GAAAz/C,EAAAlS,KACA,IAAAwS,OAAA,EAEA,IAAA0J,KADApb,EAAAqF,MAAArF,EAAAqF,KAAAgG,eAAAqG,EAAA1R,EAAAqF,KAAAgG,cACA+F,EAAAghD,EAAA3xD,KAAA2Q,EAAAgK,KAAAi3C,EAAAvmD,eAAAsP,KAAA9W,EAAA8W,QAAA,IAAAhK,EAAAgK,SAAA,IAAA1J,IAAA0J,GAAAhK,EAAAgK,IAGA,QADAA,EAAA9e,UAAAN,OAAA,GACAsI,EAAAyG,SAAA2C,OAAkC,KAAA0N,EAAA,CAClC1J,EAAAnK,MAAA6T,GACA,QAAA6/B,EAAA,EAAuBA,EAAA7/B,EAAO6/B,IAAAvpC,EAAAupC,GAAA3+C,UAAA2+C,EAAA,GAC9B32C,EAAAyG,SAAA2G,EAEA,OACA+gD,SAAA77C,EACAvR,KAAArF,EAAAqF,KACAnG,IAAA2xD,EACA9mD,IAAAorB,EACAx2B,MAAA2F,EACAouD,OAAA3zB,IAGAq3B,cAAA,SAAAp2D,GACA,IAAAoR,EAAAohD,EAAA6D,KAAA,KAAAr2D,GAEA,OADAoR,EAAA/L,KAAArF,EACAoR,GAEAklD,eAAA3D,EACAtnC,QAAA,SACAkrC,wBAAAhuD,EACAiuD,kBAAA/1B,EACAg2B,mDAAA,CACAC,uBAAAxE,EACAyE,kBAAAxE,EACAlmD,OAAAsN,IAGAq9C,EAAA,CACAC,QAAA7C,GAEA8C,EAAAF,GAAA5C,GAAA4C,EACAp7D,EAAAC,QAAAq7D,EAAAD,SAAAC,gCCzWA,IAAApG,EAASh1D,EAAQ,GACjB8Q,EAAM9Q,EAAQ,GACd4qB,EAAM5qB,EAAQ,IAgBd,SAAA6M,EAAAvI,GACA,QAAAoR,EAAA9U,UAAAN,OAAA,EAAAof,EAAA,yDAAApb,EAAA0N,EAAA,EAA6GA,EAAA0D,EAAO1D,IAAA0N,GAAA,WAAAw1C,mBAAAt0D,UAAAoR,EAAA,KAhBpH,SAAA1N,EAAAoR,EAAAgK,EAAA1N,EAAApJ,EAAAy6B,EAAA8xB,EAAA17B,GACA,IAAAn1B,EAAA,CAEA,GADAA,OAAA,OACA,IAAAoR,EAAApR,EAAAmF,MAAA,qIAAiK,CACjK,IAAAuM,EAAA,CAAA0J,EAAA1N,EAAApJ,EAAAy6B,EAAA8xB,EAAA17B,GACA5b,EAAA,GACAvZ,EAAAmF,MAAAiM,EAAA0/C,QAAA,iBACA,OAAAp/C,EAAA6H,SAEAw3C,KAAA,sBAGA,MADA/wD,EAAAgxD,YAAA,EACAhxD,GAKA2wD,EAAA,2BAAA3wD,EAAA,4HAA0Cob,GAE1Cs1C,GAAAnoD,EAAA,OASA,IAAAurD,GAAA,EACAH,EAAA,KACAC,GAAA,EACAmD,EAAA,KACAC,EAAA,CACAC,QAAA,SAAAj3D,GACA8zD,GAAA,EACAH,EAAA3zD,IAGA,SAAAk3D,EAAAl3D,EAAAoR,EAAAgK,EAAA1N,EAAApJ,EAAAy6B,EAAA8xB,EAAA17B,EAAAzjB,GACAoiD,GAAA,EACAH,EAAA,KApBA,SAAA3zD,EAAAoR,EAAAgK,EAAA1N,EAAApJ,EAAAy6B,EAAA8xB,EAAA17B,EAAAzjB,GACA,IAAA6H,EAAAhS,MAAAjI,UAAAoP,MAAAjO,KAAAnE,UAAA,GACA,IACA8U,EAAA3J,MAAA2T,EAAA7B,GACG,MAAA0hC,GACH36C,KAAA22D,QAAAhc,KAgBAxzC,MAAAuvD,EAAA16D,WAaA,IAAA66D,EAAA,KACAC,EAAA,GACA,SAAAC,IACA,GAAAF,EAAA,QAAAn3D,KAAAo3D,EAAA,CACA,IAAAhmD,EAAAgmD,EAAAp3D,GACAob,EAAA+7C,EAAAlI,QAAAjvD,GAEA,IADA,EAAAob,GAAA7S,EAAA,KAAAvI,IACAs3D,EAAAl8C,GAIA,QAAA1N,KAHA0D,EAAAmmD,eAAAhvD,EAAA,KAAAvI,GACAs3D,EAAAl8C,GAAAhK,EACAgK,EAAAhK,EAAAomD,WACA,CACA,IAAAlzD,OAAA,EACAy6B,EAAA3jB,EAAA1N,GACAmjD,EAAAz/C,EACA+jB,EAAAznB,EACA+pD,EAAA3rD,eAAAqpB,IAAA5sB,EAAA,KAAA4sB,GACAsiC,EAAAtiC,GAAA4J,EACA,IAAArtB,EAAAqtB,EAAA24B,wBACA,GAAAhmD,EAAA,CACA,IAAApN,KAAAoN,IAAA5F,eAAAxH,IAAAqzD,EAAAjmD,EAAApN,GAAAusD,EAAA17B,GACA7wB,GAAA,OACSy6B,EAAA64B,kBAAAD,EAAA54B,EAAA64B,iBAAA/G,EAAA17B,GAAA7wB,GAAA,GAAAA,GAAA,EACTA,GAAAiE,EAAA,KAAAmF,EAAA1N,KAKA,SAAA23D,EAAA33D,EAAAoR,EAAAgK,GACAy8C,EAAA73D,IAAAuI,EAAA,MAAAvI,GACA63D,EAAA73D,GAAAoR,EACA0mD,EAAA93D,GAAAoR,EAAAomD,WAAAp8C,GAAA28C,aAEA,IAAAT,EAAA,GACAG,EAAA,GACAI,EAAA,GACAC,EAAA,GACAE,EAAA,KACAC,EAAA,KACAC,EAAA,KACA,SAAAC,EAAAn4D,EAAAoR,EAAAgK,GACA,IAAA1N,EAAA1N,EAAAqF,MAAA,gBACArF,EAAAo4D,cAAAF,EAAA98C,GArDA,SAAApb,EAAAoR,EAAAgK,EAAA1N,EAAApJ,EAAAy6B,EAAA8xB,EAAA17B,EAAAzjB,GAEA,GADAwlD,EAAAzvD,MAAAnH,KAAAhE,WACAw3D,EAAA,CACA,GAAAA,EAAA,CACA,IAAAv6C,EAAAo6C,EACAG,GAAA,EACAH,EAAA,UACKprD,EAAA,OAAAgR,OAAA,EACLq6C,OAAA,EAAAmD,EAAAx9C,IA8CA8+C,CAAA3qD,EAAA0D,OAAA,EAAApR,GACAA,EAAAo4D,cAAA,KAEA,SAAAh3B,EAAAphC,EAAAoR,GAEA,OADA,MAAAA,GAAA7I,EAAA,MACA,MAAAvI,EAAAoR,EACA7J,MAAA8rD,QAAArzD,GACAuH,MAAA8rD,QAAAjiD,IAAApR,EAAAkE,KAAAuD,MAAAzH,EAAAoR,GAAApR,IACAA,EAAAkE,KAAAkN,GACApR,GAEAuH,MAAA8rD,QAAAjiD,GAAA,CAAApR,GAAA0H,OAAA0J,GAAA,CAAApR,EAAAoR,GAEA,SAAAknD,EAAAt4D,EAAAoR,EAAAgK,GACA7T,MAAA8rD,QAAArzD,KAAA4M,QAAAwE,EAAAgK,GAAApb,GAAAoR,EAAA3Q,KAAA2a,EAAApb,GAEA,IAAAu4D,EAAA,KACA,SAAAC,EAAAx4D,GACA,GAAAA,EAAA,CACA,IAAAoR,EAAApR,EAAAy4D,mBACAr9C,EAAApb,EAAA04D,mBACA,GAAAnxD,MAAA8rD,QAAAjiD,GAAA,QAAA1D,EAAA,EAAyCA,EAAA0D,EAAApV,SAAAgE,EAAA24D,uBAA2CjrD,IAAAyqD,EAAAn4D,EAAAoR,EAAA1D,GAAA0N,EAAA1N,SAAwB0D,GAAA+mD,EAAAn4D,EAAAoR,EAAAgK,GAC5Gpb,EAAAy4D,mBAAA,KACAz4D,EAAA04D,mBAAA,KACA14D,EAAA44D,gBAAA54D,EAAAoD,YAAAy1D,QAAA74D,IAGA,IAAA84D,EAAA,CACAC,uBAAA,SAAA/4D,GACAm3D,GAAA5uD,EAAA,OACA4uD,EAAA5vD,MAAAjI,UAAAoP,MAAAjO,KAAAT,GACAq3D,KAEA2B,yBAAA,SAAAh5D,GACA,IACAob,EADAhK,GAAA,EAEA,IAAAgK,KAAApb,EAAA,GAAAA,EAAA8L,eAAAsP,GAAA,CACA,IAAA1N,EAAA1N,EAAAob,GACAg8C,EAAAtrD,eAAAsP,IAAAg8C,EAAAh8C,KAAA1N,IAAA0pD,EAAAh8C,IAAA7S,EAAA,MAAA6S,GAAAg8C,EAAAh8C,GAAA1N,EAAA0D,GAAA,GAEAA,GAAAimD,MAGA,SAAA4B,EAAAj5D,EAAAoR,GACA,IAAAgK,EAAApb,EAAAk5D,UACA,IAAA99C,EAAA,YACA,IAAA1N,EAAAsqD,EAAA58C,GACA,IAAA1N,EAAA,YACA0N,EAAA1N,EAAA0D,GACApR,EAAA,OAAAoR,GACA,cACA,qBACA,oBACA,2BACA,kBACA,yBACA,kBACA,yBACA,gBACA,wBACA1D,KAAAyrD,YAAAzrD,IAAA,YAAA1N,IAAAqF,OAAA,UAAArF,GAAA,WAAAA,GAAA,aAAAA,IACAA,GAAA0N,EACA,MAAA1N,EACA,QACAA,GAAA,EAEA,OAAAA,EAAA,MACAob,GAAA,oBAAAA,GAAA7S,EAAA,MAAA6I,SAAAgK,GACAA,GAEA,SAAAg+C,EAAAp5D,GAIA,GAHA,OAAAA,IAAAu4D,EAAAn3B,EAAAm3B,EAAAv4D,IACAA,EAAAu4D,EACAA,EAAA,KACAv4D,IAAAs4D,EAAAt4D,EAAAw4D,GAAAD,GAAAhwD,EAAA,MAAAqrD,GAAA,MAAA5zD,EAAA+2D,EAAAnD,GAAA,EAAAmD,EAAA,KAAA/2D,EAEA,IAAAq5D,EAAA77D,KAAA87D,SAAAvK,SAAA,IAAArgD,MAAA,GACA6qD,EAAA,2BAAAF,EACAG,EAAA,wBAAAH,EACA,SAAAI,EAAAz5D,GACA,GAAAA,EAAAu5D,GAAA,OAAAv5D,EAAAu5D,GACA,MAAQv5D,EAAAu5D,IAAQ,KAAAv5D,EAAA05D,WAAqC,YAArC15D,IAAA05D,WAEhB,YADA15D,IAAAu5D,IACAI,KAAA,IAAA35D,EAAA25D,IAAA35D,EAAA,KAEA,SAAA45D,EAAA55D,GAEA,QADAA,IAAAu5D,KACA,IAAAv5D,EAAA25D,KAAA,IAAA35D,EAAA25D,IAAA,KAAA35D,EAEA,SAAA65D,EAAA75D,GACA,OAAAA,EAAA25D,KAAA,IAAA35D,EAAA25D,IAAA,OAAA35D,EAAAk5D,UACA3wD,EAAA,MAEA,SAAAuxD,EAAA95D,GACA,OAAAA,EAAAw5D,IAAA,KAEA,SAAAO,EAAA/5D,GACA,GAAAA,IAAAg6D,aAAkBh6D,GAAA,IAAAA,EAAA25D,KAClB,OAAA35D,GAAA,KAEA,SAAAi6D,EAAAj6D,EAAAoR,EAAAgK,IACAhK,EAAA6nD,EAAAj5D,EAAAob,EAAA8+C,eAAAxC,wBAAAtmD,OAAAgK,EAAAq9C,mBAAAr3B,EAAAhmB,EAAAq9C,mBAAArnD,GAAAgK,EAAAs9C,mBAAAt3B,EAAAhmB,EAAAs9C,mBAAA14D,IAEA,SAAAm6D,EAAAn6D,GACA,GAAAA,KAAAk6D,eAAAxC,wBAAA,CACA,QAAAtmD,EAAApR,EAAAo6D,YAAAh/C,EAAA,GAAuChK,GAAGgK,EAAAlX,KAAAkN,KAAA2oD,EAAA3oD,GAC1C,IAAAA,EAAAgK,EAAApf,OAAsB,EAAAoV,KAAS6oD,EAAA7+C,EAAAhK,GAAA,WAAApR,GAC/B,IAAAoR,EAAA,EAAeA,EAAAgK,EAAApf,OAAcoV,IAAA6oD,EAAA7+C,EAAAhK,GAAA,UAAApR,IAG7B,SAAAq6D,EAAAr6D,EAAAoR,EAAAgK,GACApb,GAAAob,KAAA8+C,eAAAtC,mBAAAxmD,EAAA6nD,EAAAj5D,EAAAob,EAAA8+C,eAAAtC,qBAAAx8C,EAAAq9C,mBAAAr3B,EAAAhmB,EAAAq9C,mBAAArnD,GAAAgK,EAAAs9C,mBAAAt3B,EAAAhmB,EAAAs9C,mBAAA14D,IAEA,SAAAs6D,EAAAt6D,GACAA,KAAAk6D,eAAAtC,kBAAAyC,EAAAr6D,EAAAo6D,YAAA,KAAAp6D,GAEA,SAAAu6D,EAAAv6D,GACAs4D,EAAAt4D,EAAAm6D,GAEA,IAAAK,IAAA,qBAAA9zD,gBAAA+zD,WAAA/zD,OAAA+zD,SAAA3wD,eACA,SAAA4wD,EAAA16D,EAAAoR,GACA,IAAAgK,EAAA,GAIA,OAHAA,EAAApb,EAAA26D,eAAAvpD,EAAAupD,cACAv/C,EAAA,SAAApb,GAAA,SAAAoR,EACAgK,EAAA,MAAApb,GAAA,MAAAoR,EACAgK,EAEA,IAAAw/C,EAAA,CACAC,aAAAH,EAAA,4BACAI,mBAAAJ,EAAA,kCACAK,eAAAL,EAAA,8BACAM,cAAAN,EAAA,+BAEAO,EAAA,GACAC,EAAA,GAEA,SAAAC,EAAAn7D,GACA,GAAAi7D,EAAAj7D,GAAA,OAAAi7D,EAAAj7D,GACA,IAAA46D,EAAA56D,GAAA,OAAAA,EACA,IACAob,EADAhK,EAAAwpD,EAAA56D,GAEA,IAAAob,KAAAhK,EAAA,GAAAA,EAAAtF,eAAAsP,SAAA8/C,EAAA,OAAAD,EAAAj7D,GAAAoR,EAAAgK,GACA,OAAApb,EAPAw6D,IAAAU,EAAAT,SAAA3wD,cAAA,OAAAE,MAAA,mBAAAtD,gBAAAk0D,EAAAC,aAAAO,iBAAAR,EAAAE,mBAAAM,iBAAAR,EAAAG,eAAAK,WAAA,oBAAA10D,eAAAk0D,EAAAI,cAAAK,YASA,IAAAC,EAAAH,EAAA,gBACAI,EAAAJ,EAAA,sBACAK,EAAAL,EAAA,kBACAM,GAAAN,EAAA,iBACAO,GAAA,sNAAA/uD,MAAA,KACAgvD,GAAA,KACAr2D,GAAA,KACAs2D,GAAA,KACA,SAAA1hB,KACA,GAAA0hB,GAAA,OAAAA,GACA,IAAA57D,EAGA0N,EAFA0D,EAAA9L,GACA8V,EAAAhK,EAAApV,OAEAsI,EAAA,UAAAq3D,MAAAt4D,MAAAs4D,GAAAE,YACA98B,EAAAz6B,EAAAtI,OACA,IAAAgE,EAAA,EAAaA,EAAAob,GAAAhK,EAAApR,KAAAsE,EAAAtE,GAAwBA,KACrC,IAAA6wD,EAAAz1C,EAAApb,EACA,IAAA0N,EAAA,EAAaA,GAAAmjD,GAAAz/C,EAAAgK,EAAA1N,KAAApJ,EAAAy6B,EAAArxB,GAAiCA,KAC9C,OAAAkuD,GAAAt3D,EAAAoK,MAAA1O,EAAA,EAAA0N,EAAA,EAAAA,OAAA,GAEA,SAAAouD,KACA,SAEA,SAAAC,KACA,SAEA,SAAAvzD,GAAAxI,EAAAoR,EAAAgK,EAAA1N,GAKA,QAAApJ,KAJAhE,KAAA45D,eAAAl6D,EACAM,KAAA85D,YAAAhpD,EACA9Q,KAAA07D,YAAA5gD,EACApb,EAAAM,KAAA8C,YAAA64D,UACAj8D,EAAA8L,eAAAxH,MAAA8M,EAAApR,EAAAsE,IAAAhE,KAAAgE,GAAA8M,EAAAgK,GAAA,WAAA9W,EAAAhE,KAAA5B,OAAAgP,EAAApN,KAAAgE,GAAA8W,EAAA9W,IAGA,OAFAhE,KAAA47D,oBAAA,MAAA9gD,EAAA+gD,iBAAA/gD,EAAA+gD,kBAAA,IAAA/gD,EAAAghD,aAAAN,GAAAC,GACAz7D,KAAAq4D,qBAAAoD,GACAz7D,KAyDA,SAAA+7D,GAAAr8D,EAAAoR,EAAAgK,EAAA1N,GACA,GAAApN,KAAAg8D,UAAAtgE,OAAA,CACA,IAAAsI,EAAAhE,KAAAg8D,UAAAvJ,MAEA,OADAzyD,KAAAG,KAAA6D,EAAAtE,EAAAoR,EAAAgK,EAAA1N,GACApJ,EAEA,WAAAhE,KAAAN,EAAAoR,EAAAgK,EAAA1N,GAEA,SAAA6uD,GAAAv8D,GACAA,aAAAM,MAAAiI,EAAA,OACAvI,EAAAw8D,aACA,GAAAl8D,KAAAg8D,UAAAtgE,QAAAsE,KAAAg8D,UAAAp4D,KAAAlE,GAEA,SAAAy8D,GAAAz8D,GACAA,EAAAs8D,UAAA,GACAt8D,EAAA08D,UAAAL,GACAr8D,EAAA64D,QAAA0D,GAvEA/vD,EAAAhE,GAAAlJ,UAAA,CACAq9D,eAAA,WACAr8D,KAAA67D,kBAAA,EACA,IAAAn8D,EAAAM,KAAA07D,YACAh8D,MAAA28D,eAAA38D,EAAA28D,iBAAA,mBAAA38D,EAAAo8D,cAAAp8D,EAAAo8D,aAAA,GAAA97D,KAAA47D,mBAAAJ,KAEAc,gBAAA,WACA,IAAA58D,EAAAM,KAAA07D,YACAh8D,MAAA48D,gBAAA58D,EAAA48D,kBAAA,mBAAA58D,EAAA68D,eAAA78D,EAAA68D,cAAA,GAAAv8D,KAAAq4D,qBAAAmD,KAEAgB,QAAA,WACAx8D,KAAAs4D,aAAAkD,IAEAlD,aAAAmD,GACAS,WAAA,WACA,IACAprD,EADApR,EAAAM,KAAA8C,YAAA64D,UAEA,IAAA7qD,KAAApR,EAAAM,KAAA8Q,GAAA,KACA9Q,KAAA07D,YAAA17D,KAAA85D,YAAA95D,KAAA45D,eAAA,KACA55D,KAAAq4D,qBAAAr4D,KAAA47D,mBAAAH,GACAz7D,KAAAo4D,mBAAAp4D,KAAAm4D,mBAAA,QAGAjwD,GAAAyzD,UAAA,CACA52D,KAAA,KACA3G,OAAA,KACA05D,cAAA,WACA,aAEA2E,WAAA,KACAC,QAAA,KACAC,WAAA,KACAC,UAAA,SAAAl9D,GACA,OAAAA,EAAAk9D,WAAA9M,KAAA+M,OAEAhB,iBAAA,KACAiB,UAAA,MAEA50D,GAAA60D,OAAA,SAAAr9D,GACA,SAAAoR,KACA,SAAAgK,IACA,OAAA1N,EAAAjG,MAAAnH,KAAAhE,WAEA,IAAAoR,EAAApN,KACA8Q,EAAA9R,UAAAoO,EAAApO,UACA,IAAAgF,EAAA,IAAA8M,EAOA,OANA5E,EAAAlI,EAAA8W,EAAA9b,WACA8b,EAAA9b,UAAAgF,EACA8W,EAAA9b,UAAA8D,YAAAgY,EACAA,EAAA6gD,UAAAzvD,EAAA,GAAoBkB,EAAAuuD,UAAAj8D,GACpBob,EAAAiiD,OAAA3vD,EAAA2vD,OACAZ,GAAArhD,GACAA,GAEAqhD,GAAAj0D,IAmBA,IAAA80D,GAAA90D,GAAA60D,OAAA,CACAp5D,KAAA,OAEAs5D,GAAA/0D,GAAA60D,OAAA,CACAp5D,KAAA,OAEAy4B,GAAA,aACA8gC,GAAAhD,GAAA,qBAAA9zD,OACA+2D,GAAA,KACAjD,GAAA,iBAAAC,WAAAgD,GAAAhD,SAAAiD,cACA,IAAAC,GAAAnD,GAAA,cAAA9zD,SAAA+2D,GACAG,GAAApD,KAAAgD,IAAAC,IAAA,EAAAA,IAAA,IAAAA,IACAI,GAAA1xD,OAAAG,aAAA,IACA8tC,GAAA,CACA0jB,YAAA,CACApG,wBAAA,CACAqG,QAAA,gBACAC,SAAA,wBAEAjG,aAAA,mDAEAkG,eAAA,CACAvG,wBAAA,CACAqG,QAAA,mBACAC,SAAA,2BAEAjG,aAAA,uDAAAprD,MAAA,MAEAuxD,iBAAA,CACAxG,wBAAA,CACAqG,QAAA,qBACAC,SAAA,6BAEAjG,aAAA,yDAAAprD,MAAA,MAEAwxD,kBAAA,CACAzG,wBAAA,CACAqG,QAAA,sBACAC,SAAA,8BAEAjG,aAAA,0DAAAprD,MAAA,OAGAyxD,IAAA,EACA,SAAAC,GAAAr+D,EAAAoR,GACA,OAAApR,GACA,YACA,WAAA08B,GAAAuyB,QAAA79C,EAAAktD,SACA,cACA,aAAAltD,EAAAktD,QACA,eACA,gBACA,WACA,SACA,QACA,UAGA,SAAAC,GAAAv+D,GAEA,wBADAA,IAAAw+D,SACA,SAAAx+D,IAAAiE,KAAA,KAEA,IAAAw6D,IAAA,EAgCA,IAAAC,GAAA,CACAlH,WAAApd,GACAmd,cAAA,SAAAv3D,EAAAoR,EAAAgK,EAAA1N,GACA,IAAApJ,OAAA,EACAy6B,OAAA,EACA,GAAAy+B,GAAApsD,EAAA,CACA,OAAApR,GACA,uBACAsE,EAAA81C,GAAA8jB,iBACA,MAAA9sD,EACA,qBACA9M,EAAA81C,GAAA6jB,eACA,MAAA7sD,EACA,wBACA9M,EAAA81C,GAAA+jB,kBACA,MAAA/sD,EAEA9M,OAAA,OACOm6D,GAAAJ,GAAAr+D,EAAAob,KAAA9W,EAAA81C,GAAA6jB,gBAAA,YAAAj+D,GAAA,MAAAob,EAAAkjD,UAAAh6D,EAAA81C,GAAA8jB,kBAGP,OAFA55D,GAAAs5D,IAAA,OAAAxiD,EAAAujD,SAAAF,IAAAn6D,IAAA81C,GAAA8jB,iBAAA55D,IAAA81C,GAAA6jB,gBAAAQ,KAAA1/B,EAAAmb,OAAA50C,GAAA,UAAAq2D,GAAAjuD,GAAAiuD,GAAAt4D,MAAAs4D,GAAAE,YAAA4C,IAAA,IAAAn6D,EAAAg5D,GAAAZ,UAAAp4D,EAAA8M,EAAAgK,EAAA1N,GAAAqxB,EAAAz6B,EAAAL,KAAA86B,EAAA,QAAAA,EAAAw/B,GAAAnjD,MAAA9W,EAAAL,KAAA86B,GAAAw7B,EAAAj2D,GAAAy6B,EAAAz6B,GAAAy6B,EAAA,MACA/+B,EAAA29D,GAnDA,SAAA39D,EAAAoR,GACA,OAAApR,GACA,qBACA,OAAAu+D,GAAAntD,GACA,eACA,YAAAA,EAAAwtD,MAAA,MACAR,IAAA,EACAP,IACA,gBACA,OAAA79D,EAAAoR,EAAAnN,QAAA45D,IAAAO,GAAA,KAAAp+D,EACA,QACA,aAwCAqhC,CAAArhC,EAAAob,GArCA,SAAApb,EAAAoR,GACA,GAAAqtD,GAAA,yBAAAz+D,IAAAw9D,IAAAa,GAAAr+D,EAAAoR,IAAApR,EAAAk6C,KAAA0hB,GAAAt2D,GAAAq2D,GAAA,KAAA8C,IAAA,EAAAz+D,GAAA,KACA,OAAAA,GACA,YACA,YACA,eACA,KAAAoR,EAAAytD,SAAAztD,EAAA0tD,QAAA1tD,EAAA2tD,UAAA3tD,EAAAytD,SAAAztD,EAAA0tD,OAAA,CACA,GAAA1tD,EAAA4tD,MAAA,EAAA5tD,EAAA4tD,KAAAhjE,OAAA,OAAAoV,EAAA4tD,KACA,GAAA5tD,EAAAwtD,MAAA,OAAAzyD,OAAAG,aAAA8E,EAAAwtD,OAEA,YACA,qBACA,OAAAhB,IAAA,OAAAxsD,EAAAutD,OAAA,KAAAvtD,EAAAnN,KACA,QACA,aAuBAg7D,CAAAj/D,EAAAob,MAAAhK,EAAAmsD,GAAAb,UAAAtiB,GAAA0jB,YAAA1sD,EAAAgK,EAAA1N,IAAAzJ,KAAAjE,EAAAu6D,EAAAnpD,MAAA,KACA,OAAA2tB,EAAA3tB,EAAA,OAAAA,EAAA2tB,EAAA,CAAAA,EAAA3tB,KAGA8tD,GAAA,KACAC,GAAA,KACAC,GAAA,KACA,SAAAC,GAAAr/D,GACA,GAAAA,EAAAi4D,EAAAj4D,GAAA,CACA,oBAAAk/D,IAAA32D,EAAA,OACA,IAAA6I,EAAA4mD,EAAAh4D,EAAAk5D,WACAgG,GAAAl/D,EAAAk5D,UAAAl5D,EAAAqF,KAAA+L,IAGA,SAAAkuD,GAAAt/D,GACAm/D,GAAAC,MAAAl7D,KAAAlE,GAAAo/D,GAAA,CAAAp/D,GAAAm/D,GAAAn/D,EAEA,SAAAu/D,KACA,GAAAJ,GAAA,CACA,IAAAn/D,EAAAm/D,GACA/tD,EAAAguD,GAGA,GAFAA,GAAAD,GAAA,KACAE,GAAAr/D,GACAoR,EAAA,IAAApR,EAAA,EAAsBA,EAAAoR,EAAApV,OAAcgE,IAAAq/D,GAAAjuD,EAAApR,KAGpC,SAAAw/D,GAAAx/D,EAAAoR,GACA,OAAApR,EAAAoR,GAEA,SAAAquD,GAAAz/D,EAAAoR,EAAAgK,GACA,OAAApb,EAAAoR,EAAAgK,GAEA,SAAAskD,MACA,IAAAC,IAAA,EACA,SAAAC,GAAA5/D,EAAAoR,GACA,GAAAuuD,GAAA,OAAA3/D,EAAAoR,GACAuuD,IAAA,EACA,IACA,OAAAH,GAAAx/D,EAAAoR,GACG,QACHuuD,IAAA,UAAAR,IAAA,OAAAC,MAAAM,KAAAH,OAGA,IAAAM,GAAA,CACAC,OAAA,EACAC,MAAA,EACAC,UAAA,EACAC,kBAAA,EACAC,OAAA,EACAC,OAAA,EACA30D,QAAA,EACA40D,UAAA,EACAC,OAAA,EACAC,QAAA,EACAC,KAAA,EACAC,MAAA,EACAC,MAAA,EACAC,KAAA,EACAC,MAAA,GAEA,SAAAC,GAAA5gE,GACA,IAAAoR,EAAApR,KAAA6gE,UAAA7gE,EAAA6gE,SAAAlG,cACA,gBAAAvpD,IAAAyuD,GAAA7/D,EAAAqF,MAAA,aAAA+L,EAEA,SAAA0vD,GAAA9gE,GAGA,OAFAA,IAAAtB,QAAAsB,EAAA+gE,YAAAr6D,QACAs6D,0BAAAhhE,IAAAghE,yBACA,IAAAhhE,EAAAihE,SAAAjhE,EAAA05D,WAAA15D,EAEA,SAAAkhE,GAAAlhE,GACA,IAAAw6D,EAAA,SAEA,IAAAppD,GADApR,EAAA,KAAAA,KACAy6D,SAEA,OADArpD,OAAAqpD,SAAA3wD,cAAA,QAAAq3D,aAAAnhE,EAAA,WAAqEoR,EAAA,oBAAAA,EAAApR,IACrEoR,EAEA,SAAAgwD,GAAAphE,GACA,IAAAoR,EAAApR,EAAAqF,KACA,OAAArF,IAAA6gE,WAAA,UAAA7gE,EAAA26D,gBAAA,aAAAvpD,GAAA,UAAAA,GAoCA,SAAAiwD,GAAArhE,GACAA,EAAAshE,gBAAAthE,EAAAshE,cAnCA,SAAAthE,GACA,IAAAoR,EAAAgwD,GAAAphE,GAAA,kBACAob,EAAApc,OAAAuiE,yBAAAvhE,EAAAoD,YAAA9D,UAAA8R,GACA1D,EAAA,GAAA1N,EAAAoR,GACA,IAAApR,EAAA8L,eAAAsF,IAAA,qBAAAgK,GAAA,oBAAAA,EAAAomD,KAAA,oBAAApmD,EAAA6J,IAAA,CACA,IAAA3gB,EAAA8W,EAAAomD,IACAziC,EAAA3jB,EAAA6J,IAcA,OAbAjmB,OAAAC,eAAAe,EAAAoR,EAAA,CACAtS,cAAA,EACA0iE,IAAA,WACA,OAAAl9D,EAAA7D,KAAAH,OAEA2kB,IAAA,SAAAjlB,GACA0N,EAAA,GAAA1N,EACA++B,EAAAt+B,KAAAH,KAAAN,MAGAhB,OAAAC,eAAAe,EAAAoR,EAAA,CACAvS,WAAAuc,EAAAvc,aAEA,CACA4iE,SAAA,WACA,OAAA/zD,GAEAg0D,SAAA,SAAA1hE,GACA0N,EAAA,GAAA1N,GAEA2hE,aAAA,WACA3hE,EAAAshE,cAAA,YACAthE,EAAAoR,MAMAwwD,CAAA5hE,IAEA,SAAA6hE,GAAA7hE,GACA,IAAAA,EAAA,SACA,IAAAoR,EAAApR,EAAAshE,cACA,IAAAlwD,EAAA,SACA,IAAAgK,EAAAhK,EAAAqwD,WACA/zD,EAAA,GAGA,OAFA1N,IAAA0N,EAAA0zD,GAAAphE,KAAA8hE,QAAA,eAAA9hE,EAAAqD,QACArD,EAAA0N,KACA0N,IAAAhK,EAAAswD,SAAA1hE,IAAA,GAEA,IAAA+hE,GAAArR,EAAA+F,mDACAsL,GAAAj2D,eAAA,4BAAAi2D,GAAArL,uBAAA,CACAxtD,QAAA,OAEA,IAAA84D,GAAA,cACAvR,GAAA,oBAAAf,eAAAc,IACAyR,GAAAxR,GAAAf,OAAAc,IAAA,uBACA0R,GAAAzR,GAAAf,OAAAc,IAAA,sBACA2R,GAAA1R,GAAAf,OAAAc,IAAA,wBACA4R,GAAA3R,GAAAf,OAAAc,IAAA,2BACA6R,GAAA5R,GAAAf,OAAAc,IAAA,wBACA8R,GAAA7R,GAAAf,OAAAc,IAAA,wBACA+R,GAAA9R,GAAAf,OAAAc,IAAA,uBACAgS,GAAA/R,GAAAf,OAAAc,IAAA,+BACAiS,GAAAhS,GAAAf,OAAAc,IAAA,2BACAkS,GAAAjS,GAAAf,OAAAc,IAAA,wBACAmS,GAAAlS,GAAAf,OAAAc,IAAA,oBACAoS,GAAAnS,GAAAf,OAAAc,IAAA,oBACAqS,GAAA,oBAAAnT,eAAAC,SACA,SAAAmT,GAAA9iE,GACA,cAAAA,GAAA,kBAAAA,EAAA,KAEA,oBADAA,EAAA6iE,IAAA7iE,EAAA6iE,KAAA7iE,EAAA,eACAA,EAAA,KAEA,SAAA+iE,GAAA/iE,GACA,SAAAA,EAAA,YACA,uBAAAA,EAAA,OAAAA,EAAAgjE,aAAAhjE,EAAA+wD,MAAA,KACA,qBAAA/wD,EAAA,OAAAA,EACA,OAAAA,GACA,KAAAwiE,GACA,uBACA,KAAAL,GACA,iBACA,KAAAD,GACA,eACA,KAAAG,GACA,iBACA,KAAAD,GACA,mBACA,KAAAM,GACA,iBAEA,qBAAA1iE,EAAA,OAAAA,EAAAyyD,UACA,KAAA8P,GACA,yBACA,KAAAD,GACA,yBACA,KAAAG,GACA,IAAArxD,EAAApR,EAAA+0D,OAEA,OADA3jD,IAAA4xD,aAAA5xD,EAAA2/C,MAAA,GACA/wD,EAAAgjE,cAAA,KAAA5xD,EAAA,cAAAA,EAAA,kBACA,KAAAuxD,GACA,OAAAI,GAAA/iE,EAAAqF,MACA,KAAAu9D,GACA,GAAA5iE,EAAA,IAAAA,EAAAk1D,QAAAl1D,EAAAm1D,QAAA,YAAA4N,GAAA/iE,GAEA,YAEA,SAAAijE,GAAAjjE,GACA,IAAAoR,EAAA,GACA,GACApR,EAAA,OAAAA,EAAA25D,KACA,OACA,OACA,OACA,OACA,QACA,OACA,IAAAv+C,EAAA,GACA,MAAApb,EACA,QACA,IAAA0N,EAAA1N,EAAAkjE,YACA5+D,EAAAtE,EAAAmjE,aACApkC,EAAAgkC,GAAA/iE,EAAAqF,MACA+V,EAAA,KACA1N,IAAA0N,EAAA2nD,GAAAr1D,EAAArI,OACAqI,EAAAqxB,EACAA,EAAA,GACAz6B,EAAAy6B,EAAA,QAAAz6B,EAAA8+D,SAAAtS,QAAAkR,GAAA,QAAA19D,EAAA++D,WAAA,IAAAjoD,IAAA2jB,EAAA,gBAAA3jB,EAAA,KACAA,EAAA,aAAA1N,GAAA,WAAAqxB,EAEA3tB,GAAAgK,EACApb,IAAAg6D,aACGh6D,GACH,OAAAoR,EAEA,IAAAkyD,GAAA,8VACAC,GAAAvkE,OAAAM,UAAAwM,eACA03D,GAAA,GACAC,GAAA,GAsCA,SAAAxS,GAAAjxD,EAAAoR,EAAAgK,EAAA1N,EAAApJ,GACAhE,KAAAojE,gBAAA,IAAAtyD,GAAA,IAAAA,GAAA,IAAAA,EACA9Q,KAAAqjE,cAAAj2D,EACApN,KAAAsjE,mBAAAt/D,EACAhE,KAAAujE,gBAAAzoD,EACA9a,KAAAwjE,aAAA9jE,EACAM,KAAA+E,KAAA+L,EAEA,IAAAkgD,GAAA,GACA,uIAAA3kD,MAAA,KAAAC,QAAA,SAAA5M,GACAsxD,GAAAtxD,GAAA,IAAAixD,GAAAjxD,EAAA,KAAAA,EAAA,QAEA,wGAAA4M,QAAA,SAAA5M,GACA,IAAAoR,EAAApR,EAAA,GACAsxD,GAAAlgD,GAAA,IAAA6/C,GAAA7/C,EAAA,KAAApR,EAAA,WAEA,qDAAA4M,QAAA,SAAA5M,GACAsxD,GAAAtxD,GAAA,IAAAixD,GAAAjxD,EAAA,KAAAA,EAAA26D,cAAA,QAEA,wEAAA/tD,QAAA,SAAA5M,GACAsxD,GAAAtxD,GAAA,IAAAixD,GAAAjxD,EAAA,KAAAA,EAAA,QAEA,gMAAA2M,MAAA,KAAAC,QAAA,SAAA5M,GACAsxD,GAAAtxD,GAAA,IAAAixD,GAAAjxD,EAAA,KAAAA,EAAA26D,cAAA,QAEA,0CAAA/tD,QAAA,SAAA5M,GACAsxD,GAAAtxD,GAAA,IAAAixD,GAAAjxD,EAAA,KAAAA,EAAA,QAEA,uBAAA4M,QAAA,SAAA5M,GACAsxD,GAAAtxD,GAAA,IAAAixD,GAAAjxD,EAAA,KAAAA,EAAA,QAEA,8BAAA4M,QAAA,SAAA5M,GACAsxD,GAAAtxD,GAAA,IAAAixD,GAAAjxD,EAAA,KAAAA,EAAA,QAEA,oBAAA4M,QAAA,SAAA5M,GACAsxD,GAAAtxD,GAAA,IAAAixD,GAAAjxD,EAAA,KAAAA,EAAA26D,cAAA,QAEA,IAAAoJ,GAAA,gBACA,SAAAlgD,GAAA7jB,GACA,OAAAA,EAAA,GAAAgkE,cAiBA,SAAAC,GAAAjkE,EAAAoR,EAAAgK,EAAA1N,GACA,IAAApJ,EAAAgtD,GAAAxlD,eAAAsF,GAAAkgD,GAAAlgD,GAAA,MACA,OAAA9M,EAAA,IAAAA,EAAAe,MAAAqI,IAAA,EAAA0D,EAAApV,SAAA,MAAAoV,EAAA,UAAAA,EAAA,YAAAA,EAAA,UAAAA,EAAA,QAzEA,SAAApR,EAAAoR,EAAAgK,EAAA1N,GACA,UAAA0D,GAAA,qBAAAA,GAhBA,SAAApR,EAAAoR,EAAAgK,EAAA1N,GACA,UAAA0N,GAAA,IAAAA,EAAA/V,KAAA,SACA,cAAA+L,GACA,eACA,aACA,SACA,cACA,OAAA1D,IACA,OAAA0N,KAAAsoD,gBAEA,WADA1jE,IAAA26D,cAAAjsD,MAAA,OACA,UAAA1O,GACA,QACA,UAIAkkE,CAAAlkE,EAAAoR,EAAAgK,EAAA1N,GAAA,SACA,GAAAA,EAAA,SACA,UAAA0N,EAAA,OAAAA,EAAA/V,MACA,OACA,OAAA+L,EACA,OACA,WAAAA,EACA,OACA,OAAA+yD,MAAA/yD,GACA,OACA,OAAA+yD,MAAA/yD,IAAA,EAAAA,EAEA,SA6DAgzD,CAAAhzD,EAAAgK,EAAA9W,EAAAoJ,KAAA0N,EAAA,MAAA1N,GAAA,OAAApJ,EAhGA,SAAAtE,GACA,QAAAujE,GAAA9iE,KAAAgjE,GAAAzjE,KACAujE,GAAA9iE,KAAA+iE,GAAAxjE,KACAsjE,GAAAe,KAAArkE,GAAAyjE,GAAAzjE,IAAA,GACAwjE,GAAAxjE,IAAA,GACA,IA2FAskE,CAAAlzD,KAAA,OAAAgK,EAAApb,EAAAukE,gBAAAnzD,GAAApR,EAAAmhE,aAAA/vD,EAAA,GAAAgK,IAAA9W,EAAAu/D,gBAAA7jE,EAAAsE,EAAAw/D,cAAA,OAAA1oD,EAAA,IAAA9W,EAAAe,MAAA,GAAA+V,GAAAhK,EAAA9M,EAAAq/D,cAAAj2D,EAAApJ,EAAAs/D,mBAAA,OAAAxoD,EAAApb,EAAAukE,gBAAAnzD,IAAAgK,EAAA,KAAA9W,IAAAe,OAAA,IAAAf,IAAA,IAAA8W,EAAA,MAAAA,EAAA1N,EAAA1N,EAAAwkE,eAAA92D,EAAA0D,EAAAgK,GAAApb,EAAAmhE,aAAA/vD,EAAAgK,MAEA,SAAAqpD,GAAAzkE,GACA,cAAAA,GACA,cACA,aACA,aACA,aACA,gBACA,OAAAA,EACA,QACA,UAGA,SAAA0kE,GAAA1kE,EAAAoR,GACA,IAAAgK,EAAAhK,EAAA0wD,QACA,OAAAt1D,EAAA,GAAa4E,EAAA,CACbuzD,oBAAA,EACAC,kBAAA,EACAvhE,WAAA,EACAy+D,QAAA,MAAA1mD,IAAApb,EAAA6kE,cAAAC,iBAGA,SAAAC,GAAA/kE,EAAAoR,GACA,IAAAgK,EAAA,MAAAhK,EAAAwzD,aAAA,GAAAxzD,EAAAwzD,aACAl3D,EAAA,MAAA0D,EAAA0wD,QAAA1wD,EAAA0wD,QAAA1wD,EAAAuzD,eACAvpD,EAAAqpD,GAAA,MAAArzD,EAAA/N,MAAA+N,EAAA/N,MAAA+X,GACApb,EAAA6kE,cAAA,CACAC,eAAAp3D,EACAs3D,aAAA5pD,EACA6pD,WAAA,aAAA7zD,EAAA/L,MAAA,UAAA+L,EAAA/L,KAAA,MAAA+L,EAAA0wD,QAAA,MAAA1wD,EAAA/N,OAGA,SAAA6hE,GAAAllE,EAAAoR,GAEA,OADAA,IAAA0wD,UACAmC,GAAAjkE,EAAA,UAAAoR,GAAA,GAEA,SAAA+zD,GAAAnlE,EAAAoR,GACA8zD,GAAAllE,EAAAoR,GACA,IAAAgK,EAAAqpD,GAAArzD,EAAA/N,OACAqK,EAAA0D,EAAA/L,KACA,SAAA+V,EACA,WAAA1N,GACA,IAAA0N,GAAA,KAAApb,EAAAqD,OAAArD,EAAAqD,OAAA+X,KAAApb,EAAAqD,MAAA,GAAA+X,GACKpb,EAAAqD,QAAA,GAAA+X,IAAApb,EAAAqD,MAAA,GAAA+X,QACF,cAAA1N,GAAA,UAAAA,EAEH,YADA1N,EAAAukE,gBAAA,SAGAnzD,EAAAtF,eAAA,SAAAs5D,GAAAplE,EAAAoR,EAAA/L,KAAA+V,GAAAhK,EAAAtF,eAAA,iBAAAs5D,GAAAplE,EAAAoR,EAAA/L,KAAAo/D,GAAArzD,EAAAwzD,eACA,MAAAxzD,EAAA0wD,SAAA,MAAA1wD,EAAAuzD,iBAAA3kE,EAAA2kE,iBAAAvzD,EAAAuzD,gBAEA,SAAAU,GAAArlE,EAAAoR,EAAAgK,GACA,GAAAhK,EAAAtF,eAAA,UAAAsF,EAAAtF,eAAA,iBACA,IAAA4B,EAAA0D,EAAA/L,KACA,gBAAAqI,GAAA,UAAAA,QAAA,IAAA0D,EAAA/N,OAAA,OAAA+N,EAAA/N,OAAA,OACA+N,EAAA,GAAApR,EAAA6kE,cAAAG,aACA5pD,GAAAhK,IAAApR,EAAAqD,QAAArD,EAAAqD,MAAA+N,GACApR,EAAA4kE,aAAAxzD,EAGA,MADAgK,EAAApb,EAAA+wD,QACA/wD,EAAA+wD,KAAA,IACA/wD,EAAA2kE,gBAAA3kE,EAAA2kE,eACA3kE,EAAA2kE,iBAAA3kE,EAAA6kE,cAAAC,eACA,KAAA1pD,IAAApb,EAAA+wD,KAAA31C,GAEA,SAAAgqD,GAAAplE,EAAAoR,EAAAgK,GACA,WAAAhK,GAAApR,EAAAslE,cAAAC,gBAAAvlE,IAAA,MAAAob,EAAApb,EAAA4kE,aAAA,GAAA5kE,EAAA6kE,cAAAG,aAAAhlE,EAAA4kE,eAAA,GAAAxpD,IAAApb,EAAA4kE,aAAA,GAAAxpD,IArFA,0jCAAAzO,MAAA,KAAAC,QAAA,SAAA5M,GACA,IAAAoR,EAAApR,EAAA8wD,QAAAiT,GAAAlgD,IACAytC,GAAAlgD,GAAA,IAAA6/C,GAAA7/C,EAAA,KAAApR,EAAA,QAEA,sFAAA2M,MAAA,KAAAC,QAAA,SAAA5M,GACA,IAAAoR,EAAApR,EAAA8wD,QAAAiT,GAAAlgD,IACAytC,GAAAlgD,GAAA,IAAA6/C,GAAA7/C,EAAA,KAAApR,EAAA,kCAEA,oCAAA4M,QAAA,SAAA5M,GACA,IAAAoR,EAAApR,EAAA8wD,QAAAiT,GAAAlgD,IACAytC,GAAAlgD,GAAA,IAAA6/C,GAAA7/C,EAAA,KAAApR,EAAA,0CAEA,2BAAA4M,QAAA,SAAA5M,GACAsxD,GAAAtxD,GAAA,IAAAixD,GAAAjxD,EAAA,KAAAA,EAAA26D,cAAA,QA0EA,IAAA6K,GAAA,CACAC,OAAA,CACA/N,wBAAA,CACAqG,QAAA,WACAC,SAAA,mBAEAjG,aAAA,8DAAAprD,MAAA,OAGA,SAAA+4D,GAAA1lE,EAAAoR,EAAAgK,GAKA,OAJApb,EAAAwI,GAAAk0D,UAAA8I,GAAAC,OAAAzlE,EAAAoR,EAAAgK,IACA/V,KAAA,SACAi6D,GAAAlkD,GACAm/C,EAAAv6D,GACAA,EAEA,IAAA2lE,GAAA,KACAC,GAAA,KACA,SAAAC,GAAA7lE,GACAo5D,EAAAp5D,GAEA,SAAA8lE,GAAA9lE,GAEA,GAAA6hE,GADAhI,EAAA75D,IACA,OAAAA,EAEA,SAAA+lE,GAAA/lE,EAAAoR,GACA,cAAApR,EAAA,OAAAoR,EAEA,IAAA40D,IAAA,EAEA,SAAAC,KACAN,QAAAO,YAAA,mBAAAC,IAAAP,GAAAD,GAAA,MAEA,SAAAQ,GAAAnmE,GACA,UAAAA,EAAA8jE,cAAAgC,GAAAF,KAAAhG,GAAAiG,GAAA7lE,EAAA0lE,GAAAE,GAAA5lE,EAAA8gE,GAAA9gE,KAEA,SAAAomE,GAAApmE,EAAAoR,EAAAgK,GACA,UAAApb,GAAAimE,KAAAL,GAAAxqD,GAAAuqD,GAAAv0D,GAAAi1D,YAAA,mBAAAF,KAAA,SAAAnmE,GAAAimE,KAEA,SAAAK,GAAAtmE,GACA,uBAAAA,GAAA,UAAAA,GAAA,YAAAA,EAAA,OAAA8lE,GAAAF,IAEA,SAAAW,GAAAvmE,EAAAoR,GACA,aAAApR,EAAA,OAAA8lE,GAAA10D,GAEA,SAAAo1D,GAAAxmE,EAAAoR,GACA,aAAApR,GAAA,WAAAA,EAAA,OAAA8lE,GAAA10D,GAjBAopD,IAAAwL,GAAA9E,GAAA,YAAAzG,SAAAiD,cAAA,EAAAjD,SAAAiD,eAmBA,IAAA+I,GAAA,CACAjP,WAAAgO,GACAkB,uBAAAV,GACAzO,cAAA,SAAAv3D,EAAAoR,EAAAgK,EAAA1N,GACA,IAAApJ,EAAA8M,EAAAyoD,EAAAzoD,GAAA1K,OACAq4B,OAAA,EACA8xB,OAAA,EACA17B,EAAA7wB,EAAAu8D,UAAAv8D,EAAAu8D,SAAAlG,cAEA,GADA,WAAAxlC,GAAA,UAAAA,GAAA,SAAA7wB,EAAAe,KAAA05B,EAAAgnC,GAAAnF,GAAAt8D,GAAA0hE,GAAAjnC,EAAAynC,IAAAznC,EAAAunC,GAAAzV,EAAAuV,KAAAjxC,EAAA7wB,EAAAu8D,WAAA,UAAA1rC,EAAAwlC,gBAAA,aAAAr2D,EAAAe,MAAA,UAAAf,EAAAe,QAAA05B,EAAAwnC,IACAxnC,QAAA/+B,EAAAoR,IAAA,OAAAs0D,GAAA3mC,EAAA3jB,EAAA1N,GACAmjD,KAAA7wD,EAAAsE,EAAA8M,GACA,SAAApR,MAAAsE,EAAAugE,gBAAA7kE,EAAAilE,YAAA,WAAA3gE,EAAAe,MAAA+/D,GAAA9gE,EAAA,SAAAA,EAAAjB,SAGAsjE,GAAAn+D,GAAA60D,OAAA,CACAzhE,KAAA,KACA4iE,OAAA,OAEAoI,GAAA,CACAC,IAAA,SACAC,QAAA,UACAC,KAAA,UACAC,MAAA,YAEA,SAAAC,GAAAjnE,GACA,IAAAoR,EAAA9Q,KAAA07D,YACA,OAAA5qD,EAAA81D,iBAAA91D,EAAA81D,iBAAAlnE,QAAA4mE,GAAA5mE,OAAAoR,EAAApR,GAEA,SAAAmnE,KACA,OAAAF,GAEA,IAAAG,GAAA,EACAC,GAAA,EACAC,IAAA,EACAC,IAAA,EACAC,GAAAb,GAAAtJ,OAAA,CACAoK,QAAA,KACAC,QAAA,KACAC,QAAA,KACAC,QAAA,KACAC,MAAA,KACAC,MAAA,KACAjJ,QAAA,KACAkJ,SAAA,KACAjJ,OAAA,KACAC,QAAA,KACAmI,iBAAAC,GACAa,OAAA,KACAC,QAAA,KACAC,cAAA,SAAAloE,GACA,OAAAA,EAAAkoE,gBAAAloE,EAAAmoE,cAAAnoE,EAAA+gE,WAAA/gE,EAAAooE,UAAApoE,EAAAmoE,cAEAE,UAAA,SAAAroE,GACA,iBAAAA,EAAA,OAAAA,EAAAqoE,UACA,IAAAj3D,EAAAg2D,GAEA,OADAA,GAAApnE,EAAAynE,QACAH,GAAA,cAAAtnE,EAAAqF,KAAArF,EAAAynE,QAAAr2D,EAAA,GAAAk2D,IAAA,MAEAgB,UAAA,SAAAtoE,GACA,iBAAAA,EAAA,OAAAA,EAAAsoE,UACA,IAAAl3D,EAAAi2D,GAEA,OADAA,GAAArnE,EAAA0nE,QACAH,GAAA,cAAAvnE,EAAAqF,KAAArF,EAAA0nE,QAAAt2D,EAAA,GAAAm2D,IAAA,QAGAgB,GAAAf,GAAAnK,OAAA,CACAmL,UAAA,KACA5gE,MAAA,KACAD,OAAA,KACA8gE,SAAA,KACAC,mBAAA,KACAC,MAAA,KACAC,MAAA,KACAC,MAAA,KACAC,YAAA,KACAC,UAAA,OAEAC,GAAA,CACAC,WAAA,CACArR,iBAAA,eACAG,aAAA,0BAEAmR,WAAA,CACAtR,iBAAA,eACAG,aAAA,0BAEAoR,aAAA,CACAvR,iBAAA,iBACAG,aAAA,8BAEAqR,aAAA,CACAxR,iBAAA,iBACAG,aAAA,+BAGAsR,GAAA,CACA7R,WAAAwR,GACAzR,cAAA,SAAAv3D,EAAAoR,EAAAgK,EAAA1N,GACA,IAAApJ,EAAA,cAAAtE,GAAA,gBAAAA,EACA++B,EAAA,aAAA/+B,GAAA,eAAAA,EACA,GAAAsE,IAAA8W,EAAA8sD,eAAA9sD,EAAA+sD,eAAAppC,IAAAz6B,EAAA,YAGA,GAFAA,EAAAoJ,EAAAhH,SAAAgH,KAAApJ,EAAAoJ,EAAA43D,eAAAhhE,EAAAglE,aAAAhlE,EAAAilE,aAAA7iE,OACAq4B,KAAA3tB,OAAAgK,EAAA8sD,eAAA9sD,EAAAgtD,WAAA3O,EAAAroD,GAAA,MAAA2tB,EAAA,KACAA,IAAA3tB,EAAA,YACA,IAAAy/C,OAAA,EACA17B,OAAA,EACAzjB,OAAA,EACA6H,OAAA,EACA,aAAAvZ,GAAA,cAAAA,GAAA6wD,EAAA2W,GAAAryC,EAAA6zC,GAAAE,WAAAx3D,EAAAs3D,GAAAC,WAAA1vD,EAAA,SAA2G,eAAAvZ,GAAA,gBAAAA,IAAA6wD,EAAA0X,GAAApzC,EAAA6zC,GAAAI,aAAA13D,EAAAs3D,GAAAG,aAAA5vD,EAAA,WAC3G,IAAA0hC,EAAA,MAAAlc,EAAAz6B,EAAAu1D,EAAA96B,GAWA,GAVAz6B,EAAA,MAAA8M,EAAA9M,EAAAu1D,EAAAzoD,IACApR,EAAA6wD,EAAA6L,UAAAvnC,EAAA4J,EAAA3jB,EAAA1N,IACArI,KAAAkU,EAAA,QACAvZ,EAAAtB,OAAAu8C,EACAj7C,EAAAkoE,cAAA5jE,GACA8W,EAAAy1C,EAAA6L,UAAAhrD,EAAAN,EAAAgK,EAAA1N,IACArI,KAAAkU,EAAA,QACA6B,EAAA1c,OAAA4F,EACA8W,EAAA8sD,cAAAjtB,EACAvtC,EAAA0D,EACA2tB,GAAArxB,EAAA1N,EAAA,CAIA,IAFAsE,EAAAoJ,EACA6L,EAAA,EACAs3C,EAHAz/C,EAAA2tB,EAGmB8xB,EAAGA,EAAAkJ,EAAAlJ,GAAAt3C,IAEtB,IADAs3C,EAAA,EACAn/C,EAAApN,EAAmBoN,EAAGA,EAAAqoD,EAAAroD,GAAAm/C,IACtB,KAAc,EAAAt3C,EAAAs3C,GAAWz/C,EAAA2oD,EAAA3oD,GAAAmI,IACzB,KAAc,EAAAs3C,EAAAt3C,GAAWjV,EAAAy1D,EAAAz1D,GAAAusD,IACzB,KAAct3C,KAAK,CACnB,GAAAnI,IAAA9M,GAAA8M,IAAA9M,EAAAklE,UAAA,MAAAxpE,EACAoR,EAAA2oD,EAAA3oD,GACA9M,EAAAy1D,EAAAz1D,GAEA8M,EAAA,UACOA,EAAA,KAEP,IADA9M,EAAA8M,EACAA,EAAA,GAAkB2tB,OAAAz6B,IAElB,QADAiV,EAAAwlB,EAAAyqC,YACAjwD,IAAAjV,IACA8M,EAAAlN,KAAA66B,GACAA,EAAAg7B,EAAAh7B,GAEA,IAAAA,EAAA,GAAkBrxB,OAAApJ,IAElB,QADAiV,EAAA7L,EAAA87D,YACAjwD,IAAAjV,IACAy6B,EAAA76B,KAAAwJ,GACAA,EAAAqsD,EAAArsD,GAEA,IAAAA,EAAA,EAAiBA,EAAA0D,EAAApV,OAAc0R,IAAA2sD,EAAAjpD,EAAA1D,GAAA,UAAA1N,GAC/B,IAAA0N,EAAAqxB,EAAA/iC,OAAwB,EAAA0R,KAAS2sD,EAAAt7B,EAAArxB,GAAA,WAAA0N,GACjC,OAAApb,EAAAob,KAGA,SAAAozB,GAAAxuC,EAAAoR,GACA,OAAApR,IAAAoR,IAAA,IAAApR,GAAA,EAAAA,IAAA,EAAAoR,IAAApR,OAAAoR,MAEA,IAAAq4D,GAAAzqE,OAAAM,UAAAwM,eACA,SAAA0zC,GAAAx/C,EAAAoR,GACA,GAAAo9B,GAAAxuC,EAAAoR,GAAA,SACA,qBAAApR,GAAA,OAAAA,GAAA,kBAAAoR,GAAA,OAAAA,EAAA,SACA,IAAAgK,EAAApc,OAAA8N,KAAA9M,GACA0N,EAAA1O,OAAA8N,KAAAsE,GACA,GAAAgK,EAAApf,SAAA0R,EAAA1R,OAAA,SACA,IAAA0R,EAAA,EAAaA,EAAA0N,EAAApf,OAAc0R,IAAA,IAAA+7D,GAAAhpE,KAAA2Q,EAAAgK,EAAA1N,MAAA8gC,GAAAxuC,EAAAob,EAAA1N,IAAA0D,EAAAgK,EAAA1N,KAAA,SAC3B,SAEA,SAAAg8D,GAAA1pE,GACA,IAAAoR,EAAApR,EACA,GAAAA,EAAAwpE,UAAA,KAAyBp4D,EAAA4oD,QAAU5oD,IAAA4oD,WAAe,CAClD,UAAA5oD,EAAAu4D,WAAA,SACA,KAAUv4D,EAAA4oD,QAAU,WAAA5oD,IAAA4oD,QAAA2P,WAAA,SAEpB,WAAAv4D,EAAAuoD,IAAA,IAEA,SAAAiQ,GAAA5pE,GACA,IAAA0pE,GAAA1pE,IAAAuI,EAAA,OA0DA,SAAAshE,GAAA7pE,GAEA,KADAA,EAzDA,SAAAA,GACA,IAAAoR,EAAApR,EAAAwpE,UACA,IAAAp4D,EAAA,YAAAA,EAAAs4D,GAAA1pE,KAAAuI,EAAA,WAAA6I,EAAA,KAAApR,EACA,QAAAob,EAAApb,EAAA0N,EAAA0D,IAAyB,CACzB,IAAA9M,EAAA8W,EAAA4+C,OACAj7B,EAAAz6B,IAAAklE,UAAA,KACA,IAAAllE,IAAAy6B,EAAA,MACA,GAAAz6B,EAAAwlE,QAAA/qC,EAAA+qC,MAAA,CACA,QAAAjZ,EAAAvsD,EAAAwlE,MAA2BjZ,GAAG,CAC9B,GAAAA,IAAAz1C,EAAA,OAAAwuD,GAAAtlE,GAAAtE,EACA,GAAA6wD,IAAAnjD,EAAA,OAAAk8D,GAAAtlE,GAAA8M,EACAy/C,IAAAkZ,QAEAxhE,EAAA,OAEA,GAAA6S,EAAA4+C,SAAAtsD,EAAAssD,OAAA5+C,EAAA9W,EAAAoJ,EAAAqxB,MAA4C,CAC5C8xB,GAAA,EACA,QAAA17B,EAAA7wB,EAAAwlE,MAA2B30C,GAAG,CAC9B,GAAAA,IAAA/Z,EAAA,CACAy1C,GAAA,EACAz1C,EAAA9W,EACAoJ,EAAAqxB,EACA,MAEA,GAAA5J,IAAAznB,EAAA,CACAmjD,GAAA,EACAnjD,EAAApJ,EACA8W,EAAA2jB,EACA,MAEA5J,IAAA40C,QAEA,IAAAlZ,EAAA,CACA,IAAA17B,EAAA4J,EAAA+qC,MAAyB30C,GAAG,CAC5B,GAAAA,IAAA/Z,EAAA,CACAy1C,GAAA,EACAz1C,EAAA2jB,EACArxB,EAAApJ,EACA,MAEA,GAAA6wB,IAAAznB,EAAA,CACAmjD,GAAA,EACAnjD,EAAAqxB,EACA3jB,EAAA9W,EACA,MAEA6wB,IAAA40C,QAEAlZ,GAAAtoD,EAAA,QAGA6S,EAAAouD,YAAA97D,GAAAnF,EAAA,OAGA,OADA,IAAA6S,EAAAu+C,KAAApxD,EAAA,OACA6S,EAAA89C,UAAAhwD,UAAAkS,EAAApb,EAAAoR,EAGA44D,CAAAhqE,IACA,YACA,QAAAoR,EAAApR,IAAkB,CAClB,OAAAoR,EAAAuoD,KAAA,IAAAvoD,EAAAuoD,IAAA,OAAAvoD,EACA,GAAAA,EAAA04D,MAAA14D,EAAA04D,MAAA9P,OAAA5oD,MAAA04D,UAAiD,CACjD,GAAA14D,IAAApR,EAAA,MACA,MAAYoR,EAAA24D,SAAY,CACxB,IAAA34D,EAAA4oD,QAAA5oD,EAAA4oD,SAAAh6D,EAAA,YACAoR,IAAA4oD,OAEA5oD,EAAA24D,QAAA/P,OAAA5oD,EAAA4oD,OACA5oD,IAAA24D,SAGA,YAEA,IAAAE,GAAAzhE,GAAA60D,OAAA,CACA6M,cAAA,KACAC,YAAA,KACAC,cAAA,OAEAC,GAAA7hE,GAAA60D,OAAA,CACAiN,cAAA,SAAAtqE,GACA,wBAAAA,IAAAsqE,cAAA5jE,OAAA4jE,iBAGAC,GAAA5D,GAAAtJ,OAAA,CACA6K,cAAA,OAEA,SAAAsC,GAAAxqE,GACA,IAAAoR,EAAApR,EAAAs+D,QAGA,MAFA,aAAAt+D,EAAA,KAAAA,IAAAyqE,WAAA,KAAAr5D,IAAApR,EAAA,IAAAA,EAAAoR,EACA,KAAApR,MAAA,IACA,IAAAA,GAAA,KAAAA,IAAA,EAEA,IAAA0qE,GAAA,CACAC,IAAA,SACAC,SAAA,IACAC,KAAA,YACAC,GAAA,UACAC,MAAA,aACAC,KAAA,YACAC,IAAA,SACAC,IAAA,KACAC,KAAA,cACAC,KAAA,cACAC,OAAA,aACAC,gBAAA,gBAEAC,GAAA,CACAC,EAAA,YACAC,EAAA,MACAC,GAAA,QACAC,GAAA,QACAC,GAAA,QACAC,GAAA,UACAC,GAAA,MACAC,GAAA,QACAC,GAAA,WACAC,GAAA,SACAC,GAAA,IACAC,GAAA,SACAC,GAAA,WACAC,GAAA,MACAC,GAAA,OACAC,GAAA,YACAC,GAAA,UACAC,GAAA,aACAC,GAAA,YACAC,GAAA,SACAC,GAAA,SACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,MACAC,IAAA,MACAC,IAAA,MACAC,IAAA,UACAC,IAAA,aACAC,IAAA,QAEAC,GAAAjH,GAAAtJ,OAAA,CACAn+D,IAAA,SAAAc,GACA,GAAAA,EAAAd,IAAA,CACA,IAAAkS,EAAAs5D,GAAA1qE,EAAAd,MAAAc,EAAAd,IACA,oBAAAkS,EAAA,OAAAA,EAEA,mBAAApR,EAAAqF,KAAA,MAAArF,EAAAwqE,GAAAxqE,IAAA,QAAAmM,OAAAG,aAAAtM,GAAA,YAAAA,EAAAqF,MAAA,UAAArF,EAAAqF,KAAAkmE,GAAAvrE,EAAAs+D,UAAA,mBAEAuP,SAAA,KACAhP,QAAA,KACAkJ,SAAA,KACAjJ,OAAA,KACAC,QAAA,KACA+O,OAAA,KACAnP,OAAA,KACAuI,iBAAAC,GACAsD,SAAA,SAAAzqE,GACA,mBAAAA,EAAAqF,KAAAmlE,GAAAxqE,GAAA,GAEAs+D,QAAA,SAAAt+D,GACA,kBAAAA,EAAAqF,MAAA,UAAArF,EAAAqF,KAAArF,EAAAs+D,QAAA,GAEAM,MAAA,SAAA5+D,GACA,mBAAAA,EAAAqF,KAAAmlE,GAAAxqE,GAAA,YAAAA,EAAAqF,MAAA,UAAArF,EAAAqF,KAAArF,EAAAs+D,QAAA,KAGAyP,GAAAvG,GAAAnK,OAAA,CACA2Q,aAAA,OAEAC,GAAAtH,GAAAtJ,OAAA,CACA6Q,QAAA,KACAC,cAAA,KACAC,eAAA,KACAtP,OAAA,KACAC,QAAA,KACAF,QAAA,KACAkJ,SAAA,KACAb,iBAAAC,KAEAkH,GAAA7lE,GAAA60D,OAAA,CACAyG,aAAA,KACAqG,YAAA,KACAC,cAAA,OAEAkE,GAAA9G,GAAAnK,OAAA,CACAkR,OAAA,SAAAvuE,GACA,iBAAAA,IAAAuuE,OAAA,gBAAAvuE,KAAAwuE,YAAA,GAEAC,OAAA,SAAAzuE,GACA,iBAAAA,IAAAyuE,OAAA,gBAAAzuE,KAAA0uE,YAAA,eAAA1uE,KAAA2uE,WAAA,GAEAC,OAAA,KACAC,UAAA,OAEAC,GAAA,oBAAAxT,EAAA,iBAAAC,EAAA,uBAAAC,EAAA,22BAAAC,GAAA,0DACAsT,GAAA,GACAC,GAAA,GACA,SAAAC,GAAAjvE,EAAAoR,GACA,IAAAgK,EAAApb,EAAA,GAEA0N,EAAA,OADA1N,IAAA,IACA,GAAAgkE,cAAAhkE,EAAA0O,MAAA,IACA0C,EAAA,CACAsmD,wBAAA,CACAqG,QAAArwD,EACAswD,SAAAtwD,EAAA,WAEAqqD,aAAA,CAAA38C,GACA8zD,cAAA99D,GAEA29D,GAAA/uE,GAAAoR,EACA49D,GAAA5zD,GAAAhK,EAEA,yvBAAAxE,QAAA,SAAA5M,GACAivE,GAAAjvE,GAAA,KAEA8uE,GAAAliE,QAAA,SAAA5M,GACAivE,GAAAjvE,GAAA,KAEA,IAAAmvE,GAAA,CACA3X,WAAAuX,GACAK,+BAAA,SAAApvE,GAEA,iBADAA,EAAAgvE,GAAAhvE,MACA,IAAAA,EAAAkvE,eAEA3X,cAAA,SAAAv3D,EAAAoR,EAAAgK,EAAA1N,GACA,IAAApJ,EAAA0qE,GAAAhvE,GACA,IAAAsE,EAAA,YACA,OAAAtE,GACA,eACA,OAAAwqE,GAAApvD,GAAA,YACA,cACA,YACApb,EAAA4tE,GACA,MACA,WACA,YACA5tE,EAAAuqE,GACA,MACA,YACA,OAAAnvD,EAAA4sD,OAAA,YACA,eACA,eACA,gBACA,gBACA,cACA,eACA,gBACA,kBACAhoE,EAAAwnE,GACA,MACA,WACA,cACA,gBACA,eACA,gBACA,eACA,gBACA,WACAxnE,EAAA+tE,GACA,MACA,kBACA,eACA,gBACA,iBACA/tE,EAAAiuE,GACA,MACA,KAAA3S,EACA,KAAAC,EACA,KAAAC,EACAx7D,EAAAiqE,GACA,MACA,KAAAxO,GACAz7D,EAAAquE,GACA,MACA,aACAruE,EAAA2mE,GACA,MACA,YACA3mE,EAAAsuE,GACA,MACA,WACA,UACA,YACAtuE,EAAAqqE,GACA,MACA,wBACA,yBACA,oBACA,kBACA,kBACA,iBACA,kBACA,gBACArqE,EAAAuoE,GACA,MACA,QACAvoE,EAAAwI,GAIA,OADA+xD,EADAnpD,EAAApR,EAAA08D,UAAAp4D,EAAA8M,EAAAgK,EAAA1N,IAEA0D,IAGAi+D,GAAAF,GAAAC,+BACAE,GAAA,GACA,SAAAC,GAAAvvE,GACA,IAAAoR,EAAApR,EAAAwvE,WACAp0D,EAAAhK,EACA,GACA,IAAAgK,EAAA,CACApb,EAAAyvE,UAAAvrE,KAAAkX,GACA,MAEA,IAAA1N,EACA,IAAAA,EAAA0N,EAAe1N,EAAAssD,QAAUtsD,IAAAssD,OAEzB,KADAtsD,EAAA,IAAAA,EAAAisD,IAAA,KAAAjsD,EAAAwrD,UAAAwW,eACA,MACA1vE,EAAAyvE,UAAAvrE,KAAAkX,GACAA,EAAAq+C,EAAA/rD,SACG0N,GACH,IAAAA,EAAA,EAAaA,EAAApb,EAAAyvE,UAAAzzE,OAAwBof,IAAA,CACrChK,EAAApR,EAAAyvE,UAAAr0D,GACA,IAAA9W,EAAAw8D,GAAA9gE,EAAAg8D,aACAtuD,EAAA1N,EAAA2vE,aACA,QAAA5wC,EAAA/+B,EAAAg8D,YAAAnL,EAAA,KAAA17B,EAAA,EAAgDA,EAAAmiC,EAAAt7D,OAAem5B,IAAA,CAC/D,IAAAzjB,EAAA4lD,EAAAniC,GACAzjB,QAAA6lD,cAAA7pD,EAAA0D,EAAA2tB,EAAAz6B,MAAAusD,EAAAzvB,EAAAyvB,EAAAn/C,IAEA0nD,EAAAvI,IAGA,IAAA+e,IAAA,EACA,SAAAre,GAAAvxD,EAAAoR,GACA,IAAAA,EAAA,YACA,IAAAgK,GAAAi0D,GAAArvE,GAAA6vE,GAAAC,IAAAzZ,KAAA,KAAAr2D,GACAoR,EAAA2+D,iBAAA/vE,EAAAob,GAAA,GAEA,SAAA40D,GAAAhwE,EAAAoR,GACA,IAAAA,EAAA,YACA,IAAAgK,GAAAi0D,GAAArvE,GAAA6vE,GAAAC,IAAAzZ,KAAA,KAAAr2D,GACAoR,EAAA2+D,iBAAA/vE,EAAAob,GAAA,GAEA,SAAAy0D,GAAA7vE,EAAAoR,GACAquD,GAAAqQ,GAAA9vE,EAAAoR,GAEA,SAAA0+D,GAAA9vE,EAAAoR,GACA,GAAAw+D,GAAA,CACA,IAAAx0D,EAAA0lD,GAAA1vD,GAGA,GADA,QADAgK,EAAAq+C,EAAAr+C,KACA,kBAAAA,EAAAu+C,KAAA,IAAA+P,GAAAtuD,OAAA,MACAk0D,GAAAtzE,OAAA,CACA,IAAA0R,EAAA4hE,GAAAvc,MACArlD,EAAAiiE,aAAA3vE,EACA0N,EAAAsuD,YAAA5qD,EACA1D,EAAA8hE,WAAAp0D,EACApb,EAAA0N,OACK1N,EAAA,CACL2vE,aAAA3vE,EACAg8D,YAAA5qD,EACAo+D,WAAAp0D,EACAq0D,UAAA,IAEA,IACA7P,GAAA2P,GAAAvvE,GACK,QACLA,EAAA2vE,aAAA,KAAA3vE,EAAAg8D,YAAA,KAAAh8D,EAAAwvE,WAAA,KAAAxvE,EAAAyvE,UAAAzzE,OAAA,KAAAszE,GAAAtzE,QAAAszE,GAAAprE,KAAAlE,KAIA,IAAAiwE,GAAA,GACAC,GAAA,EACAC,GAAA,wBAAA3yE,KAAA87D,UAAA5qD,MAAA,GACA,SAAA0hE,GAAApwE,GAEA,OADAhB,OAAAM,UAAAwM,eAAArL,KAAAT,EAAAmwE,MAAAnwE,EAAAmwE,IAAAD,KAAAD,GAAAjwE,EAAAmwE,KAAA,IACAF,GAAAjwE,EAAAmwE,KAEA,SAAAE,GAAArwE,GAEA,wBADAA,MAAA,qBAAAy6D,uBAAA,IACA,YACA,IACA,OAAAz6D,EAAAulE,eAAAvlE,EAAAswE,KACG,MAAAl/D,GACH,OAAApR,EAAAswE,MAGA,SAAAC,GAAAvwE,GACA,KAAQA,KAAAwwE,YAAmBxwE,IAAAwwE,WAC3B,OAAAxwE,EAEA,SAAAywE,GAAAzwE,EAAAoR,GACA,IAEA1D,EAFA0N,EAAAm1D,GAAAvwE,GAEA,IADAA,EAAA,EACaob,GAAG,CAChB,OAAAA,EAAA6lD,SAAA,CAEA,GADAvzD,EAAA1N,EAAAob,EAAAygD,YAAA7/D,OACAgE,GAAAoR,GAAA1D,GAAA0D,EAAA,OACAs/D,KAAAt1D,EACAvf,OAAAuV,EAAApR,GAEAA,EAAA0N,EAEA1N,EAAA,CACA,KAAYob,GAAG,CACf,GAAAA,EAAAu1D,YAAA,CACAv1D,IAAAu1D,YACA,MAAA3wE,EAEAob,IAAAs+C,WAEAt+C,OAAA,EAEAA,EAAAm1D,GAAAn1D,IAMA,SAAAw1D,KACA,QAAA5wE,EAAA0G,OAAA0K,EAAAi/D,KAAgCj/D,aAAApR,EAAA6wE,mBAAkC,CAClE,IACA,IAAAz1D,EAAA,kBAAAhK,EAAA0/D,cAAAjD,SAAAkD,KACK,MAAArjE,GACL0N,GAAA,EAEA,IAAAA,EAA+B,MAC/BhK,EAAAi/D,IADArwE,EAAAoR,EAAA0/D,eACArW,UAEA,OAAArpD,EAEA,SAAA4/D,GAAAhxE,GACA,IAAAoR,EAAApR,KAAA6gE,UAAA7gE,EAAA6gE,SAAAlG,cACA,OAAAvpD,IAAA,UAAAA,IAAA,SAAApR,EAAAqF,MAAA,WAAArF,EAAAqF,MAAA,QAAArF,EAAAqF,MAAA,QAAArF,EAAAqF,MAAA,aAAArF,EAAAqF,OAAA,aAAA+L,GAAA,SAAApR,EAAAixE,iBAgEA,SAAAC,GAAAlxE,GACA,IAAAoR,EAAAw/D,KACAx1D,EAAApb,EAAAmxE,YACAzjE,EAAA1N,EAAAoxE,eACA,GAAAhgE,IAAAgK,QAAAkqD,eArFA,SAAA+L,EAAArxE,EAAAoR,GACA,SAAApR,IAAAoR,KAAApR,IAAAoR,KAAApR,GAAA,IAAAA,EAAAihE,YAAA7vD,GAAA,IAAAA,EAAA6vD,SAAAoQ,EAAArxE,EAAAoR,EAAAsoD,YAAA,aAAA15D,IAAAsxE,SAAAlgE,KAAApR,EAAAuxE,4BAAA,GAAAvxE,EAAAuxE,wBAAAngE,MAoFAigE,CAAAj2D,EAAAkqD,cAAAkM,gBAAAp2D,GAAA,CACA,UAAA1N,GAAAsjE,GAAA51D,GAAA,GAAAhK,EAAA1D,EAAAtJ,WAAA,KAAApE,EAAA0N,EAAAwF,OAAAlT,EAAAoR,GAAA,mBAAAgK,IAAAq2D,eAAArgE,EAAAgK,EAAAs2D,aAAAl0E,KAAAE,IAAAsC,EAAAob,EAAA/X,MAAArH,aAA4K,IAAAgE,GAAAoR,EAAAgK,EAAAkqD,eAAA7K,WAAArpD,EAAAk4D,aAAA5iE,QAAAirE,aAAA,CAC5K3xE,IAAA2xE,eACA,IAAArtE,EAAA8W,EAAAygD,YAAA7/D,OACA+iC,EAAAvhC,KAAAE,IAAAgQ,EAAAtJ,MAAAE,GACAoJ,OAAA,IAAAA,EAAAwF,IAAA6rB,EAAAvhC,KAAAE,IAAAgQ,EAAAwF,IAAA5O,IACAtE,EAAAq9D,QAAAt+B,EAAArxB,IAAApJ,EAAAoJ,IAAAqxB,IAAAz6B,GACAA,EAAAmsE,GAAAr1D,EAAA2jB,GACA,IAAA8xB,EAAA4f,GAAAr1D,EAAA1N,GACApJ,GAAAusD,IAAA,IAAA7wD,EAAA4xE,YAAA5xE,EAAA6xE,aAAAvtE,EAAAosE,MAAA1wE,EAAA8xE,eAAAxtE,EAAAzI,QAAAmE,EAAA+xE,YAAAlhB,EAAA6f,MAAA1wE,EAAAgyE,cAAAnhB,EAAAh1D,WAAAuV,IAAA6gE,eAAAC,SAAA5tE,EAAAosE,KAAApsE,EAAAzI,QAAAmE,EAAAmyE,kBAAApzC,EAAArxB,GAAA1N,EAAAoyE,SAAAhhE,GAAApR,EAAAq9D,OAAAxM,EAAA6f,KAAA7f,EAAAh1D,UAAAuV,EAAAihE,OAAAxhB,EAAA6f,KAAA7f,EAAAh1D,QAAAmE,EAAAoyE,SAAAhhE,KAGA,IADAA,EAAA,GACApR,EAAAob,EAAepb,IAAA05D,YAAkB,IAAA15D,EAAAihE,UAAA7vD,EAAAlN,KAAA,CACjCouE,QAAAtyE,EACA4tD,KAAA5tD,EAAAuyE,WACAC,IAAAxyE,EAAAyyE,YAGA,IADA,oBAAAr3D,EAAAs3D,OAAAt3D,EAAAs3D,QACAt3D,EAAA,EAAeA,EAAAhK,EAAApV,OAAcof,KAAApb,EAAAoR,EAAAgK,IAAAk3D,QAAAC,WAAAvyE,EAAA4tD,KAAA5tD,EAAAsyE,QAAAG,UAAAzyE,EAAAwyE,KAG7B,IAAAG,GAAAnY,GAAA,iBAAAC,UAAA,IAAAA,SAAAiD,aACAkV,GAAA,CACAC,OAAA,CACAnb,wBAAA,CACAqG,QAAA,WACAC,SAAA,mBAEAjG,aAAA,iFAAAprD,MAAA,OAGAmmE,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,IAAA,EACA,SAAAC,GAAAlzE,EAAAoR,GACA,IAAAgK,EAAAhK,EAAA1K,SAAA0K,IAAAqpD,SAAA,IAAArpD,EAAA6vD,SAAA7vD,IAAAk0D,cACA,OAAA2N,IAAA,MAAAH,SAAAzC,GAAAj1D,GAAA,MAEA,mBADAA,EAAA03D,KACA9B,GAAA51D,KAAA,CACAhX,MAAAgX,EAAAq2D,eACAv+D,IAAAkI,EAAAs2D,cACGt2D,EAAA,CACHy2D,YADGz2D,KAAAkqD,eAAAlqD,EAAAkqD,cAAAgE,aAAA5iE,QAAAirE,gBACHE,WACAC,aAAA12D,EAAA02D,aACAC,UAAA32D,EAAA22D,UACAC,YAAA52D,EAAA42D,aAEAgB,IAAAxzB,GAAAwzB,GAAA53D,GAAA,MAAA43D,GAAA53D,GAAApb,EAAAwI,GAAAk0D,UAAAkW,GAAAC,OAAAE,GAAA/yE,EAAAoR,IAAA/L,KAAA,SAAArF,EAAAtB,OAAAo0E,GAAAvY,EAAAv6D,OAEA,IAAAmzE,GAAA,CACA3b,WAAAob,GACArb,cAAA,SAAAv3D,EAAAoR,EAAAgK,EAAA1N,GACA,IACAqxB,EADAz6B,EAAAoJ,EAAAhH,SAAAgH,IAAA+sD,SAAA,IAAA/sD,EAAAuzD,SAAAvzD,IAAA43D,cAEA,KAAAvmC,GAAAz6B,GAAA,CACAtE,EAAA,CACAsE,EAAA8rE,GAAA9rE,GACAy6B,EAAA+4B,EAAAsb,SACA,QAAAviB,EAAA,EAAuBA,EAAA9xB,EAAA/iC,OAAc60D,IAAA,CACrC,IAAA17B,EAAA4J,EAAA8xB,GACA,IAAAvsD,EAAAwH,eAAAqpB,KAAA7wB,EAAA6wB,GAAA,CACA7wB,GAAA,EACA,MAAAtE,GAGAsE,GAAA,EAEAy6B,GAAAz6B,EAEA,GAAAy6B,EAAA,YAEA,OADAz6B,EAAA8M,EAAAyoD,EAAAzoD,GAAA1K,OACA1G,GACA,aACA4gE,GAAAt8D,IAAA,SAAAA,EAAA2sE,mBAAA6B,GAAAxuE,EAAAyuE,GAAA3hE,EAAA4hE,GAAA,MACA,MACA,WACAA,GAAAD,GAAAD,GAAA,KACA,MACA,gBACAG,IAAA,EACA,MACA,kBACA,cACA,cACA,OAAAA,IAAA,EAAAC,GAAA93D,EAAA1N,GACA,sBACA,GAAAilE,GAAA,MACA,cACA,YACA,OAAAO,GAAA93D,EAAA1N,GAEA,cAqBA,SAAA2lE,GAAArzE,EAAAoR,GAKA,OAJApR,EAAAwM,EAAA,CACAzB,cAAA,GACGqG,IACHA,EAXA,SAAApR,GACA,IAAAoR,EAAA,GAIA,OAHAs/C,EAAAuD,SAAArnD,QAAA5M,EAAA,SAAAA,GACA,MAAAA,IAAAoR,GAAApR,KAEAoR,EAMAkiE,CAAAliE,EAAArG,aAAA/K,EAAA+K,SAAAqG,GACApR,EAEA,SAAAuzE,GAAAvzE,EAAAoR,EAAAgK,EAAA1N,GAEA,GADA1N,IAAAwzE,QACApiE,EAAA,CACAA,EAAA,GACA,QAAA9M,EAAA,EAAmBA,EAAA8W,EAAApf,OAAcsI,IAAA8M,EAAA,IAAAgK,EAAA9W,KAAA,EACjC,IAAA8W,EAAA,EAAeA,EAAApb,EAAAhE,OAAcof,IAAA9W,EAAA8M,EAAAtF,eAAA,IAAA9L,EAAAob,GAAA/X,OAAArD,EAAAob,GAAAq4D,WAAAnvE,IAAAtE,EAAAob,GAAAq4D,SAAAnvE,MAAAoJ,IAAA1N,EAAAob,GAAAs4D,iBAAA,OAC1B,CAGH,IAFAt4D,EAAA,GAAAqpD,GAAArpD,GACAhK,EAAA,KACA9M,EAAA,EAAeA,EAAAtE,EAAAhE,OAAcsI,IAAA,CAC7B,GAAAtE,EAAAsE,GAAAjB,QAAA+X,EAGA,OAFApb,EAAAsE,GAAAmvE,UAAA,OACA/lE,IAAA1N,EAAAsE,GAAAovE,iBAAA,IAGA,OAAAtiE,GAAApR,EAAAsE,GAAA60D,WAAA/nD,EAAApR,EAAAsE,IAEA,OAAA8M,MAAAqiE,UAAA,IAGA,SAAAE,GAAA3zE,EAAAoR,GAEA,OADA,MAAAA,EAAAwiE,yBAAArrE,EAAA,MACAiE,EAAA,GAAa4E,EAAA,CACb/N,WAAA,EACAuhE,kBAAA,EACA75D,SAAA,GAAA/K,EAAA6kE,cAAAG,eAGA,SAAA6O,GAAA7zE,EAAAoR,GACA,IAAAgK,EAAAhK,EAAA/N,MACA,MAAA+X,MAAAhK,EAAAwzD,aAAA,OAAAxzD,IAAArG,YAAA,MAAAqQ,GAAA7S,EAAA,MAAAhB,MAAA8rD,QAAAjiD,KAAA,GAAAA,EAAApV,QAAAuM,EAAA,MAAA6I,IAAA,IAAAgK,EAAAhK,GAAA,MAAAgK,MAAA,KACApb,EAAA6kE,cAAA,CACAG,aAAAP,GAAArpD,IAGA,SAAA04D,GAAA9zE,EAAAoR,GACA,IAAAgK,EAAAqpD,GAAArzD,EAAA/N,OACAqK,EAAA+2D,GAAArzD,EAAAwzD,cACA,MAAAxpD,OAAA,GAAAA,KAAApb,EAAAqD,QAAArD,EAAAqD,MAAA+X,GAAA,MAAAhK,EAAAwzD,cAAA5kE,EAAA4kE,eAAAxpD,IAAApb,EAAA4kE,aAAAxpD,IACA,MAAA1N,IAAA1N,EAAA4kE,aAAA,GAAAl3D,GAEA,SAAAqmE,GAAA/zE,GACA,IAAAoR,EAAApR,EAAA67D,YACAzqD,IAAApR,EAAA6kE,cAAAG,eAAAhlE,EAAAqD,MAAA+N,GApEA0nD,EAAAC,uBAAA,0HAAApsD,MAAA,MACAqrD,EAAA8B,EACA7B,EAAA2B,EACA1B,EAAA2B,EACAf,EAAAE,yBAAA,CACAgb,kBAAA7E,GACA8E,sBAAA5K,GACA6K,kBAAAzN,GACA0N,kBAAAhB,GACAiB,uBAAA1V,KA6DA,IAAA2V,GAAA,CACAC,KAAA,+BACAC,OAAA,qCACAC,IAAA,8BAEA,SAAAC,GAAAz0E,GACA,OAAAA,GACA,UACA,mCACA,WACA,2CACA,QACA,sCAGA,SAAA00E,GAAA10E,EAAAoR,GACA,aAAApR,GAAA,iCAAAA,EAAAy0E,GAAArjE,GAAA,+BAAApR,GAAA,kBAAAoR,EAAA,+BAAApR,EAEA,IACAA,GADA20E,QAAA,EACAC,IAAA50E,GAMG,SAAAA,EAAAoR,GACH,GAAApR,EAAA60E,eAAAR,GAAAG,KAAA,cAAAx0E,IAAA80E,UAAA1jE,MAAuE,CAGvE,KAFAujE,OAAAla,SAAA3wD,cAAA,QACAgrE,UAAA,QAAA1jE,EAAA,SACAA,EAAAujE,GAAAnE,WAA6BxwE,EAAAwwE,YAAcxwE,EAAA+0E,YAAA/0E,EAAAwwE,YAC3C,KAAYp/D,EAAAo/D,YAAcxwE,EAAAg1E,YAAA5jE,EAAAo/D,cAV1B,qBAAAyE,aAAAC,wBAAA,SAAA9jE,EAAAgK,EAAA1N,EAAApJ,GACA2wE,MAAAC,wBAAA,WACA,OAAAl1E,GAAAoR,EAAAgK,MAEKpb,IASL,SAAAm1E,GAAAn1E,EAAAoR,GACA,GAAAA,EAAA,CACA,IAAAgK,EAAApb,EAAAwwE,WACA,GAAAp1D,OAAApb,EAAAo1E,WAAA,IAAAh6D,EAAA6lD,SAEA,YADA7lD,EAAAi6D,UAAAjkE,GAIApR,EAAA67D,YAAAzqD,EAEA,IAAAkkE,GAAA,CACAC,yBAAA,EACAC,mBAAA,EACAC,kBAAA,EACAC,kBAAA,EACAC,SAAA,EACAC,cAAA,EACAC,iBAAA,EACAC,aAAA,EACAC,SAAA,EACAC,MAAA,EACAC,UAAA,EACAC,cAAA,EACAC,YAAA,EACAC,cAAA,EACAC,WAAA,EACAC,UAAA,EACAC,SAAA,EACAC,YAAA,EACAC,aAAA,EACAC,cAAA,EACAC,YAAA,EACAC,eAAA,EACAC,gBAAA,EACAC,iBAAA,EACAC,YAAA,EACAC,WAAA,EACAC,YAAA,EACAC,SAAA,EACAvrC,OAAA,EACAwrC,SAAA,EACAC,SAAA,EACAC,QAAA,EACAC,QAAA,EACAC,MAAA,EACAC,aAAA,EACAC,cAAA,EACAC,aAAA,EACAC,iBAAA,EACAC,kBAAA,EACAC,kBAAA,EACAC,eAAA,EACAC,aAAA,GAEAC,GAAA,0BAOA,SAAAC,GAAAj4E,EAAAoR,EAAAgK,GACA,aAAAhK,GAAA,mBAAAA,GAAA,KAAAA,EAAA,GAAAgK,GAAA,kBAAAhK,GAAA,IAAAA,GAAAkkE,GAAAxpE,eAAA9L,IAAAs1E,GAAAt1E,IAAA,GAAAoR,GAAA8mE,OAAA9mE,EAAA,KAEA,SAAA+mE,GAAAn4E,EAAAoR,GAEA,QAAAgK,KADApb,IAAAgK,MACAoH,EAAA,GAAAA,EAAAtF,eAAAsP,GAAA,CACA,IAAA1N,EAAA,IAAA0N,EAAA6zC,QAAA,MACA3qD,EAAA2zE,GAAA78D,EAAAhK,EAAAgK,GAAA1N,GACA,UAAA0N,MAAA,YACA1N,EAAA1N,EAAAo4E,YAAAh9D,EAAA9W,GAAAtE,EAAAob,GAAA9W,GAfAtF,OAAA8N,KAAAwoE,IAAA1oE,QAAA,SAAA5M,GACAg4E,GAAAprE,QAAA,SAAAwE,GACAA,IAAApR,EAAAsvB,OAAA,GAAA00C,cAAAhkE,EAAAgvD,UAAA,GACAsmB,GAAAlkE,GAAAkkE,GAAAt1E,OAeA,IAAAk8B,GAAA1vB,EAAA,CACA6rE,UAAA,GACC,CACDC,MAAA,EACAC,MAAA,EACAC,IAAA,EACAC,KAAA,EACAC,OAAA,EACAC,IAAA,EACAC,KAAA,EACAt7E,OAAA,EACAu7E,QAAA,EACAC,MAAA,EACAC,MAAA,EACAC,OAAA,EACAhsE,QAAA,EACAisE,OAAA,EACAC,KAAA,IAEA,SAAAC,GAAAn5E,EAAAoR,GACAA,IAAA8qB,GAAAl8B,KAAA,MAAAoR,EAAArG,UAAA,MAAAqG,EAAAwiE,0BAAArrE,EAAA,MAAAvI,EAAA,UAAAoR,EAAAwiE,0BAAA,MAAAxiE,EAAArG,UAAAxC,EAAA,wBAAA6I,EAAAwiE,yBAAA,WAAAxiE,EAAAwiE,yBAAArrE,EAAA,aAAA6I,EAAApH,OAAA,kBAAAoH,EAAApH,OAAAzB,EAAA,UAEA,SAAAqwC,GAAA54C,EAAAoR,GACA,QAAApR,EAAAivD,QAAA,6BAAA79C,EAAAgoE,GACA,OAAAp5E,GACA,qBACA,oBACA,gBACA,oBACA,oBACA,uBACA,qBACA,oBACA,SACA,QACA,UAGA,SAAAq5E,GAAAr5E,EAAAoR,GAEA,IAAAgK,EAAAg1D,GADApwE,EAAA,IAAAA,EAAAihE,UAAA,KAAAjhE,EAAAihE,SAAAjhE,IAAAslE,eAEAl0D,EAAA0mD,EAAA1mD,GACA,QAAA1D,EAAA,EAAiBA,EAAA0D,EAAApV,OAAc0R,IAAA,CAC/B,IAAApJ,EAAA8M,EAAA1D,GACA,IAAA0N,EAAAtP,eAAAxH,KAAA8W,EAAA9W,GAAA,CACA,OAAAA,GACA,aACA0rE,GAAA,SAAAhwE,GACA,MACA,YACA,WACAgwE,GAAA,QAAAhwE,GACAgwE,GAAA,OAAAhwE,GACAob,EAAAk+D,MAAA,EACAl+D,EAAAs3D,OAAA,EACA,MACA,aACA,YACAxR,GAAA58D,IAAA0rE,GAAA1rE,EAAAtE,GACA,MACA,cACA,aACA,YACA,MACA,SACA,IAAA07D,GAAAzM,QAAA3qD,IAAAitD,GAAAjtD,EAAAtE,GAEAob,EAAA9W,IAAA,IAIA,SAAAi1E,MACA,IAAAC,GAAA,KACAC,GAAA,KACA,SAAAC,GAAA15E,EAAAoR,GACA,OAAApR,GACA,aACA,YACA,aACA,eACA,QAAAoR,EAAAuoE,UAEA,SAEA,SAAAC,GAAA55E,EAAAoR,GACA,mBAAApR,GAAA,WAAAA,GAAA,aAAAA,GAAA,kBAAAoR,EAAArG,UAAA,kBAAAqG,EAAArG,UAAA,kBAAAqG,EAAAwiE,yBAAA,OAAAxiE,EAAAwiE,yBAAA,MAAAxiE,EAAAwiE,wBAAAiG,OAEA,IAAAC,GAAA,oBAAAC,2BAAA,EACAC,GAAA,oBAAAC,+BAAA,EACAC,GAAA5zD,EAAA6zD,0BACAC,GAAA9zD,EAAA+zD,wBAsBA,SAAAC,GAAAt6E,GACA,IAAAA,IAAA2wE,YAAyB3wE,GAAA,IAAAA,EAAAihE,UAAA,IAAAjhE,EAAAihE,UAA2CjhE,IAAA2wE,YACpE,OAAA3wE,EAEA,SAAAu6E,GAAAv6E,GACA,IAAAA,IAAAwwE,WAAwBxwE,GAAA,IAAAA,EAAAihE,UAAA,IAAAjhE,EAAAihE,UAA2CjhE,IAAA2wE,YACnE,OAAA3wE,EAEA,IAAAw6E,IACA,IAAAC,GAAA,GACAC,IAAA,EACA,SAAA/oB,GAAA3xD,GACA,EAAA06E,KAAA16E,EAAAkJ,QAAAuxE,GAAAC,IAAAD,GAAAC,IAAA,KAAAA,MAEA,SAAA9oB,GAAA5xD,EAAAoR,GAEAqpE,KADAC,IACA16E,EAAAkJ,QACAlJ,EAAAkJ,QAAAkI,EAEA,IAAAupE,GAAA,GACA3oB,GAAA,CACA9oD,QAAAyxE,IAEAzoB,GAAA,CACAhpD,SAAA,GAEA0xE,GAAAD,GACA,SAAAE,GAAA76E,EAAAoR,GACA,IAAAgK,EAAApb,EAAAqF,KAAAy1E,aACA,IAAA1/D,EAAA,OAAAu/D,GACA,IAAAjtE,EAAA1N,EAAAk5D,UACA,GAAAxrD,KAAAqtE,8CAAA3pE,EAAA,OAAA1D,EAAAstE,0CACA,IACAj8C,EADAz6B,EAAA,GAEA,IAAAy6B,KAAA3jB,EAAA9W,EAAAy6B,GAAA3tB,EAAA2tB,GAEA,OADArxB,KAAA1N,IAAAk5D,WAAA6hB,4CAAA3pE,EAAApR,EAAAg7E,0CAAA12E,GACAA,EAEA,SAAA6tD,GAAAnyD,GAEA,eADAA,IAAAi7E,yBACA,IAAAj7E,EAEA,SAAAk7E,GAAAl7E,GACA2xD,GAAAO,IACAP,GAAAK,IAEA,SAAAmpB,GAAAn7E,GACA2xD,GAAAO,IACAP,GAAAK,IAEA,SAAAopB,GAAAp7E,EAAAoR,EAAAgK,GACA42C,GAAA9oD,UAAAyxE,IAAApyE,EAAA,OACAqpD,GAAAI,GAAA5gD,GACAwgD,GAAAM,GAAA92C,GAEA,SAAAigE,GAAAr7E,EAAAoR,EAAAgK,GACA,IAAA1N,EAAA1N,EAAAk5D,UAEA,GADAl5D,EAAAoR,EAAA6pE,kBACA,oBAAAvtE,EAAA4tE,gBAAA,OAAAlgE,EAEA,QAAA9W,KADAoJ,IAAA4tE,kBACAh3E,KAAAtE,GAAAuI,EAAA,MAAAw6D,GAAA3xD,IAAA,UAAA9M,GACA,OAAAkI,EAAA,GAAa4O,EAAA1N,GAEb,SAAA6tE,GAAAv7E,GACA,IAAAoR,EAAApR,EAAAk5D,UAKA,OAJA9nD,OAAAoqE,2CAAAb,GACAC,GAAA5oB,GAAA9oD,QACA0oD,GAAAI,GAAA5gD,GACAwgD,GAAAM,MAAAhpD,UACA,EAEA,SAAAuyE,GAAAz7E,EAAAoR,EAAAgK,GACA,IAAA1N,EAAA1N,EAAAk5D,UACAxrD,GAAAnF,EAAA,OACA6S,GAAAhK,EAAAiqE,GAAAr7E,EAAAoR,EAAAwpE,IAAAltE,EAAA8tE,0CAAApqE,EAAAugD,GAAAO,IAAAP,GAAAK,IAAAJ,GAAAI,GAAA5gD,IAAAugD,GAAAO,IACAN,GAAAM,GAAA92C,GAEA,IAAAsgE,GAAA,KACAC,GAAA,KACA,SAAAC,GAAA57E,GACA,gBAAAoR,GACA,IACA,OAAApR,EAAAoR,GACK,MAAAgK,MAkBL,SAAAygE,GAAA77E,EAAAoR,EAAAgK,EAAA1N,GACApN,KAAAq5D,IAAA35D,EACAM,KAAApB,IAAAkc,EACA9a,KAAAypE,QAAAzpE,KAAAwpE,MAAAxpE,KAAA05D,OAAA15D,KAAA44D,UAAA54D,KAAA+E,KAAA/E,KAAAw7E,YAAA,KACAx7E,KAAAlC,MAAA,EACAkC,KAAAyJ,IAAA,KACAzJ,KAAAy7E,aAAA3qE,EACA9Q,KAAA07E,oBAAA17E,KAAA27E,cAAA37E,KAAA47E,YAAA57E,KAAA67E,cAAA,KACA77E,KAAAorB,KAAAhe,EACApN,KAAAqpE,UAAA,EACArpE,KAAA87E,WAAA97E,KAAA+7E,YAAA/7E,KAAAg8E,WAAA,KACAh8E,KAAAi8E,oBAAAj8E,KAAAk8E,eAAA,EACAl8E,KAAAkpE,UAAA,KAEA,SAAApX,GAAApyD,EAAAoR,EAAAgK,EAAA1N,GACA,WAAAmuE,GAAA77E,EAAAoR,EAAAgK,EAAA1N,GAEA,SAAA+uE,GAAAz8E,GAEA,UADAA,IAAAV,aACAU,EAAA6xD,kBAWA,SAAA6qB,GAAA18E,EAAAoR,GACA,IAAAgK,EAAApb,EAAAwpE,UAYA,OAXA,OAAApuD,MAAAg3C,GAAApyD,EAAA25D,IAAAvoD,EAAApR,EAAAd,IAAAc,EAAA0rB,OAAAowD,YAAA97E,EAAA87E,YAAA1gE,EAAA/V,KAAArF,EAAAqF,KAAA+V,EAAA89C,UAAAl5D,EAAAk5D,UAAA99C,EAAAouD,UAAAxpE,IAAAwpE,UAAApuD,MAAA2gE,aAAA3qE,EAAAgK,EAAAuuD,UAAA,EAAAvuD,EAAAkhE,WAAA,KAAAlhE,EAAAihE,YAAA,KAAAjhE,EAAAghE,WAAA,MACAhhE,EAAAmhE,oBAAAv8E,EAAAu8E,oBACAnhE,EAAAohE,eAAAx8E,EAAAw8E,eACAphE,EAAA0uD,MAAA9pE,EAAA8pE,MACA1uD,EAAA+gE,cAAAn8E,EAAAm8E,cACA/gE,EAAA6gE,cAAAj8E,EAAAi8E,cACA7gE,EAAA8gE,YAAAl8E,EAAAk8E,YACA9gE,EAAA4gE,oBAAAh8E,EAAAg8E,oBACA5gE,EAAA2uD,QAAA/pE,EAAA+pE,QACA3uD,EAAAhd,MAAA4B,EAAA5B,MACAgd,EAAArR,IAAA/J,EAAA+J,IACAqR,EAEA,SAAAuhE,GAAA38E,EAAAoR,EAAAgK,EAAA1N,EAAApJ,EAAAy6B,GACA,IAAA8xB,EAAA,EAEA,GADAnjD,EAAA1N,EACA,oBAAAA,EAAAy8E,GAAAz8E,KAAA6wD,EAAA,QAAgD,qBAAA7wD,EAAA6wD,EAAA,OAAsC7wD,EAAA,OAAAA,GACtF,KAAAmiE,GACA,OAAAya,GAAAxhE,EAAArQ,SAAAzG,EAAAy6B,EAAA3tB,GACA,KAAAoxD,GACA,OAAAqa,GAAAzhE,EAAA,EAAA9W,EAAAy6B,EAAA3tB,GACA,KAAAgxD,GACA,OAAAya,GAAAzhE,EAAA,EAAA9W,EAAAy6B,EAAA3tB,GACA,KAAAixD,GACA,OAAAriE,EAAAoyD,GAAA,GAAAh3C,EAAAhK,EAAA,EAAA9M,IAAAw3E,YAAAzZ,GAAAriE,EAAAqF,KAAAg9D,GAAAriE,EAAAw8E,eAAAz9C,EAAA/+B,EACA,KAAA0iE,GACA,OAAA1iE,EAAAoyD,GAAA,GAAAh3C,EAAAhK,EAAA9M,IAAAw3E,YAAApZ,GAAA1iE,EAAAqF,KAAAq9D,GAAA1iE,EAAAw8E,eAAAz9C,EAAA/+B,EACA,QACA,qBAAAA,GAAA,OAAAA,EAAA,OAAAA,EAAAyyD,UACA,KAAA6P,GACAzR,EAAA,GACA,MAAA7wD,EACA,KAAAuiE,GACA1R,EAAA,EACA,MAAA7wD,EACA,KAAAyiE,GACA5R,EAAA,GACA,MAAA7wD,EACA,KAAA2iE,GACA9R,EAAA,GACA,MAAA7wD,EACA,KAAA4iE,GACA/R,EAAA,GACAnjD,EAAA,KACA,MAAA1N,EAEAuI,EAAA,YAAAvI,aAAA,IAMA,OAJAoR,EAAAghD,GAAAvB,EAAAz1C,EAAAhK,EAAA9M,IACAw3E,YAAA97E,EACAoR,EAAA/L,KAAAqI,EACA0D,EAAAorE,eAAAz9C,EACA3tB,EAEA,SAAAwrE,GAAA58E,EAAAoR,EAAAgK,EAAA1N,GAGA,OAFA1N,EAAAoyD,GAAA,EAAApyD,EAAA0N,EAAA0D,IACAorE,eAAAphE,EACApb,EAEA,SAAA68E,GAAA78E,EAAAoR,EAAAgK,EAAA1N,GAMA,OALA1N,EAAAoyD,GAAA,EAAApyD,EAAA0N,EAAA0D,GACAA,EAAA,OAAAA,GAAAgxD,GAAAI,GACAxiE,EAAA87E,YAAA1qE,EACApR,EAAAqF,KAAA+L,EACApR,EAAAw8E,eAAAphE,EACApb,EAEA,SAAA88E,GAAA98E,EAAAoR,EAAAgK,GAGA,OAFApb,EAAAoyD,GAAA,EAAApyD,EAAA,KAAAoR,IACAorE,eAAAphE,EACApb,EAEA,SAAA+8E,GAAA/8E,EAAAoR,EAAAgK,GAQA,OAPAhK,EAAAghD,GAAA,SAAApyD,EAAA+K,SAAA/K,EAAA+K,SAAA,GAAA/K,EAAAd,IAAAkS,IACAorE,eAAAphE,EACAhK,EAAA8nD,UAAA,CACAwW,cAAA1vE,EAAA0vE,cACAsN,gBAAA,KACAC,eAAAj9E,EAAAi9E,gBAEA7rE,EAEA,SAAA8rE,GAAAl9E,EAAAoR,GACApR,EAAAm9E,UAAA,EACA,IAAA/hE,EAAApb,EAAAo9E,oBACA,IAAAhiE,EAAApb,EAAAo9E,oBAAAp9E,EAAAq9E,kBAAAjsE,EAAAgK,EAAAhK,EAAApR,EAAAo9E,oBAAAhsE,EAAApR,EAAAq9E,kBAAAjsE,IAAApR,EAAAq9E,kBAAAjsE,GACAksE,GAAAlsE,EAAApR,GAaA,SAAAu9E,GAAAv9E,EAAAoR,GACApR,EAAAm9E,UAAA,EACAn9E,EAAAw9E,kBAAApsE,IAAApR,EAAAw9E,iBAAA,GACA,IAAApiE,EAAApb,EAAAo9E,oBACA1vE,EAAA1N,EAAAq9E,kBACAjiE,IAAAhK,EAAApR,EAAAo9E,oBAAA1vE,IAAA0D,EAAApR,EAAAq9E,kBAAA,EAAA3vE,MAAA0D,IAAApR,EAAAq9E,kBAAAjiE,GACAA,EAAApb,EAAAy9E,sBACA/vE,EAAA1N,EAAA09E,oBACA,IAAAtiE,EAAApb,EAAAy9E,sBAAAz9E,EAAA09E,oBAAAtsE,EAAAgK,EAAAhK,EAAApR,EAAAy9E,sBAAArsE,EAAA1D,EAAA0D,IAAApR,EAAA09E,oBAAAtsE,GACAksE,GAAAlsE,EAAApR,GAEA,SAAA29E,GAAA39E,EAAAoR,GACA,IAAAgK,EAAApb,EAAAo9E,oBAIA,OAFAhiE,EAAAhK,MAAAgK,IADApb,IAAAy9E,uBAEArsE,MAAApR,GACAoR,EAEA,SAAAksE,GAAAt9E,EAAAoR,GACA,IAAAgK,EAAAhK,EAAAqsE,sBACA/vE,EAAA0D,EAAAssE,oBACAp5E,EAAA8M,EAAAgsE,oBACAr+C,EAAA3tB,EAAAosE,iBAEA,KADAl5E,EAAA,IAAAA,IAAAy6B,KACA,IAAA/+B,GAAA0N,EAAA1N,KAAAsE,EAAAoJ,GAEA,KADA1N,EAAAsE,IACA8W,EAAApb,MAAAob,GACAhK,EAAAwsE,2BAAAt5E,EACA8M,EAAAorE,eAAAx8E,EAEA,SAAAqyD,GAAAryD,EAAAoR,GACA,GAAApR,KAAAqL,aAGA,QAAA+P,KAFAhK,EAAA5E,EAAA,GAAY4E,GACZpR,IAAAqL,kBACA,IAAA+F,EAAAgK,KAAAhK,EAAAgK,GAAApb,EAAAob,IAEA,OAAAhK,EA8BA,IAAAysE,IAAA,IAAAntB,EAAA0D,WAAA3C,KACA,SAAAqsB,GAAA99E,EAAAoR,EAAAgK,EAAA1N,GAGA0N,EAAA,QADAA,IAAA1N,EADA0D,EAAApR,EAAAi8E,sBAEA,IAAA7gE,EAAAhK,EAAA5E,EAAA,GAA2C4E,EAAAgK,GAC3Cpb,EAAAi8E,cAAA7gE,EAEA,QADA1N,EAAA1N,EAAAk8E,cACA,IAAAl8E,EAAAw8E,iBAAA9uE,EAAAqwE,UAAA3iE,GAEA,IAAA4iE,GAAA,CACA9sB,UAAA,SAAAlxD,GACA,SAAAA,IAAAi+E,sBAAA,IAAAvU,GAAA1pE,IAEAqxD,gBAAA,SAAArxD,EAAAoR,EAAAgK,GACApb,IAAAi+E,oBACA,IAAAvwE,EAAAwwE,KAEA55E,EAAA65E,GADAzwE,EAAA0wE,GAAA1wE,EAAA1N,IAEAsE,EAAA+5E,QAAAjtE,OACA,IAAAgK,GAAA,OAAAA,IAAA9W,EAAAg6E,SAAAljE,GACAmjE,KACA5gC,GAAA39C,EAAAsE,GACAk6E,GAAAx+E,EAAA0N,IAEA0jD,oBAAA,SAAApxD,EAAAoR,EAAAgK,GACApb,IAAAi+E,oBACA,IAAAvwE,EAAAwwE,KAEA55E,EAAA65E,GADAzwE,EAAA0wE,GAAA1wE,EAAA1N,IAEAsE,EAAAq1D,IAAA8kB,GACAn6E,EAAA+5E,QAAAjtE,OACA,IAAAgK,GAAA,OAAAA,IAAA9W,EAAAg6E,SAAAljE,GACAmjE,KACA5gC,GAAA39C,EAAAsE,GACAk6E,GAAAx+E,EAAA0N,IAEAyjD,mBAAA,SAAAnxD,EAAAoR,GACApR,IAAAi+E,oBACA,IAAA7iE,EAAA8iE,KAEAxwE,EAAAywE,GADA/iE,EAAAgjE,GAAAhjE,EAAApb,IAEA0N,EAAAisD,IAAA+kB,QACA,IAAAttE,GAAA,OAAAA,IAAA1D,EAAA4wE,SAAAltE,GACAmtE,KACA5gC,GAAA39C,EAAA0N,GACA8wE,GAAAx+E,EAAAob,KAGA,SAAAujE,GAAA3+E,EAAAoR,EAAAgK,EAAA1N,EAAApJ,EAAAy6B,EAAA8xB,GAEA,0BADA7wD,IAAAk5D,WACA0lB,sBAAA5+E,EAAA4+E,sBAAAlxE,EAAAqxB,EAAA8xB,IAAAz/C,EAAA9R,YAAA8R,EAAA9R,UAAA2yD,wBAAAzS,GAAApkC,EAAA1N,KAAA8xC,GAAAl7C,EAAAy6B,IAEA,SAAA8/C,GAAA7+E,EAAAoR,EAAAgK,GACA,IAAA1N,GAAA,EACApJ,EAAAq2E,GACA57C,EAAA3tB,EAAA0tE,YAQA,MAPA,kBAAA//C,GAAA,OAAAA,IAAAyzB,GAAAzzB,IAAAz6B,EAAA6tD,GAAA/gD,GAAAwpE,GAAA5oB,GAAA9oD,QAAA61B,GAAArxB,EAAA,QAAAA,EAAA0D,EAAA0pE,oBAAA,IAAAptE,GAAAmtE,GAAA76E,EAAAsE,GAAAq2E,IACAvpE,EAAA,IAAAA,EAAAgK,EAAA2jB,GACA/+B,EAAAi8E,cAAA,OAAA7qE,EAAAnQ,YAAA,IAAAmQ,EAAAnQ,MAAAmQ,EAAAnQ,MAAA,KACAmQ,EAAAsgD,QAAAssB,GACAh+E,EAAAk5D,UAAA9nD,EACAA,EAAA6sE,oBAAAj+E,EACA0N,KAAA1N,IAAAk5D,WAAA6hB,4CAAAz2E,EAAAtE,EAAAg7E,0CAAAj8C,GACA3tB,EAEA,SAAA2tE,GAAA/+E,EAAAoR,EAAAgK,EAAA1N,GACA1N,EAAAoR,EAAAnQ,MACA,oBAAAmQ,EAAA4tE,2BAAA5tE,EAAA4tE,0BAAA5jE,EAAA1N,GACA,oBAAA0D,EAAA6tE,kCAAA7tE,EAAA6tE,iCAAA7jE,EAAA1N,GACA0D,EAAAnQ,QAAAjB,GAAAg+E,GAAA5sB,oBAAAhgD,IAAAnQ,MAAA,MAEA,SAAAi+E,GAAAl/E,EAAAoR,EAAAgK,EAAA1N,GACA,IAAApJ,EAAAtE,EAAAk5D,UACA50D,EAAA3F,MAAAyc,EACA9W,EAAArD,MAAAjB,EAAAi8E,cACA33E,EAAAmtD,KAAAosB,GACA,IAAA9+C,EAAA3tB,EAAA0tE,YACA,kBAAA//C,GAAA,OAAAA,EAAAz6B,EAAAktD,QAAAgB,GAAAzzB,MAAAozB,GAAA/gD,GAAAwpE,GAAA5oB,GAAA9oD,QAAA5E,EAAAktD,QAAAqpB,GAAA76E,EAAA++B,IAEA,QADAA,EAAA/+B,EAAAk8E,eACAiD,GAAAn/E,EAAA++B,EAAA3jB,EAAA9W,EAAAoJ,GAAApJ,EAAArD,MAAAjB,EAAAi8E,eAEA,oBADAl9C,EAAA3tB,EAAAguE,4BACAtB,GAAA99E,EAAAoR,EAAA2tB,EAAA3jB,GAAA9W,EAAArD,MAAAjB,EAAAi8E,eACA,oBAAA7qE,EAAAguE,0BAAA,oBAAA96E,EAAA+6E,yBAAA,oBAAA/6E,EAAAg7E,2BAAA,oBAAAh7E,EAAAi7E,qBAAAnuE,EAAA9M,EAAArD,MAAA,oBAAAqD,EAAAi7E,oBAAAj7E,EAAAi7E,qBAAA,oBAAAj7E,EAAAg7E,2BAAAh7E,EAAAg7E,4BAAAluE,IAAA9M,EAAArD,OAAA+8E,GAAA5sB,oBAAA9sD,IAAArD,MAAA,cAAA89B,EAAA/+B,EAAAk8E,eAAAiD,GAAAn/E,EAAA++B,EAAA3jB,EAAA9W,EAAAoJ,GAAApJ,EAAArD,MAAAjB,EAAAi8E,gBACA,oBAAA33E,EAAAk7E,oBAAAx/E,EAAA2pE,WAAA,GAEA,IAAA8V,GAAAl4E,MAAA8rD,QACA,SAAAqsB,GAAA1/E,EAAAoR,EAAAgK,GAEA,WADApb,EAAAob,EAAArR,MACA,oBAAA/J,GAAA,kBAAAA,EAAA,CACA,GAAAob,EAAAs3C,OAAA,CACAt3C,IAAAs3C,OACA,IAAAhlD,OAAA,EACA0N,IAAA,IAAAA,EAAAu+C,KAAApxD,EAAA,OAAAmF,EAAA0N,EAAA89C,WACAxrD,GAAAnF,EAAA,MAAAvI,GACA,IAAAsE,EAAA,GAAAtE,EACA,cAAAoR,GAAA,OAAAA,EAAArH,KAAA,oBAAAqH,EAAArH,KAAAqH,EAAArH,IAAA41E,aAAAr7E,EAAA8M,EAAArH,MACAqH,EAAA,SAAApR,GACA,IAAAoR,EAAA1D,EAAA+jD,KACArgD,IAAAysE,KAAAzsE,EAAA1D,EAAA+jD,KAAA,IACA,OAAAzxD,SAAAoR,EAAA9M,GAAA8M,EAAA9M,GAAAtE,IAEA2/E,WAAAr7E,EACA8M,GAEA,kBAAApR,GAAAuI,EAAA,OACA6S,EAAAs3C,QAAAnqD,EAAA,MAAAvI,GAEA,OAAAA,EAEA,SAAA4/E,GAAA5/E,EAAAoR,GACA,aAAApR,EAAAqF,MAAAkD,EAAA,yBAAAvJ,OAAAM,UAAAyvD,SAAAtuD,KAAA2Q,GAAA,qBAAgHpS,OAAA8N,KAAAsE,GAAA3E,KAAA,UAAkC2E,EAAA,IAElJ,SAAAyuE,GAAA7/E,GACA,SAAAoR,IAAAgK,GACA,GAAApb,EAAA,CACA,IAAA0N,EAAA0D,EAAAgrE,WACA,OAAA1uE,KAAA4uE,WAAAlhE,EAAAhK,EAAAgrE,WAAAhhE,GAAAhK,EAAAirE,YAAAjrE,EAAAgrE,WAAAhhE,EACAA,EAAAkhE,WAAA,KACAlhE,EAAAuuD,UAAA,GAGA,SAAAvuD,IAAA1N,GACA,IAAA1N,EAAA,YACA,KAAU,OAAA0N,GAAY0D,EAAAgK,EAAA1N,OAAAq8D,QACtB,YAEA,SAAAr8D,EAAA1N,EAAAoR,GACA,IAAApR,EAAA,IAAA8/E,IAAuB,OAAA1uE,GAAY,OAAAA,EAAAlS,IAAAc,EAAAilB,IAAA7T,EAAAlS,IAAAkS,GAAApR,EAAAilB,IAAA7T,EAAAhT,MAAAgT,OAAA24D,QACnC,OAAA/pE,EAEA,SAAAsE,EAAAtE,EAAAoR,EAAAgK,GAIA,OAHApb,EAAA08E,GAAA18E,EAAAoR,IACAhT,MAAA,EACA4B,EAAA+pE,QAAA,KACA/pE,EAEA,SAAA++B,EAAA3tB,EAAAgK,EAAA1N,GAEA,OADA0D,EAAAhT,MAAAsP,EACA1N,EAEA,QADA0N,EAAA0D,EAAAo4D,YACA97D,IAAAtP,OAAAgd,GAAAhK,EAAAu4D,UAAA,EAAAvuD,GAAA1N,GACA0D,EAAAu4D,UAAA,EACAvuD,GAJAA,EAMA,SAAAy1C,EAAAz/C,GAEA,OADApR,GAAA,OAAAoR,EAAAo4D,YAAAp4D,EAAAu4D,UAAA,GACAv4D,EAEA,SAAA+jB,EAAAn1B,EAAAoR,EAAAgK,EAAA1N,GACA,cAAA0D,GAAA,IAAAA,EAAAuoD,MAAAvoD,EAAA0rE,GAAA1hE,EAAApb,EAAA0rB,KAAAhe,IAAAssD,OAAAh6D,EAAAoR,KACAA,EAAA9M,EAAA8M,EAAAgK,IACA4+C,OAAAh6D,EACAoR,GAEA,SAAAM,EAAA1R,EAAAoR,EAAAgK,EAAA1N,GACA,cAAA0D,KAAA0qE,cAAA1gE,EAAA/V,OAAAqI,EAAApJ,EAAA8M,EAAAgK,EAAAzc,QAAAoL,IAAA21E,GAAA1/E,EAAAoR,EAAAgK,GAAA1N,EAAAssD,OAAAh6D,EAAA0N,KACAA,EAAAivE,GAAAvhE,EAAA/V,KAAA+V,EAAAlc,IAAAkc,EAAAzc,MAAA,KAAAqB,EAAA0rB,KAAAhe,IACA3D,IAAA21E,GAAA1/E,EAAAoR,EAAAgK,GACA1N,EAAAssD,OAAAh6D,EACA0N,GAEA,SAAA6L,EAAAvZ,EAAAoR,EAAAgK,EAAA1N,GACA,cAAA0D,GAAA,IAAAA,EAAAuoD,KAAAvoD,EAAA8nD,UAAAwW,gBAAAt0D,EAAAs0D,eAAAt+D,EAAA8nD,UAAA+jB,iBAAA7hE,EAAA6hE,iBAAA7rE,EAAA2rE,GAAA3hE,EAAApb,EAAA0rB,KAAAhe,IAAAssD,OAAAh6D,EAAAoR,KACAA,EAAA9M,EAAA8M,EAAAgK,EAAArQ,UAAA,KACAivD,OAAAh6D,EACAoR,GAEA,SAAA6pC,EAAAj7C,EAAAoR,EAAAgK,EAAA1N,EAAAqxB,GACA,cAAA3tB,GAAA,IAAAA,EAAAuoD,MAAAvoD,EAAAwrE,GAAAxhE,EAAApb,EAAA0rB,KAAAhe,EAAAqxB,IAAAi7B,OAAAh6D,EAAAoR,KACAA,EAAA9M,EAAA8M,EAAAgK,IACA4+C,OAAAh6D,EACAoR,GAEA,SAAAwF,EAAA5W,EAAAoR,EAAAgK,GACA,qBAAAhK,GAAA,kBAAAA,EAAA,OAAAA,EAAA0rE,GAAA,GAAA1rE,EAAApR,EAAA0rB,KAAAtQ,IAAA4+C,OAAAh6D,EAAAoR,EACA,qBAAAA,GAAA,OAAAA,EAAA,CACA,OAAAA,EAAAqhD,UACA,KAAAwP,GACA,OAAA7mD,EAAAuhE,GAAAvrE,EAAA/L,KAAA+L,EAAAlS,IAAAkS,EAAAzS,MAAA,KAAAqB,EAAA0rB,KAAAtQ,IAAArR,IAAA21E,GAAA1/E,EAAA,KAAAoR,GAAAgK,EAAA4+C,OAAAh6D,EAAAob,EACA,KAAA8mD,GACA,OAAA9wD,EAAA2rE,GAAA3rE,EAAApR,EAAA0rB,KAAAtQ,IAAA4+C,OAAAh6D,EAAAoR,EAEA,GAAAquE,GAAAruE,IAAA0xD,GAAA1xD,GAAA,OAAAA,EAAAwrE,GAAAxrE,EAAApR,EAAA0rB,KAAAtQ,EAAA,OAAA4+C,OAAAh6D,EAAAoR,EACAwuE,GAAA5/E,EAAAoR,GAEA,YAEA,SAAA+C,EAAAnU,EAAAoR,EAAAgK,EAAA1N,GACA,IAAApJ,EAAA,OAAA8M,IAAAlS,IAAA,KACA,qBAAAkc,GAAA,kBAAAA,EAAA,cAAA9W,EAAA,KAAA6wB,EAAAn1B,EAAAoR,EAAA,GAAAgK,EAAA1N,GACA,qBAAA0N,GAAA,OAAAA,EAAA,CACA,OAAAA,EAAAq3C,UACA,KAAAwP,GACA,OAAA7mD,EAAAlc,MAAAoF,EAAA8W,EAAA/V,OAAA88D,GAAAlnB,EAAAj7C,EAAAoR,EAAAgK,EAAAzc,MAAAoM,SAAA2C,EAAApJ,GAAAoN,EAAA1R,EAAAoR,EAAAgK,EAAA1N,GAAA,KACA,KAAAw0D,GACA,OAAA9mD,EAAAlc,MAAAoF,EAAAiV,EAAAvZ,EAAAoR,EAAAgK,EAAA1N,GAAA,KAEA,GAAA+xE,GAAArkE,IAAA0nD,GAAA1nD,GAAA,cAAA9W,EAAA,KAAA22C,EAAAj7C,EAAAoR,EAAAgK,EAAA1N,EAAA,MACAkyE,GAAA5/E,EAAAob,GAEA,YAEA,SAAAzM,EAAA3O,EAAAoR,EAAAgK,EAAA1N,EAAApJ,GACA,qBAAAoJ,GAAA,kBAAAA,EAAA,OAAAynB,EAAA/jB,EAAApR,IAAAwhE,IAAApmD,IAAA,QAAA1N,EAAApJ,GACA,qBAAAoJ,GAAA,OAAAA,EAAA,CACA,OAAAA,EAAA+kD,UACA,KAAAwP,GACA,OAAAjiE,IAAAwhE,IAAA,OAAA9zD,EAAAxO,IAAAkc,EAAA1N,EAAAxO,MAAA,KAAAwO,EAAArI,OAAA88D,GAAAlnB,EAAA7pC,EAAApR,EAAA0N,EAAA/O,MAAAoM,SAAAzG,EAAAoJ,EAAAxO,KAAAwS,EAAAN,EAAApR,EAAA0N,EAAApJ,GACA,KAAA49D,GACA,OAAA3oD,EAAAnI,EAAApR,IAAAwhE,IAAA,OAAA9zD,EAAAxO,IAAAkc,EAAA1N,EAAAxO,MAAA,KAAAwO,EAAApJ,GAEA,GAAAm7E,GAAA/xE,IAAAo1D,GAAAp1D,GAAA,OAAAutC,EAAA7pC,EAAApR,IAAAwhE,IAAApmD,IAAA,KAAA1N,EAAApJ,EAAA,MACAs7E,GAAAxuE,EAAA1D,GAEA,YAEA,SAAAyc,EAAA7lB,EAAAusD,EAAA17B,EAAA5b,GACA,QAAA7H,EAAA,KAAAupC,EAAA,KAAAj2B,EAAA6rC,EAAApwB,EAAAowB,EAAA,EAAA7wC,EAAA,KAA4D,OAAAgF,GAAAyb,EAAAtL,EAAAn5B,OAA4BykC,IAAA,CACxFzb,EAAA5mB,MAAAqiC,GAAAzgB,EAAAgF,IAAA,MAAAhF,EAAAgF,EAAA+kD,QACA,IAAAvyD,EAAArD,EAAA7P,EAAA0gB,EAAAmQ,EAAAsL,GAAAlnB,GACA,UAAA/B,EAAA,CACA,OAAAwN,MAAAhF,GACA,MAEAhgB,GAAAglB,GAAA,OAAAxN,EAAAgyD,WAAAp4D,EAAA9M,EAAA0gB,GACA6rC,EAAA9xB,EAAAvnB,EAAAq5C,EAAApwB,GACA,OAAAwa,EAAAvpC,EAAA8F,EAAAyjC,EAAA8uB,QAAAvyD,EACAyjC,EAAAzjC,EACAwN,EAAAhF,EAEA,GAAAygB,IAAAtL,EAAAn5B,OAAA,OAAAof,EAAA9W,EAAA0gB,GAAAtT,EACA,UAAAsT,EAAA,CACA,KAAYyb,EAAAtL,EAAAn5B,OAAcykC,KAAAzb,EAAApO,EAAAtS,EAAA6wB,EAAAsL,GAAAlnB,MAAAs3C,EAAA9xB,EAAA/Z,EAAA6rC,EAAApwB,GAAA,OAAAwa,EAAAvpC,EAAAsT,EAAAi2B,EAAA8uB,QAAA/kD,EAAAi2B,EAAAj2B,GAC1B,OAAAtT,EAEA,IAAAsT,EAAAtX,EAAApJ,EAAA0gB,GAAqByb,EAAAtL,EAAAn5B,OAAcykC,KAAAzgB,EAAArR,EAAAqW,EAAA1gB,EAAAm8B,EAAAtL,EAAAsL,GAAAlnB,MAAAvZ,GAAA,OAAAggB,EAAAwpD,WAAAxkD,EAAA+6D,OAAA,OAAA//D,EAAA9gB,IAAAuhC,EAAAzgB,EAAA9gB,KAAA2xD,EAAA9xB,EAAA/e,EAAA6wC,EAAApwB,GAAA,OAAAwa,EAAAvpC,EAAAsO,EAAAi7B,EAAA8uB,QAAA/pD,EAAAi7B,EAAAj7B,GAInC,OAHAhgB,GAAAglB,EAAApY,QAAA,SAAA5M,GACA,OAAAoR,EAAA9M,EAAAtE,KAEA0R,EAEA,SAAAuhD,EAAA3uD,EAAAusD,EAAA17B,EAAA5b,GACA,IAAA7H,EAAAoxD,GAAA3tC,GACA,oBAAAzjB,GAAAnJ,EAAA,OAEA,OADA4sB,EAAAzjB,EAAAjR,KAAA00B,KACA5sB,EAAA,OACA,QAAA0yC,EAAAvpC,EAAA,KAAAsT,EAAA6rC,EAAApwB,EAAAowB,EAAA,EAAA7wC,EAAA,KAAAxI,EAAA2d,EAAAm+B,OAAoE,OAAAtuC,IAAAxN,EAAA+7C,KAAuB9yB,IAAAjpB,EAAA2d,EAAAm+B,OAAA,CAC3FtuC,EAAA5mB,MAAAqiC,GAAAzgB,EAAAgF,IAAA,MAAAhF,EAAAgF,EAAA+kD,QACA,IAAA5/C,EAAAhW,EAAA7P,EAAA0gB,EAAAxN,EAAAnU,MAAAkW,GACA,UAAA4Q,EAAA,CACAnF,MAAAhF,GACA,MAEAhgB,GAAAglB,GAAA,OAAAmF,EAAAq/C,WAAAp4D,EAAA9M,EAAA0gB,GACA6rC,EAAA9xB,EAAA5U,EAAA0mC,EAAApwB,GACA,OAAAwa,EAAAvpC,EAAAyY,EAAA8wB,EAAA8uB,QAAA5/C,EACA8wB,EAAA9wB,EACAnF,EAAAhF,EAEA,GAAAxI,EAAA+7C,KAAA,OAAAn4C,EAAA9W,EAAA0gB,GAAAtT,EACA,UAAAsT,EAAA,CACA,MAAYxN,EAAA+7C,KAAS9yB,IAAAjpB,EAAA2d,EAAAm+B,OAAA,QAAA97C,EAAAZ,EAAAtS,EAAAkT,EAAAnU,MAAAkW,MAAAs3C,EAAA9xB,EAAAvnB,EAAAq5C,EAAApwB,GAAA,OAAAwa,EAAAvpC,EAAA8F,EAAAyjC,EAAA8uB,QAAAvyD,EAAAyjC,EAAAzjC,GACrB,OAAA9F,EAEA,IAAAsT,EAAAtX,EAAApJ,EAAA0gB,IAAqBxN,EAAA+7C,KAAS9yB,IAAAjpB,EAAA2d,EAAAm+B,OAAA,QAAA97C,EAAA7I,EAAAqW,EAAA1gB,EAAAm8B,EAAAjpB,EAAAnU,MAAAkW,MAAAvZ,GAAA,OAAAwX,EAAAgyD,WAAAxkD,EAAA+6D,OAAA,OAAAvoE,EAAAtY,IAAAuhC,EAAAjpB,EAAAtY,KAAA2xD,EAAA9xB,EAAAvnB,EAAAq5C,EAAApwB,GAAA,OAAAwa,EAAAvpC,EAAA8F,EAAAyjC,EAAA8uB,QAAAvyD,EAAAyjC,EAAAzjC,GAI9B,OAHAxX,GAAAglB,EAAApY,QAAA,SAAA5M,GACA,OAAAoR,EAAA9M,EAAAtE,KAEA0R,EAEA,gBAAA1R,EAAA0N,EAAAqxB,EAAA5J,GACA,IAAA5b,EAAA,kBAAAwlB,GAAA,OAAAA,KAAA15B,OAAA88D,IAAA,OAAApjC,EAAA7/B,IACAqa,IAAAwlB,IAAApgC,MAAAoM,UACA,IAAA2G,EAAA,kBAAAqtB,GAAA,OAAAA,EACA,GAAArtB,EAAA,OAAAqtB,EAAA0zB,UACA,KAAAwP,GACAjiE,EAAA,CAEA,IADA0R,EAAAqtB,EAAA7/B,IACAqa,EAAA7L,EAAqB,OAAA6L,GAAY,CACjC,GAAAA,EAAAra,MAAAwS,EAAA,CACA,OAAA6H,EAAAogD,IAAA56B,EAAA15B,OAAA88D,GAAA5oD,EAAAuiE,cAAA/8C,EAAA15B,KAAA,CACA+V,EAAApb,EAAAuZ,EAAAwwD,UACAr8D,EAAApJ,EAAAiV,EAAAwlB,EAAA15B,OAAA88D,GAAApjC,EAAApgC,MAAAoM,SAAAg0B,EAAApgC,QACAoL,IAAA21E,GAAA1/E,EAAAuZ,EAAAwlB,GACArxB,EAAAssD,OAAAh6D,EACAA,EAAA0N,EACA,MAAA1N,EAEAob,EAAApb,EAAAuZ,GACA,MAEanI,EAAApR,EAAAuZ,GACbA,IAAAwwD,QAEAhrC,EAAA15B,OAAA88D,KAAAz0D,EAAAkvE,GAAA79C,EAAApgC,MAAAoM,SAAA/K,EAAA0rB,KAAAyJ,EAAA4J,EAAA7/B,MAAA86D,OAAAh6D,IAAA0N,KAAAynB,EAAAwnD,GAAA59C,EAAA15B,KAAA05B,EAAA7/B,IAAA6/B,EAAApgC,MAAA,KAAAqB,EAAA0rB,KAAAyJ,IAAAprB,IAAA21E,GAAA1/E,EAAA0N,EAAAqxB,GAAA5J,EAAA6kC,OAAAh6D,IAAAm1B,GAEA,OAAA07B,EAAA7wD,GACA,KAAAkiE,GACAliE,EAAA,CACA,IAAAuZ,EAAAwlB,EAAA7/B,IAAyB,OAAAwO,GAAY,CACrC,GAAAA,EAAAxO,MAAAqa,EAAA,CACA,OAAA7L,EAAAisD,KAAAjsD,EAAAwrD,UAAAwW,gBAAA3wC,EAAA2wC,eAAAhiE,EAAAwrD,UAAA+jB,iBAAAl+C,EAAAk+C,eAAA,CACA7hE,EAAApb,EAAA0N,EAAAq8D,UACAr8D,EAAApJ,EAAAoJ,EAAAqxB,EAAAh0B,UAAA,KACAivD,OAAAh6D,EACAA,EAAA0N,EACA,MAAA1N,EAEAob,EAAApb,EAAA0N,GACA,MAEa0D,EAAApR,EAAA0N,GACbA,IAAAq8D,SAEAr8D,EAAAqvE,GAAAh+C,EAAA/+B,EAAA0rB,KAAAyJ,IACA6kC,OAAAh6D,EACAA,EAAA0N,EAEA,OAAAmjD,EAAA7wD,GAEA,qBAAA++B,GAAA,kBAAAA,EAAA,OAAAA,EAAA,GAAAA,EAAA,OAAArxB,GAAA,IAAAA,EAAAisD,KAAAv+C,EAAApb,EAAA0N,EAAAq8D,UAAAr8D,EAAApJ,EAAAoJ,EAAAqxB,IAAAi7B,OAAAh6D,IAAA0N,IAAA0N,EAAApb,EAAA0N,MAAAovE,GAAA/9C,EAAA/+B,EAAA0rB,KAAAyJ,IAAA6kC,OAAAh6D,IAAA0N,GAAAmjD,EAAA7wD,GACA,GAAAy/E,GAAA1gD,GAAA,OAAA5U,EAAAnqB,EAAA0N,EAAAqxB,EAAA5J,GACA,GAAA2tC,GAAA/jC,GAAA,OAAAk0B,EAAAjzD,EAAA0N,EAAAqxB,EAAA5J,GAEA,GADAzjB,GAAAkuE,GAAA5/E,EAAA++B,GACA,qBAAAA,IAAAxlB,EAAA,OAAAvZ,EAAA25D,KACA,OACA,OACApxD,EAAA,OAAA4sB,EAAAn1B,EAAAqF,MAAA29D,aAAA7tC,EAAA47B,MAAA,aAEA,OAAA31C,EAAApb,EAAA0N,IAGA,IAAAsyE,GAAAH,IAAA,GACAI,GAAAJ,IAAA,GACAK,GAAA,GACAvtB,GAAA,CACAzpD,QAAAg3E,IAEAC,GAAA,CACAj3E,QAAAg3E,IAEAE,GAAA,CACAl3E,QAAAg3E,IAEA,SAAAG,GAAArgF,GAEA,OADAA,IAAAkgF,IAAA33E,EAAA,OACAvI,EAEA,SAAAsgF,GAAAtgF,EAAAoR,GACAwgD,GAAAwuB,GAAAhvE,GACAwgD,GAAAuuB,GAAAngF,GACA4xD,GAAAe,GAAAutB,IACA,IAAA9kE,EAAAhK,EAAA6vD,SACA,OAAA7lD,GACA,OACA,QACAhK,OAAAogE,iBAAApgE,EAAAyjE,aAAAH,GAAA,SACA,MACA,QACAtjE,EAAAsjE,GAAAtjE,GAAAgK,EAAA,IAAAA,EAAAhK,EAAAsoD,WAAAtoD,GAAAyjE,cAAA,KAAAz5D,IAAAmlE,SAEA5uB,GAAAgB,IACAf,GAAAe,GAAAvhD,GAEA,SAAAovE,GAAAxgF,GACA2xD,GAAAgB,IACAhB,GAAAwuB,IACAxuB,GAAAyuB,IAEA,SAAAK,GAAAzgF,GACAqgF,GAAAD,GAAAl3E,SACA,IAAAkI,EAAAivE,GAAA1tB,GAAAzpD,SACAkS,EAAAs5D,GAAAtjE,EAAApR,EAAAqF,MACA+L,IAAAgK,IAAAw2C,GAAAuuB,GAAAngF,GAAA4xD,GAAAe,GAAAv3C,IAEA,SAAAslE,GAAA1gF,GACAmgF,GAAAj3E,UAAAlJ,IAAA2xD,GAAAgB,IAAAhB,GAAAwuB,KAEA,IAAAQ,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,GAAA,GACAC,GAAA,GACAC,GAAA,GACAC,GAAA,IACAC,GAAApf,GAAArL,uBACA0qB,GAAA,EACAC,GAAA,KACAzuB,GAAA,KACAC,GAAA,KACAyuB,GAAA,KACAxuB,GAAA,KACAyuB,GAAA,KACAC,GAAA,EACAC,GAAA,KACAC,GAAA,EACAC,IAAA,EACAC,GAAA,KACAC,GAAA,EACA,SAAAC,KACAv5E,EAAA,OAEA,SAAAw5E,GAAA/hF,EAAAoR,GACA,UAAAA,EAAA,SACA,QAAAgK,EAAA,EAAiBA,EAAAhK,EAAApV,QAAAof,EAAApb,EAAAhE,OAA8Bof,IAAA,IAAAozB,GAAAxuC,EAAAob,GAAAhK,EAAAgK,IAAA,SAC/C,SAEA,SAAA4mE,GAAAhiF,EAAAoR,EAAAgK,EAAA1N,EAAApJ,EAAAy6B,GAMA,GALAqiD,GAAAriD,EACAsiD,GAAAjwE,EACAyhD,GAAA,OAAA7yD,IAAAi8E,cAAA,KACAkF,GAAAj4E,QAAA,OAAA2pD,GAAAovB,GAAAC,GACA9wE,EAAAgK,EAAA1N,EAAApJ,GACAq9E,GAAA,CACA,GAAAA,IAAA,EAAAE,IAAA,EAAAhvB,GAAA,OAAA7yD,IAAAi8E,cAAA,KAAAsF,GAAAD,GAAAG,GAAA3uB,GAAAF,GAAA,KAAAuuB,GAAAj4E,QAAAg5E,GAAA9wE,EAAAgK,EAAA1N,EAAApJ,SAA2Hq9E,IAC3HC,GAAA,KACAC,GAAA,EAeA,OAbAV,GAAAj4E,QAAAi5E,IACAniF,EAAAqhF,IACApF,cAAAqF,GACAthF,EAAAw8E,eAAAgF,GACAxhF,EAAAk8E,YAAAuF,GACAzhF,EAAA2pE,WAAA+X,GACA1hF,EAAA,OAAA4yD,IAAA,OAAAA,GAAAU,KACA8tB,GAAA,EACAG,GAAAzuB,GAAAwuB,GAAAzuB,GAAAD,GAAAyuB,GAAA,KACAG,GAAA,EACAC,GAAA,KACAC,GAAA,EACA1hF,GAAAuI,EAAA,OACA6I,EAEA,SAAAgxE,KACAjB,GAAAj4E,QAAAi5E,GACAf,GAAA,EACAG,GAAAzuB,GAAAwuB,GAAAzuB,GAAAD,GAAAyuB,GAAA,KACAG,GAAA,EACAC,GAAA,KACAC,GAAA,EACAC,IAAA,EACAC,GAAA,KACAC,GAAA,EAEA,SAAAQ,KACA,IAAAriF,EAAA,CACAi8E,cAAA,KACA8B,UAAA,KACAuE,MAAA,KACAC,WAAA,KACAjvB,KAAA,MAGA,OADA,OAAAR,GAAAwuB,GAAAxuB,GAAA9yD,EAAA8yD,MAAAQ,KAAAtzD,EACA8yD,GAEA,SAAA0vB,KACA,UAAAjB,OAAAzuB,GAAAyuB,IAAAjuB,KAAAT,GAAA,QAAAD,GAAAC,IAAAD,GAAAU,KAAA,SAA8E,CAC9E,OAAAT,IAAAtqD,EAAA,OAEA,IAAAvI,EAAA,CACAi8E,eAFArpB,GAAAC,IAEAopB,cACA8B,UAAAnrB,GAAAmrB,UACAuE,MAAA1vB,GAAA0vB,MACAC,WAAA3vB,GAAA2vB,WACAjvB,KAAA,MAEAR,GAAA,OAAAA,GAAAwuB,GAAAthF,EAAA8yD,GAAAQ,KAAAtzD,EACA6yD,GAAAD,GAAAU,KAEA,OAAAR,GAEA,SAAA2vB,GAAAziF,EAAAoR,GACA,0BAAAA,IAAApR,GAAAoR,EAEA,SAAAsxE,GAAA1iF,GACA,IAAAoR,EAAAoxE,KACApnE,EAAAhK,EAAAkxE,MAGA,GAFA,OAAAlnE,GAAA7S,EAAA,OACA6S,EAAAunE,oBAAA3iF,EACA,EAAA6hF,GAAA,CACA,IAAAn0E,EAAA0N,EAAAwnE,SACA,UAAAhB,GAAA,CACA,IAAAt9E,EAAAs9E,GAAApgB,IAAApmD,GACA,YAAA9W,EAAA,CACAs9E,GAAA7B,OAAA3kE,GACA,IAAA2jB,EAAA3tB,EAAA6qE,cACA,GAAAl9C,EAAA/+B,EAAA++B,EAAAz6B,EAAAu+E,QAAAv+E,IAAAgvD,WAA0C,OAAAhvD,GAK1C,OAJAkqC,GAAAzP,EAAA3tB,EAAA6qE,iBAAA6G,IAAA,GACA1xE,EAAA6qE,cAAAl9C,EACA3tB,EAAAmxE,aAAAnnE,EAAAukC,OAAAvuC,EAAA2sE,UAAAh/C,GACA3jB,EAAA2nE,kBAAAhkD,EACA,CAAAA,EAAArxB,IAGA,OAAA0D,EAAA6qE,cAAAvuE,GAEAA,EAAA0N,EAAAukC,KACA,IAAAkR,EAAAz/C,EAAAmxE,WAGA,GAFAxjD,EAAA3tB,EAAA2sE,UACA,OAAAltB,GAAA,OAAAnjD,MAAA4lD,KAAA,MAAA5lD,EAAAmjD,EAAAyC,MAAA5lD,EAAA,OAAAA,IAAA4lD,KAAA,KACA,OAAA5lD,EAAA,CACA,IAAAynB,EAAA7wB,EAAA,KACAoN,EAAAhE,EACA6L,GAAA,EACA,GACA,IAAA0hC,EAAAvpC,EAAA8qE,eACAvhC,EAAAmmC,IAAA7nE,OAAA,EAAA4b,EAAA07B,EAAAvsD,EAAAy6B,GAAAkc,EAAAumC,QAAAvmC,IAAAlc,EAAArtB,EAAAsxE,eAAAhjF,EAAA0R,EAAAuxE,WAAAjjF,EAAA++B,EAAArtB,EAAAmxE,QACAhyB,EAAAn/C,EACAA,IAAA4hD,WACK,OAAA5hD,OAAAhE,GACL6L,IAAA4b,EAAA07B,EAAAvsD,EAAAy6B,GACAyP,GAAAzP,EAAA3tB,EAAA6qE,iBAAA6G,IAAA,GACA1xE,EAAA6qE,cAAAl9C,EACA3tB,EAAAmxE,WAAAptD,EACA/jB,EAAA2sE,UAAAz5E,EACA8W,EAAA2nE,kBAAAhkD,EAEA,OAAA3tB,EAAA6qE,cAAA7gE,EAAAwnE,UAEA,SAAAM,GAAAljF,EAAAoR,EAAAgK,EAAA1N,GAWA,OAVA1N,EAAA,CACA25D,IAAA35D,EACAmD,OAAAiO,EACA+xE,QAAA/nE,EACAgoE,KAAA11E,EACA4lD,KAAA,MAEA,OAAAmuB,OAAA,CACArF,WAAA,OACGA,WAAAp8E,EAAAszD,KAAAtzD,EAAA,QAAAoR,EAAAqwE,GAAArF,YAAAqF,GAAArF,WAAAp8E,EAAAszD,KAAAtzD,GAAAob,EAAAhK,EAAAkiD,KAAAliD,EAAAkiD,KAAAtzD,IAAAszD,KAAAl4C,EAAAqmE,GAAArF,WAAAp8E,GACHA,EAEA,SAAAqjF,GAAArjF,EAAAoR,EAAAgK,EAAA1N,GACA,IAAApJ,EAAA+9E,KACAX,IAAA1hF,EACAsE,EAAA23E,cAAAiH,GAAA9xE,EAAAgK,OAAA,WAAA1N,EAAA,KAAAA,GAEA,SAAA41E,GAAAtjF,EAAAoR,EAAAgK,EAAA1N,GACA,IAAApJ,EAAAk+E,KACA90E,OAAA,IAAAA,EAAA,KAAAA,EACA,IAAAqxB,OAAA,EACA,UAAA6zB,GAAA,CACA,IAAA/B,EAAA+B,GAAAqpB,cAEA,GADAl9C,EAAA8xB,EAAAsyB,QACA,OAAAz1E,GAAAq0E,GAAAr0E,EAAAmjD,EAAAuyB,MAEA,YADAF,GAAAvC,GAAAvlE,EAAA2jB,EAAArxB,GAIAg0E,IAAA1hF,EACAsE,EAAA23E,cAAAiH,GAAA9xE,EAAAgK,EAAA2jB,EAAArxB,GAEA,SAAA61E,GAAAvjF,EAAAoR,GACA,0BAAAA,GAAApR,MAAAoR,EAAApR,GAAA,WACAoR,EAAA,QAEA,OAAAA,QAAA,IAAAA,GAAApR,MAAAoR,EAAAlI,QAAAlJ,EAAA,WACAoR,EAAAlI,QAAA,YADA,EAIA,SAAAs6E,MACA,SAAAC,GAAAzjF,EAAAoR,EAAAgK,GACA,GAAAymE,IAAAt5E,EAAA,OACA,IAAAmF,EAAA1N,EAAAwpE,UACA,GAAAxpE,IAAAqhF,IAAA,OAAA3zE,OAAA2zE,GACA,GAAAM,IAAA,EAAA3hF,EAAA,CACAw8E,eAAA4E,GACAyB,OAAAznE,EACA4nE,aAAA,KACAC,WAAA,KACA3vB,KAAA,MACK,OAAAsuB,QAAA,IAAA9B,UAAA,KAAA1kE,EAAAwmE,GAAApgB,IAAApwD,IAAAwwE,GAAA38D,IAAA7T,EAAApR,OAA6E,CAClF,IAAAoR,EAAAgK,EAAiB,OAAAhK,EAAAkiD,MAAiBliD,IAAAkiD,KAClCliD,EAAAkiD,KAAAtzD,MAEG,CACHu+E,KACA,IAAAj6E,EAAA45E,KAEAn/C,EAAA,CACAy9C,eAFAl4E,EAAA85E,GAAA95E,EAAAtE,GAGA6iF,OAAAznE,EACA4nE,aAAA,KACAC,WAAA,KACA3vB,KAAA,MAEAzC,EAAAz/C,EAAAuuC,KACA,UAAAkR,EAAA9xB,EAAAu0B,KAAAv0B,MAA+B,CAC/B,IAAA5J,EAAA07B,EAAAyC,KACA,OAAAn+B,IAAA4J,EAAAu0B,KAAAn+B,GACA07B,EAAAyC,KAAAv0B,EAGA,GADA3tB,EAAAuuC,KAAA5gB,EACA,IAAA/+B,EAAAw8E,iBAAA,OAAA9uE,GAAA,IAAAA,EAAA8uE,iBAAA,QAAA9uE,EAAA0D,EAAAuxE,qBAAA,IACA,IAAAjxE,EAAAN,EAAA2xE,kBACAxpE,EAAA7L,EAAAgE,EAAA0J,GAGA,GAFA2jB,EAAAikD,aAAAt1E,EACAqxB,EAAAkkD,WAAA1pE,EACAi1B,GAAAj1B,EAAA7H,GAAA,OACK,MAAAupC,IACLujC,GAAAx+E,EAAAsE,IAGA,IAAA69E,GAAA,CACAuB,YAAAlxB,GACA8C,YAAAwsB,GACAvsB,WAAAusB,GACAtsB,UAAAssB,GACArsB,oBAAAqsB,GACAnsB,gBAAAmsB,GACAlsB,QAAAksB,GACAjsB,WAAAisB,GACAhsB,OAAAgsB,GACA/rB,SAAA+rB,GACApsB,cAAAosB,IAEAG,GAAA,CACAyB,YAAAlxB,GACA8C,YAAA,SAAAt1D,EAAAoR,GAEA,OADAixE,KAAApG,cAAA,CAAAj8E,OAAA,IAAAoR,EAAA,KAAAA,GACApR,GAEAu1D,WAAA/C,GACAgD,UAAA,SAAAx1D,EAAAoR,GACA,OAAAiyE,GAAA,IAAAnC,GAAAD,GAAAjhF,EAAAoR,IAEAqkD,oBAAA,SAAAz1D,EAAAoR,EAAAgK,GAEA,OADAA,EAAA,OAAAA,QAAA,IAAAA,IAAA1T,OAAA,CAAA1H,IAAA,KACAqjF,GAAA,EAAAxC,GAAAG,GAAAuC,GAAAltB,KAAA,KAAAjlD,EAAApR,GAAAob,IAEAu6C,gBAAA,SAAA31D,EAAAoR,GACA,OAAAiyE,GAAA,EAAAxC,GAAAG,GAAAhhF,EAAAoR,IAEAwkD,QAAA,SAAA51D,EAAAoR,GACA,IAAAgK,EAAAinE,KAIA,OAHAjxE,OAAA,IAAAA,EAAA,KAAAA,EACApR,MACAob,EAAA6gE,cAAA,CAAAj8E,EAAAoR,GACApR,GAEA61D,WAAA,SAAA71D,EAAAoR,EAAAgK,GACA,IAAA1N,EAAA20E,KAUA,OATAjxE,OAAA,IAAAgK,IAAAhK,KACA1D,EAAAuuE,cAAAvuE,EAAAqwE,UAAA3sE,EAOApR,GANAA,EAAA0N,EAAA40E,MAAA,CACA3iC,KAAA,KACAijC,SAAA,KACAD,oBAAA3iF,EACA+iF,kBAAA3xE,IAEAwxE,SAAAa,GAAAptB,KAAA,KAAAgrB,GAAArhF,GACA,CAAA0N,EAAAuuE,cAAAj8E,IAEA81D,OAAA,SAAA91D,GAKA,OAHAA,EAAA,CACAkJ,QAAAlJ,GAFAqiF,KAIApG,cAAAj8E,GAEA+1D,SAAA,SAAA/1D,GACA,IAAAoR,EAAAixE,KAUA,MATA,oBAAAriF,WACAoR,EAAA6qE,cAAA7qE,EAAA2sE,UAAA/9E,EAOAA,GANAA,EAAAoR,EAAAkxE,MAAA,CACA3iC,KAAA,KACAijC,SAAA,KACAD,oBAAAF,GACAM,kBAAA/iF,IAEA4iF,SAAAa,GAAAptB,KAAA,KAAAgrB,GAAArhF,GACA,CAAAoR,EAAA6qE,cAAAj8E,IAEA01D,cAAA8tB,IAEAtB,GAAA,CACAwB,YAAAlxB,GACA8C,YAAA,SAAAt1D,EAAAoR,GACA,IAAAgK,EAAAonE,KACApxE,OAAA,IAAAA,EAAA,KAAAA,EACA,IAAA1D,EAAA0N,EAAA6gE,cACA,cAAAvuE,GAAA,OAAA0D,GAAA2wE,GAAA3wE,EAAA1D,EAAA,IAAAA,EAAA,IACA0N,EAAA6gE,cAAA,CAAAj8E,EAAAoR,GACApR,IAEAu1D,WAAA/C,GACAgD,UAAA,SAAAx1D,EAAAoR,GACA,OAAAkyE,GAAA,IAAApC,GAAAD,GAAAjhF,EAAAoR,IAEAqkD,oBAAA,SAAAz1D,EAAAoR,EAAAgK,GAEA,OADAA,EAAA,OAAAA,QAAA,IAAAA,IAAA1T,OAAA,CAAA1H,IAAA,KACAsjF,GAAA,EAAAzC,GAAAG,GAAAuC,GAAAltB,KAAA,KAAAjlD,EAAApR,GAAAob,IAEAu6C,gBAAA,SAAA31D,EAAAoR,GACA,OAAAkyE,GAAA,EAAAzC,GAAAG,GAAAhhF,EAAAoR,IAEAwkD,QAAA,SAAA51D,EAAAoR,GACA,IAAAgK,EAAAonE,KACApxE,OAAA,IAAAA,EAAA,KAAAA,EACA,IAAA1D,EAAA0N,EAAA6gE,cACA,cAAAvuE,GAAA,OAAA0D,GAAA2wE,GAAA3wE,EAAA1D,EAAA,IAAAA,EAAA,IACA1N,MACAob,EAAA6gE,cAAA,CAAAj8E,EAAAoR,GACApR,IAEA61D,WAAA6sB,GACA5sB,OAAA,WACA,OAAA0sB,KAAAvG,eAEAlmB,SAAA,SAAA/1D,GACA,OAAA0iF,GAAAD,KAEA/sB,cAAA8tB,IAEAG,GAAA,KACAC,GAAA,KACAC,IAAA,EACA,SAAAC,GAAA9jF,EAAAoR,GACA,IAAAgK,EAAAg3C,GAAA,eACAh3C,EAAA0gE,YAAA,UACA1gE,EAAA/V,KAAA,UACA+V,EAAA89C,UAAA9nD,EACAgK,EAAA4+C,OAAAh6D,EACAob,EAAAuuD,UAAA,EACA,OAAA3pE,EAAAo8E,YAAAp8E,EAAAo8E,WAAAE,WAAAlhE,EAAApb,EAAAo8E,WAAAhhE,GAAApb,EAAAq8E,YAAAr8E,EAAAo8E,WAAAhhE,EAEA,SAAA2oE,GAAA/jF,EAAAoR,GACA,OAAApR,EAAA25D,KACA,OACA,IAAAv+C,EAAApb,EAAAqF,KAEA,eADA+L,EAAA,IAAAA,EAAA6vD,UAAA7lD,EAAAu/C,gBAAAvpD,EAAAyvD,SAAAlG,cAAA,KAAAvpD,KACApR,EAAAk5D,UAAA9nD,GAAA,GACA,OACA,eAAAA,EAAA,KAAApR,EAAA+7E,cAAA,IAAA3qE,EAAA6vD,SAAA,KAAA7vD,KAAApR,EAAAk5D,UAAA9nD,GAAA,GACA,QAEA,QACA,UAGA,SAAA4yE,GAAAhkF,GACA,GAAA6jF,GAAA,CACA,IAAAzyE,EAAAwyE,GACA,GAAAxyE,EAAA,CACA,IAAAgK,EAAAhK,EACA,IAAA2yE,GAAA/jF,EAAAoR,GAAA,CAEA,KADAA,EAAAkpE,GAAAl/D,MACA2oE,GAAA/jF,EAAAoR,GAIA,OAHApR,EAAA2pE,WAAA,EACAka,IAAA,OACAF,GAAA3jF,GAGA8jF,GAAAH,GAAAvoE,GAEAuoE,GAAA3jF,EACA4jF,GAAArJ,GAAAnpE,QACKpR,EAAA2pE,WAAA,EAAAka,IAAA,EAAAF,GAAA3jF,GAGL,SAAAikF,GAAAjkF,GACA,IAAAA,IAAAg6D,OAAoB,OAAAh6D,GAAA,IAAAA,EAAA25D,KAAA,IAAA35D,EAAA25D,KAAA,KAAA35D,EAAA25D,KAA0D35D,IAAAg6D,OAC9E2pB,GAAA3jF,EAEA,SAAAkkF,GAAAlkF,GACA,GAAAA,IAAA2jF,GAAA,SACA,IAAAE,GAAA,OAAAI,GAAAjkF,GAAA6jF,IAAA,KACA,IAAAzyE,EAAApR,EAAAqF,KACA,OAAArF,EAAA25D,KAAA,SAAAvoD,GAAA,SAAAA,IAAAwoE,GAAAxoE,EAAApR,EAAAm8E,eAAA,IAAA/qE,EAAAwyE,GAA0FxyE,GAAG0yE,GAAA9jF,EAAAoR,KAAAkpE,GAAAlpE,GAG7F,OAFA6yE,GAAAjkF,GACA4jF,GAAAD,GAAArJ,GAAAt6E,EAAAk5D,WAAA,MACA,EAEA,SAAAirB,KACAP,GAAAD,GAAA,KACAE,IAAA,EAEA,IAAAO,GAAAriB,GAAApL,kBACAmsB,IAAA,EACA,SAAA3vB,GAAAnzD,EAAAoR,EAAAgK,EAAA1N,GACA0D,EAAA04D,MAAA,OAAA9pE,EAAAigF,GAAA7uE,EAAA,KAAAgK,EAAA1N,GAAAsyE,GAAA5uE,EAAApR,EAAA8pE,MAAA1uD,EAAA1N,GAEA,SAAA22E,GAAArkF,EAAAoR,EAAAgK,EAAA1N,EAAApJ,GACA8W,IAAA25C,OACA,IAAAh2B,EAAA3tB,EAAArH,IAGA,OAFAu6E,GAAAlzE,EAAA9M,GACAoJ,EAAAs0E,GAAAhiF,EAAAoR,EAAAgK,EAAA1N,EAAAqxB,EAAAz6B,GACA,OAAAtE,GAAA8iF,IACA1xE,EAAAu4D,WAAA,EACAxW,GAAAnzD,EAAAoR,EAAA1D,EAAApJ,GACA8M,EAAA04D,QAHA14D,EAAA8qE,YAAAl8E,EAAAk8E,YAAA9qE,EAAAu4D,YAAA,IAAA3pE,EAAAw8E,gBAAAl4E,IAAAtE,EAAAw8E,eAAA,GAAA+H,GAAAvkF,EAAAoR,EAAA9M,IAKA,SAAAkgF,GAAAxkF,EAAAoR,EAAAgK,EAAA1N,EAAApJ,EAAAy6B,GACA,UAAA/+B,EAAA,CACA,IAAA6wD,EAAAz1C,EAAA/V,KACA,0BAAAwrD,GAAA4rB,GAAA5rB,SAAA,IAAAA,EAAAxlD,cAAA,OAAA+P,EAAAi6C,cAAA,IAAAj6C,EAAA/P,eACArL,EAAA28E,GAAAvhE,EAAA/V,KAAA,KAAAqI,EAAA,KAAA0D,EAAAsa,KAAAqT,IACAh1B,IAAAqH,EAAArH,IACA/J,EAAAg6D,OAAA5oD,EACAA,EAAA04D,MAAA9pE,IAJAoR,EAAAuoD,IAAA,GAAAvoD,EAAA/L,KAAAwrD,EAAA4zB,GAAAzkF,EAAAoR,EAAAy/C,EAAAnjD,EAAApJ,EAAAy6B,IAOA,OADA8xB,EAAA7wD,EAAA8pE,MACAxlE,EAAAy6B,IAAAz6B,EAAAusD,EAAAsrB,eAAA/gE,EAAA,QAAAA,IAAAi6C,SAAAj6C,EAAAokC,IAAAl7C,EAAAoJ,IAAA1N,EAAA+J,MAAAqH,EAAArH,KAAAw6E,GAAAvkF,EAAAoR,EAAA2tB,IACA3tB,EAAAu4D,WAAA,GACA3pE,EAAA08E,GAAA7rB,EAAAnjD,IACA3D,IAAAqH,EAAArH,IACA/J,EAAAg6D,OAAA5oD,EACAA,EAAA04D,MAAA9pE,GAEA,SAAAykF,GAAAzkF,EAAAoR,EAAAgK,EAAA1N,EAAApJ,EAAAy6B,GACA,cAAA/+B,GAAAw/C,GAAAx/C,EAAAm8E,cAAAzuE,IAAA1N,EAAA+J,MAAAqH,EAAArH,MAAA+4E,IAAA,EAAAx+E,EAAAy6B,GAAAwlD,GAAAvkF,EAAAoR,EAAA2tB,GAAA2lD,GAAA1kF,EAAAoR,EAAAgK,EAAA1N,EAAAqxB,GAEA,SAAA4lD,GAAA3kF,EAAAoR,GACA,IAAAgK,EAAAhK,EAAArH,KACA,OAAA/J,GAAA,OAAAob,GAAA,OAAApb,KAAA+J,MAAAqR,KAAAhK,EAAAu4D,WAAA,KAEA,SAAA+a,GAAA1kF,EAAAoR,EAAAgK,EAAA1N,EAAApJ,GACA,IAAAy6B,EAAAozB,GAAA/2C,GAAAw/D,GAAA5oB,GAAA9oD,QAIA,OAHA61B,EAAA87C,GAAAzpE,EAAA2tB,GACAulD,GAAAlzE,EAAA9M,GACA8W,EAAA4mE,GAAAhiF,EAAAoR,EAAAgK,EAAA1N,EAAAqxB,EAAAz6B,GACA,OAAAtE,GAAA8iF,IACA1xE,EAAAu4D,WAAA,EACAxW,GAAAnzD,EAAAoR,EAAAgK,EAAA9W,GACA8M,EAAA04D,QAHA14D,EAAA8qE,YAAAl8E,EAAAk8E,YAAA9qE,EAAAu4D,YAAA,IAAA3pE,EAAAw8E,gBAAAl4E,IAAAtE,EAAAw8E,eAAA,GAAA+H,GAAAvkF,EAAAoR,EAAA9M,IAKA,SAAAsgF,GAAA5kF,EAAAoR,EAAAgK,EAAA1N,EAAApJ,GACA,GAAA6tD,GAAA/2C,GAAA,CACA,IAAA2jB,GAAA,EACAw8C,GAAAnqE,QACG2tB,GAAA,EAEH,GADAulD,GAAAlzE,EAAA9M,GACA,OAAA8M,EAAA8nD,UAAA,OAAAl5D,MAAAwpE,UAAA,KAAAp4D,EAAAo4D,UAAA,KAAAp4D,EAAAu4D,WAAA,GAAAkV,GAAAztE,EAAAgK,EAAA1N,GAAAwxE,GAAA9tE,EAAAgK,EAAA1N,EAAApJ,GAAAoJ,GAAA,OAA6I,UAAA1N,EAAA,CAC7I,IAAA6wD,EAAAz/C,EAAA8nD,UACA/jC,EAAA/jB,EAAA+qE,cACAtrB,EAAAlyD,MAAAw2B,EACA,IAAAzjB,EAAAm/C,EAAAW,QACAj4C,EAAA6B,EAAA0jE,YACA,kBAAAvlE,GAAA,OAAAA,IAAAi5C,GAAAj5C,KAAAshE,GAAAzpE,EAAAmI,EAAA44C,GAAA/2C,GAAAw/D,GAAA5oB,GAAA9oD,SACA,IAAA+xC,EAAA7/B,EAAAgkE,yBACAxoE,EAAA,oBAAAqkC,GAAA,oBAAA4V,EAAAwuB,wBACAzoE,GAAA,oBAAAi6C,EAAAouB,kCAAA,oBAAApuB,EAAAmuB,4BAAA7pD,IAAAznB,GAAAgE,IAAA6H,IAAAwlE,GAAA3tE,EAAAy/C,EAAAnjD,EAAA6L,GACAsrE,IAAA,EACA,IAAA1wE,EAAA/C,EAAA6qE,cACAvqE,EAAAm/C,EAAA5vD,MAAAkT,EACA,IAAAxF,EAAAyC,EAAA8qE,YACA,OAAAvtE,IAAAwwE,GAAA/tE,EAAAzC,EAAAjB,EAAAmjD,EAAAvsD,GAAAoN,EAAAN,EAAA6qE,eACA9mD,IAAAznB,GAAAyG,IAAAzC,GAAAwgD,GAAAhpD,SAAA27E,IAAA,oBAAA5pC,IAAA6iC,GAAA1sE,EAAAgK,EAAA6/B,EAAAvtC,GAAAgE,EAAAN,EAAA6qE,gBAAA9mD,EAAA0vD,IAAAlG,GAAAvtE,EAAAgK,EAAA+Z,EAAAznB,EAAAyG,EAAAzC,EAAA6H,KAAA3C,GAAA,oBAAAi6C,EAAAyuB,2BAAA,oBAAAzuB,EAAA0uB,qBAAA,oBAAA1uB,EAAA0uB,oBAAA1uB,EAAA0uB,qBAAA,oBAAA1uB,EAAAyuB,2BAAAzuB,EAAAyuB,6BAAA,oBAAAzuB,EAAA2uB,oBAAApuE,EAAAu4D,WAAA,yBAAA9Y,EAAA2uB,oBAAApuE,EAAAu4D,WAAA,GAAAv4D,EAAA+qE,cAAAzuE,EAAA0D,EAAA6qE,cAAAvqE,GAAAm/C,EAAAlyD,MAAA+O,EAAAmjD,EAAA5vD,MAAAyQ,EAAAm/C,EAAAW,QAAAj4C,EAAA7L,EAAAynB,IAAA,oBAAA07B,EAAA2uB,oBAAApuE,EAAAu4D,WAAA,GAAAj8D,GAAA,QACGmjD,EAAAz/C,EAAA8nD,UAAA/jC,EAAA/jB,EAAA+qE,cAAAtrB,EAAAlyD,MAAAyS,EAAA/L,OAAA+L,EAAA0qE,YAAA3mD,EAAAk9B,GAAAjhD,EAAA/L,KAAA8vB,GAAAzjB,EAAAm/C,EAAAW,QAAA,kBAAAj4C,EAAA6B,EAAA0jE,cAAA,OAAAvlE,IAAAi5C,GAAAj5C,KAAAshE,GAAAzpE,EAAAmI,EAAA44C,GAAA/2C,GAAAw/D,GAAA5oB,GAAA9oD,UAAA0N,EAAA,oBAAAqkC,EAAA7/B,EAAAgkE,2BAAA,oBAAAvuB,EAAAwuB,0BAAA,oBAAAxuB,EAAAouB,kCAAA,oBAAApuB,EAAAmuB,4BAAA7pD,IAAAznB,GAAAgE,IAAA6H,IAAAwlE,GAAA3tE,EAAAy/C,EAAAnjD,EAAA6L,GAAAsrE,IAAA,EAAAnzE,EAAAN,EAAA6qE,cAAA9nE,EAAA08C,EAAA5vD,MAAAyQ,EAAA,QAAA/C,EAAAyC,EAAA8qE,eAAAiD,GAAA/tE,EAAAzC,EAAAjB,EAAAmjD,EAAAvsD,GAAA6P,EAAA/C,EAAA6qE,eAAA9mD,IAAAznB,GAAAgE,IAAAyC,GAAA+9C,GAAAhpD,SAAA27E,IAAA,oBAAA5pC,IAAA6iC,GAAA1sE,EAAAgK,EAAA6/B,EAAAvtC,GAAAyG,EAAA/C,EAAA6qE,gBAAAhhC,EAAA4pC,IAAAlG,GAAAvtE,EAAAgK,EAAA+Z,EAAAznB,EAAAgE,EAAAyC,EAAAoF,KAAA3C,GAAA,oBAAAi6C,EAAAi0B,4BAAA,oBAAAj0B,EAAAk0B,sBAAA,oBAAAl0B,EAAAk0B,qBAAAl0B,EAAAk0B,oBAAAr3E,EAAAyG,EAAAoF,GAAA,oBAAAs3C,EAAAi0B,4BAAAj0B,EAAAi0B,2BAAAp3E,EAAAyG,EAAAoF,IAAA,oBAAAs3C,EAAAm0B,qBAAA5zE,EAAAu4D,WAAA,uBAAA9Y,EAAAwuB,0BAAAjuE,EAAAu4D,WAAA,2BAAA9Y,EAAAm0B,oBAAA7vD,IAAAn1B,EAAAm8E,eAAAzqE,IAAA1R,EAAAi8E,gBAAA7qE,EAAAu4D,WAAA,uBAAA9Y,EAAAwuB,yBAAAlqD,IAAAn1B,EAAAm8E,eAAAzqE,IAAA1R,EAAAi8E,gBAAA7qE,EAAAu4D,WAAA,KAAAv4D,EAAA+qE,cAAAzuE,EAAA0D,EAAA6qE,cAAA9nE,GAAA08C,EAAAlyD,MAAA+O,EAAAmjD,EAAA5vD,MAAAkT,EAAA08C,EAAAW,QAAAj4C,EAAA7L,EAAAutC,IAAA,oBAAA4V,EAAAm0B,oBAAA7vD,IAAAn1B,EAAAm8E,eAAAzqE,IAAA1R,EAAAi8E,gBAAA7qE,EAAAu4D,WAAA,uBAAA9Y,EAAAwuB,yBAAAlqD,IAAAn1B,EAAAm8E,eAAAzqE,IAAA1R,EAAAi8E,gBAAA7qE,EAAAu4D,WAAA,KAAAj8D,GAAA,GACH,OAAAu3E,GAAAjlF,EAAAoR,EAAAgK,EAAA1N,EAAAqxB,EAAAz6B,GAEA,SAAA2gF,GAAAjlF,EAAAoR,EAAAgK,EAAA1N,EAAApJ,EAAAy6B,GACA4lD,GAAA3kF,EAAAoR,GACA,IAAAy/C,EAAA,QAAAz/C,EAAAu4D,WACA,IAAAj8D,IAAAmjD,EAAA,OAAAvsD,GAAAm3E,GAAArqE,EAAAgK,GAAA,GAAAmpE,GAAAvkF,EAAAoR,EAAA2tB,GACArxB,EAAA0D,EAAA8nD,UACAkrB,GAAAl7E,QAAAkI,EACA,IAAA+jB,EAAA07B,GAAA,oBAAAz1C,EAAA8pE,yBAAA,KAAAx3E,EAAAqnD,SAKA,OAJA3jD,EAAAu4D,WAAA,EACA,OAAA3pE,GAAA6wD,GAAAz/C,EAAA04D,MAAAkW,GAAA5uE,EAAApR,EAAA8pE,MAAA,KAAA/qC,GAAA3tB,EAAA04D,MAAAkW,GAAA5uE,EAAA,KAAA+jB,EAAA4J,IAAAo0B,GAAAnzD,EAAAoR,EAAA+jB,EAAA4J,GACA3tB,EAAA6qE,cAAAvuE,EAAAzM,MACAqD,GAAAm3E,GAAArqE,EAAAgK,GAAA,GACAhK,EAAA04D,MAEA,SAAAqb,GAAAnlF,GACA,IAAAoR,EAAApR,EAAAk5D,UACA9nD,EAAAg0E,eAAAhK,GAAAp7E,EAAAoR,EAAAg0E,eAAAh0E,EAAAg0E,iBAAAh0E,EAAAogD,SAAApgD,EAAAogD,SAAA4pB,GAAAp7E,EAAAoR,EAAAogD,SAAA,GACA8uB,GAAAtgF,EAAAoR,EAAAs+D,eAEA,SAAA2V,GAAArlF,EAAAoR,EAAAgK,GACA,IAAA1N,EAAA0D,EAAAsa,KACApnB,EAAA8M,EAAA2qE,aACAh9C,EAAA3tB,EAAA6qE,cACA,WAAA7qE,EAAAu4D,WAAA,CACA5qC,EAAA,KACA,IAAA8xB,GAAA,OACG9xB,EAAA,CACHumD,WAAA,OAAAvmD,IAAAumD,WAAA,GACGz0B,GAAA,EAAAz/C,EAAAu4D,YAAA,GACH,UAAA3pE,EACA,GAAA6wD,EAAA,CACA,IAAA17B,EAAA7wB,EAAAihF,SACAvlF,EAAA48E,GAAA,KAAAlvE,EAAA,QACA,OAAA0D,EAAAsa,QAAA1rB,EAAA8pE,MAAA,OAAA14D,EAAA6qE,cAAA7qE,EAAA04D,YAAA14D,EAAA04D,OACAp8D,EAAAkvE,GAAAznD,EAAAznB,EAAA0N,EAAA,MACApb,EAAA+pE,QAAAr8D,GACA0N,EAAApb,GACAg6D,OAAAtsD,EAAAssD,OAAA5oD,OACKgK,EAAA1N,EAAAuyE,GAAA7uE,EAAA,KAAA9M,EAAAyG,SAAAqQ,QACF,OAAApb,EAAAi8E,eAAA9mD,GAAAznB,EAAA1N,EAAA8pE,OAAAC,QAAAlZ,GAAAz1C,EAAA9W,EAAAihF,SAAAjhF,EAAAo4E,GAAAhvE,IAAAquE,cAAA,OAAA3qE,EAAAsa,SAAAmlC,EAAA,OAAAz/C,EAAA6qE,cAAA7qE,EAAA04D,YAAA14D,EAAA04D,SAAAp8D,EAAAo8D,QAAAxlE,EAAAwlE,MAAAjZ,IAAAnjD,EAAApJ,EAAAylE,QAAA2S,GAAAvnD,EAAA/Z,EAAA+Z,EAAAqnD,gBAAAphE,EAAA9W,IAAAi4E,oBAAA,EAAAnhE,EAAA4+C,OAAAtsD,EAAAssD,OAAA5oD,GAAAgK,EAAA1N,EAAAsyE,GAAA5uE,EAAA1D,EAAAo8D,MAAAxlE,EAAAyG,SAAAqQ,KAAA+Z,EAAAn1B,EAAA8pE,MAAAjZ,KAAAvsD,EAAAihF,UAAAjhF,EAAAs4E,GAAA,KAAAlvE,EAAA,SAAAo8D,MAAA30C,EAAA,OAAA/jB,EAAAsa,QAAApnB,EAAAwlE,MAAA,OAAA14D,EAAA6qE,cAAA7qE,EAAA04D,YAAA14D,EAAA04D,QAAAp8D,EAAApJ,EAAAylE,QAAA6S,GAAA/rB,EAAAnjD,EAAA0N,EAAA,OAAAuuD,WAAA,EAAAvuD,EAAA9W,IAAAi4E,oBAAA,EAAAnhE,EAAA4+C,OAAAtsD,EAAAssD,OAAA5oD,GAAA1D,EAAA0N,EAAA4kE,GAAA5uE,EAAA+jB,EAAA7wB,EAAAyG,SAAAqQ,IAAAhK,EAAA8nD,UAAAl5D,EAAAk5D,UAGH,OAFA9nD,EAAA6qE,cAAAl9C,EACA3tB,EAAA04D,MAAA1uD,EACA1N,EAEA,SAAA62E,GAAAvkF,EAAAoR,EAAAgK,GAEA,GADA,OAAApb,IAAAoR,EAAA4qE,oBAAAh8E,EAAAg8E,qBACA5qE,EAAAmrE,oBAAAnhE,EAAA,YAEA,GADA,OAAApb,GAAAoR,EAAA04D,QAAA9pE,EAAA8pE,OAAAvhE,EAAA,OACA,OAAA6I,EAAA04D,MAAA,CAIA,IAFA1uD,EAAAshE,GADA18E,EAAAoR,EAAA04D,MACA9pE,EAAA+7E,aAAA/7E,EAAAw8E,gBACAprE,EAAA04D,MAAA1uD,EACAA,EAAA4+C,OAAA5oD,EAAsB,OAAApR,EAAA+pE,SAAoB/pE,IAAA+pE,SAAA3uD,IAAA2uD,QAAA2S,GAAA18E,IAAA+7E,aAAA/7E,EAAAw8E,iBAAAxiB,OAAA5oD,EAC1CgK,EAAA2uD,QAAA,KAEA,OAAA34D,EAAA04D,MAEA,SAAA0b,GAAAxlF,EAAAoR,EAAAgK,GACA,IAAA1N,EAAA0D,EAAAorE,eACA,UAAAx8E,GACA,GAAAA,EAAAm8E,gBAAA/qE,EAAA2qE,cAAA7pB,GAAAhpD,QAAA45E,IAAA,OACA,GAAAp1E,EAAA0N,EAAA,CAEA,OADA0nE,IAAA,EACA1xE,EAAAuoD,KACA,OACAwrB,GAAA/zE,GACA+yE,KACA,MACA,OACA1D,GAAArvE,GACA,MACA,OACA+gD,GAAA/gD,EAAA/L,OAAAk2E,GAAAnqE,GACA,MACA,OACAkvE,GAAAlvE,IAAA8nD,UAAAwW,eACA,MACA,QACA+V,GAAAr0E,IAAA+qE,cAAA94E,OACA,MACA,QACA,UAAA+N,EAAA6qE,cAEA,YADAvuE,EAAA0D,EAAA04D,MAAAyS,sBACA7uE,GAAA0N,EAAAiqE,GAAArlF,EAAAoR,EAAAgK,GAEA,QADAhK,EAAAmzE,GAAAvkF,EAAAoR,EAAAgK,IACAhK,EAAA24D,QAAA,KAGA,OAAAwa,GAAAvkF,EAAAoR,EAAAgK,SAGG0nE,IAAA,EAEH,OADA1xE,EAAAorE,eAAA,EACAprE,EAAAuoD,KACA,OACAjsD,EAAA0D,EAAA0qE,YACA,OAAA97E,MAAAwpE,UAAA,KAAAp4D,EAAAo4D,UAAA,KAAAp4D,EAAAu4D,WAAA,GACA3pE,EAAAoR,EAAA2qE,aACA,IAAAz3E,EAAAu2E,GAAAzpE,EAAA4gD,GAAA9oD,SAIA,GAHAo7E,GAAAlzE,EAAAgK,GACA9W,EAAA09E,GAAA,KAAA5wE,EAAA1D,EAAA1N,EAAAsE,EAAA8W,GACAhK,EAAAu4D,WAAA,EACA,kBAAArlE,GAAA,OAAAA,GAAA,oBAAAA,EAAAywD,aAAA,IAAAzwD,EAAAmuD,SAAA,CAGA,GAFArhD,EAAAuoD,IAAA,EACAyoB,KACAjwB,GAAAzkD,GAAA,CACA,IAAAqxB,GAAA,EACAw8C,GAAAnqE,QACS2tB,GAAA,EACT3tB,EAAA6qE,cAAA,OAAA33E,EAAArD,YAAA,IAAAqD,EAAArD,MAAAqD,EAAArD,MAAA,KACA,IAAA4vD,EAAAnjD,EAAA0xE,yBACA,oBAAAvuB,GAAAitB,GAAA1sE,EAAA1D,EAAAmjD,EAAA7wD,GACAsE,EAAAotD,QAAAssB,GACA5sE,EAAA8nD,UAAA50D,EACAA,EAAA25E,oBAAA7sE,EACA8tE,GAAA9tE,EAAA1D,EAAA1N,EAAAob,GACAhK,EAAA6zE,GAAA,KAAA7zE,EAAA1D,GAAA,EAAAqxB,EAAA3jB,QACOhK,EAAAuoD,IAAA,EAAAxG,GAAA,KAAA/hD,EAAA9M,EAAA8W,GAAAhK,IAAA04D,MACP,OAAA14D,EACA,QASA,OARA9M,EAAA8M,EAAA0qE,YACA,OAAA97E,MAAAwpE,UAAA,KAAAp4D,EAAAo4D,UAAA,KAAAp4D,EAAAu4D,WAAA,GACA5qC,EAAA3tB,EAAA2qE,aACA/7E,EA1+BA,SAAAA,GACA,IAAAoR,EAAApR,EAAAm1D,QACA,OAAAn1D,EAAAk1D,SACA,OACA,OAAA9jD,EACA,OAEA,OACA,MAAAA,EACA,QASA,OARApR,EAAAk1D,QAAA,GAEA9jD,GADAA,EAAApR,EAAAi1D,UAEA5zD,KAAA,SAAA+P,GACA,IAAApR,EAAAk1D,UAAA9jD,IAAAylD,QAAA72D,EAAAk1D,QAAA,EAAAl1D,EAAAm1D,QAAA/jD,IACO,SAAAA,GACP,IAAApR,EAAAk1D,UAAAl1D,EAAAk1D,QAAA,EAAAl1D,EAAAm1D,QAAA/jD,KAEApR,EAAAk1D,SACA,OACA,OAAAl1D,EAAAm1D,QACA,OACA,MAAAn1D,EAAAm1D,QAGA,MADAn1D,EAAAm1D,QAAA/jD,EACAA,GAi9BAs0E,CAAAphF,GACA8M,EAAA/L,KAAArF,EACAsE,EAAA8M,EAAAuoD,IAhoCA,SAAA35D,GACA,uBAAAA,EAAA,OAAAy8E,GAAAz8E,GAAA,IACA,YAAAA,GAAA,OAAAA,EAAA,CAEA,IADAA,IAAAyyD,YACAgQ,GAAA,UACA,GAAAziE,IAAA2iE,GAAA,UAEA,SAynCAgjB,CAAA3lF,GACA++B,EAAAszB,GAAAryD,EAAA++B,GACA8xB,OAAA,EACAvsD,GACA,OACAusD,EAAA6zB,GAAA,KAAAtzE,EAAApR,EAAA++B,EAAA3jB,GACA,MACA,OACAy1C,EAAA+zB,GAAA,KAAAxzE,EAAApR,EAAA++B,EAAA3jB,GACA,MACA,QACAy1C,EAAAwzB,GAAA,KAAAjzE,EAAApR,EAAA++B,EAAA3jB,GACA,MACA,QACAy1C,EAAA2zB,GAAA,KAAApzE,EAAApR,EAAAqyD,GAAAryD,EAAAqF,KAAA05B,GAAArxB,EAAA0N,GACA,MACA,QACA7S,EAAA,MAAAvI,EAAA,IAEA,OAAA6wD,EACA,OACA,OAAAnjD,EAAA0D,EAAA/L,KAAAf,EAAA8M,EAAA2qE,aAAA2I,GAAA1kF,EAAAoR,EAAA1D,EAAApJ,EAAA8M,EAAA0qE,cAAApuE,EAAApJ,EAAA+tD,GAAA3kD,EAAApJ,GAAA8W,GACA,OACA,OAAA1N,EAAA0D,EAAA/L,KAAAf,EAAA8M,EAAA2qE,aAAA6I,GAAA5kF,EAAAoR,EAAA1D,EAAApJ,EAAA8M,EAAA0qE,cAAApuE,EAAApJ,EAAA+tD,GAAA3kD,EAAApJ,GAAA8W,GACA,OAcA,OAbA+pE,GAAA/zE,GAEA,QADA1D,EAAA0D,EAAA8qE,cACA3zE,EAAA,OAEAjE,EAAA,QADAA,EAAA8M,EAAA6qE,eACA33E,EAAAguE,QAAA,KACA6M,GAAA/tE,EAAA1D,EAAA0D,EAAA2qE,aAAA,KAAA3gE,IACA1N,EAAA0D,EAAA6qE,cAAA3J,WACAhuE,GAAA6/E,KAAA/yE,EAAAmzE,GAAAvkF,EAAAoR,EAAAgK,KACA9W,EAAA8M,EAAA8nD,WACA50D,GAAA,OAAAtE,GAAA,OAAAA,EAAA8pE,QAAAxlE,EAAAshF,WAAAhC,GAAArJ,GAAAnpE,EAAA8nD,UAAAwW,eAAAiU,GAAAvyE,EAAA9M,EAAAu/E,IAAA,GACAv/E,GAAA8M,EAAAu4D,WAAA,EAAAv4D,EAAA04D,MAAAmW,GAAA7uE,EAAA,KAAA1D,EAAA0N,KAAA+3C,GAAAnzD,EAAAoR,EAAA1D,EAAA0N,GAAA+oE,MACA/yE,IAAA04D,OAEA14D,EACA,OACA,OAAAqvE,GAAArvE,GAAA,OAAApR,GAAAgkF,GAAA5yE,GAAA1D,EAAA0D,EAAA/L,KAAAf,EAAA8M,EAAA2qE,aAAAh9C,EAAA,OAAA/+B,IAAAm8E,cAAA,KAAAtrB,EAAAvsD,EAAAyG,SAAA6uE,GAAAlsE,EAAApJ,GAAAusD,EAAA,YAAA9xB,GAAA66C,GAAAlsE,EAAAqxB,KAAA3tB,EAAAu4D,WAAA,IAAAgb,GAAA3kF,EAAAoR,GAAA,IAAAgK,GAAA,EAAAhK,EAAAsa,MAAApnB,EAAAuhF,QAAAz0E,EAAAorE,eAAAprE,EAAAmrE,oBAAA,EAAAnrE,EAAA,OAAA+hD,GAAAnzD,EAAAoR,EAAAy/C,EAAAz1C,GAAAhK,IAAA04D,OAAA14D,EACA,OACA,cAAApR,GAAAgkF,GAAA5yE,GAAA,KACA,QACA,OAAAi0E,GAAArlF,EAAAoR,EAAAgK,GACA,OACA,OAAAklE,GAAAlvE,IAAA8nD,UAAAwW,eAAAhiE,EAAA0D,EAAA2qE,aAAA,OAAA/7E,EAAAoR,EAAA04D,MAAAkW,GAAA5uE,EAAA,KAAA1D,EAAA0N,GAAA+3C,GAAAnzD,EAAAoR,EAAA1D,EAAA0N,GAAAhK,EAAA04D,MACA,QACA,OAAAp8D,EAAA0D,EAAA/L,KAAAf,EAAA8M,EAAA2qE,aAAAsI,GAAArkF,EAAAoR,EAAA1D,EAAApJ,EAAA8M,EAAA0qE,cAAApuE,EAAApJ,EAAA+tD,GAAA3kD,EAAApJ,GAAA8W,GACA,OACA,OAAA+3C,GAAAnzD,EAAAoR,IAAA2qE,aAAA3gE,GAAAhK,EAAA04D,MACA,OAEA,QACA,OAAA3W,GAAAnzD,EAAAoR,IAAA2qE,aAAAhxE,SAAAqQ,GAAAhK,EAAA04D,MACA,QACA9pE,EAAA,CAMA,GALA0N,EAAA0D,EAAA/L,KAAAwvD,SACAvwD,EAAA8M,EAAA2qE,aACAlrB,EAAAz/C,EAAA+qE,cAEAsJ,GAAAr0E,EADA2tB,EAAAz6B,EAAAjB,OAEA,OAAAwtD,EAAA,CACA,IAAA17B,EAAA07B,EAAAxtD,MAEA,QADA07B,EAAAyP,GAAArZ,EAAA4J,GAAA,yBAAArxB,EAAA6mD,sBAAA7mD,EAAA6mD,sBAAAp/B,EAAA4J,GAAA,cAEA,GAAA8xB,EAAA9lD,WAAAzG,EAAAyG,WAAAmnD,GAAAhpD,QAAA,CACAkI,EAAAmzE,GAAAvkF,EAAAoR,EAAAgK,GACA,MAAApb,QAEW,YAAAm1B,EAAA/jB,EAAA04D,SAAA30C,EAAA6kC,OAAA5oD,GAAqD,OAAA+jB,GAAY,CAC5E,IAAAzjB,EAAAyjB,EAAA6mD,oBACA,UAAAtqE,EAAA,CACAm/C,EAAA17B,EAAA20C,MACA,QAAAvwD,EAAA7H,EAAAksB,MAAmC,OAAArkB,GAAY,CAC/C,GAAAA,EAAAi4C,UAAA9jD,GAAA,KAAA6L,EAAAusE,aAAA/mD,GAAA,CACA,IAAA5J,EAAAwkC,OAAApgD,EAAA4kE,GAAA/iE,IAAAu+C,IAAA+kB,GAAA/gC,GAAAxoB,EAAA5b,IACA4b,EAAAqnD,eAAAphE,IAAA+Z,EAAAqnD,eAAAphE,GAEA,QADA7B,EAAA4b,EAAAq0C,YACAjwD,EAAAijE,eAAAphE,IAAA7B,EAAAijE,eAAAphE,GACA7B,EAAA6B,EACA,QAAA6/B,EAAA9lB,EAAA6kC,OAAwC,OAAA/e,GAAY,CACpD,IAAArkC,EAAAqkC,EAAAuuB,UACA,GAAAvuB,EAAAshC,oBAAAhjE,EAAA0hC,EAAAshC,oBAAAhjE,EAAA,OAAA3C,KAAA2lE,oBAAAhjE,IAAA3C,EAAA2lE,oBAAAhjE,OAAqJ,aAAA3C,KAAA2lE,oBAAAhjE,GAA4E,MAA5E3C,EAAA2lE,oBAAAhjE,EACrJ0hC,IAAA+e,OAEAtoD,EAAA8qE,eAAAphE,IAAA1J,EAAA8qE,eAAAphE,GACA,MAEA7B,IAAA+5C,WAEazC,EAAA,KAAA17B,EAAAwkC,KAAAxkC,EAAA9vB,OAAA+L,EAAA/L,KAAA,KAAA8vB,EAAA20C,MACb,UAAAjZ,IAAAmJ,OAAA7kC,OAAyC,IAAA07B,EAAA17B,EAAgB,OAAA07B,GAAY,CACrE,GAAAA,IAAAz/C,EAAA,CACAy/C,EAAA,KACA,MAGA,WADA17B,EAAA07B,EAAAkZ,SACA,CACA50C,EAAA6kC,OAAAnJ,EAAAmJ,OACAnJ,EAAA17B,EACA,MAEA07B,IAAAmJ,OAEA7kC,EAAA07B,GAGAsC,GAAAnzD,EAAAoR,EAAA9M,EAAAyG,SAAAqQ,GACAhK,IAAA04D,MAEA,OAAA14D,EACA,OACA,OAAA9M,EAAA8M,EAAA/L,KAAAqI,GAAAqxB,EAAA3tB,EAAA2qE,cAAAhxE,SAAAu5E,GAAAlzE,EAAAgK,GAAA1N,IAAApJ,EAAAkuD,GAAAluD,EAAAy6B,EAAAgnD,wBAAA30E,EAAAu4D,WAAA,EAAAxW,GAAAnzD,EAAAoR,EAAA1D,EAAA0N,GAAAhK,EAAA04D,MACA,QACA,OAAA/qC,EAAAszB,GAAA/tD,EAAA8M,EAAA/L,KAAA+L,EAAA2qE,cAAAyI,GAAAxkF,EAAAoR,EAAA9M,EAAAy6B,EAAAszB,GAAA/tD,EAAAe,KAAA05B,GAAArxB,EAAA0N,GACA,QACA,OAAAqpE,GAAAzkF,EAAAoR,IAAA/L,KAAA+L,EAAA2qE,aAAAruE,EAAA0N,GACA,QACA,OAAA1N,EAAA0D,EAAA/L,KAAAf,EAAA8M,EAAA2qE,aAAAz3E,EAAA8M,EAAA0qE,cAAApuE,EAAApJ,EAAA+tD,GAAA3kD,EAAApJ,GAAA,OAAAtE,MAAAwpE,UAAA,KAAAp4D,EAAAo4D,UAAA,KAAAp4D,EAAAu4D,WAAA,GAAAv4D,EAAAuoD,IAAA,EAAAxH,GAAAzkD,IAAA1N,GAAA,EAAAu7E,GAAAnqE,IAAApR,GAAA,EAAAskF,GAAAlzE,EAAAgK,GAAAyjE,GAAAztE,EAAA1D,EAAApJ,GAAA46E,GAAA9tE,EAAA1D,EAAApJ,EAAA8W,GAAA6pE,GAAA,KAAA7zE,EAAA1D,GAAA,EAAA1N,EAAAob,GAEA7S,EAAA,OAEA,IAAAy9E,GAAA,CACA98E,QAAA,MAEA+8E,GAAA,KACAC,GAAA,KACAC,GAAA,KACA,SAAAV,GAAAzlF,EAAAoR,GACA,IAAAgK,EAAApb,EAAAqF,KAAAwvD,SACAjD,GAAAo0B,GAAA5qE,EAAAo5C,eACAp5C,EAAAo5C,cAAApjD,EAEA,SAAAg1E,GAAApmF,GACA,IAAAoR,EAAA40E,GAAA98E,QACAyoD,GAAAq0B,IACAhmF,EAAAqF,KAAAwvD,SAAAL,cAAApjD,EAEA,SAAAkzE,GAAAtkF,EAAAoR,GACA60E,GAAAjmF,EACAmmF,GAAAD,GAAA,KACA,IAAA9qE,EAAApb,EAAAg8E,oBACA,OAAA5gE,KAAAohE,gBAAAprE,IAAA0xE,IAAA,GACA9iF,EAAAg8E,oBAAA,KAEA,SAAAxpB,GAAAxyD,EAAAoR,GAaA,OAZA+0E,KAAAnmF,IAAA,IAAAoR,GAAA,IAAAA,IACA,kBAAAA,GAAA,aAAAA,IAAA+0E,GAAAnmF,EAAAoR,EAAA,YACAA,EAAA,CACAogD,QAAAxxD,EACA8lF,aAAA10E,EACAkiD,KAAA,MAEA,OAAA4yB,IAAA,OAAAD,IAAA19E,EAAA,OAAA29E,GAAA90E,EAAA60E,GAAAjK,oBAAA,CACAp+C,MAAAxsB,EACAorE,eAAA,IACK0J,MAAA5yB,KAAAliD,GAELpR,EAAAw0D,cAEA,IAAA6xB,GAAA,EACA5H,GAAA,EACAC,GAAA,EACA4H,GAAA,EACAzB,IAAA,EACA,SAAA0B,GAAAvmF,GACA,OACA+9E,UAAA/9E,EACAwmF,YAAA,KACAC,WAAA,KACAC,oBAAA,KACAC,mBAAA,KACAtK,YAAA,KACAD,WAAA,KACAwK,oBAAA,KACAC,mBAAA,MAGA,SAAArsE,GAAAxa,GACA,OACA+9E,UAAA/9E,EAAA+9E,UACAyI,YAAAxmF,EAAAwmF,YACAC,WAAAzmF,EAAAymF,WACAC,oBAAA,KACAC,mBAAA,KACAtK,YAAA,KACAD,WAAA,KACAwK,oBAAA,KACAC,mBAAA,MAGA,SAAA1I,GAAAn+E,GACA,OACAw8E,eAAAx8E,EACA25D,IAAA0sB,GACAhI,QAAA,KACAC,SAAA,KACAhrB,KAAA,KACAgpB,WAAA,MAGA,SAAAwK,GAAA9mF,EAAAoR,GACA,OAAApR,EAAAymF,WAAAzmF,EAAAwmF,YAAAxmF,EAAAymF,WAAAr1E,GAAApR,EAAAymF,WAAAnzB,KAAAliD,EAAApR,EAAAymF,WAAAr1E,GAEA,SAAAusC,GAAA39C,EAAAoR,GACA,IAAAgK,EAAApb,EAAAwpE,UACA,UAAApuD,EAAA,CACA,IAAA1N,EAAA1N,EAAAk8E,YACA53E,EAAA,KACA,OAAAoJ,MAAA1N,EAAAk8E,YAAAqK,GAAAvmF,EAAAi8E,qBACGvuE,EAAA1N,EAAAk8E,YAAA53E,EAAA8W,EAAA8gE,YAAA,OAAAxuE,EAAA,OAAApJ,GAAAoJ,EAAA1N,EAAAk8E,YAAAqK,GAAAvmF,EAAAi8E,eAAA33E,EAAA8W,EAAA8gE,YAAAqK,GAAAnrE,EAAA6gE,gBAAAvuE,EAAA1N,EAAAk8E,YAAA1hE,GAAAlW,GAAA,OAAAA,MAAA8W,EAAA8gE,YAAA1hE,GAAA9M,IACH,OAAApJ,GAAAoJ,IAAApJ,EAAAwiF,GAAAp5E,EAAA0D,GAAA,OAAA1D,EAAA+4E,YAAA,OAAAniF,EAAAmiF,YAAAK,GAAAp5E,EAAA0D,GAAA01E,GAAAxiF,EAAA8M,KAAA01E,GAAAp5E,EAAA0D,GAAA9M,EAAAmiF,WAAAr1E,GAEA,SAAA21E,GAAA/mF,EAAAoR,GACA,IAAAgK,EAAApb,EAAAk8E,YAEA,QADA9gE,EAAA,OAAAA,EAAApb,EAAAk8E,YAAAqK,GAAAvmF,EAAAi8E,eAAA+K,GAAAhnF,EAAAob,IACAurE,mBAAAvrE,EAAAsrE,oBAAAtrE,EAAAurE,mBAAAv1E,GAAAgK,EAAAurE,mBAAArzB,KAAAliD,EAAAgK,EAAAurE,mBAAAv1E,GAEA,SAAA41E,GAAAhnF,EAAAoR,GACA,IAAAgK,EAAApb,EAAAwpE,UAEA,OADA,OAAApuD,GAAAhK,IAAAgK,EAAA8gE,cAAA9qE,EAAApR,EAAAk8E,YAAA1hE,GAAApJ,IACAA,EAEA,SAAA61E,GAAAjnF,EAAAoR,EAAAgK,EAAA1N,EAAApJ,EAAAy6B,GACA,OAAA3jB,EAAAu+C,KACA,KAAA8kB,GACA,0BAAAz+E,EAAAob,EAAAijE,SAAAr+E,EAAAS,KAAAs+B,EAAArxB,EAAApJ,GAAAtE,EACA,KAAAsmF,GACAtmF,EAAA2pE,WAAA,KAAA3pE,EAAA2pE,UAAA,GACA,KAAA0c,GAGA,WADA/hF,EAAA,oBADAtE,EAAAob,EAAAijE,SACAr+E,EAAAS,KAAAs+B,EAAArxB,EAAApJ,GAAAtE,SACA,IAAAsE,EAAA,MACA,OAAAkI,EAAA,GAAiBkB,EAAApJ,GACjB,KAAAo6E,GACAmG,IAAA,EAEA,OAAAn3E,EAEA,SAAAyxE,GAAAn/E,EAAAoR,EAAAgK,EAAA1N,EAAApJ,GACAugF,IAAA,EAEA,QAAA9lD,GADA3tB,EAAA41E,GAAAhnF,EAAAoR,IACA2sE,UAAAltB,EAAA,KAAA17B,EAAA,EAAAzjB,EAAAN,EAAAo1E,YAAAjtE,EAAAwlB,EAAsE,OAAArtB,GAAY,CAClF,IAAAupC,EAAAvpC,EAAA8qE,eACAvhC,EAAA32C,GAAA,OAAAusD,MAAAn/C,EAAAqtB,EAAAxlB,GAAA4b,EAAA8lB,IAAA9lB,EAAA8lB,KAAA1hC,EAAA0tE,GAAAjnF,EAAAoR,EAAAM,EAAA6H,EAAA6B,EAAA1N,GAAA,OAAAgE,EAAA4sE,WAAAt+E,EAAA2pE,WAAA,GAAAj4D,EAAA4qE,WAAA,YAAAlrE,EAAAgrE,WAAAhrE,EAAAirE,YAAAjrE,EAAAgrE,WAAA1qE,GAAAN,EAAAgrE,WAAAE,WAAA5qE,EAAAN,EAAAgrE,WAAA1qE,KACAA,IAAA4hD,KAGA,IADArY,EAAA,KACAvpC,EAAAN,EAAAs1E,oBAAiC,OAAAh1E,GAAY,CAC7C,IAAAkF,EAAAlF,EAAA8qE,eACA5lE,EAAAtS,GAAA,OAAA22C,MAAAvpC,EAAA,OAAAm/C,IAAA9xB,EAAAxlB,IAAA4b,EAAAve,IAAAue,EAAAve,KAAA2C,EAAA0tE,GAAAjnF,EAAAoR,EAAAM,EAAA6H,EAAA6B,EAAA1N,GAAA,OAAAgE,EAAA4sE,WAAAt+E,EAAA2pE,WAAA,GAAAj4D,EAAA4qE,WAAA,YAAAlrE,EAAAy1E,mBAAAz1E,EAAAw1E,oBAAAx1E,EAAAy1E,mBAAAn1E,GAAAN,EAAAy1E,mBAAAvK,WAAA5qE,EAAAN,EAAAy1E,mBAAAn1E,KACAA,IAAA4hD,KAEA,OAAAzC,IAAAz/C,EAAAq1E,WAAA,MACA,OAAAxrC,EAAA7pC,EAAAu1E,mBAAA,KAAA3mF,EAAA2pE,WAAA,GACA,OAAA9Y,GAAA,OAAA5V,IAAAlc,EAAAxlB,GACAnI,EAAA2sE,UAAAh/C,EACA3tB,EAAAo1E,YAAA31B,EACAz/C,EAAAs1E,oBAAAzrC,EACAj7C,EAAAw8E,eAAArnD,EACAn1B,EAAAi8E,cAAA1iE,EAEA,SAAA2tE,GAAAlnF,EAAAoR,EAAAgK,GACA,OAAAhK,EAAAs1E,sBAAA,OAAAt1E,EAAAq1E,aAAAr1E,EAAAq1E,WAAAnzB,KAAAliD,EAAAs1E,oBAAAt1E,EAAAq1E,WAAAr1E,EAAAu1E,oBAAAv1E,EAAAs1E,oBAAAt1E,EAAAu1E,mBAAA,MACAQ,GAAA/1E,EAAAirE,YAAAjhE,GACAhK,EAAAirE,YAAAjrE,EAAAgrE,WAAA,KACA+K,GAAA/1E,EAAAw1E,oBAAAxrE,GACAhK,EAAAw1E,oBAAAx1E,EAAAy1E,mBAAA,KAEA,SAAAM,GAAAnnF,EAAAoR,GACA,KAAQ,OAAApR,GAAY,CACpB,IAAAob,EAAApb,EAAAs+E,SACA,UAAAljE,EAAA,CACApb,EAAAs+E,SAAA,KACA,IAAA5wE,EAAA0D,EACA,oBAAAgK,GAAA7S,EAAA,MAAA6S,GACAA,EAAA3a,KAAAiN,GAEA1N,IAAAs8E,YAGA,SAAA8K,GAAApnF,EAAAoR,GACA,OACA/N,MAAArD,EACAgN,OAAAoE,EACAi2E,MAAApkB,GAAA7xD,IAGA,SAAAk2E,GAAAtnF,GACAA,EAAA2pE,WAAA,EAEA,IAAA5jB,QAAA,EACAwhC,QAAA,EACAC,QAAA,EACAC,QAAA,EACA1hC,GAAA,SAAA/lD,EAAAoR,GACA,QAAAgK,EAAAhK,EAAA04D,MAAuB,OAAA1uD,GAAY,CACnC,OAAAA,EAAAu+C,KAAA,IAAAv+C,EAAAu+C,IAAA35D,EAAAg1E,YAAA55D,EAAA89C,gBAA+D,OAAA99C,EAAAu+C,KAAA,OAAAv+C,EAAA0uD,MAAA,CAC/D1uD,EAAA0uD,MAAA9P,OAAA5+C,EACAA,IAAA0uD,MACA,SAEA,GAAA1uD,IAAAhK,EAAA,MACA,KAAU,OAAAgK,EAAA2uD,SAAoB,CAC9B,UAAA3uD,EAAA4+C,QAAA5+C,EAAA4+C,SAAA5oD,EAAA,OACAgK,IAAA4+C,OAEA5+C,EAAA2uD,QAAA/P,OAAA5+C,EAAA4+C,OACA5+C,IAAA2uD,UAGAwd,GAAA,aACAC,GAAA,SAAAxnF,EAAAoR,EAAAgK,EAAA1N,EAAApJ,GACA,IAAAy6B,EAAA/+B,EAAAm8E,cACA,GAAAp9C,IAAArxB,EAAA,CACA,IAAAmjD,EAAAz/C,EAAA8nD,UAGA,OAFAmnB,GAAA1tB,GAAAzpD,SACAlJ,EAAA,KACAob,GACA,YACA2jB,EAAA2lC,GAAA7T,EAAA9xB,GACArxB,EAAAg3D,GAAA7T,EAAAnjD,GACA1N,EAAA,GACA,MACA,aACA++B,EAAAs0C,GAAAxiB,EAAA9xB,GACArxB,EAAA2lE,GAAAxiB,EAAAnjD,GACA1N,EAAA,GACA,MACA,aACA++B,EAAAvyB,EAAA,GAAgBuyB,EAAA,CAChB17B,WAAA,IAEAqK,EAAAlB,EAAA,GAAgBkB,EAAA,CAChBrK,WAAA,IAEArD,EAAA,GACA,MACA,eACA++B,EAAA40C,GAAA9iB,EAAA9xB,GACArxB,EAAAimE,GAAA9iB,EAAAnjD,GACA1N,EAAA,GACA,MACA,QACA,oBAAA++B,EAAA2oD,SAAA,oBAAAh6E,EAAAg6E,UAAA72B,EAAA82B,QAAApO,IAEAJ,GAAA/9D,EAAA1N,GACAmjD,EAAAz1C,OAAA,EACA,IAAA+Z,EAAA,KACA,IAAA/Z,KAAA2jB,EAAA,IAAArxB,EAAA5B,eAAAsP,IAAA2jB,EAAAjzB,eAAAsP,IAAA,MAAA2jB,EAAA3jB,GAAA,aAAAA,EAAA,CACA,IAAA1J,EAAAqtB,EAAA3jB,GACA,IAAAy1C,KAAAn/C,IAAA5F,eAAA+kD,KAAA17B,MAAA,IAAuDA,EAAA07B,GAAA,QAClD,4BAAAz1C,GAAA,aAAAA,GAAA,mCAAAA,GAAA,6BAAAA,GAAA,cAAAA,IAAAy8C,EAAA/rD,eAAAsP,GAAApb,MAAA,KAAAA,KAAA,IAAAkE,KAAAkX,EAAA,OACL,IAAAA,KAAA1N,EAAA,CACA,IAAA6L,EAAA7L,EAAA0N,GAEA,GADA1J,EAAA,MAAAqtB,IAAA3jB,QAAA,EACA1N,EAAA5B,eAAAsP,IAAA7B,IAAA7H,IAAA,MAAA6H,GAAA,MAAA7H,GAAA,aAAA0J,EACA,GAAA1J,EAAA,CACA,IAAAm/C,KAAAn/C,KAAA5F,eAAA+kD,IAAAt3C,KAAAzN,eAAA+kD,KAAA17B,MAAA,IAAwFA,EAAA07B,GAAA,IACxF,IAAAA,KAAAt3C,IAAAzN,eAAA+kD,IAAAn/C,EAAAm/C,KAAAt3C,EAAAs3C,KAAA17B,MAAA,IAA4EA,EAAA07B,GAAAt3C,EAAAs3C,SACnE17B,IAAAn1B,MAAA,IAAAA,EAAAkE,KAAAkX,EAAA+Z,MAAA5b,MACF,4BAAA6B,GAAA7B,MAAAsgE,YAAA,EAAAnoE,MAAAmoE,YAAA,QAAAtgE,GAAA7H,IAAA6H,IAAAvZ,KAAA,IAAAkE,KAAAkX,EAAA,GAAA7B,IAAA,aAAA6B,EAAA1J,IAAA6H,GAAA,kBAAAA,GAAA,kBAAAA,IAAAvZ,KAAA,IAAAkE,KAAAkX,EAAA,GAAA7B,GAAA,mCAAA6B,GAAA,6BAAAA,IAAAy8C,EAAA/rD,eAAAsP,IAAA,MAAA7B,GAAA8/D,GAAA/0E,EAAA8W,GAAApb,GAAA0R,IAAA6H,IAAAvZ,EAAA,MAAAA,KAAA,IAAAkE,KAAAkX,EAAA7B,IAEP4b,IAAAn1B,KAAA,IAAAkE,KAAA,QAAAixB,GACA7wB,EAAAtE,GACAoR,EAAA8qE,YAAA53E,IAAAgjF,GAAAl2E,KAGAq2E,GAAA,SAAAznF,EAAAoR,EAAAgK,EAAA1N,GACA0N,IAAA1N,GAAA45E,GAAAl2E,IAEA,IAAAw2E,GAAA,oBAAAC,gBAAArN,IACA,SAAAsN,GAAA9nF,EAAAoR,GACA,IAAAgK,EAAAhK,EAAApE,OACAU,EAAA0D,EAAAi2E,MACA,OAAA35E,GAAA,OAAA0N,IAAA1N,EAAAu1D,GAAA7nD,IACA,OAAAA,GAAA2nD,GAAA3nD,EAAA/V,MACA+L,IAAA/N,MACA,OAAArD,GAAA,IAAAA,EAAA25D,KAAAoJ,GAAA/iE,EAAAqF,MACA,IACAmI,QAAAC,MAAA2D,GACG,MAAA9M,GACHy1E,WAAA,WACA,MAAAz1E,KAIA,SAAAyjF,GAAA/nF,GACA,IAAAoR,EAAApR,EAAA+J,IACA,UAAAqH,EAAA,uBAAAA,EAAA,IACAA,EAAA,MACG,MAAAgK,GACH4sE,GAAAhoF,EAAAob,QACGhK,EAAAlI,QAAA,KAEH,SAAA++E,GAAAjoF,EAAAoR,EAAAgK,GAGA,WADAA,EAAA,QADAA,IAAA8gE,aACA9gE,EAAAghE,WAAA,MACA,CACA,IAAA1uE,EAAA0N,IAAAk4C,KACA,GACA,IAAA5lD,EAAAisD,IAAA35D,KAAA2gF,GAAA,CACA,IAAAr8E,EAAAoJ,EAAAy1E,QACAz1E,EAAAy1E,aAAA,OACA,IAAA7+E,QAEAoJ,EAAAisD,IAAAvoD,KAAAuvE,KAAAr8E,EAAAoJ,EAAAvK,OAAAuK,EAAAy1E,QAAA7+E,KACAoJ,IAAA4lD,WACK5lD,IAAA0N,IAgCL,SAAA8sE,GAAAloF,GAEA,OADA,oBAAA27E,OAAA37E,GACAA,EAAA25D,KACA,OACA,QACA,QACA,QACA,IAAAvoD,EAAApR,EAAAk8E,YACA,UAAA9qE,GAAA,QAAAA,IAAAgrE,YAAA,CACA,IAAAhhE,EAAAhK,IAAAkiD,KACA,GACA,IAAA5lD,EAAA0N,EAAA+nE,QACA,YAAAz1E,EAAA,CACA,IAAApJ,EAAAtE,EACA,IACA0N,IACa,MAAAqxB,GACbipD,GAAA1jF,EAAAy6B,IAGA3jB,IAAAk4C,WACSl4C,IAAAhK,GAET,MACA,OAGA,GAFA22E,GAAA/nF,GAEA,oBADAoR,EAAApR,EAAAk5D,WACAivB,qBAAA,IACA/2E,EAAAzS,MAAAqB,EAAAm8E,cAAA/qE,EAAAnQ,MAAAjB,EAAAi8E,cAAA7qE,EAAA+2E,uBACO,MAAAppD,GACPipD,GAAAhoF,EAAA++B,GAEA,MACA,OACAgpD,GAAA/nF,GACA,MACA,OACAooF,GAAApoF,IAGA,SAAAqoF,GAAAroF,GACA,WAAAA,EAAA25D,KAAA,IAAA35D,EAAA25D,KAAA,IAAA35D,EAAA25D,IAEA,SAAA2uB,GAAAtoF,GACAA,EAAA,CACA,QAAAoR,EAAApR,EAAAg6D,OAA0B,OAAA5oD,GAAY,CACtC,GAAAi3E,GAAAj3E,GAAA,CACA,IAAAgK,EAAAhK,EACA,MAAApR,EAEAoR,IAAA4oD,OAEAzxD,EAAA,OACA6S,OAAA,EAEA,IAAA1N,EAAA0D,OAAA,EACA,OAAAgK,EAAAu+C,KACA,OACAvoD,EAAAgK,EAAA89C,UACAxrD,GAAA,EACA,MACA,OAIA,OACA0D,EAAAgK,EAAA89C,UAAAwW,cACAhiE,GAAA,EACA,MACA,QACAnF,EAAA,OAEA,GAAA6S,EAAAuuD,YAAAwL,GAAA/jE,EAAA,IAAAgK,EAAAuuD,YAAA,IACA3pE,EAAAoR,EAAA,IAAAgK,EAAApb,IAAoB,CACpB,KAAU,OAAAob,EAAA2uD,SAAoB,CAC9B,UAAA3uD,EAAA4+C,QAAAquB,GAAAjtE,EAAA4+C,QAAA,CACA5+C,EAAA,KACA,MAAApb,EAEAob,IAAA4+C,OAGA,IADA5+C,EAAA2uD,QAAA/P,OAAA5+C,EAAA4+C,OACA5+C,IAAA2uD,QAAuB,IAAA3uD,EAAAu+C,KAAA,IAAAv+C,EAAAu+C,KAAA,KAAAv+C,EAAAu+C,KAA4C,CACnE,KAAAv+C,EAAAuuD,UAAA,SAAAv4D,EACA,UAAAgK,EAAA0uD,OAAA,IAAA1uD,EAAAu+C,IAAA,SAAAvoD,EAAsDgK,EAAA0uD,MAAA9P,OAAA5+C,MAAA0uD,MAEtD,OAAA1uD,EAAAuuD,WAAA,CACAvuD,IAAA89C,UACA,MAAAl5D,GAGA,QAAAsE,EAAAtE,IAAkB,CAClB,OAAAsE,EAAAq1D,KAAA,IAAAr1D,EAAAq1D,IACA,GAAAv+C,EACA,GAAA1N,EAAA,CACA,IAAAqxB,EAAA3tB,EACAy/C,EAAAvsD,EAAA40D,UACA/jC,EAAA/Z,EACA,IAAA2jB,EAAAkiC,SAAAliC,EAAA26B,WAAA6uB,aAAA13B,EAAA17B,GAAA4J,EAAAwpD,aAAA13B,EAAA17B,QACS/jB,EAAAm3E,aAAAjkF,EAAA40D,UAAA99C,QACF1N,GAAAmjD,EAAAz/C,EAAA+jB,EAAA7wB,EAAA40D,UAAA,IAAArI,EAAAoQ,UAAAliC,EAAA8xB,EAAA6I,YAAA6uB,aAAApzD,EAAA07B,IAAA9xB,EAAA8xB,GAAAmkB,YAAA7/C,GAAA,QAAA07B,IAAA23B,2BAAA,IAAA33B,GAAA,OAAA9xB,EAAA4oD,UAAA5oD,EAAA4oD,QAAApO,KAAAnoE,EAAA4jE,YAAA1wE,EAAA40D,gBACF,OAAA50D,EAAAq1D,KAAA,OAAAr1D,EAAAwlE,MAAA,CACLxlE,EAAAwlE,MAAA9P,OAAA11D,EACAA,IAAAwlE,MACA,SAEA,GAAAxlE,IAAAtE,EAAA,MACA,KAAU,OAAAsE,EAAAylE,SAAoB,CAC9B,UAAAzlE,EAAA01D,QAAA11D,EAAA01D,SAAAh6D,EAAA,OACAsE,IAAA01D,OAEA11D,EAAAylE,QAAA/P,OAAA11D,EAAA01D,OACA11D,IAAAylE,SAGA,SAAAqe,GAAApoF,GACA,QAAAoR,EAAApR,EAAAob,GAAA,EAAA1N,OAAA,EAAApJ,OAAA,IAAkD,CAClD,IAAA8W,EAAA,CACAA,EAAAhK,EAAA4oD,OACAh6D,EAAA,OAAgB,CAEhB,OADA,OAAAob,GAAA7S,EAAA,OACA6S,EAAAu+C,KACA,OACAjsD,EAAA0N,EAAA89C,UACA50D,GAAA,EACA,MAAAtE,EACA,OAIA,OACA0N,EAAA0N,EAAA89C,UAAAwW,cACAprE,GAAA,EACA,MAAAtE,EAEAob,IAAA4+C,OAEA5+C,GAAA,EAEA,OAAAhK,EAAAuoD,KAAA,IAAAvoD,EAAAuoD,IAAA,CACA35D,EAAA,QAAA++B,EAAA3tB,EAAAy/C,EAAA9xB,IAAgC,GAAAmpD,GAAAr3B,GAAA,OAAAA,EAAAiZ,OAAA,IAAAjZ,EAAA8I,IAAA9I,EAAAiZ,MAAA9P,OAAAnJ,MAAAiZ,UAA8E,CAC9G,GAAAjZ,IAAA9xB,EAAA,MACA,KAAc,OAAA8xB,EAAAkZ,SAAoB,CAClC,UAAAlZ,EAAAmJ,QAAAnJ,EAAAmJ,SAAAj7B,EAAA,MAAA/+B,EACA6wD,IAAAmJ,OAEAnJ,EAAAkZ,QAAA/P,OAAAnJ,EAAAmJ,OACAnJ,IAAAkZ,QAEAzlE,GAAAy6B,EAAArxB,EAAAmjD,EAAAz/C,EAAA8nD,UAAA,IAAAn6B,EAAAkiC,SAAAliC,EAAA26B,WAAAqb,YAAAlkB,GAAA9xB,EAAAg2C,YAAAlkB,IAAAnjD,EAAAqnE,YAAA3jE,EAAA8nD,gBACK,OAAA9nD,EAAAuoD,KACL,UAAAvoD,EAAA04D,MAAA,CACAp8D,EAAA0D,EAAA8nD,UAAAwW,cACAprE,GAAA,EACA8M,EAAA04D,MAAA9P,OAAA5oD,EACAA,IAAA04D,MACA,eAEK,GAAAoe,GAAA92E,GAAA,OAAAA,EAAA04D,MAAA,CACL14D,EAAA04D,MAAA9P,OAAA5oD,EACAA,IAAA04D,MACA,SAEA,GAAA14D,IAAApR,EAAA,MACA,KAAU,OAAAoR,EAAA24D,SAAoB,CAC9B,UAAA34D,EAAA4oD,QAAA5oD,EAAA4oD,SAAAh6D,EAAA,OAEA,KADAoR,IAAA4oD,QACAL,MAAAv+C,GAAA,GAEAhK,EAAA24D,QAAA/P,OAAA5oD,EAAA4oD,OACA5oD,IAAA24D,SAGA,SAAA0e,GAAAzoF,EAAAoR,GACA,OAAAA,EAAAuoD,KACA,OACA,QACA,QACA,QACAsuB,GAAApH,GAAAC,GAAA1vE,GACA,MACA,OACA,MACA,OACA,IAAAgK,EAAAhK,EAAA8nD,UACA,SAAA99C,EAAA,CACA,IAAA1N,EAAA0D,EAAA+qE,cACAn8E,EAAA,OAAAA,IAAAm8E,cAAAzuE,EACA,IAAApJ,EAAA8M,EAAA/L,KACA05B,EAAA3tB,EAAA8qE,YACA9qE,EAAA8qE,YAAA,KACA,OAAAn9C,GAv4DA,SAAA/+B,EAAAoR,EAAAgK,EAAA1N,EAAApJ,GACAtE,EAAAw5D,GAAAl1D,EACA,UAAA8W,GAAA,UAAA9W,EAAAe,MAAA,MAAAf,EAAAysD,MAAAmU,GAAAllE,EAAAsE,GACAs0C,GAAAx9B,EAAA1N,GACAA,EAAAkrC,GAAAx9B,EAAA9W,GACA,QAAAy6B,EAAA,EAAiBA,EAAA3tB,EAAApV,OAAc+iC,GAAA,GAC/B,IAAA8xB,EAAAz/C,EAAA2tB,GACA5J,EAAA/jB,EAAA2tB,EAAA,GACA,UAAA8xB,EAAAsnB,GAAAn4E,EAAAm1B,GAAA,4BAAA07B,EAAA+jB,GAAA50E,EAAAm1B,GAAA,aAAA07B,EAAAskB,GAAAn1E,EAAAm1B,GAAA8uC,GAAAjkE,EAAA6wD,EAAA17B,EAAAznB,GAEA,OAAA0N,GACA,YACA+pD,GAAAnlE,EAAAsE,GACA,MACA,eACAwvE,GAAA9zE,EAAAsE,GACA,MACA,aACA8M,EAAApR,EAAA6kE,cAAA6jB,YAAA1oF,EAAA6kE,cAAA6jB,cAAApkF,EAAAqkF,SAAA,OAAAvtE,EAAA9W,EAAAjB,OAAAkwE,GAAAvzE,IAAAsE,EAAAqkF,SAAAvtE,GAAA,GAAAhK,MAAA9M,EAAAqkF,WAAA,MAAArkF,EAAAsgE,aAAA2O,GAAAvzE,IAAAsE,EAAAqkF,SAAArkF,EAAAsgE,cAAA,GAAA2O,GAAAvzE,IAAAsE,EAAAqkF,SAAArkF,EAAAqkF,SAAA,YAq3DAC,CAAAxtE,EAAA2jB,EAAAz6B,EAAAtE,EAAA0N,GAEA,MACA,OACA,OAAA0D,EAAA8nD,WAAA3wD,EAAA,OACA6I,EAAA8nD,UAAAmc,UAAAjkE,EAAA+qE,cACA,MACA,OAEA,QACA,MACA,QAOA,GANA/gE,EAAAhK,EAAA6qE,cACAvuE,OAAA,EACA1N,EAAAoR,EACA,OAAAgK,EAAA1N,GAAA,GAAAA,GAAA,EAAA1N,EAAAoR,EAAA04D,MAAA,IAAA1uD,EAAAkqE,aAAAlqE,EAAAkqE,WAAApH,OACA,OAAAl+E,GA5OA,SAAAA,EAAAoR,GACA,QAAAgK,EAAApb,IAAkB,CAClB,OAAAob,EAAAu+C,IAAA,CACA,IAAAjsD,EAAA0N,EAAA89C,UACA,GAAA9nD,EAAA1D,EAAA1D,MAAA6+E,QAAA,WAAsC,CACtCn7E,EAAA0N,EAAA89C,UACA,IAAA50D,EAAA8W,EAAA+gE,cAAAnyE,MACA1F,OAAA,IAAAA,GAAA,OAAAA,KAAAwH,eAAA,WAAAxH,EAAAukF,QAAA,KACAn7E,EAAA1D,MAAA6+E,QAAA5Q,GAAA,UAAA3zE,SAEK,OAAA8W,EAAAu+C,IAAAv+C,EAAA89C,UAAAmc,UAAAjkE,EAAA,GAAAgK,EAAA+gE,kBAAwE,SAAA/gE,EAAAu+C,KAAA,OAAAv+C,EAAA6gE,cAAA,EAC7EvuE,EAAA0N,EAAA0uD,MAAAC,SACA/P,OAAA5+C,EACAA,EAAA1N,EACA,SACK,UAAA0N,EAAA0uD,MAAA,CACL1uD,EAAA0uD,MAAA9P,OAAA5+C,EACAA,IAAA0uD,MACA,UAEA,GAAA1uD,IAAApb,EAAA,MACA,KAAU,OAAAob,EAAA2uD,SAAoB,CAC9B,UAAA3uD,EAAA4+C,QAAA5+C,EAAA4+C,SAAAh6D,EAAA,OACAob,IAAA4+C,OAEA5+C,EAAA2uD,QAAA/P,OAAA5+C,EAAA4+C,OACA5+C,IAAA2uD,SAkNA+e,CAAA9oF,EAAA0N,GAEA,QADA0N,EAAAhK,EAAA8qE,aACA,CACA9qE,EAAA8qE,YAAA,KACA,IAAArrB,EAAAz/C,EAAA8nD,UACA,OAAArI,MAAAz/C,EAAA8nD,UAAA,IAAA0uB,IACAxsE,EAAAxO,QAAA,SAAA5M,GACA,IAAAob,EAuyBA,SAAApb,EAAAoR,GACA,IAAAgK,EAAApb,EAAAk5D,UACA,OAAA99C,KAAA2kE,OAAA3uE,GAEAA,EAAAgtE,GADAhtE,EAAA8sE,KACAl+E,GAEA,QADAA,EAAA+oF,GAAA/oF,EAAAoR,MACA8rE,GAAAl9E,EAAAoR,GAAA,KAAAA,EAAApR,EAAAw8E,iBAAAwM,GAAAhpF,EAAAoR,KA7yBAilD,KAAA,KAAAjlD,EAAApR,GACA6wD,EAAAo4B,IAAAjpF,KAAA6wD,EAAAq4B,IAAAlpF,KAAAqB,KAAA+Z,QAGA,MACA,QACA,MACA,QACA7S,EAAA,QAGA,IAAA4gF,GAAA,oBAAAC,gBAAAtJ,IACA,SAAAuJ,GAAArpF,EAAAoR,EAAAgK,IACAA,EAAA+iE,GAAA/iE,IACAu+C,IAAA2sB,GACAlrE,EAAAijE,QAAA,CACA/L,QAAA,MAEA,IAAA5kE,EAAA0D,EAAA/N,MAKA,OAJA+X,EAAAkjE,SAAA,WACAgL,GAAA57E,GACAo6E,GAAA9nF,EAAAoR,IAEAgK,EAEA,SAAAmuE,GAAAvpF,EAAAoR,EAAAgK,IACAA,EAAA+iE,GAAA/iE,IACAu+C,IAAA2sB,GACA,IAAA54E,EAAA1N,EAAAqF,KAAA6/E,yBACA,uBAAAx3E,EAAA,CACA,IAAApJ,EAAA8M,EAAA/N,MACA+X,EAAAijE,QAAA,WACA,OAAA3wE,EAAApJ,IAGA,IAAAy6B,EAAA/+B,EAAAk5D,UAUA,OATA,OAAAn6B,GAAA,oBAAAA,EAAAyqD,oBAAApuE,EAAAkjE,SAAA,WACA,oBAAA5wE,IAAA,OAAA+7E,MAAA,IAAAjP,IAAA,CAAAl6E,OAAAmpF,GAAAP,IAAA5oF,OACA,IAAA8a,EAAAhK,EAAA/N,MACAiB,EAAA8M,EAAAi2E,MACAS,GAAA9nF,EAAAoR,GACA9Q,KAAAkpF,kBAAApuE,EAAA,CACAsuE,eAAA,OAAAplF,IAAA,OAGA8W,EAEA,SAAAuuE,GAAA3pF,GACA,OAAAA,EAAA25D,KACA,OACAxH,GAAAnyD,EAAAqF,OAAA61E,KACA,IAAA9pE,EAAApR,EAAA2pE,UACA,YAAAv4D,GAAApR,EAAA2pE,WAAA,KAAAv4D,EAAA,GAAApR,GAAA,KACA,OACA,OAAAwgF,KAAArF,KAAA,SAAA/pE,EAAApR,EAAA2pE,aAAAphE,EAAA,OAAAvI,EAAA2pE,WAAA,KAAAv4D,EAAA,GAAApR,EACA,OACA,OAAA0gF,GAAA1gF,GAAA,KACA,QACA,aAAAoR,EAAApR,EAAA2pE,YAAA3pE,EAAA2pE,WAAA,KAAAv4D,EAAA,GAAApR,GAAA,KACA,QACA,YACA,OACA,OAAAwgF,KAAA,KACA,QACA,OAAA4F,GAAApmF,GAAA,KACA,QACA,aAGA,IAAA4pF,GAAA7nB,GAAArL,uBACAmzB,GAAA9nB,GAAApL,kBACAmzB,GAAA,WACAC,IAAA,EACA32B,GAAA,KACA42B,GAAA,KACA92B,GAAA,EACA+2B,IAAA,EACAC,IAAA,EACAr2B,GAAA,KACAs2B,IAAA,EACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAb,GAAA,KACA,SAAAc,KACA,UAAAn3B,GAAA,QAAApzD,EAAAozD,GAAA4G,OAAwC,OAAAh6D,GAAY,CACpD,IAAAoR,EAAApR,EACA,OAAAoR,EAAAuoD,KACA,OACA,IAAAv+C,EAAAhK,EAAA/L,KAAA41E,kBACA,OAAA7/D,QAAA,IAAAA,GAAA8/D,KACA,MACA,OACAsF,KACArF,KACA,MACA,OACAuF,GAAAtvE,GACA,MACA,OACAovE,KACA,MACA,QACA4F,GAAAh1E,GAEApR,IAAAg6D,OAEAgwB,GAAA,KACA92B,GAAA,EACA+2B,IAAA,EACAC,IAAA,EACA92B,GAAA,KAEA,SAAAo3B,KACA,KAAQ,OAAA32B,IAAY,CACpB,IAAA7zD,EAAA6zD,GAAA8V,UAEA,GADA,GAAA3pE,GAAAm1E,GAAAthB,GAAAqF,UAAA,IACA,IAAAl5D,EAAA,CACA,IAAAoR,EAAAyiD,GAAA2V,UACA,OAAAp4D,IAAA,QAAAA,IAAArH,OAAA,oBAAAqH,IAAA,MAAAA,EAAAlI,QAAA,OAEA,UAAAlJ,GACA,OACAsoF,GAAAz0B,IACAA,GAAA8V,YAAA,EACA,MACA,OACA2e,GAAAz0B,IACAA,GAAA8V,YAAA,EACA8e,GAAA50B,GAAA2V,UAAA3V,IACA,MACA,OACA40B,GAAA50B,GAAA2V,UAAA3V,IACA,MACA,OACAu0B,GAAApoF,EAAA6zD,IAAA7zD,EAAAg6D,OAAA,KAAAh6D,EAAA8pE,MAAA,KAAA9pE,EAAAi8E,cAAA,KAAAj8E,EAAAk8E,YAAA,aAAAl8E,IAAAwpE,aAAAxpE,EAAAg6D,OAAA,KAAAh6D,EAAA8pE,MAAA,KAAA9pE,EAAAi8E,cAAA,KAAAj8E,EAAAk8E,YAAA,MAEAroB,MAAAyoB,YAGA,SAAAmO,KACA,KAAQ,OAAA52B,IAAY,CACpB,OAAAA,GAAA8V,UAAA3pE,EAAA,CACA,IAAAA,EAAA6zD,GAAA2V,UACAp4D,EAAAyiD,GACA,OAAAziD,EAAAuoD,KACA,OACA,QACA,QACAsuB,GAAArH,GAAAD,GAAAvvE,GACA,MAAApR,EACA,OACA,OAAAoR,EAAAu4D,WAAA,OAAA3pE,EAAA,CACA,IAAAob,EAAApb,EAAAm8E,cACAzuE,EAAA1N,EAAAi8E,cAEA7qE,GADApR,EAAAoR,EAAA8nD,WACAmmB,wBAAAjuE,EAAA0qE,cAAA1qE,EAAA/L,KAAA+V,EAAAi3C,GAAAjhD,EAAA/L,KAAA+V,GAAA1N,GACA1N,EAAA0qF,oCAAAt5E,EAEA,MAAApR,EACA,OACA,OACA,OACA,OACA,QACA,MAAAA,EACA,QACAuI,EAAA,QAGAsrD,MAAAyoB,YAGA,SAAAqO,GAAA3qF,EAAAoR,GACA,KAAQ,OAAAyiD,IAAY,CACpB,IAAAz4C,EAAAy4C,GAAA8V,UACA,MAAAvuD,EAAA,CACA,IAAA1N,EAAAmmD,GAAA2V,UACAllE,EAAAuvD,GACA90B,EAAA3tB,EACA,OAAA9M,EAAAq1D,KACA,OACA,QACA,QACAsuB,GAAAlH,GAAAC,GAAA18E,GACA,MACA,OACA,IAAAusD,EAAAvsD,EAAA40D,UACA,KAAA50D,EAAAqlE,UAAA,UAAAj8D,EAAAmjD,EAAA2uB,wBAAqE,CACrE,IAAArqD,EAAA7wB,EAAAw3E,cAAAx3E,EAAAe,KAAAqI,EAAAyuE,cAAA9pB,GAAA/tD,EAAAe,KAAAqI,EAAAyuE,eACAtrB,EAAAm0B,mBAAA7vD,EAAAznB,EAAAuuE,cAAAprB,EAAA65B,qCAGA,QADAh9E,EAAApJ,EAAA43E,cACAgL,GAAA5iF,EAAAoJ,EAAAmjD,GACA,MACA,OAEA,WADAnjD,EAAApJ,EAAA43E,aACA,CAEA,GADArrB,EAAA,KACA,OAAAvsD,EAAAwlE,MAAA,OAAAxlE,EAAAwlE,MAAAnQ,KACA,OACA9I,EAAAvsD,EAAAwlE,MAAA5Q,UACA,MACA,OACArI,EAAAvsD,EAAAwlE,MAAA5Q,UAEAguB,GAAA5iF,EAAAoJ,EAAAmjD,GAEA,MACA,OACA9xB,EAAAz6B,EAAA40D,UACA,OAAAxrD,GAAA,EAAApJ,EAAAqlE,WAAA+P,GAAAp1E,EAAAe,KAAAf,EAAA63E,gBAAAp9C,EAAA2zC,QACA,MACA,OAEA,OAEA,QAEA,QAEA,QACA,MACA,QACAnqE,EAAA,QAGA,IAAA6S,IAAA,QAAA9W,EAAAuvD,GAAA9pD,OAAAg1B,EAAA80B,GAAAqF,UAAA,oBAAA50D,IAAAy6B,GAAAz6B,EAAA4E,QAAA61B,IACA,IAAA3jB,IAAAgvE,GAAApqF,GACA6zD,MAAAyoB,YA2BA,SAAAiC,KACA,OAAA8L,IAAAjQ,GAAAiQ,IACA,OAAAC,SAEA,SAAAM,GAAA5qF,EAAAoR,GACA+4E,GAAAJ,IAAA,EACA/pF,EAAAkJ,UAAAkI,GAAA7I,EAAA,OACA,IAAA6S,EAAApb,EAAA6qF,4BACA,IAAAzvE,GAAA7S,EAAA,OACAvI,EAAA6qF,4BAAA,EACA,IAAAn9E,EAAA0D,EAAAorE,eACAl4E,EAAA8M,EAAAmrE,oBAQA,IA/7DA,SAAAv8E,EAAAoR,GAEA,GADApR,EAAAm9E,UAAA,EACA,IAAA/rE,EAAApR,EAAAo9E,oBAAA,EAAAp9E,EAAAq9E,kBAAA,EAAAr9E,EAAAy9E,sBAAA,EAAAz9E,EAAA09E,oBAAA,EAAA19E,EAAAw9E,iBAAA,MAAkJ,CAClJpsE,EAAApR,EAAAw9E,mBAAAx9E,EAAAw9E,iBAAA,GACA,IAAApiE,EAAApb,EAAAq9E,kBACA,IAAAjiE,MAAAhK,EAAApR,EAAAo9E,oBAAAp9E,EAAAq9E,kBAAA,EAAAr9E,EAAAo9E,oBAAAhsE,IAAApR,EAAAo9E,oBAAAp9E,EAAAq9E,oBAEA,KADAjiE,EAAApb,EAAAy9E,uBACAP,GAAAl9E,EAAAoR,KAAApR,EAAA09E,qBAAA19E,EAAAy9E,sBAAA,EAAAz9E,EAAA09E,oBAAA,EAAA19E,EAAAw9E,iBAAA,EAAAN,GAAAl9E,EAAAoR,MAAAgK,GAAA8hE,GAAAl9E,EAAAoR,GAEAksE,GAAA,EAAAt9E,GA+6DA8qF,CAAA9qF,EAAAsE,EAAAoJ,EAAApJ,EAAAoJ,GACAm8E,GAAA3gF,QAAA,KACAwE,OAAA,EACA,EAAA0D,EAAAu4D,UAAA,OAAAv4D,EAAAgrE,YAAAhrE,EAAAgrE,WAAAE,WAAAlrE,EAAA1D,EAAA0D,EAAAirE,aAAA3uE,EAAA0D,EAAA1D,EAAA0D,EAAAirE,YACA7C,GAAA5J,GACA6J,GA3lFA,WACA,IAAAz5E,EAAA4wE,KACA,GAAAI,GAAAhxE,GAAA,CACA,sBAAAA,EAAA,IAAAoR,EAAA,CACAhN,MAAApE,EAAAyxE,eACAv+D,IAAAlT,EAAA0xE,mBACM1xE,EAAA,CAEN,IAAAob,GADAhK,KAAApR,EAAAslE,gBAAAl0D,EAAAk4D,aAAA5iE,QACAirE,cAAAvgE,EAAAugE,eACA,GAAAv2D,GAAA,IAAAA,EAAAw2D,WAAA,CACAxgE,EAAAgK,EAAAy2D,WACA,IAAAnkE,EAAA0N,EAAA02D,aACAxtE,EAAA8W,EAAA22D,UACA32D,IAAA42D,YACA,IACA5gE,EAAA6vD,SAAA38D,EAAA28D,SACS,MAAAtyD,GACTyC,EAAA,KACA,MAAApR,EAEA,IAAA++B,EAAA,EACA8xB,GAAA,EACA17B,GAAA,EACAzjB,EAAA,EACA6H,EAAA,EACA0hC,EAAAj7C,EACA4W,EAAA,KACAxF,EAAA,OAAkB,CAClB,QAAA+C,EACA8mC,IAAA7pC,GAAA,IAAA1D,GAAA,IAAAutC,EAAAgmB,WAAApQ,EAAA9xB,EAAArxB,GACAutC,IAAA32C,GAAA,IAAA8W,GAAA,IAAA6/B,EAAAgmB,WAAA9rC,EAAA4J,EAAA3jB,GACA,IAAA6/B,EAAAgmB,WAAAliC,GAAAkc,EAAAo6B,UAAAr5E,QACA,QAAAmY,EAAA8mC,EAAAu1B,aACA55D,EAAAqkC,EACAA,EAAA9mC,EAEA,OAAiB,CACjB,GAAA8mC,IAAAj7C,EAAA,MAAAoR,EAGA,GAFAwF,IAAAxF,KAAAM,IAAAhE,IAAAmjD,EAAA9xB,GACAnoB,IAAAtS,KAAAiV,IAAA6B,IAAA+Z,EAAA4J,GACA,QAAA5qB,EAAA8mC,EAAA01B,aAAA,MAEA/5D,GADAqkC,EAAArkC,GACA8iD,WAEAze,EAAA9mC,EAEA/C,GAAA,IAAAy/C,IAAA,IAAA17B,EAAA,MACA/wB,MAAAysD,EACA39C,IAAAiiB,QAEO/jB,EAAA,KAEPA,KAAA,CACAhN,MAAA,EACA8O,IAAA,QAEG9B,EAAA,KACH,OACA+/D,YAAAnxE,EACAoxE,eAAAhgE,GAgiFA25E,GACAnb,IAAA,EACA/b,GAAAnmD,EAAa,OAAAmmD,IAAY,CACzBvvD,GAAA,EACA,IAAAy6B,OAAA,EACA,IACA0rD,KACK,MAAAt1D,GACL7wB,GAAA,EAAAy6B,EAAA5J,EAEA7wB,IAAA,OAAAuvD,IAAAtrD,EAAA,OAAAy/E,GAAAn0B,GAAA90B,GAAA,OAAA80B,WAAAyoB,aAEA,IAAAzoB,GAAAnmD,EAAa,OAAAmmD,IAAY,CACzBvvD,GAAA,EACAy6B,OAAA,EACA,IACAyrD,KACK,MAAAr1D,GACL7wB,GAAA,EAAAy6B,EAAA5J,EAEA7wB,IAAA,OAAAuvD,IAAAtrD,EAAA,OAAAy/E,GAAAn0B,GAAA90B,GAAA,OAAA80B,WAAAyoB,aAOA,IALApL,GAAAuI,IACAA,GAAA,KACA7J,KAAA4J,GACAA,GAAA,KACAx5E,EAAAkJ,QAAAkI,EACAyiD,GAAAnmD,EAAa,OAAAmmD,IAAY,CACzBvvD,GAAA,EACAy6B,OAAA,EACA,IACA4rD,GAAA3qF,EAAAob,GACK,MAAA+Z,GACL7wB,GAAA,EAAAy6B,EAAA5J,EAEA7wB,IAAA,OAAAuvD,IAAAtrD,EAAA,OAAAy/E,GAAAn0B,GAAA90B,GAAA,OAAA80B,WAAAyoB,aAEA,UAAA5uE,GAAA,OAAA08E,GAAA,CACA,IAAAv5B,EA/EA,SAAA7wD,EAAAoR,GACAk5E,GAAAD,GAAAD,GAAA,KACA,IAAAhvE,EAAA24C,GACAA,IAAA,EACA,GACA,OAAA3iD,EAAAu4D,UAAA,CACA,IAAAj8D,GAAA,EACApJ,OAAA,EACA,IACA,IAAAy6B,EAAA3tB,EACA62E,GAAA/G,GAAAP,GAAA5hD,GACAkpD,GAAAtH,GAAAM,GAAAliD,GACO,MAAA8xB,GACPnjD,GAAA,EAAApJ,EAAAusD,EAEAnjD,GAAAs6E,GAAA52E,EAAA9M,GAEA8M,IAAAkrE,iBACG,OAAAlrE,GACH2iD,GAAA34C,EAEA,KADAA,EAAApb,EAAAw8E,iBACAwM,GAAAhpF,EAAAob,GACA44C,IAAAD,IAAAi3B,GAAA,gBAyDA30B,KAAA,KAAAr2D,EAAA0N,GACA28E,GAAA/jE,EAAA2kE,yBAAA3kE,EAAA4kE,wBAAA,WACA,OAAAhR,GAAArpB,KAEAy5B,GAAAz5B,EAEAk5B,GAAAI,IAAA,EACA,oBAAAzO,OAAAtqE,EAAA8nD,WACA99C,EAAAhK,EAAAorE,eAGA,KADAprE,GADAA,IAAAmrE,qBACAnhE,EAAAhK,EAAAgK,KACAquE,GAAA,MAojBA,SAAAzpF,EAAAoR,GACApR,EAAAw8E,eAAAprE,EACApR,EAAAmrF,aAAA,KArjBAC,CAAAprF,EAAAoR,GAEA,SAAAi6E,GAAArrF,GACA,OAAS,CACT,IAAAoR,EAAApR,EAAAwpE,UACApuD,EAAApb,EAAAg6D,OACAtsD,EAAA1N,EAAA+pE,QACA,aAAA/pE,EAAA2pE,WAAA,CACAvW,GAAApzD,EACAA,EAAA,CACA,IAAAsE,EAAA8M,EAEA2tB,EAAAm0B,GACArC,GAFAz/C,EAAApR,GAEA+7E,aACA,OAAA3qE,EAAAuoD,KACA,OAEA,QACA,MACA,QACA,OACA,MACA,OACAxH,GAAA/gD,EAAA/L,OAAA61E,KACA,MACA,OACAsF,KACArF,MACAtqB,EAAAz/C,EAAA8nD,WACAksB,iBAAAv0B,EAAAW,QAAAX,EAAAu0B,eAAAv0B,EAAAu0B,eAAA,MACA,OAAA9gF,GAAA,OAAAA,EAAAwlE,QAAAoa,GAAA9yE,KAAAu4D,YAAA,GACA4d,GAAAn2E,GACA,MACA,OACAsvE,GAAAtvE,GACA,IAAA+jB,EAAAkrD,GAAAD,GAAAl3E,SAEA,GADA61B,EAAA3tB,EAAA/L,KACA,OAAAf,GAAA,MAAA8M,EAAA8nD,UAAAsuB,GAAAljF,EAAA8M,EAAA2tB,EAAA8xB,EAAA17B,GAAA7wB,EAAAyF,MAAAqH,EAAArH,MAAAqH,EAAAu4D,WAAA,UAA8G,GAAA9Y,EAAA,CAC9G,IAAAn/C,EAAA2uE,GAAA1tB,GAAAzpD,SACA,GAAAg7E,GAAA9yE,GAAA,CAEA9M,GADAusD,EAAAz/C,GACA8nD,UACA,IAAA3/C,EAAAs3C,EAAAxrD,KACA41C,EAAA4V,EAAAsrB,cACAvlE,EAAAue,EAKA,OAJA7wB,EAAAi1D,GAAA1I,EACAvsD,EAAAk1D,GAAAve,EACAlc,OAAA,EACA5J,EAAA5b,GAEA,aACA,aACAg4C,GAAA,OAAAjtD,GACA,MACA,YACA,YACA,IAAAiV,EAAA,EAA+BA,EAAAmiD,GAAA1/D,OAAeud,IAAAg4C,GAAAmK,GAAAniD,GAAAjV,GAC9C,MACA,aACAitD,GAAA,QAAAjtD,GACA,MACA,UACA,YACA,WACAitD,GAAA,QAAAjtD,GACAitD,GAAA,OAAAjtD,GACA,MACA,WACAitD,GAAA,QAAAjtD,GACAitD,GAAA,SAAAjtD,GACA,MACA,cACAitD,GAAA,SAAAjtD,GACA,MACA,YACAygE,GAAAzgE,EAAA22C,GACAsW,GAAA,UAAAjtD,GACA+0E,GAAAziE,EAAA,YACA,MACA,aACAtS,EAAAugE,cAAA,CACA6jB,cAAAztC,EAAA0tC,UAEAp3B,GAAA,UAAAjtD,GACA+0E,GAAAziE,EAAA,YACA,MACA,eACAi9D,GAAAvvE,EAAA22C,GAAAsW,GAAA,UAAAjtD,GAAA+0E,GAAAziE,EAAA,YAIA,IAAAmoB,KAFAo6C,GAAAhkD,EAAA8lB,GACA1hC,EAAA,KACA0hC,IAAAnvC,eAAAizB,KAAArtB,EAAAupC,EAAAlc,GAAA,aAAAA,EAAA,kBAAArtB,EAAApN,EAAAu3D,cAAAnqD,IAAA6H,EAAA,YAAA7H,IAAA,kBAAAA,GAAApN,EAAAu3D,cAAA,GAAAnqD,IAAA6H,EAAA,eAAA7H,IAAAmmD,EAAA/rD,eAAAizB,IAAA,MAAArtB,GAAA2nE,GAAAziE,EAAAmoB,IACA,OAAA5J,GACA,YACAksC,GAAA/8D,GACA+gE,GAAA/gE,EAAA22C,GAAA,GACA,MACA,eACAomB,GAAA/8D,GACAyvE,GAAAzvE,GACA,MACA,aACA,aACA,MACA,QACA,oBAAA22C,EAAAysC,UAAApjF,EAAAqjF,QAAApO,IAEAx6C,EAAAxlB,EACAs3C,EAAAqrB,YAAAn9C,GACA8xB,EAAA,OAAA9xB,IACAuoD,GAAAl2E,OACe,CACf6pC,EAAA7pC,EACAwF,EAAAmoB,EACAz6B,EAAAusD,EACAt3C,EAAA,IAAA4b,EAAA8rC,SAAA9rC,IAAAmwC,cACA5zD,IAAA2iE,GAAAC,OAAA5iE,EAAA+iE,GAAA79D,IACAlF,IAAA2iE,GAAAC,KAAA,WAAA19D,IAAAtS,EAAAiV,EAAAzP,cAAA,QAAAgrE,UAAA,qBAAAv7D,EAAAjV,EAAAywE,YAAAzwE,EAAAksE,aAAA,kBAAAlsE,EAAA80E,GAAA7/D,IAAAzP,cAAA8M,EAAA,CACAwiE,GAAA90E,EAAA80E,MACiB7/D,IAAAzP,cAAA8M,GAAA,WAAAA,MAAA2C,EAAAjV,EAAAqkF,SAAA/xE,EAAA+xE,UAAA,EAAArkF,EAAAsoB,OAAAhW,EAAAgW,KAAAtoB,EAAAsoB,QAAArT,IAAA+xE,gBAAA55E,EAAAkF,IACjBtS,EAAAiV,GACAggD,GAAAte,EACA32C,EAAAk1D,GAAA3I,EACA9K,GAAAzhD,EAAA8M,GAAA,MACAwF,EAAAtS,EAGA,IAAA6P,EAAAghB,EACAxmB,EAAAiqC,GAHAr/B,EAAAwlB,EACAkc,EAAA4V,GAGA,OAAAt3C,GACA,aACA,aACAg4C,GAAA,OAAA36C,GACAue,EAAA8lB,EACA,MACA,YACA,YACA,IAAA9lB,EAAA,EAA+BA,EAAAumC,GAAA1/D,OAAem5B,IAAAo8B,GAAAmK,GAAAvmC,GAAAve,GAC9Cue,EAAA8lB,EACA,MACA,aACAsW,GAAA,QAAA36C,GACAue,EAAA8lB,EACA,MACA,UACA,YACA,WACAsW,GAAA,QAAA36C,GACA26C,GAAA,OAAA36C,GACAue,EAAA8lB,EACA,MACA,WACAsW,GAAA,QAAA36C,GACA26C,GAAA,SAAA36C,GACAue,EAAA8lB,EACA,MACA,cACAsW,GAAA,SAAA36C,GACAue,EAAA8lB,EACA,MACA,YACA8pB,GAAAnuD,EAAAqkC,GACA9lB,EAAAuvC,GAAA9tD,EAAAqkC,GACAsW,GAAA,UAAA36C,GACAyiE,GAAAllE,EAAA,YACA,MACA,aACAghB,EAAAk+C,GAAAz8D,EAAAqkC,GACA,MACA,aACArkC,EAAAiuD,cAAA,CACA6jB,cAAAztC,EAAA0tC,UAEAxzD,EAAA3oB,EAAA,GAA4ByuC,EAAA,CAC5B53C,WAAA,IAEAkuD,GAAA,UAAA36C,GACAyiE,GAAAllE,EAAA,YACA,MACA,eACA0/D,GAAAj9D,EAAAqkC,GACA9lB,EAAAw+C,GAAA/8D,EAAAqkC,GACAsW,GAAA,UAAA36C,GACAyiE,GAAAllE,EAAA,YACA,MACA,QACAghB,EAAA8lB,EAEAk+B,GAAA5/D,EAAA4b,GACAzjB,OAAA,EACA,IAAAyY,EAAA5Q,EACA05C,EAAAr8C,EACA6pB,EAAAtL,EACA,IAAAzjB,KAAA+uB,EAAA,GAAAA,EAAA30B,eAAA4F,GAAA,CACA,IAAAsT,EAAAyb,EAAA/uB,GACA,UAAAA,EAAAymE,GAAAllB,EAAAjuC,GAAA,4BAAAtT,EAAA,OAAAsT,MAAA60D,YAAA,IAAAjF,GAAA3hB,EAAAjuC,GAAA,aAAAtT,EAAA,kBAAAsT,GAAA,aAAAmF,GAAA,KAAAnF,IAAAmwD,GAAAliB,EAAAjuC,GAAA,kBAAAA,GAAAmwD,GAAAliB,EAAA,GAAAjuC,GAAA,mCAAAtT,GAAA,6BAAAA,GAAA,cAAAA,IAAAmmD,EAAA/rD,eAAA4F,GAAA,MAAAsT,GAAAq0D,GAAAllE,EAAAzC,GAAA,MAAAsT,GAAAi/C,GAAAhR,EAAAvhD,EAAAsT,EAAArW,IAEA,OAAA4K,GACA,YACA8nD,GAAAzqD,GACAyuD,GAAAzuD,EAAAqkC,GAAA,GACA,MACA,eACAomB,GAAAzqD,GACAm9D,GAAAn9D,GACA,MACA,aACA,MAAAqkC,EAAA53C,OAAAuT,EAAAuqD,aAAA,WAAAsD,GAAAxpB,EAAA53C,QACA,MACA,cACA8xB,EAAAve,GACA+xE,WAAA1tC,EAAA0tC,SAEA,OADA/xE,EAAAqkC,EAAA53C,OACAkwE,GAAAp+C,IAAA8lB,EAAA0tC,SAAA/xE,GAAA,SAAAqkC,EAAA2pB,cAAA2O,GAAAp+C,IAAA8lB,EAAA0tC,SAAA1tC,EAAA2pB,cAAA,GACA,MACA,QACA,oBAAAzvC,EAAAuyD,UAAA9wE,EAAA+wE,QAAApO,KAEA1oB,EAAA6oB,GAAA36C,EAAA8xB,KAAAy2B,GAAAl2E,GACAA,EAAA8nD,UAAA50D,EAEA,OAAA8M,EAAArH,MAAAqH,EAAAu4D,WAAA,UACa,OAAAv4D,EAAA8nD,WAAA3wD,EAAA,OACb,MACA,OACAjE,GAAA,MAAA8M,EAAA8nD,UAAAuuB,GAAAnjF,EAAA8M,EAAA9M,EAAA63E,cAAAtrB,IAAA,kBAAAA,IAAA,OAAAz/C,EAAA8nD,WAAA3wD,EAAA,QAAAjE,EAAA+7E,GAAAD,GAAAl3E,SAAAm3E,GAAA1tB,GAAAzpD,SAAAg7E,GAAA9yE,IAAA2tB,GAAA8xB,EAAAz/C,GAAA8nD,UAAA50D,EAAAusD,EAAAsrB,cAAAp9C,EAAAw6B,GAAA1I,KAAA9xB,EAAAs2C,YAAA/wE,IAAAgjF,GAAAl2E,KAAA2tB,EAAA3tB,GAAAy/C,GAAA,IAAAvsD,EAAA28D,SAAA38D,IAAAghE,eAAAimB,eAAA16B,IAAA0I,GAAAnoD,EAAA2tB,EAAAm6B,UAAArI,IACA,MACA,QACA,MACA,QAEA,GADAA,EAAAz/C,EAAA6qE,cACA,QAAA7qE,EAAAu4D,WAAA,CACAv4D,EAAAorE,eAAAz9C,EACAq0B,GAAAhiD,EACA,MAAApR,EAEA6wD,EAAA,OAAAA,EACA9xB,EAAA,OAAAz6B,GAAA,OAAAA,EAAA23E,cACA,OAAA33E,IAAAusD,GAAA9xB,IAAA,QAAAz6B,IAAAwlE,MAAAC,WAAA,QAAA50C,EAAA/jB,EAAAirE,cAAAjrE,EAAAirE,YAAA/3E,IAAAg4E,WAAAnnD,IAAA/jB,EAAAirE,YAAAjrE,EAAAgrE,WAAA93E,IAAAg4E,WAAA,MAAAh4E,EAAAqlE,UAAA,KACA9Y,GAAA9xB,KAAA3tB,EAAAu4D,WAAA,GACA,MACA,OAEA,OAEA,QACA,MACA,OACA6W,KACA+G,GAAAn2E,GACA,MACA,QACAg1E,GAAAh1E,GACA,MACA,OAEA,QACA,MACA,QACA+gD,GAAA/gD,EAAA/L,OAAA61E,KACA,MACA,QACA,MACA,QACA3yE,EAAA,OAEA6qD,GAAA,KAGA,GADAhiD,EAAApR,EACA,IAAAkzD,IAAA,IAAA9hD,EAAAmrE,oBAAA,CAEA,IADA1rB,EAAA,EACA9xB,EAAA3tB,EAAA04D,MAAyB,OAAA/qC,IAAYz6B,EAAAy6B,EAAAy9C,gBAAA3rB,MAAAvsD,IAAA6wB,EAAA4J,EAAAw9C,qBAAA1rB,MAAA17B,GAAA4J,IAAAgrC,QACrC34D,EAAAmrE,oBAAA1rB,EAEA,UAAAuC,GAAA,OAAAA,GACA,OAAAh4C,GAAA,UAAAA,EAAAuuD,aAAA,OAAAvuD,EAAAihE,cAAAjhE,EAAAihE,YAAAr8E,EAAAq8E,aAAA,OAAAr8E,EAAAo8E,aAAA,OAAAhhE,EAAAghE,aAAAhhE,EAAAghE,WAAAE,WAAAt8E,EAAAq8E,aAAAjhE,EAAAghE,WAAAp8E,EAAAo8E,YAAA,EAAAp8E,EAAA2pE,YAAA,OAAAvuD,EAAAghE,WAAAhhE,EAAAghE,WAAAE,WAAAt8E,EAAAob,EAAAihE,YAAAr8E,EAAAob,EAAAghE,WAAAp8E,QACK,CAEL,WADAA,EAAA2pF,GAAA3pF,IACA,OAAAA,EAAA2pE,WAAA,KAAA3pE,EACA,OAAAob,MAAAihE,YAAAjhE,EAAAghE,WAAA,KAAAhhE,EAAAuuD,WAAA,MAEA,UAAAj8D,EAAA,OAAAA,EACA,UAAA0N,EAA0B,MAA1Bpb,EAAAob,EAEA,YAEA,SAAApF,GAAAhW,GACA,IAAAoR,EAAAo0E,GAAAxlF,EAAAwpE,UAAAxpE,EAAAkzD,IAIA,OAHAlzD,EAAAm8E,cAAAn8E,EAAA+7E,aACA,OAAA3qE,MAAAi6E,GAAArrF,IACA6pF,GAAA3gF,QAAA,KACAkI,EAEA,SAAAo6E,GAAAxrF,EAAAoR,GACA24E,IAAAxhF,EAAA,OACAg2E,KACAwL,IAAA,EACA,IAAA3uE,EAAAwuE,GAAA1gF,QACA0gF,GAAA1gF,QAAAi5E,GACA,IAAAz0E,EAAA1N,EAAA49E,2BACAlwE,IAAAwlD,IAAAlzD,IAAAgqF,IAAA,OAAA52B,KAAAm3B,KAAAr3B,GAAAxlD,EAAA0lD,GAAAspB,IAAAsN,GAAAhqF,GAAAkJ,QAAA,MAAAlJ,EAAA6qF,4BAAA,GAEA,IADA,IAAAvmF,GAAA,IACA,CACA,IACA,GAAA8M,EAAA,KAAmB,OAAAgiD,KAAAq4B,MAAqBr4B,GAAAp9C,GAAAo9C,SAAY,KAAW,OAAAA,IAAYA,GAAAp9C,GAAAo9C,IACtE,MAAA3yB,GACL,GAAA0lD,GAAAD,GAAAD,GAAA,KAAA7D,KAAA,OAAAhvB,GAAA9uD,GAAA,EAAAglF,GAAA7oD,OAA+D,CAC/D,OAAA2yB,IAAA7qD,EAAA,OACA,IAAAw2B,EAAAq0B,GACAvC,EAAA9xB,EAAAi7B,OACA,UAAAnJ,EAAsC,CACtC7wD,EAAA,CACA,IAAAm1B,EAAAn1B,EACA0R,EAAAm/C,EACAt3C,EAAAwlB,EACAkc,EAAAxa,EAIA,GAHAowB,EAAAqC,GACA35C,EAAAowD,WAAA,KACApwD,EAAA8iE,YAAA9iE,EAAA6iE,WAAA,KACA,OAAAnhC,GAAA,kBAAAA,GAAA,oBAAAA,EAAA55C,KAAA,CACA,IAAAuV,EAAAqkC,EACAA,EAAAvpC,EACA,IAAAyC,GAAA,EACAxF,GAAA,EACA,GACA,QAAAssC,EAAA0e,IAAA,CACA,IAAAxvC,EAAA8wB,EAAAuuB,UACA,UAAAr/C,GAAA,QAAAA,IAAA8xD,eAAA,CACAttE,EAAA,eAAAwb,EAAAm7D,YACA,MAGA,kBADAn7D,EAAA8wB,EAAA8gC,aAAA2P,eACA,GAAAvhE,EAAAhW,EAAA,IAA+D,IAAAA,GAAAgW,EAAAhW,OAAAgW,IAE/D8wB,IAAA+e,aACe,OAAA/e,GACfA,EAAAvpC,EACA,GAEA,IADAyY,EAAA,KAAA8wB,EAAA0e,OAAAxvC,OAAA,IAAA8wB,EAAAkhC,cAAAoJ,UAAA,OAAAtqC,EAAAghC,eACA9xD,EAAA,CAGA,GADA,QADAzY,EAAAupC,EAAAihC,eACAxqE,EAAA,IAAA8oE,KAAA0O,IAAAtyE,GAAAqkC,EAAAihC,YAAAxqE,KAAAw3E,IAAAtyE,GACA,OAAAqkC,EAAAvvB,MAAA,CACAuvB,EAAA0uB,WAAA,GACApwD,EAAAowD,YAAA,KACA,IAAApwD,EAAAogD,MAAA,OAAApgD,EAAAiwD,UAAAjwD,EAAAogD,IAAA,KAAA9I,EAAAstB,GAAA,aAAAxkB,IAAA+kB,GAAA/gC,GAAApkC,EAAAs3C,KACAt3C,EAAAijE,eAAA,WACA,MAAAx8E,EAGA0R,EAAAm/C,EACA,IAAAoC,GAFA15C,EAAA4b,GAEAw2D,UACA,OAAA14B,KAAA15C,EAAAoyE,UAAA,IAAAxC,GAAAh/D,EAAA,IAAAqwD,IAAAvnB,EAAAhuC,IAAArO,EAAAuT,SAAA,KAAAA,EAAA8oC,EAAAuO,IAAA5qD,MAAAuT,EAAA,IAAAqwD,IAAAvnB,EAAAhuC,IAAArO,EAAAuT,IACAA,EAAA8+D,IAAAv3E,KAAAyY,EAAA++D,IAAAx3E,GAAA6H,EAAAqyE,GAAAv1B,KAAA,KAAA98C,EAAA3C,EAAAlF,GAAAkF,EAAAvV,KAAAkY,OACA,IAAApF,EAAAghB,EAAA,iBAAAxmB,MAAA,eAAAgvE,GAAAxoD,EAAA07B,IAAA,KAAA17B,EAAAxmB,EAAAwF,GACA,GAAAghB,GAAA80D,GAAA90D,IAAA80D,GAAA90D,GACA8lB,EAAA0uB,WAAA,KACA1uB,EAAAuhC,eAAA3rB,EACA,MAAA7wD,EAEAi7C,IAAA+e,aACe,OAAA/e,GACfA,EAAA91C,OAAA49D,GAAAxpD,EAAAlU,OAAA,6MAAA49D,GAAA1pD,IAEA2wE,IAAA,EACAjvC,EAAAmsC,GAAAnsC,EAAA1hC,GACA4b,EAAAzjB,EACA,GACA,OAAAyjB,EAAAwkC,KACA,OACAxkC,EAAAw0C,WAAA,KACAx0C,EAAAqnD,eAAA3rB,EAEAk2B,GAAA5xD,EADA07B,EAAAw4B,GAAAl0D,EAAA8lB,EAAA4V,IAEA,MAAA7wD,EACA,OACA,GAAAmU,EAAA8mC,EAAAtsC,EAAAwmB,EAAA9vB,KAAAkU,EAAA4b,EAAA+jC,UAAA,QAAA/jC,EAAAw0C,aAAA,oBAAAh7D,EAAAu2E,0BAAA,OAAA3rE,GAAA,oBAAAA,EAAAiwE,oBAAA,OAAAC,QAAAR,IAAA1vE,KAAA,CACA4b,EAAAw0C,WAAA,KACAx0C,EAAAqnD,eAAA3rB,EAEAk2B,GAAA5xD,EADA07B,EAAA04B,GAAAp0D,EAAAhhB,EAAA08C,IAEA,MAAA7wD,GAGAm1B,IAAA6kC,aACa,OAAA7kC,GAEbi+B,GAAAi4B,GAAAtsD,GACA,SA9EAz6B,GAAA,EAAAglF,GAAA7oD,IAkFA,MAMA,GAJAspD,IAAA,EACAH,GAAA1gF,QAAAkS,EACA+qE,GAAAD,GAAAD,GAAA,KACA7D,KACA99E,EAAA0lF,GAAA,KAAAhqF,EAAAmrF,aAAA,UAA0C,UAAA/3B,GAAApzD,EAAAmrF,aAAA,SAA2C,CAIrF,GAFA,QADA/vE,EAAApb,EAAAkJ,QAAAsgE,YACAjhE,EAAA,OACAyhF,GAAA,KACAE,GAAA,CAIA,GAHA5lF,EAAAtE,EAAAq9E,kBACAt+C,EAAA/+B,EAAA09E,oBACA7sB,EAAA7wD,EAAAw9E,iBACA,IAAAl5E,KAAAoJ,GAAA,IAAAqxB,KAAArxB,GAAA,IAAAmjD,KAAAnjD,EAGA,OAFA6vE,GAAAv9E,EAAA0N,QACAqoC,GAAA/1C,EAAAob,EAAA1N,EAAA1N,EAAAw8E,gBAAA,GAGA,IAAAx8E,EAAAm9E,UAAA/rE,EAKA,OAJApR,EAAAm9E,UAAA,EACAzvE,EAAA1N,EAAA49E,2BAAAlwE,EACA0D,EAAApR,EAAAw8E,eAAA,gBACAzmC,GAAA/1C,EAAAob,EAAA1N,EAAA0D,GAAA,GAIAA,IAAA,IAAA64E,IAAA1M,GAAAv9E,EAAA0N,IAAA0D,EAAA,eAAAusE,GAAA39E,EAAA0N,KAAAu8E,QAAA74E,KAAA,eAAA8sE,MAAA9sE,EAAA64E,GAAA74E,EAAA2kC,GAAA/1C,EAAAob,EAAA1N,EAAA1N,EAAAw8E,eAAA,EAAAprE,EAAA,EAAAA,KAAApR,EAAA6qF,4BAAAn9E,EAAA1N,EAAAmrF,aAAA/vE,IAGA,SAAA4sE,GAAAhoF,EAAAoR,GACA,QAAAgK,EAAApb,EAAAg6D,OAAwB,OAAA5+C,GAAY,CACpC,OAAAA,EAAAu+C,KACA,OACA,IAAAjsD,EAAA0N,EAAA89C,UACA,uBAAA99C,EAAA/V,KAAA6/E,0BAAA,oBAAAx3E,EAAA87E,oBAAA,OAAAC,QAAAR,IAAAv7E,IAKA,OAFAiwC,GAAAviC,EADApb,EAAAupF,GAAAnuE,EADApb,EAAAonF,GAAAh2E,EAAApR,GACA,kBAEAw+E,GAAApjE,EAAA,YAGA,MACA,OAKA,OAFAuiC,GAAAviC,EADApb,EAAAqpF,GAAAjuE,EADApb,EAAAonF,GAAAh2E,EAAApR,GACA,kBAEAw+E,GAAApjE,EAAA,YAGAA,IAAA4+C,OAEA,IAAAh6D,EAAA25D,MAAAhc,GAAA39C,EAAAob,EAAAiuE,GAAArpF,EAAAob,EAAAgsE,GAAAh2E,EAAApR,GAAA,aAAAw+E,GAAAx+E,EAAA,aAEA,SAAAo+E,GAAAp+E,EAAAoR,GACA,IAAAgK,EAAAkL,EAAAulE,mCACAn+E,OAAA,EACA,UAAA0D,EAAAsa,MAAAhe,EAAA,gBAAyC,GAAAq8E,KAAAI,GAAAz8E,EAAAwlD,OAA0B,CACnE,OAAA93C,GACA,KAAAkL,EAAAwlE,2BACAp+E,EAAA,WACA,MACA,KAAA4Y,EAAAylE,8BACAr+E,EAAA,8BAAA1N,EAAA,WACA,MACA,KAAAsmB,EAAA4kE,wBACAx9E,EAAA,8BAAA1N,EAAA,YACA,MACA,KAAAsmB,EAAA0lE,qBACA,KAAA1lE,EAAA2lE,sBACAv+E,EAAA,EACA,MACA,QACAnF,EAAA,OAEA,OAAAyhF,IAAAt8E,IAAAwlD,MAAAxlD,EAGA,OADA0N,IAAAkL,EAAAylE,gCAAA,IAAA72E,IAAAxH,EAAAwH,SAAAxH,GACAA,EAEA,SAAAk+E,GAAA5rF,EAAAoR,EAAAgK,GACA,IAAA1N,EAAA1N,EAAA2rF,UACA,OAAAj+E,KAAAqyE,OAAA3uE,GACA,OAAA44E,IAAA92B,KAAA93C,EAAA4uE,GAAA,MAAwC54E,EAAApR,EAAAy9E,sBAAA/vE,EAAA1N,EAAA09E,oBAAA,IAAAtsE,GAAAgK,GAAAhK,GAAAgK,GAAA1N,IACxC1N,EAAAm9E,UAAA,GAEA,KADA/rE,EAAApR,EAAAw9E,mBACApsE,EAAAgK,KAAApb,EAAAw9E,iBAAApiE,GACAkiE,GAAAliE,EAAApb,GAEA,KADAob,EAAApb,EAAAw8E,iBACAwM,GAAAhpF,EAAAob,KAWA,SAAA2tE,GAAA/oF,EAAAoR,GACApR,EAAAw8E,eAAAprE,IAAApR,EAAAw8E,eAAAprE,GACA,IAAAgK,EAAApb,EAAAwpE,UACA,OAAApuD,KAAAohE,eAAAprE,IAAAgK,EAAAohE,eAAAprE,GACA,IAAA1D,EAAA1N,EAAAg6D,OACA11D,EAAA,KACA,UAAAoJ,GAAA,IAAA1N,EAAA25D,IAAAr1D,EAAAtE,EAAAk5D,eAAiD,KAAW,OAAAxrD,GAAY,CAIxE,GAHA0N,EAAA1N,EAAA87D,UACA97D,EAAA6uE,oBAAAnrE,IAAA1D,EAAA6uE,oBAAAnrE,GACA,OAAAgK,KAAAmhE,oBAAAnrE,IAAAgK,EAAAmhE,oBAAAnrE,GACA,OAAA1D,EAAAssD,QAAA,IAAAtsD,EAAAisD,IAAA,CACAr1D,EAAAoJ,EAAAwrD,UACA,MAEAxrD,IAAAssD,OAEA,OAAA11D,EAEA,SAAAk6E,GAAAx+E,EAAAoR,GAEA,QADApR,EAAA+oF,GAAA/oF,EAAAoR,OACA24E,IAAA,IAAA72B,IAAA9hD,EAAA8hD,IAAAq3B,KAAArN,GAAAl9E,EAAAoR,GAAA24E,KAAAI,IAAAH,KAAAhqF,GAAAgpF,GAAAhpF,IAAAw8E,gBAAA0P,GAAAC,KAAAD,GAAA,EAAA3jF,EAAA,SAEA,SAAA6jF,GAAApsF,EAAAoR,EAAAgK,EAAA1N,EAAApJ,GACA,OAAAgiB,EAAA2kE,yBAAA3kE,EAAAwlE,2BAAA,WACA,OAAA9rF,EAAAoR,EAAAgK,EAAA1N,EAAApJ,KAGA,IAAA+nF,GAAA,KACAz1B,GAAA,KACA01B,GAAA,EACAnqC,QAAA,EACA4R,IAAA,EACAw4B,GAAA,KACAz1B,GAAA,EACA5hD,GAAA,EACA2C,IAAA,EACA20E,GAAA,KACAx4B,IAAA,EACAy4B,IAAA,EACAC,GAAA,KACAC,GAAArmE,EAAAsmE,eACAC,GAAA,YAAAF,GAAA,MACAG,GAAAD,GACAV,GAAA,GACAD,GAAA,EACAa,GAAA,KACA,SAAAC,KACAH,GAAA,aAAAvmE,EAAAsmE,eAAAD,IAAA,MAEA,SAAAM,GAAAjtF,EAAAoR,GACA,OAAAk7E,GAAA,CACA,GAAAl7E,EAAAk7E,GAAA,OACA,OAAAnqC,IAAA77B,EAAA+zD,wBAAAl4B,IAEAmqC,GAAAl7E,EACApR,EAAAsmB,EAAAsmE,eAAAD,GACAxqC,GAAA77B,EAAA6zD,0BAAA+S,GAAA,CACAC,QAAA,eAAA/7E,GAAApR,IAGA,SAAA+1C,GAAA/1C,EAAAoR,EAAAgK,EAAA1N,EAAApJ,GACAtE,EAAAw8E,eAAA9uE,EACA,IAAApJ,GAAAmnF,KAAA,EAAAnnF,IAAAtE,EAAAotF,cAAAtT,GAEA,SAAA95E,EAAAoR,EAAAgK,GACApb,EAAA6qF,4BAAAzvE,EACApb,EAAAmrF,aAAA/5E,EACA47E,KACAF,GAAAD,GACAQ,GAAArtF,EAAAob,IAPAi7C,KAAA,KAAAr2D,EAAAoR,EAAAgK,GAAA9W,KAAAtE,EAAA6qF,4BAAAzvE,EAAApb,EAAAmrF,aAAA/5E,GAaA,SAAA8sE,KACA,OAAAnqB,GAAA+4B,IACAQ,KACA,IAAAx2B,IAAA,IAAAA,KAAAk2B,KAAAF,GAAAD,IACAC,IAEA,SAAA9D,GAAAhpF,EAAAoR,GACA,OAAApR,EAAAutF,mBAAAvtF,EAAAw8E,eAAAprE,EAAA,OAAAwlD,IAAAy1B,GAAAz1B,GAAA52D,IAAAutF,kBAAAvtF,IAAA42D,MAAA22B,kBAAAvtF,GAAAutF,kBAAAlB,IAAAj7E,EAAApR,EAAAw8E,iBAAAx8E,EAAAw8E,eAAAprE,GACA2iD,KAAAC,GAAAy4B,KAAAF,GAAAvsF,EAAA82D,GAAA,WAAA02B,GAAAxtF,EAAA,6BAAAoR,EAAA45E,GAAA,eAAAiC,GAAAjtF,EAAAoR,IAEA,SAAAk8E,KACA,IAAAttF,EAAA,EACAoR,EAAA,KACA,UAAAwlD,GAAA,QAAAx7C,EAAAw7C,GAAAlpD,EAAA2+E,GAAyC,OAAA3+E,GAAY,CACrD,IAAApJ,EAAAoJ,EAAA8uE,eACA,OAAAl4E,EAAA,CAEA,IADA,OAAA8W,GAAA,OAAAw7C,KAAAruD,EAAA,OACAmF,MAAA6/E,kBAAA,CACAlB,GAAAz1B,GAAAlpD,EAAA6/E,kBAAA,KACA,MACO,GAAA7/E,IAAA2+E,MAAA/nF,EAAAoJ,EAAA6/E,kBAAA32B,GAAA22B,kBAAAjpF,EAAAoJ,EAAA6/E,kBAAA,SAAsG,IAAA7/E,IAAAkpD,GAAA,EAC7GA,GAAAx7C,GACAmyE,kBAAAlB,GACA3+E,EAAA6/E,kBAAA,KACA,MACOnyE,EAAAmyE,kBAAA7/E,EAAA6/E,kBAAA7/E,EAAA6/E,kBAAA,KACP7/E,EAAA0N,EAAAmyE,sBACK,CAEL,GADAjpF,EAAAtE,MAAAsE,EAAA8M,EAAA1D,GACAA,IAAAkpD,GAAA,MACA,gBAAA52D,EAAA,MACAob,EAAA1N,EACAA,IAAA6/E,mBAGAhB,GAAAn7E,EACA0lD,GAAA92D,EAEA,IAAAytF,IAAA,EACA,SAAAhC,KACA,QAAAgC,MAAAnnE,EAAAonE,yBAAAD,IAAA,GAEA,SAAAP,KACA,IACA,IAAAzB,MAAA,OAAAY,GAAA,CACAW,KACA,IAAAhtF,EAAAqsF,GACA,GACA,IAAAj7E,EAAApR,EAAAw8E,eACA,IAAAprE,GAAAy7E,IAAAz7E,IAAApR,EAAA49E,2BAAAiP,IACA7sF,IAAAutF,wBACOvtF,IAAAqsF,IAEPrB,GAAA,MACG,QACHyC,IAAA,GAGA,SAAAzC,GAAAhrF,EAAAoR,GAEA,GADAk8E,KACAl8E,EAAA,IAAA47E,KAAAF,GAAAD,GAA4B,OAAAN,IAAA,IAAAz1B,IAAA92D,GAAA82D,MAAA22B,IAAAZ,GAAA/1B,KAAqD02B,GAAAjB,GAAAz1B,GAAA+1B,GAAA/1B,IAAAw2B,KAAAN,KAAAF,GAAAD,QAAyC,KAAW,OAAAN,IAAA,IAAAz1B,IAAA92D,GAAA82D,IAAkC02B,GAAAjB,GAAAz1B,IAAA,GAAAw2B,KAKvK,GAJAl8E,IAAAk7E,GAAA,EAAAnqC,GAAA,MACA,IAAA2U,IAAAm2B,GAAAV,GAAAz1B,IACAo1B,GAAA,EACAa,GAAA,KACA,OAAAL,GAAA,IAAA1sF,EAAA0sF,MAAA,KAAAt7E,EAAA,EAAiDA,EAAApR,EAAAhE,OAAcoV,IAAA,CAC/D,IAAAgK,EAAApb,EAAAoR,GACA,IACAgK,EAAAuyE,cACK,MAAAjgF,GACLmK,SAAA,EAAA20E,GAAA9+E,IAGA,GAAAmK,GAAA,MAAA7X,EAAAwsF,MAAA,KAAA30E,IAAA,EAAA7X,EAEA,SAAAqtF,GAAArtF,EAAAoR,GACA2iD,IAAAxrD,EAAA,OACAgkF,GAAAvsF,EACA82D,GAAA1lD,EACAo8E,GAAAxtF,EAAAoR,GAAA,GACA45E,GAAA,eAEA,SAAAwC,GAAAxtF,EAAAoR,EAAAgK,GAGA,GAFA24C,IAAAxrD,EAAA,OACAwrD,IAAA,EACA34C,EAAA,CACA,IAAA1N,EAAA1N,EAAAmrF,aACA,OAAAz9E,EAAAkgF,GAAA5tF,EAAA0N,EAAA0D,IAAApR,EAAAmrF,aAAA,WAAAz9E,EAAA1N,EAAAotF,iBAAAptF,EAAAotF,eAAA,EAAApT,GAAAtsE,IAAA89E,GAAAxrF,EAAAob,GAAA,QAAA1N,EAAA1N,EAAAmrF,gBAAAM,KAAAzrF,EAAAmrF,aAAAz9E,EAAAkgF,GAAA5tF,EAAA0N,EAAA0D,UACG,QAAA1D,EAAA1N,EAAAmrF,cAAAyC,GAAA5tF,EAAA0N,EAAA0D,IAAApR,EAAAmrF,aAAA,WAAAz9E,EAAA1N,EAAAotF,iBAAAptF,EAAAotF,eAAA,EAAApT,GAAAtsE,IAAA89E,GAAAxrF,EAAAob,GAAA,QAAA1N,EAAA1N,EAAAmrF,eAAAyC,GAAA5tF,EAAA0N,EAAA0D,IACH2iD,IAAA,EAEA,SAAA65B,GAAA5tF,EAAAoR,EAAAgK,GACA,IAAA1N,EAAA1N,EAAA6tF,WACA,UAAAngF,KAAAogF,iBAAA1yE,IAAA,OAAAsxE,MAAA,CAAAh/E,GAAAg/E,GAAAxoF,KAAAwJ,KAAAqgF,QAGA,OAFA/tF,EAAAmrF,aAAA/5E,OACApR,EAAAw8E,eAAA,GAGAx8E,EAAAmrF,aAAA,KACAnrF,IAAA+sF,GAAAb,MAAAa,GAAA/sF,EAAAksF,GAAA,GACA5lE,EAAA2kE,yBAAA3kE,EAAAwlE,2BAAA,WACAlB,GAAA5qF,EAAAoR,KAGA,SAAAk4E,GAAAtpF,GACA,OAAAusF,IAAAhkF,EAAA,OACAgkF,GAAA/P,eAAA,EACA3kE,SAAA,EAAA20E,GAAAxsF,GAEA,SAAAguF,GAAAhuF,EAAAoR,GACA,IAAAgK,EAAA44C,GACAA,IAAA,EACA,IACA,OAAAh0D,EAAAoR,GACG,SACH4iD,GAAA54C,IAAA24C,IAAAi3B,GAAA,gBAGA,SAAAiD,GAAAjuF,EAAAoR,GACA,GAAA4iD,KAAAy4B,GAAA,CACAA,IAAA,EACA,IACA,OAAAzsF,EAAAoR,GACK,QACLq7E,IAAA,GAGA,OAAAzsF,EAAAoR,GAEA,SAAA88E,GAAAluF,EAAAoR,EAAAgK,GACA44C,IAAAD,IAAA,IAAA7+C,KAAA81E,GAAA91E,IAAA,GAAAA,GAAA,GACA,IAAAxH,EAAAsmD,GACAA,IAAA,EACA,IACA,OAAA1tC,EAAA2kE,yBAAA3kE,EAAAylE,8BAAA,WACA,OAAA/rF,EAAAoR,EAAAgK,KAEG,SACH44C,GAAAtmD,IAAAqmD,IAAAi3B,GAAA,gBAGA,SAAAmD,GAAAnuF,EAAAoR,EAAAgK,EAAA1N,EAAApJ,GACA,IAAAy6B,EAAA3tB,EAAAlI,QACAlJ,EAAA,GAAAob,EAAA,CAEAhK,EAAA,CACA,IAAAs4D,GAFAtuD,IAAA6iE,sBAEA,IAAA7iE,EAAAu+C,KAAApxD,EAAA,OACA,IAAAsoD,EAAAz1C,EACA,GACA,OAAAy1C,EAAA8I,KACA,OACA9I,IAAAqI,UAAA1H,QACA,MAAApgD,EACA,OACA,GAAA+gD,GAAAtB,EAAAxrD,MAAA,CACAwrD,IAAAqI,UAAAsiB,0CACA,MAAApqE,GAGAy/C,IAAAmJ,aACO,OAAAnJ,GACPtoD,EAAA,OACAsoD,OAAA,EAEA,OAAAz1C,EAAAu+C,IAAA,CACA,IAAAxkC,EAAA/Z,EAAA/V,KACA,GAAA8sD,GAAAh9B,GAAA,CACA/Z,EAAAigE,GAAAjgE,EAAA+Z,EAAA07B,GACA,MAAA7wD,GAGAob,EAAAy1C,OACGz1C,EAAAu/D,GAYH,OAXA,OAAAvpE,EAAAogD,QAAApgD,EAAAogD,QAAAp2C,EAAAhK,EAAAg0E,eAAAhqE,EACAhK,EAAA9M,GACAA,EAAA65E,GAAAzwE,IACA2wE,QAAA,CACA/L,QAAAtyE,GAGA,QADAoR,OAAA,IAAAA,EAAA,KAAAA,KACA9M,EAAAg6E,SAAAltE,GACAmtE,KACA5gC,GAAA5e,EAAAz6B,GACAk6E,GAAAz/C,EAAArxB,GACAA,EAEA,SAAA0gF,GAAApuF,EAAAoR,EAAAgK,EAAA1N,GACA,IAAApJ,EAAA8M,EAAAlI,QAGA,OAAAilF,GAAAnuF,EAAAoR,EAAAgK,EADA9W,EAAA85E,GADAF,KACA55E,GACAoJ,GAEA,SAAA2gF,GAAAruF,GAEA,KADAA,IAAAkJ,SACA4gE,MAAA,YACA,OAAA9pE,EAAA8pE,MAAAnQ,KACA,OAEA,QACA,OAAA35D,EAAA8pE,MAAA5Q,WAuCA,SAAAo1B,GAAAtuF,GACA,IAAAoR,EAAA,8BAAA8sE,KAAA,YACA9sE,GAAA04E,KAAA14E,EAAA04E,GAAA,GACAxpF,KAAAwtF,gBAAAhE,GAAA14E,EACA9Q,KAAAiuF,MAAAvuF,EACAM,KAAAkuF,WAAAluF,KAAAmuF,MAAA,KACAnuF,KAAAouF,aAAApuF,KAAAquF,cAAA,EACAruF,KAAAsuF,UAAA,KACAtuF,KAAAytF,QAAA,EAgDA,SAAAc,KACAvuF,KAAAkuF,WAAA,KACAluF,KAAAwuF,YAAA,EACAxuF,KAAAyuF,UAAAzuF,KAAAyuF,UAAA14B,KAAA/1D,MAoBA,SAAA0uF,GAAAhvF,EAAAoR,EAAAgK,GAEApb,EAAA,CACAkJ,QAFAkI,EAAAghD,GAAA,YAAAhhD,EAAA,KAGAs+D,cAAA1vE,EACAg9E,gBAAA,KACA2O,UAAA,KACAvO,oBAAA,EACAC,kBAAA,EACAI,sBAAA,EACAC,oBAAA,EACAF,iBAAA,EACAL,UAAA,EACA0N,4BAAA,EACAM,aAAA,KACAiC,eAAA,EACA57B,QAAA,KACA4zB,eAAA,KACAQ,QAAAxqE,EACAwiE,2BAAA,EACApB,eAAA,EACAqR,WAAA,KACAN,kBAAA,MAEAjtF,KAAA2uF,cAAA79E,EAAA8nD,UAAAl5D,EAsCA,SAAAkvF,GAAAlvF,GACA,SAAAA,GAAA,IAAAA,EAAAihE,UAAA,IAAAjhE,EAAAihE,UAAA,KAAAjhE,EAAAihE,WAAA,IAAAjhE,EAAAihE,UAAA,iCAAAjhE,EAAAq1E,YAYA,SAAA8Z,GAAAnvF,EAAAoR,EAAAgK,EAAA1N,EAAApJ,GACA,IAAAy6B,EAAA3jB,EAAAotE,oBACA,GAAAzpD,EAAA,CACA,uBAAAz6B,EAAA,CACA,IAAAusD,EAAAvsD,EACAA,EAAA,WACA,IAAAtE,EAAAquF,GAAAtvD,EAAAkwD,eACAp+B,EAAApwD,KAAAT,IAGA,MAAAA,EAAA++B,EAAAqwD,kCAAApvF,EAAAoR,EAAA9M,GAAAy6B,EAAAg2B,OAAA3jD,EAAA9M,OACG,CAEH,GADAy6B,EAAA3jB,EAAAotE,oBAjBA,SAAAxoF,EAAAoR,GAEA,GADAA,YAAApR,EAAA,IAAAA,EAAAihE,SAAAjhE,EAAAwxE,gBAAAxxE,EAAAwwE,WAAA,WAAAp/D,EAAA6vD,WAAA7vD,EAAAi+E,aAAA,qBACAj+E,EAAA,QAAAgK,EAAqBA,EAAApb,EAAAo1E,WAAiBp1E,EAAA+0E,YAAA35D,GACtC,WAAA4zE,GAAAhvF,GAAA,EAAAoR,GAcAk+E,CAAAl0E,EAAA1N,GACA,oBAAApJ,EAAA,CACA,IAAA6wB,EAAA7wB,EACAA,EAAA,WACA,IAAAtE,EAAAquF,GAAAtvD,EAAAkwD,eACA95D,EAAA10B,KAAAT,IAGAiuF,GAAA,WACA,MAAAjuF,EAAA++B,EAAAqwD,kCAAApvF,EAAAoR,EAAA9M,GAAAy6B,EAAAg2B,OAAA3jD,EAAA9M,KAGA,OAAA+pF,GAAAtvD,EAAAkwD,eAEA,SAAAM,GAAAvvF,EAAAoR,GACA,IAAAgK,EAAA,EAAA9e,UAAAN,aAAA,IAAAM,UAAA,GAAAA,UAAA,QAEA,OADA4yF,GAAA99E,IAAA7I,EAAA,OA1NA,SAAAvI,EAAAoR,EAAAgK,GACA,IAAA1N,EAAA,EAAApR,UAAAN,aAAA,IAAAM,UAAA,GAAAA,UAAA,QACA,OACAm2D,SAAAyP,GACAhjE,IAAA,MAAAwO,EAAA,QAAAA,EACA3C,SAAA/K,EACA0vE,cAAAt+D,EACA6rE,eAAA7hE,GAoNAo0E,CAAAxvF,EAAAoR,EAAA,KAAAgK,GAjNA8jD,GAAA,SAAAl/D,EAAAoR,EAAAgK,GACA,OAAAhK,GACA,YAGA,GAFA+zD,GAAAnlE,EAAAob,GACAhK,EAAAgK,EAAA21C,KACA,UAAA31C,EAAA/V,MAAA,MAAA+L,EAAA,CACA,IAAAgK,EAAApb,EAAmBob,EAAAs+C,YAAct+C,IAAAs+C,WAEjC,IADAt+C,IAAAq0E,iBAAA,cAAAC,KAAAC,UAAA,GAAAv+E,GAAA,mBACAA,EAAA,EAAmBA,EAAAgK,EAAApf,OAAcoV,IAAA,CACjC,IAAA1D,EAAA0N,EAAAhK,GACA,GAAA1D,IAAA1N,GAAA0N,EAAAkiF,OAAA5vF,EAAA4vF,KAAA,CACA,IAAAtrF,EAAAw1D,EAAApsD,GACApJ,GAAAiE,EAAA,MACAs5D,GAAAn0D,GACAy3D,GAAAz3D,EAAApJ,KAIA,MACA,eACAwvE,GAAA9zE,EAAAob,GACA,MACA,aACA,OAAAhK,EAAAgK,EAAA/X,QAAAkwE,GAAAvzE,IAAAob,EAAAutE,SAAAv3E,GAAA,KAaAk9E,GAAAhvF,UAAAy1D,OAAA,SAAA/0D,GACAM,KAAAytF,QAAAxlF,EAAA,OACAjI,KAAAouF,cAAA,EACApuF,KAAAsuF,UAAA5uF,EACA,IAAAoR,EAAA9Q,KAAAiuF,MAAAU,cACA7zE,EAAA9a,KAAAwtF,gBACApgF,EAAA,IAAAmhF,GAEA,OADAV,GAAAnuF,EAAAoR,EAAA,KAAAgK,EAAA1N,EAAAqhF,WACArhF,GAEA4gF,GAAAhvF,UAAA+B,KAAA,SAAArB,GACA,GAAAM,KAAAquF,aAAA3uF,QAA6B,CAC7B,IAAAoR,EAAA9Q,KAAAkuF,WACA,OAAAp9E,MAAA9Q,KAAAkuF,WAAA,IACAp9E,EAAAlN,KAAAlE,KAGAsuF,GAAAhvF,UAAAuwF,OAAA,WACA,IAAA7vF,EAAAM,KAAAiuF,MAAAU,cACA79E,EAAApR,EAAA6tF,WAEA,GADAvtF,KAAAytF,QAAA,OAAA38E,GAAA7I,EAAA,OACAjI,KAAAouF,aAAA,CACA,IAAAtzE,EAAA9a,KAAAwtF,gBACA,GAAA18E,IAAA9Q,KAAA,CACAA,KAAAouF,eAAAtzE,EAAA9a,KAAAwtF,gBAAA18E,EAAA08E,gBAAAxtF,KAAAy0D,OAAAz0D,KAAAsuF,YACA,QAAAlhF,EAAA,KAAApJ,EAAA8M,EAA+B9M,IAAAhE,MAAYoN,EAAApJ,MAAAmqF,MAC3C,OAAA/gF,GAAAnF,EAAA,OACAmF,EAAA+gF,MAAAnqF,EAAAmqF,MACAnuF,KAAAmuF,MAAAr9E,EACApR,EAAA6tF,WAAAvtF,KAEAA,KAAAytF,QAAA,EACAV,GAAArtF,EAAAob,GACAhK,EAAA9Q,KAAAmuF,MACAnuF,KAAAmuF,MAAA,KAEA,QADAr9E,EAAApR,EAAA6tF,WAAAz8E,IACAA,EAAAs9E,cAAAt9E,EAAA2jD,OAAA3jD,EAAAw9E,gBACGtuF,KAAAmuF,MAAA,KAAAnuF,KAAAytF,QAAA,GAEHO,GAAAhvF,UAAAquF,YAAA,WACA,IAAArtF,KAAAquF,aAAA,CACAruF,KAAAquF,cAAA,EACA,IAAA3uF,EAAAM,KAAAkuF,WACA,UAAAxuF,EAAA,QAAAoR,EAAA,EAAmCA,EAAApR,EAAAhE,OAAcoV,KAAA,EAAApR,EAAAoR,QAQjDy9E,GAAAvvF,UAAA+B,KAAA,SAAArB,GACA,GAAAM,KAAAwuF,WAAA9uF,QAA2B,CAC3B,IAAAoR,EAAA9Q,KAAAkuF,WACA,OAAAp9E,MAAA9Q,KAAAkuF,WAAA,IACAp9E,EAAAlN,KAAAlE,KAGA6uF,GAAAvvF,UAAAyvF,UAAA,WACA,IAAAzuF,KAAAwuF,WAAA,CACAxuF,KAAAwuF,YAAA,EACA,IAAA9uF,EAAAM,KAAAkuF,WACA,UAAAxuF,EAAA,QAAAoR,EAAA,EAAmCA,EAAApR,EAAAhE,OAAcoV,IAAA,CACjD,IAAAgK,EAAApb,EAAAoR,GACA,oBAAAgK,GAAA7S,EAAA,MAAA6S,GACAA,OA8BA4zE,GAAA1vF,UAAAy1D,OAAA,SAAA/0D,EAAAoR,GACA,IAAAgK,EAAA9a,KAAA2uF,cACAvhF,EAAA,IAAAmhF,GAIA,OAFA,QADAz9E,OAAA,IAAAA,EAAA,KAAAA,IACA1D,EAAArM,KAAA+P,GACAg9E,GAAApuF,EAAAob,EAAA,KAAA1N,EAAAqhF,WACArhF,GAEAshF,GAAA1vF,UAAAwwF,QAAA,SAAA9vF,GACA,IAAAoR,EAAA9Q,KAAA2uF,cACA7zE,EAAA,IAAAyzE,GAIA,OAFA,QADA7uF,OAAA,IAAAA,EAAA,KAAAA,IACAob,EAAA/Z,KAAArB,GACAouF,GAAA,KAAAh9E,EAAA,KAAAgK,EAAA2zE,WACA3zE,GAEA4zE,GAAA1vF,UAAA8vF,kCAAA,SAAApvF,EAAAoR,EAAAgK,GACA,IAAA1N,EAAApN,KAAA2uF,cACA3qF,EAAA,IAAAuqF,GAIA,OAFA,QADAzzE,OAAA,IAAAA,EAAA,KAAAA,IACA9W,EAAAjD,KAAA+Z,GACAgzE,GAAAh9E,EAAA1D,EAAA1N,EAAAsE,EAAAyqF,WACAzqF,GAEA0qF,GAAA1vF,UAAAywF,YAAA,WACA,IAAA/vF,EAAA,IAAAsuF,GAAAhuF,MACA8Q,EAAApR,EAAA8tF,gBACA1yE,EAAA9a,KAAA2uF,cACAvhF,EAAA0N,EAAAyyE,WACA,UAAAngF,EAAA0N,EAAAyyE,WAAA7tF,IAAAyuF,MAAA,SAAmD,CACnD,IAAArzE,EAAA,KAAkB,OAAA1N,KAAAogF,iBAAA18E,GAAsCgK,EAAA1N,MAAA+gF,MACxDzuF,EAAAyuF,MAAA/gF,EACA,OAAA0N,MAAAqzE,MAAAzuF,GAEA,OAAAA,GAKAw/D,GAAAwuB,GACAvuB,GAAAyuB,GACAxuB,GAAA,WACA3L,IAAA,IAAA7+C,KAAA81E,GAAA91E,IAAA,GAAAA,GAAA,IAsCA,IAAA86E,GAAA,CACAC,aAAAV,GACAW,YAAA,SAAAlwF,GACA,SAAAA,EAAA,YACA,OAAAA,EAAAihE,SAAA,OAAAjhE,EACA,IAAAoR,EAAApR,EAAAi+E,oBAIA,YAHA,IAAA7sE,IAAA,oBAAApR,EAAA+0D,OAAAxsD,EAAA,OAAAA,EAAA,MAAAvJ,OAAA8N,KAAA9M,KAEAA,EAAA,QADAA,EAAA6pE,GAAAz4D,IACA,KAAApR,EAAAk5D,WAGA0sB,QAAA,SAAA5lF,EAAAoR,EAAAgK,GAEA,OADA8zE,GAAA99E,IAAA7I,EAAA,OACA4mF,GAAA,KAAAnvF,EAAAoR,GAAA,EAAAgK,IAEA25C,OAAA,SAAA/0D,EAAAoR,EAAAgK,GAEA,OADA8zE,GAAA99E,IAAA7I,EAAA,OACA4mF,GAAA,KAAAnvF,EAAAoR,GAAA,EAAAgK,IAEA+0E,oCAAA,SAAAnwF,EAAAoR,EAAAgK,EAAA1N,GAGA,OAFAwhF,GAAA9zE,IAAA7S,EAAA,QACA,MAAAvI,QAAA,IAAAA,EAAAi+E,sBAAA11E,EAAA,MACA4mF,GAAAnvF,EAAAoR,EAAAgK,GAAA,EAAA1N,IAEA0iF,uBAAA,SAAApwF,GAEA,OADAkvF,GAAAlvF,IAAAuI,EAAA,QACAvI,EAAAwoF,sBAAAyF,GAAA,WACAkB,GAAA,UAAAnvF,GAAA,aACAA,EAAAwoF,oBAAA,UAEK,IAEL6H,sBAAA,WACA,OAAAd,GAAA9nF,WAAA,EAAAnL,YAEAg0F,wBAAAtC,GACAuC,4BAAArC,GACAsC,UAAA,SAAAxwF,EAAAoR,GACA2iD,IAAAxrD,EAAA,OACA,IAAA6S,EAAA44C,GACAA,IAAA,EACA,IACA,OAAAo4B,GAAApsF,EAAAoR,GACK,QACL4iD,GAAA54C,EAAA4vE,GAAA,iBAGAyF,oBAgBA,SAAAzwF,EAAAoR,GAEA,OADA89E,GAAAlvF,IAAAuI,EAAA,6BACA,IAAAymF,GAAAhvF,GAAA,QAAAoR,IAAA,IAAAA,EAAAw0E,UAjBA8K,yBAAA,SAAA1wF,GACA,IAAAoR,EAAA4iD,GACAA,IAAA,EACA,IACAo4B,GAAApsF,GACK,SACLg0D,GAAA5iD,IAAA2iD,IAAAi3B,GAAA,iBAGAv0B,mDAAA,CACAk6B,OAAA,CAAA/2B,EAAAC,EAAAC,EAAAhB,EAAAE,yBAAAvB,EAAA8C,EAAA,SAAAv6D,GACAs4D,EAAAt4D,EAAAs6D,IACKgF,GAAAC,GAAAuQ,GAAA1W,MAOL,SAAAp5D,GACA,IAAAoR,EAAApR,EAAA4wF,yBAxpGA,SAAA5wF,GACA,wBAAAuN,+BAAA,SACA,IAAA6D,EAAA7D,+BACA,GAAA6D,EAAAy/E,aAAAz/E,EAAA0/E,cAAA,SACA,IACA,IAAA11E,EAAAhK,EAAA2/E,OAAA/wF,GACA07E,GAAAE,GAAA,SAAA57E,GACA,OAAAoR,EAAA4/E,kBAAA51E,EAAApb,KAEA27E,GAAAC,GAAA,SAAA57E,GACA,OAAAoR,EAAA6/E,qBAAA71E,EAAApb,KAEG,MAAA0N,MA6oGHwjF,CAAA1kF,EAAA,GAAgBxM,EAAA,CAChBmxF,cAAA,KACAC,qBAAArvB,GAAArL,uBACA26B,wBAAA,SAAArxF,GAEA,eADAA,EAAA6pE,GAAA7pE,IACA,KAAAA,EAAAk5D,WAEA03B,wBAAA,SAAA5wF,GACA,OAAAoR,IAAApR,GAAA,SAVA,CAaC,CACD4wF,wBAAAn3B,EACA63B,WAAA,EACAjmE,QAAA,SACAkmE,oBAAA,cAEA,IAAAC,GAAA,CACA36B,QAAAm5B,IAEAyB,GAAAD,IAAAxB,IAAAwB,GACAh2F,EAAAC,QAAAg2F,GAAA56B,SAAA46B,iCCzrKAj2F,EAAAC,QAAmBC,EAAQ,mCCH3B,SAAAg2F,GAWA1yF,OAAAC,eAAAxD,EAAA,cACA4H,OAAA,IAEA,IAAAqK,EAAA,KACApJ,GAAA,EACAusD,EAAA,EACAt3C,GAAA,EACA7H,GAAA,EACAupC,GAAA,EACAzuC,GAAA,EACA,SAAAoK,IACA,IAAAqkC,EAAA,CACA,IAAAj7C,EAAA0N,EAAA8uE,eACAhwE,EAAAwY,IAAAxY,GAAA,EACAmlF,EAAAx9E,EAAAnU,IAGA,SAAAygC,IACA,IAAAzgC,EAAA0N,EACA0D,EAAA1D,EAAA4lD,KACA,GAAA5lD,IAAA0D,EAAA1D,EAAA,SAAwB,CACxB,IAAA0N,EAAA1N,EAAAkkF,SACAlkF,EAAA0N,EAAAk4C,KAAAliD,EACAA,EAAAwgF,SAAAx2E,EAEApb,EAAAszD,KAAAtzD,EAAA4xF,SAAA,KACAx2E,EAAApb,EAAAs+E,SACAltE,EAAApR,EAAAw8E,eACAx8E,IAAA6xF,cACA,IAAA9yD,EAAA8xB,EACAiC,EAAAphD,EACAm/C,EAAA7wD,EACA0R,EAAAN,EACA,IACA,IAAA+jB,EAAA/Z,IACG,QACHy1C,EAAA9xB,EAAArtB,EAAAohD,EAEA,uBAAA39B,EAAA,GAAAA,EAAA,CACAmpD,SAAAnpD,EACA08D,cAAA7xF,EACAw8E,eAAAprE,EACAkiD,KAAA,KACAs+B,SAAA,MACG,OAAAlkF,IAAAynB,EAAAm+B,KAAAn+B,EAAAy8D,SAAAz8D,MAA0C,CAC7C/Z,EAAA,KACApb,EAAA0N,EACA,GACA,GAAA1N,EAAAw8E,gBAAAprE,EAAA,CACAgK,EAAApb,EACA,MAEAA,IAAAszD,WACKtzD,IAAA0N,GACL,OAAA0N,IAAA1N,EAAA0N,IAAA1N,MAAAynB,EAAAve,MACAxF,EAAAgK,EAAAw2E,UACAt+B,KAAAl4C,EAAAw2E,SAAAz8D,EACAA,EAAAm+B,KAAAl4C,EACA+Z,EAAAy8D,SAAAxgF,GAGA,SAAA+Y,IACA,QAAA5Q,GAAA,OAAA7L,GAAA,IAAAA,EAAAmkF,cAAA,CACA52C,GAAA,EACA,IACA,GAAAxa,UAAa,OAAA/yB,GAAA,IAAAA,EAAAmkF,eACR,QACL52C,GAAA,SAAAvtC,EAAAkJ,IAAApK,GAAA,IAIA,SAAA2H,EAAAnU,GACAi7C,GAAA,EACA,IAAA7pC,EAAA9M,EACAA,EAAAtE,EACA,IACA,GAAAA,EAAA,KAAiB,OAAA0N,GAAY,CAC7B,IAAA0N,EAAA3f,EAAAmxF,eACA,KAAAl/E,EAAA8uE,gBAAAphE,GAEO,MADP,GAAAqlB,UAAe,OAAA/yB,KAAA8uE,gBAAAphE,QAEV,UAAA1N,EACL,GAAA+yB,UAAa,OAAA/yB,IAAA8J,KAEV,QACHyjC,GAAA,EAAA32C,EAAA8M,EAAA,OAAA1D,EAAAkJ,IAAApK,GAAA,EAAA2d,KAGA,IAKA8mC,EACAK,EANA/oD,EAAA6nD,KACA5nD,EAAA,oBAAAuxE,2BAAA,EACAtpB,EAAA,oBAAAwpB,+BAAA,EACAtrE,EAAA,oBAAA7G,iDAAA,EACAkY,EAAA,oBAAAnX,+CAAA,EAGA,SAAA0oD,EAAAvxD,GACAixD,EAAAtiD,EAAA,SAAAyC,GACAq/C,EAAAa,GACAtxD,EAAAoR,KAEAkgD,EAAA9oD,EAAA,WACAwX,EAAAixC,GACAjxD,EAAAvE,EAAAmxF,iBACG,KAEH,qBAAAkF,aAAA,oBAAAA,YAAA30B,IAAA,CACA,IAAAxL,EAAAmgC,YACAr2F,EAAAmxF,aAAA,WACA,OAAAj7B,EAAAwL,YAEC1hE,EAAAmxF,aAAA,WACD,OAAArkF,EAAA40D,OAEA,IAAAw0B,EACA3sE,EACAxN,EACAo6C,EAAA,KAEA,GADA,qBAAAlrD,OAAAkrD,EAAAlrD,OAAA,qBAAAgrF,IAAA9/B,EAAA8/B,GACA9/B,KAAAmgC,WAAA,CACA,IAAA//B,EAAAJ,EAAAmgC,WACAJ,EAAA3/B,EAAA,GACAhtC,EAAAgtC,EAAA,GACAx6C,EAAAw6C,EAAA,GACAv2D,EAAAmxF,aAAA56B,EAAA,QACC,wBAAAtrD,QAAA,oBAAAsrF,eAAA,CACD,IAAA9/B,EAAA,KACAC,EAAA,SAAAnyD,GACA,UAAAkyD,EAAA,IACAA,EAAAlyD,GACO,QACPkyD,EAAA,OAGAy/B,EAAA,SAAA3xF,GACA,OAAAkyD,EAAA6nB,WAAA4X,EAAA,EAAA3xF,IAAAkyD,EAAAlyD,EAAA+5E,WAAA5nB,EAAA,QAEAntC,EAAA,WACAktC,EAAA,MAEA16C,EAAA,WACA,cAEC,CACD,qBAAAhK,UAAA,oBAAAmB,GAAAnB,QAAAC,MAAA,+JAAAuS,GAAAxS,QAAAC,MAAA,2IACA,IAAA2kD,EAAA,KACAC,GAAA,EACAG,GAAA,EACAG,GAAA,EACAC,GAAA,EACAC,EAAA,EACAI,EAAA,GACAE,EAAA,GACA37C,EAAA,WACA,OAAAq7C,GAAAp3D,EAAAmxF,gBAEA,IAAAx5B,EAAA,IAAA4+B,eACA9+B,EAAAE,EAAA6+B,MACA7+B,EAAA8+B,MAAA5rF,UAAA,WACA+rD,GAAA,EACA,IAAAryD,EAAAoyD,EACAhhD,EAAAohD,EACAJ,EAAA,KACAI,GAAA,EACA,IAAAp3C,EAAA3f,EAAAmxF,eACA7tD,GAAA,EACA,MAAA8zB,EAAAz3C,EAAA,WAAAhK,MAAAgK,GAIA,OAHAu3C,OAAA,EAAApB,EAAAsC,IACAzB,EAAApyD,OACAwyD,EAAAphD,GAHA2tB,GAAA,EAMA,UAAA/+B,EAAA,CACA4yD,GAAA,EACA,IACA5yD,EAAA++B,GACO,QACP6zB,GAAA,KAIA,IAAAiB,EAAA,SAAAA,EAAA7zD,GACA,UAAAoyD,EAAA,CACAb,EAAAsC,GACA,IAAAziD,EAAApR,EAAA6yD,EAAAM,EACA/hD,EAAA+hD,GAAAF,EAAAE,GAAA,EAAA/hD,MAAA,GAAA+hD,EAAA/hD,EAAA6hD,IAAA7hD,GAAA6hD,EAAA7hD,EACAyhD,EAAA7yD,EAAAmzD,EACAd,OAAA,EAAAa,EAAAjtD,iBAAA,SACK0sD,GAAA,GAELg/B,EAAA,SAAA3xF,EAAAoR,GACAghD,EAAApyD,EACAwyD,EAAAphD,EACAwhD,GAAA,EAAAxhD,EAAA8hD,EAAAjtD,iBAAA,GAAA0sD,OAAA,EAAApB,EAAAsC,KAEA7uC,EAAA,WACAotC,EAAA,KACAC,GAAA,EACAG,GAAA,GAGA/2D,EAAAqwF,2BAAA,EACArwF,EAAAswF,8BAAA,EACAtwF,EAAAyvF,wBAAA,EACAzvF,EAAAwwF,sBAAA,EACAxwF,EAAAuwF,qBAAA,EACAvwF,EAAAwvF,yBAAA,SAAAjrF,EAAAoR,GACA,OAAApR,GACA,OACA,OACA,OACA,OACA,OACA,MACA,QACAA,EAAA,EAEA,IAAAob,EAAAy1C,EACA9xB,EAAAxlB,EACAs3C,EAAA7wD,EACAuZ,EAAA9d,EAAAmxF,eACA,IACA,OAAAx7E,IACG,QACHy/C,EAAAz1C,EAAA7B,EAAAwlB,EAAA5U,MAGA1uB,EAAA02F,cAAA,SAAAnyF,GACA,OAAA6wD,GACA,OACA,OACA,OACA,IAAAz/C,EAAA,EACA,MACA,QACAA,EAAAy/C,EAEA,IAAAz1C,EAAAy1C,EACA9xB,EAAAxlB,EACAs3C,EAAAz/C,EACAmI,EAAA9d,EAAAmxF,eACA,IACA,OAAA5sF,IACG,QACH6wD,EAAAz1C,EAAA7B,EAAAwlB,EAAA5U,MAGA1uB,EAAA0+E,0BAAA,SAAAn6E,EAAAoR,GACA,IAAAgK,GAAA,IAAA7B,IAAA9d,EAAAmxF,eACA,qBAAAx7E,GAAA,OAAAA,GAAA,kBAAAA,EAAA+7E,QAAA/7E,EAAAgK,EAAAhK,EAAA+7E,aAA8F,OAAAt8B,GAC9F,OACAz/C,EAAAgK,GAAA,EACA,MACA,OACAhK,EAAAgK,EAAA,IACA,MACA,OACAhK,EAAAgK,EAAA,WACA,MACA,OACAhK,EAAAgK,EAAA,IACA,MACA,QACAhK,EAAAgK,EAAA,IASA,GAPApb,EAAA,CACAs+E,SAAAt+E,EACA6xF,cAAAhhC,EACA2rB,eAAAprE,EACAkiD,KAAA,KACAs+B,SAAA,MAEA,OAAAlkF,IAAA1N,EAAAszD,KAAAtzD,EAAA4xF,SAAA5xF,EAAA4W,QAAmD,CACnDwE,EAAA,KACA,IAAA2jB,EAAArxB,EACA,GACA,GAAAqxB,EAAAy9C,eAAAprE,EAAA,CACAgK,EAAA2jB,EACA,MAEAA,IAAAu0B,WACKv0B,IAAArxB,GACL,OAAA0N,IAAA1N,EAAA0N,IAAA1N,MAAA1N,EAAA4W,MACAxF,EAAAgK,EAAAw2E,UACAt+B,KAAAl4C,EAAAw2E,SAAA5xF,EACAA,EAAAszD,KAAAl4C,EACApb,EAAA4xF,SAAAxgF,EAEA,OAAApR,GAEAvE,EAAA4+E,wBAAA,SAAAr6E,GACA,IAAAoR,EAAApR,EAAAszD,KACA,UAAAliD,EAAA,CACA,GAAAA,IAAApR,EAAA0N,EAAA,SAA0B,CAC1B1N,IAAA0N,MAAA0D,GACA,IAAAgK,EAAApb,EAAA4xF,SACAx2E,EAAAk4C,KAAAliD,EACAA,EAAAwgF,SAAAx2E,EAEApb,EAAAszD,KAAAtzD,EAAA4xF,SAAA,OAGAn2F,EAAA22F,sBAAA,SAAApyF,GACA,IAAAoR,EAAAy/C,EACA,kBACA,IAAAz1C,EAAAy1C,EACA9xB,EAAAxlB,EACAs3C,EAAAz/C,EACAmI,EAAA9d,EAAAmxF,eACA,IACA,OAAA5sF,EAAAyH,MAAAnH,KAAAhE,WACK,QACLu0D,EAAAz1C,EAAA7B,EAAAwlB,EAAA5U,OAIA1uB,EAAAowF,iCAAA,WACA,OAAAh7B,GAEAp1D,EAAAiyF,qBAAA,WACA,OAAAppF,IAAA,OAAAoJ,KAAA8uE,eAAA9qE,GAAA8F,MAEA/b,EAAA42F,2BAAA,WACA,OAAA3kF,GAAAkJ,KAEAnb,EAAA62F,wBAAA,aACA72F,EAAA82F,8BAAA,WACA,OAAA7kF,qCCjVA,IAAAmjD,EAGAA,EAAA,WACA,OAAAvwD,KADA,GAGA,IAEAuwD,KAAA,IAAA2hC,SAAA,iBACC,MAAAluF,GAED,kBAAAoC,SAAAmqD,EAAAnqD,QAOAlL,EAAAC,QAAAo1D,gCCTA,IAAA4hC,EAA2B/2F,EAAQ,IACnC,SAAAg3F,KACA,SAAAC,KACAA,EAAAC,kBAAAF,EACAl3F,EAAAC,QAAA,WACA,SAAAo3F,EAAAl0F,EAAAm0F,EAAAC,EAAAllB,EAAAmlB,EAAAC,GACA,GAAAA,IAAAR,EAAA,CAIA,IAAAhxF,EAAA,IAAA0D,MAAA,mLAEA,MADA1D,EAAAsvD,KAAA,sBACAtvD,GAIA,SAAAyxF,IACA,OAAAL,EAFAA,EAAAM,WAAAN,EAOA,IAAAO,EAAA,CACArvD,MAAA8uD,EACAQ,OAAAR,EACAS,KAAAT,EACAnnF,KAAAmnF,EACArnF,OAAAqnF,EACApnF,OAAAonF,EACA/2F,OAAA+2F,EACAU,OAAAV,EACAW,IAAAX,EACAY,QAAAP,EACA5gB,QAAAugB,EACA/W,YAAA+W,EACAa,WAAAR,EACAxiB,KAAAmiB,EACAc,SAAAT,EACAU,MAAAV,EACAW,UAAAX,EACAY,MAAAZ,EACAa,MAAAb,EACAc,eAAArB,EACAC,kBAAAF,GAGA,OADAU,EAAAa,UAAAb,EACAA,iCC7CA53F,EAAAC,QADA","file":"static/js/2.8600f57a.chunk.js","sourcesContent":["'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}","/**\r\n * Created by j_bleach on 2018/8/25.\r\n */\nfunction audioBufferToWav(buffer) {\n  var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var numChannels = buffer.numberOfChannels;\n  var sampleRate = opt.sampleRate || buffer.sampleRate;\n  var format = opt.float32 ? 3 : 1;\n  var bitDepth = format === 3 ? 32 : 16;\n  var result = void 0;\n  if (numChannels === 2) {\n    result = interleave(buffer.getChannelData(0), buffer.getChannelData(1));\n  } else {\n    result = buffer.getChannelData(0);\n  }\n  return encodeWAV(result, format, sampleRate, numChannels, bitDepth);\n}\nfunction encodeWAV(samples, format, sampleRate, numChannels, bitDepth) {\n  var bytesPerSample = bitDepth / 8;\n  var blockAlign = numChannels * bytesPerSample;\n  var buffer = new ArrayBuffer(44 + samples.length * bytesPerSample);\n  var view = new DataView(buffer);\n\n  /* RIFF identifier */\n  writeString(view, 0, \"RIFF\");\n  /* RIFF chunk length */\n  view.setUint32(4, 36 + samples.length * bytesPerSample, true);\n  /* RIFF type */\n  writeString(view, 8, \"WAVE\");\n  /* format chunk identifier */\n  writeString(view, 12, \"fmt \");\n  /* format chunk length */\n  view.setUint32(16, 16, true);\n  /* sample format (raw) */\n  view.setUint16(20, format, true);\n  /* channel count */\n  view.setUint16(22, numChannels, true);\n  /* sample rate */\n  view.setUint32(24, sampleRate, true);\n  /* byte rate (sample rate * block align) */\n  view.setUint32(28, sampleRate * blockAlign, true);\n  /* block align (channel count * bytes per sample) */\n  view.setUint16(32, blockAlign, true);\n  /* bits per sample */\n  view.setUint16(34, bitDepth, true);\n  /* data chunk identifier */\n  writeString(view, 36, \"data\");\n  /* data chunk length */\n  view.setUint32(40, samples.length * bytesPerSample, true);\n  if (format === 1) {\n    // Raw PCM\n    floatTo16BitPCM(view, 44, samples);\n  } else {\n    writeFloat32(view, 44, samples);\n  }\n  return buffer;\n}\nfunction interleave(inputL, inputR) {\n  var length = inputL.length + inputR.length;\n  var result = new Float32Array(length);\n  var index = 0;\n  var inputIndex = 0;\n  while (index < length) {\n    result[index++] = inputL[inputIndex];\n    result[index++] = inputR[inputIndex];\n    inputIndex++;\n  }\n  return result;\n}\nfunction writeFloat32(output, offset, input) {\n  for (var i = 0; i < input.length; i++, offset += 4) {\n    output.setFloat32(offset, input[i], true);\n  }\n}\nfunction floatTo16BitPCM(output, offset, input) {\n  for (var i = 0; i < input.length; i++, offset += 2) {\n    var s = Math.max(-1, Math.min(1, input[i]));\n    output.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n  }\n}\nfunction writeString(view, offset, string) {\n  for (var i = 0; i < string.length; i++) {\n    view.setUint8(offset + i, string.charCodeAt(i));\n  }\n}\nexport default audioBufferToWav;","var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/**\r\n * @author j_bleach 2018/8/18\r\n * @describe 媒体记录（包含开始，暂停，停止等媒体流及回调操作）\r\n * @param Target 被装饰类（AudioAnalyser）\r\n */\nimport convertWav from \"./audioConvertWav\";\nimport WebWorker from \"./mp3worker.js\";\nvar MediaRecorderFn = function MediaRecorderFn(Target) {\n  var _class, _temp;\n  var constraints = {\n    audio: true\n  };\n  var mp3Worker = new Worker(WebWorker);\n  return _temp = _class = function (_Target) {\n    _inherits(MediaRecorderClass, _Target);\n\n    // 音频上下文\n\n    // 音频信息存储对象\n    function MediaRecorderClass(props) {\n      _classCallCheck(this, MediaRecorderClass);\n      var _this = _possibleConstructorReturn(this, (MediaRecorderClass.__proto__ || Object.getPrototypeOf(MediaRecorderClass)).call(this, props));\n      _this.startAudio = function () {\n        var recorder = MediaRecorderClass.mediaRecorder;\n        if (!recorder || recorder && recorder.state === \"inactive\") {\n          navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n            _this.recordAudio(stream);\n          }).catch(function (err) {\n            MediaRecorderClass.checkAndExecFn(_this.props.errorCallback, err);\n            // throw new Error(\"getUserMedia failed:\", err);\n          });\n\n          return false;\n        }\n        if (recorder && recorder.state === \"paused\") {\n          MediaRecorderClass.resumeAudio();\n        }\n      };\n      _this.pauseAudio = function () {\n        var recorder = MediaRecorderClass.mediaRecorder;\n        if (recorder && recorder.state === \"recording\") {\n          recorder.pause();\n          recorder.onpause = function () {\n            MediaRecorderClass.checkAndExecFn(_this.props.pauseCallback);\n          };\n          MediaRecorderClass.audioCtx.suspend();\n        }\n      };\n      _this.stopAudio = function () {\n        var _this$props = _this.props,\n          audioType = _this$props.audioType,\n          audioOptions = _this$props.audioOptions;\n        var recorder = MediaRecorderClass.mediaRecorder;\n        if (recorder && [\"recording\", \"paused\"].includes(recorder.state)) {\n          recorder.stop();\n          recorder.onstop = function () {\n            MediaRecorderClass.audioStream2Blob(audioType, audioOptions, _this.props.stopCallback);\n            MediaRecorderClass.audioChunk = []; // 结束后，清空音频存储\n          };\n\n          MediaRecorderClass.audioCtx.suspend();\n          _this.initCanvas();\n        }\n      };\n      MediaRecorderClass.compatibility();\n      _this.analyser = MediaRecorderClass.audioCtx.createAnalyser();\n      return _this;\n    }\n\n    /**\r\n     * @author j_bleach 2018/08/02 17:06\r\n     * @describe 浏览器navigator.mediaDevices兼容性处理\r\n     */\n    // 媒体记录对象\n\n    _createClass(MediaRecorderClass, [{\n      key: \"recordAudio\",\n      /**\r\n       * @author j_bleach 2018/8/18\r\n       * @describe mediaRecorder音频记录\r\n       * @param stream: binary data 音频流\r\n       */\n      value: function recordAudio(stream) {\n        var _this2 = this;\n        var _props = this.props,\n          audioBitsPerSecond = _props.audioBitsPerSecond,\n          mimeType = _props.mimeType,\n          timeslice = _props.timeslice;\n        MediaRecorderClass.mediaRecorder = new MediaRecorder(stream, {\n          audioBitsPerSecond: audioBitsPerSecond,\n          mimeType: mimeType\n        });\n        MediaRecorderClass.mediaRecorder.ondataavailable = function (event) {\n          MediaRecorderClass.checkAndExecFn(_this2.props.onRecordCallback, event.data);\n          MediaRecorderClass.audioChunk.push(event.data);\n        };\n        MediaRecorderClass.audioCtx.resume();\n        MediaRecorderClass.mediaRecorder.start(timeslice);\n        MediaRecorderClass.mediaRecorder.onstart = function (e) {\n          MediaRecorderClass.checkAndExecFn(_this2.props.startCallback, e);\n        };\n        MediaRecorderClass.mediaRecorder.onresume = function (e) {\n          MediaRecorderClass.checkAndExecFn(_this2.props.startCallback, e);\n        };\n        MediaRecorderClass.mediaRecorder.onerror = function (e) {\n          MediaRecorderClass.checkAndExecFn(_this2.props.errorCallback, e);\n        };\n        var source = MediaRecorderClass.audioCtx.createMediaStreamSource(stream);\n        source.connect(this.analyser);\n        this.renderCurve(this.analyser);\n      }\n\n      /**\r\n       * @author j_bleach 2018/8/19\r\n       * @describe 恢复录音\r\n       */\n    }], [{\n      key: \"compatibility\",\n      value: function compatibility() {\n        var _this3 = this;\n        var promisifiedOldGUM = function promisifiedOldGUM(constraints) {\n          // First get ahold of getUserMedia, if present\n          var getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n\n          // Some browsers just don't implement it - return a rejected promise with an error\n          // to keep a consistent interface\n          if (!getUserMedia) {\n            MediaRecorderClass.checkAndExecFn(_this3.props.errorCallback);\n            return Promise.reject(new Error(\"getUserMedia is not implemented in this browser\"));\n          }\n          // Otherwise, wrap the call to the old navigator.getUserMedia with a Promise\n          return new Promise(function (resolve, reject) {\n            getUserMedia.call(navigator, constraints, resolve, reject);\n          });\n        };\n\n        // Older browsers might not implement mediaDevices at all, so we set an empty object first\n        if (navigator.mediaDevices === undefined) {\n          navigator.mediaDevices = {};\n        }\n\n        // Some browsers partially implement mediaDevices. We can't just assign an object\n        // with getUserMedia as it would overwrite existing properties.\n        // Here, we will just add the getUserMedia property if it's missing.\n        if (navigator.mediaDevices.getUserMedia === undefined) {\n          navigator.mediaDevices.getUserMedia = promisifiedOldGUM;\n        }\n      }\n\n      /**\r\n       * @author j_bleach 2018/8/19\r\n       * @describe 验证函数，如果存在即执行\r\n       * @param fn: function 被验证函数\r\n       * @param e: object 事件对象 event object\r\n       */\n    }, {\n      key: \"checkAndExecFn\",\n      value: function checkAndExecFn(fn, e) {\n        typeof fn === \"function\" && fn(e);\n      }\n\n      /**\r\n       * @author j_bleach 2018/8/19\r\n       * @describe 音频流转blob对象\r\n       * @param type: string 音频的mime-type\r\n       * @param cb: function 录音停止回调\r\n       */\n    }, {\n      key: \"audioStream2Blob\",\n      value: function audioStream2Blob(type, audioOptions, cb) {\n        var wavBlob = null;\n        var chunk = MediaRecorderClass.audioChunk;\n        var audioWav = function audioWav() {\n          var fr = new FileReader();\n          fr.readAsArrayBuffer(new Blob(chunk, {\n            type: type\n          }));\n          var frOnload = function frOnload(e) {\n            var buffer = e.target.result;\n            MediaRecorderClass.audioCtx.decodeAudioData(buffer).then(function (data) {\n              wavBlob = new Blob([new DataView(convertWav(data, audioOptions))], {\n                type: \"audio/wav\"\n              });\n              MediaRecorderClass.checkAndExecFn(cb, wavBlob);\n            });\n          };\n          fr.onload = frOnload;\n        };\n        var audioMp3 = function audioMp3() {\n          var fr = new FileReader();\n          fr.readAsArrayBuffer(new Blob(chunk, {\n            type: \"audio/wav\"\n          }));\n          var frOnload = function frOnload(e) {\n            var buffer = e.target.result;\n            MediaRecorderClass.audioCtx.decodeAudioData(buffer).then(function (data) {\n              var wavBuf = convertWav(data, audioOptions);\n              mp3Worker.postMessage({\n                cmd: \"init\",\n                config: {\n                  bitRate: 128\n                }\n              });\n              mp3Worker.postMessage({\n                cmd: \"encode\",\n                rawInput: wavBuf\n              });\n              mp3Worker.postMessage({\n                cmd: \"finish\"\n              });\n              mp3Worker.onmessage = function (e) {\n                if (e.data.cmd == \"end\") {\n                  var mp3Blob = new Blob(e.data.buf, {\n                    type: type\n                  });\n                  MediaRecorderClass.checkAndExecFn(cb, mp3Blob);\n                }\n              };\n            });\n          };\n          fr.onload = frOnload;\n        };\n        switch (type) {\n          case \"audio/webm\":\n            MediaRecorderClass.checkAndExecFn(cb, new Blob(chunk, {\n              type: type\n            }));\n            break;\n          case \"audio/wav\":\n            audioWav();\n            break;\n          case \"audio/mp3\":\n            audioMp3();\n            break;\n          default:\n            return void 0;\n        }\n      }\n\n      /**\r\n       * @author j_bleach 2018/8/18\r\n       * @describe 开始录音\r\n       */\n\n      /**\r\n       * @author j_bleach 2018/8/19\r\n       * @describe 暂停录音\r\n       */\n\n      /**\r\n       * @author j_bleach 2018/8/18\r\n       * @describe 停止录音\r\n       */\n    }, {\n      key: \"resumeAudio\",\n      value: function resumeAudio() {\n        MediaRecorderClass.audioCtx.resume();\n        MediaRecorderClass.mediaRecorder.resume();\n      }\n    }]);\n    return MediaRecorderClass;\n  }(Target), _class.audioChunk = [], _class.mediaRecorder = null, _class.audioCtx = new (window.AudioContext || window.webkitAudioContext)(), _temp;\n};\nexport default MediaRecorderFn;","var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/**\r\n * Created by j_bleach on 2018/8/6.\r\n */\nimport React from \"react\";\nvar RenderCanvas = function RenderCanvas(Target) {\n  var _class, _temp2;\n  return _temp2 = _class = function (_Target) {\n    _inherits(RenderCanvasClass, _Target);\n    function RenderCanvasClass() {\n      var _ref;\n      var _temp, _this, _ret;\n      _classCallCheck(this, RenderCanvasClass);\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = RenderCanvasClass.__proto__ || Object.getPrototypeOf(RenderCanvasClass)).call.apply(_ref, [this].concat(args))), _this), _this.renderCurve = function () {\n        var _this$props = _this.props,\n          height = _this$props.height,\n          width = _this$props.width;\n        RenderCanvasClass.animationId = window.requestAnimationFrame(_this.renderCurve); // 定时动画\n        var bufferLength = _this.analyser.fftSize; // 默认为2048\n        var dataArray = new Uint8Array(bufferLength);\n        _this.analyser.getByteTimeDomainData(dataArray); // 将音频信息存储在长度为2048（默认）的类型数组（dataArray）\n        _this.configCanvas();\n        var sliceWidth = Number(width) / bufferLength;\n        var x = 0;\n        for (var i = 0; i < bufferLength; i++) {\n          var v = dataArray[i] / 128.0;\n          var y = v * height / 2;\n          RenderCanvasClass.canvasCtx[i === 0 ? \"moveTo\" : \"lineTo\"](x, y);\n          x += sliceWidth;\n        }\n        RenderCanvasClass.canvasCtx.lineTo(width, height / 2);\n        RenderCanvasClass.canvasCtx.stroke();\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    } // react ref\n    // canvas 上下文\n\n    _createClass(RenderCanvasClass, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        this.initCanvas();\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        window.cancelAnimationFrame(RenderCanvasClass.animationId); //组件销毁前，注销定时动画\n      }\n\n      /**\r\n       * @author j_bleach 2018/8/18\r\n       * @describe canvas 配置\r\n       */\n    }, {\n      key: \"configCanvas\",\n      value: function configCanvas() {\n        var _props = this.props,\n          height = _props.height,\n          width = _props.width,\n          backgroundColor = _props.backgroundColor,\n          strokeColor = _props.strokeColor;\n        var canvas = RenderCanvasClass.canvasRef.current;\n        RenderCanvasClass.canvasCtx = canvas.getContext(\"2d\");\n        RenderCanvasClass.canvasCtx.clearRect(0, 0, width, height);\n        RenderCanvasClass.canvasCtx.fillStyle = backgroundColor;\n        RenderCanvasClass.canvasCtx.fillRect(0, 0, width, height);\n        RenderCanvasClass.canvasCtx.lineWidth = 2;\n        RenderCanvasClass.canvasCtx.strokeStyle = strokeColor;\n        RenderCanvasClass.canvasCtx.beginPath();\n      }\n\n      /**\r\n       * @author j_bleach 2018/8/18\r\n       * @describe 画布初始化,停止动画\r\n       */\n    }, {\n      key: \"initCanvas\",\n      value: function initCanvas() {\n        window.cancelAnimationFrame(RenderCanvasClass.animationId);\n        var _props2 = this.props,\n          height = _props2.height,\n          width = _props2.width;\n        this.configCanvas();\n        RenderCanvasClass.canvasCtx.moveTo(0, height / 2);\n        RenderCanvasClass.canvasCtx.lineTo(width, height / 2);\n        RenderCanvasClass.canvasCtx.stroke();\n      }\n\n      /**\r\n       * @author j_bleach 2018/8/18\r\n       * @describe 动态绘制音频曲线\r\n       */\n    }, {\n      key: \"renderCanvas\",\n      /**\r\n       * @author j_bleach 2018/8/18\r\n       * @describe 初始化渲染canvas节点\r\n       */\n      value: function renderCanvas() {\n        var _props3 = this.props,\n          height = _props3.height,\n          width = _props3.width;\n        return React.createElement(\"canvas\", {\n          ref: RenderCanvasClass.canvasRef,\n          height: height,\n          width: width,\n          style: {\n            width: width,\n            height: height\n          }\n        });\n      }\n    }]);\n    return RenderCanvasClass;\n  }(Target), _class.canvasRef = React.createRef(), _class.canvasCtx = null, _class.animationId = null, _temp2;\n};\nexport default RenderCanvas;","var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _class;\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/**\r\n * Created by j_bleach on 2018/8/1.\r\n */\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport MediaRecorder from \"./MediaRecorder\";\nimport RenderCanvas from \"./RenderCanvas\";\n// import \"./index.css\";\n\nvar AudioAnalyser = MediaRecorder(_class = RenderCanvas(_class = function (_Component) {\n  _inherits(AudioAnalyser, _Component);\n  function AudioAnalyser() {\n    _classCallCheck(this, AudioAnalyser);\n    return _possibleConstructorReturn(this, (AudioAnalyser.__proto__ || Object.getPrototypeOf(AudioAnalyser)).apply(this, arguments));\n  }\n  _createClass(AudioAnalyser, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.status !== prevProps.status) {\n        var event = {\n          inactive: this.stopAudio,\n          recording: this.startAudio,\n          paused: this.pauseAudio\n        }[this.props.status];\n        event && event();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props = this.props,\n        children = _props.children,\n        className = _props.className,\n        audioSrc = _props.audioSrc;\n      return React.createElement(\"div\", {\n        className: className\n      }, React.createElement(\"div\", null, this.renderCanvas()), children, audioSrc && React.createElement(\"div\", null, React.createElement(\"audio\", {\n        controls: true,\n        src: audioSrc\n      })));\n    }\n  }]);\n  return AudioAnalyser;\n}(Component)) || _class) || _class;\nAudioAnalyser.defaultProps = {\n  status: \"\",\n  audioSrc: \"\",\n  backgroundColor: \"rgba(0, 0, 0, 1)\",\n  strokeColor: \"#ffffff\",\n  className: \"audioContainer\",\n  audioBitsPerSecond: 128000,\n  mimeType: \"audio/webm\",\n  audioType: \"audio/webm\",\n  audioOptions: {},\n  width: 500,\n  height: 100\n};\nAudioAnalyser.propTypes = {\n  status: PropTypes.string,\n  audioSrc: PropTypes.string,\n  backgroundColor: PropTypes.string,\n  strokeColor: PropTypes.string,\n  className: PropTypes.string,\n  audioBitsPerSecond: PropTypes.number,\n  audioType: PropTypes.string,\n  audioOptions: PropTypes.object,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  timeslice: PropTypes.number,\n  startCallback: PropTypes.func,\n  pauseCallback: PropTypes.func,\n  stopCallback: PropTypes.func,\n  onRecordCallback: PropTypes.func\n};\nexport default AudioAnalyser;","/**\r\n * Created by j_bleach on 2018/8/1.\r\n */\nimport AudioAnalyser from './AudioAnalyser';\nexport default AudioAnalyser;","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\nfunction toObject(val) {\n  if (val === null || val === undefined) {\n    throw new TypeError('Object.assign cannot be called with null or undefined');\n  }\n  return Object(val);\n}\nfunction shouldUseNative() {\n  try {\n    if (!Object.assign) {\n      return false;\n    }\n\n    // Detect buggy property enumeration order in older V8 versions.\n\n    // https://bugs.chromium.org/p/v8/issues/detail?id=4118\n    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers\n    test1[5] = 'de';\n    if (Object.getOwnPropertyNames(test1)[0] === '5') {\n      return false;\n    }\n\n    // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n    var test2 = {};\n    for (var i = 0; i < 10; i++) {\n      test2['_' + String.fromCharCode(i)] = i;\n    }\n    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n      return test2[n];\n    });\n    if (order2.join('') !== '0123456789') {\n      return false;\n    }\n\n    // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n    var test3 = {};\n    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n      test3[letter] = letter;\n    });\n    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {\n      return false;\n    }\n    return true;\n  } catch (err) {\n    // We don't expect any of the above to throw, but better to be safe.\n    return false;\n  }\n}\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n  var from;\n  var to = toObject(target);\n  var symbols;\n  for (var s = 1; s < arguments.length; s++) {\n    from = Object(arguments[s]);\n    for (var key in from) {\n      if (hasOwnProperty.call(from, key)) {\n        to[key] = from[key];\n      }\n    }\n    if (getOwnPropertySymbols) {\n      symbols = getOwnPropertySymbols(from);\n      for (var i = 0; i < symbols.length; i++) {\n        if (propIsEnumerable.call(from, symbols[i])) {\n          to[symbols[i]] = from[symbols[i]];\n        }\n      }\n    }\n  }\n  return to;\n};","'use strict';\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {\n    return;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    // This branch is unreachable because this function is only called\n    // in production, but the condition is true only in development.\n    // Therefore if the branch is still here, dead code elimination wasn't\n    // properly applied.\n    // Don't change the message. React DevTools relies on it. Also make sure\n    // this message doesn't occur elsewhere in this function, or it will cause\n    // a false positive.\n    throw new Error('^_^');\n  }\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\nif (process.env.NODE_ENV === 'production') {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = require('./cjs/react-dom.production.min.js');\n} else {\n  module.exports = require('./cjs/react-dom.development.js');\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","/**\r\n * Created by j_bleach on 2018/9/11.\r\n */var workercode = function workercode() {\n  /*eslint-disable*/function lamejs() {\n    function new_byte(count) {\n      return new Int8Array(count);\n    }\n    function new_short(count) {\n      return new Int16Array(count);\n    }\n    function new_int(count) {\n      return new Int32Array(count);\n    }\n    function new_float(count) {\n      return new Float32Array(count);\n    }\n    function new_double(count) {\n      return new Float64Array(count);\n    }\n    function new_float_n(args) {\n      if (args.length == 1) {\n        return new_float(args[0]);\n      }\n      var sz = args[0];\n      args = args.slice(1);\n      var A = [];\n      for (var i = 0; i < sz; i++) {\n        A.push(new_float_n(args));\n      }\n      return A;\n    }\n    function new_int_n(args) {\n      if (args.length == 1) {\n        return new_int(args[0]);\n      }\n      var sz = args[0];\n      args = args.slice(1);\n      var A = [];\n      for (var i = 0; i < sz; i++) {\n        A.push(new_int_n(args));\n      }\n      return A;\n    }\n    function new_short_n(args) {\n      if (args.length == 1) {\n        return new_short(args[0]);\n      }\n      var sz = args[0];\n      args = args.slice(1);\n      var A = [];\n      for (var i = 0; i < sz; i++) {\n        A.push(new_short_n(args));\n      }\n      return A;\n    }\n    function new_array_n(args) {\n      if (args.length == 1) {\n        return new Array(args[0]);\n      }\n      var sz = args[0];\n      args = args.slice(1);\n      var A = [];\n      for (var i = 0; i < sz; i++) {\n        A.push(new_array_n(args));\n      }\n      return A;\n    }\n    var Arrays = {};\n    Arrays.fill = function (a, fromIndex, toIndex, val) {\n      if (arguments.length == 2) {\n        for (var i = 0; i < a.length; i++) {\n          a[i] = arguments[1];\n        }\n      } else {\n        for (var i = fromIndex; i < toIndex; i++) {\n          a[i] = val;\n        }\n      }\n    };\n    var System = {};\n    System.arraycopy = function (src, srcPos, dest, destPos, length) {\n      var srcEnd = srcPos + length;\n      while (srcPos < srcEnd) {\n        dest[destPos++] = src[srcPos++];\n      }\n    };\n    var Util = {};\n    Util.SQRT2 = 1.41421356237309504880;\n    Util.FAST_LOG10 = function (x) {\n      return Math.log10(x);\n    };\n    Util.FAST_LOG10_X = function (x, y) {\n      return Math.log10(x) * y;\n    };\n    function ShortBlock(ordinal) {\n      this.ordinal = ordinal;\n    } /**\r\n      * LAME may use them, even different block types for L/R.\r\n      */\n    ShortBlock.short_block_allowed = new ShortBlock(0); /**\r\n                                                        * LAME may use them, but always same block types in L/R.\r\n                                                        */\n    ShortBlock.short_block_coupled = new ShortBlock(1); /**\r\n                                                        * LAME will not use short blocks, long blocks only.\r\n                                                        */\n    ShortBlock.short_block_dispensed = new ShortBlock(2); /**\r\n                                                          * LAME will not use long blocks, short blocks only.\r\n                                                          */\n    ShortBlock.short_block_forced = new ShortBlock(3);\n    var Float = {};\n    Float.MAX_VALUE = 3.4028235e+38;\n    function VbrMode(ordinal) {\n      this.ordinal = ordinal;\n    }\n    VbrMode.vbr_off = new VbrMode(0);\n    VbrMode.vbr_mt = new VbrMode(1);\n    VbrMode.vbr_rh = new VbrMode(2);\n    VbrMode.vbr_abr = new VbrMode(3);\n    VbrMode.vbr_mtrh = new VbrMode(4);\n    VbrMode.vbr_default = VbrMode.vbr_mtrh;\n    var assert = function assert(x) {//console.assert(x);\n    };\n    var module_exports = {\n      \"System\": System,\n      \"VbrMode\": VbrMode,\n      \"Float\": Float,\n      \"ShortBlock\": ShortBlock,\n      \"Util\": Util,\n      \"Arrays\": Arrays,\n      \"new_array_n\": new_array_n,\n      \"new_byte\": new_byte,\n      \"new_double\": new_double,\n      \"new_float\": new_float,\n      \"new_float_n\": new_float_n,\n      \"new_int\": new_int,\n      \"new_int_n\": new_int_n,\n      \"new_short\": new_short,\n      \"new_short_n\": new_short_n,\n      \"assert\": assert\n    }; //package mp3;\n    /* MPEG modes */\n    function MPEGMode(ordinal) {\n      var _ordinal = ordinal;\n      this.ordinal = function () {\n        return _ordinal;\n      };\n    }\n    MPEGMode.STEREO = new MPEGMode(0);\n    MPEGMode.JOINT_STEREO = new MPEGMode(1);\n    MPEGMode.DUAL_CHANNEL = new MPEGMode(2);\n    MPEGMode.MONO = new MPEGMode(3);\n    MPEGMode.NOT_SET = new MPEGMode(4);\n    function Version() {\n      /**\r\n      * URL for the LAME website.\r\n      */\n      var LAME_URL = \"http://www.mp3dev.org/\"; /**\r\n                                               * Major version number.\r\n                                               */\n      var LAME_MAJOR_VERSION = 3; /**\r\n                                  * Minor version number.\r\n                                  */\n      var LAME_MINOR_VERSION = 98; /**\r\n                                   * Patch level.\r\n                                   */\n      var LAME_PATCH_VERSION = 4; /**\r\n                                  * Major version number.\r\n                                  */\n      var PSY_MAJOR_VERSION = 0; /**\r\n                                 * Minor version number.\r\n                                 */\n      var PSY_MINOR_VERSION = 93; /**\r\n                                  * A string which describes the version of LAME.\r\n                                  *\r\n                                  * @return string which describes the version of LAME\r\n                                  */\n      this.getLameVersion = function () {\n        // primary to write screen reports\n        return LAME_MAJOR_VERSION + \".\" + LAME_MINOR_VERSION + \".\" + LAME_PATCH_VERSION;\n      }; /**\r\n         * The short version of the LAME version string.\r\n         *\r\n         * @return short version of the LAME version string\r\n         */\n      this.getLameShortVersion = function () {\n        // Adding date and time to version string makes it harder for output\n        // validation\n        return LAME_MAJOR_VERSION + \".\" + LAME_MINOR_VERSION + \".\" + LAME_PATCH_VERSION;\n      }; /**\r\n         * The shortest version of the LAME version string.\r\n         *\r\n         * @return shortest version of the LAME version string\r\n         */\n      this.getLameVeryShortVersion = function () {\n        // Adding date and time to version string makes it harder for output\n        return \"LAME\" + LAME_MAJOR_VERSION + \".\" + LAME_MINOR_VERSION + \"r\";\n      }; /**\r\n         * String which describes the version of GPSYCHO\r\n         *\r\n         * @return string which describes the version of GPSYCHO\r\n         */\n      this.getPsyVersion = function () {\n        return PSY_MAJOR_VERSION + \".\" + PSY_MINOR_VERSION;\n      }; /**\r\n         * String which is a URL for the LAME website.\r\n         *\r\n         * @return string which is a URL for the LAME website\r\n         */\n      this.getLameUrl = function () {\n        return LAME_URL;\n      }; /**\r\n         * Quite useless for a java version, however we are compatible ;-)\r\n         *\r\n         * @return \"32bits\"\r\n         */\n      this.getLameOsBitness = function () {\n        return \"32bits\";\n      };\n    } /*\r\n      *\tMP3 huffman table selecting and bit counting\r\n      *\r\n      *\tCopyright (c) 1999-2005 Takehiro TOMINAGA\r\n      *\tCopyright (c) 2002-2005 Gabriel Bouvigne\r\n      *\r\n      * This library is free software; you can redistribute it and/or\r\n      * modify it under the terms of the GNU Lesser General Public\r\n      * License as published by the Free Software Foundation; either\r\n      * version 2 of the License, or (at your option) any later version.\r\n      *\r\n      * This library is distributed in the hope that it will be useful,\r\n      * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n      * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\t See the GNU\r\n      * Library General Public License for more details.\r\n      *\r\n      * You should have received a copy of the GNU Lesser General Public\r\n      * License along with this library; if not, write to the\r\n      * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\r\n      * Boston, MA 02111-1307, USA.\r\n      */ /* $Id: Takehiro.java,v 1.26 2011/05/24 20:48:06 kenchis Exp $ */ //package mp3;\n    //import java.util.Arrays;\n    function Takehiro() {\n      var qupvt = null;\n      this.qupvt = null;\n      this.setModules = function (_qupvt) {\n        this.qupvt = _qupvt;\n        qupvt = _qupvt;\n      };\n      function Bits(b) {\n        this.bits = 0 | b;\n      }\n      var subdv_table = [[0, 0], /* 0 bands */[0, 0], /* 1 bands */[0, 0], /* 2 bands */[0, 0], /* 3 bands */[0, 0], /* 4 bands */[0, 1], /* 5 bands */[1, 1], /* 6 bands */[1, 1], /* 7 bands */[1, 2], /* 8 bands */[2, 2], /* 9 bands */[2, 3], /* 10 bands */[2, 3], /* 11 bands */[3, 4], /* 12 bands */[3, 4], /* 13 bands */[3, 4], /* 14 bands */[4, 5], /* 15 bands */[4, 5], /* 16 bands */[4, 6], /* 17 bands */[5, 6], /* 18 bands */[5, 6], /* 19 bands */[5, 7], /* 20 bands */[6, 7], /* 21 bands */[6, 7]]; /**\r\nnonlinear quantization of xr More accurate formula than the ISO formula.\r\nakes into account the fact that we are quantizing xr . ix, but we want\r\nix^4/3 to be as close as possible to x^4/3. (taking the nearest int would\r\nmean ix is as close as possible to xr, which is different.)\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *\r\nrom Segher Boessenkool <segher@eastsite.nl> 11/1999\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *\r\ncode removed in favor of IEEE754 hack by Takehiro Tominaga.\r\nf you need the ASM code, check CVS circa Aug 2000.\r\nr\nptimizations by Gabriel Bouvigne\r\nn      function quantize_lines_xrpow_01(l, istep, xr, xrPos, ix, ixPos) {\n        var compareval0 = (1.0 - 0.4054) / istep;\n        l = l >> 1;\n        while (l-- != 0) {\n          ix[ixPos++] = compareval0 > xr[xrPos++] ? 0 : 1;\n          ix[ixPos++] = compareval0 > xr[xrPos++] ? 0 : 1;\n        }\n      } /**\r\n        * XRPOW_FTOI is a macro to convert floats to ints.<BR>\r\n        * if XRPOW_FTOI(x) = nearest_int(x), then QUANTFAC(x)=adj43asm[x]<BR>\r\n        * ROUNDFAC= -0.0946<BR>\r\n        *\r\n        * if XRPOW_FTOI(x) = floor(x), then QUANTFAC(x)=asj43[x]<BR>\r\n        * ROUNDFAC=0.4054<BR>\r\n        *\r\n        * Note: using floor() or 0| is extremely slow. On machines where the\r\n        * TAKEHIRO_IEEE754_HACK code above does not work, it is worthwile to write\r\n        * some ASM for XRPOW_FTOI().\r\n        */\n      function quantize_lines_xrpow(l, istep, xr, xrPos, ix, ixPos) {\n        l = l >> 1;\n        var remaining = l % 2;\n        l = l >> 1;\n        while (l-- != 0) {\n          var x0, x1, x2, x3;\n          var rx0, rx1, rx2, rx3;\n          x0 = xr[xrPos++] * istep;\n          x1 = xr[xrPos++] * istep;\n          rx0 = 0 | x0;\n          x2 = xr[xrPos++] * istep;\n          rx1 = 0 | x1;\n          x3 = xr[xrPos++] * istep;\n          rx2 = 0 | x2;\n          x0 += qupvt.adj43[rx0];\n          rx3 = 0 | x3;\n          x1 += qupvt.adj43[rx1];\n          ix[ixPos++] = 0 | x0;\n          x2 += qupvt.adj43[rx2];\n          ix[ixPos++] = 0 | x1;\n          x3 += qupvt.adj43[rx3];\n          ix[ixPos++] = 0 | x2;\n          ix[ixPos++] = 0 | x3;\n        }\n        if (remaining != 0) {\n          var x0, x1;\n          var rx0, rx1;\n          x0 = xr[xrPos++] * istep;\n          x1 = xr[xrPos++] * istep;\n          rx0 = 0 | x0;\n          rx1 = 0 | x1;\n          x0 += qupvt.adj43[rx0];\n          x1 += qupvt.adj43[rx1];\n          ix[ixPos++] = 0 | x0;\n          ix[ixPos++] = 0 | x1;\n        }\n      } /**\r\n        * Quantization function This function will select which lines to quantize\r\n        * and call the proper quantization function\r\n        */\n      function quantize_xrpow(xp, pi, istep, codInfo, prevNoise) {\n        /* quantize on xr^(3/4) instead of xr */var sfb;\n        var sfbmax;\n        var j = 0;\n        var prev_data_use;\n        var accumulate = 0;\n        var accumulate01 = 0;\n        var xpPos = 0;\n        var iData = pi;\n        var iDataPos = 0;\n        var acc_iData = iData;\n        var acc_iDataPos = 0;\n        var acc_xp = xp;\n        var acc_xpPos = 0; /*\r\n                           * Reusing previously computed data does not seems to work if global\r\n                           * gain is changed. Finding why it behaves this way would allow to use a\r\n                           * cache of previously computed values (let's 10 cached values per sfb)\r\n                           * that would probably provide a noticeable speedup\r\n                           */\n        prev_data_use = prevNoise != null && codInfo.global_gain == prevNoise.global_gain;\n        if (codInfo.block_type == Encoder.SHORT_TYPE) sfbmax = 38;else sfbmax = 21;\n        for (sfb = 0; sfb <= sfbmax; sfb++) {\n          var step = -1;\n          if (prev_data_use || codInfo.block_type == Encoder.NORM_TYPE) {\n            step = codInfo.global_gain - (codInfo.scalefac[sfb] + (codInfo.preflag != 0 ? qupvt.pretab[sfb] : 0) << codInfo.scalefac_scale + 1) - codInfo.subblock_gain[codInfo.window[sfb]] * 8;\n          }\n          if (prev_data_use && prevNoise.step[sfb] == step) {\n            /*\r\n            * do not recompute this part, but compute accumulated lines\r\n            */\n            if (accumulate != 0) {\n              quantize_lines_xrpow(accumulate, istep, acc_xp, acc_xpPos, acc_iData, acc_iDataPos);\n              accumulate = 0;\n            }\n            if (accumulate01 != 0) {\n              quantize_lines_xrpow_01(accumulate01, istep, acc_xp, acc_xpPos, acc_iData, acc_iDataPos);\n              accumulate01 = 0;\n            }\n          } else {\n            /* should compute this part */var l = codInfo.width[sfb];\n            if (j + codInfo.width[sfb] > codInfo.max_nonzero_coeff) {\n              /* do not compute upper zero part */var usefullsize;\n              usefullsize = codInfo.max_nonzero_coeff - j + 1;\n              Arrays.fill(pi, codInfo.max_nonzero_coeff, 576, 0);\n              l = usefullsize;\n              if (l < 0) {\n                l = 0;\n              } /* no need to compute higher sfb values */\n              sfb = sfbmax + 1;\n            } /* accumulate lines to quantize */\n            if (0 == accumulate && 0 == accumulate01) {\n              acc_iData = iData;\n              acc_iDataPos = iDataPos;\n              acc_xp = xp;\n              acc_xpPos = xpPos;\n            }\n            if (prevNoise != null && prevNoise.sfb_count1 > 0 && sfb >= prevNoise.sfb_count1 && prevNoise.step[sfb] > 0 && step >= prevNoise.step[sfb]) {\n              if (accumulate != 0) {\n                quantize_lines_xrpow(accumulate, istep, acc_xp, acc_xpPos, acc_iData, acc_iDataPos);\n                accumulate = 0;\n                acc_iData = iData;\n                acc_iDataPos = iDataPos;\n                acc_xp = xp;\n                acc_xpPos = xpPos;\n              }\n              accumulate01 += l;\n            } else {\n              if (accumulate01 != 0) {\n                quantize_lines_xrpow_01(accumulate01, istep, acc_xp, acc_xpPos, acc_iData, acc_iDataPos);\n                accumulate01 = 0;\n                acc_iData = iData;\n                acc_iDataPos = iDataPos;\n                acc_xp = xp;\n                acc_xpPos = xpPos;\n              }\n              accumulate += l;\n            }\n            if (l <= 0) {\n              /*\r\n              * rh: 20040215 may happen due to \"prev_data_use\"\r\n              * optimization\r\n              */\n              if (accumulate01 != 0) {\n                quantize_lines_xrpow_01(accumulate01, istep, acc_xp, acc_xpPos, acc_iData, acc_iDataPos);\n                accumulate01 = 0;\n              }\n              if (accumulate != 0) {\n                quantize_lines_xrpow(accumulate, istep, acc_xp, acc_xpPos, acc_iData, acc_iDataPos);\n                accumulate = 0;\n              }\n              break; /* ends for-loop */\n            }\n          }\n          if (sfb <= sfbmax) {\n            iDataPos += codInfo.width[sfb];\n            xpPos += codInfo.width[sfb];\n            j += codInfo.width[sfb];\n          }\n        }\n        if (accumulate != 0) {\n          /* last data part */quantize_lines_xrpow(accumulate, istep, acc_xp, acc_xpPos, acc_iData, acc_iDataPos);\n          accumulate = 0;\n        }\n        if (accumulate01 != 0) {\n          /* last data part */quantize_lines_xrpow_01(accumulate01, istep, acc_xp, acc_xpPos, acc_iData, acc_iDataPos);\n          accumulate01 = 0;\n        }\n      } /**\r\n        * ix_max\r\n        */\n      function ix_max(ix, ixPos, endPos) {\n        var max1 = 0,\n          max2 = 0;\n        do {\n          var x1 = ix[ixPos++];\n          var x2 = ix[ixPos++];\n          if (max1 < x1) max1 = x1;\n          if (max2 < x2) max2 = x2;\n        } while (ixPos < endPos);\n        if (max1 < max2) max1 = max2;\n        return max1;\n      }\n      function count_bit_ESC(ix, ixPos, end, t1, t2, s) {\n        /* ESC-table is used */var linbits = Tables.ht[t1].xlen * 65536 + Tables.ht[t2].xlen;\n        var sum = 0,\n          sum2;\n        do {\n          var x = ix[ixPos++];\n          var y = ix[ixPos++];\n          if (x != 0) {\n            if (x > 14) {\n              x = 15;\n              sum += linbits;\n            }\n            x *= 16;\n          }\n          if (y != 0) {\n            if (y > 14) {\n              y = 15;\n              sum += linbits;\n            }\n            x += y;\n          }\n          sum += Tables.largetbl[x];\n        } while (ixPos < end);\n        sum2 = sum & 0xffff;\n        sum >>= 16;\n        if (sum > sum2) {\n          sum = sum2;\n          t1 = t2;\n        }\n        s.bits += sum;\n        return t1;\n      }\n      function count_bit_noESC(ix, ixPos, end, s) {\n        /* No ESC-words */var sum1 = 0;\n        var hlen1 = Tables.ht[1].hlen;\n        do {\n          var x = ix[ixPos + 0] * 2 + ix[ixPos + 1];\n          ixPos += 2;\n          sum1 += hlen1[x];\n        } while (ixPos < end);\n        s.bits += sum1;\n        return 1;\n      }\n      function count_bit_noESC_from2(ix, ixPos, end, t1, s) {\n        /* No ESC-words */var sum = 0,\n          sum2;\n        var xlen = Tables.ht[t1].xlen;\n        var hlen;\n        if (t1 == 2) hlen = Tables.table23;else hlen = Tables.table56;\n        do {\n          var x = ix[ixPos + 0] * xlen + ix[ixPos + 1];\n          ixPos += 2;\n          sum += hlen[x];\n        } while (ixPos < end);\n        sum2 = sum & 0xffff;\n        sum >>= 16;\n        if (sum > sum2) {\n          sum = sum2;\n          t1++;\n        }\n        s.bits += sum;\n        return t1;\n      }\n      function count_bit_noESC_from3(ix, ixPos, end, t1, s) {\n        /* No ESC-words */var sum1 = 0;\n        var sum2 = 0;\n        var sum3 = 0;\n        var xlen = Tables.ht[t1].xlen;\n        var hlen1 = Tables.ht[t1].hlen;\n        var hlen2 = Tables.ht[t1 + 1].hlen;\n        var hlen3 = Tables.ht[t1 + 2].hlen;\n        do {\n          var x = ix[ixPos + 0] * xlen + ix[ixPos + 1];\n          ixPos += 2;\n          sum1 += hlen1[x];\n          sum2 += hlen2[x];\n          sum3 += hlen3[x];\n        } while (ixPos < end);\n        var t = t1;\n        if (sum1 > sum2) {\n          sum1 = sum2;\n          t++;\n        }\n        if (sum1 > sum3) {\n          sum1 = sum3;\n          t = t1 + 2;\n        }\n        s.bits += sum1;\n        return t;\n      } /*************************************************************************/ /* choose table */ /*************************************************************************/\n      var huf_tbl_noESC = [1, 2, 5, 7, 7, 10, 10, 13, 13, 13, 13, 13, 13, 13, 13]; /**\r\n                                                                                   * Choose the Huffman table that will encode ix[begin..end] with the fewest\r\n                                                                                   * bits.\r\n                                                                                   *\r\n                                                                                   * Note: This code contains knowledge about the sizes and characteristics of\r\n                                                                                   * the Huffman tables as defined in the IS (Table B.7), and will not work\r\n                                                                                   * with any arbitrary tables.\r\n                                                                                   */\n      function choose_table(ix, ixPos, endPos, s) {\n        var max = ix_max(ix, ixPos, endPos);\n        switch (max) {\n          case 0:\n            return max;\n          case 1:\n            return count_bit_noESC(ix, ixPos, endPos, s);\n          case 2:\n          case 3:\n            return count_bit_noESC_from2(ix, ixPos, endPos, huf_tbl_noESC[max - 1], s);\n          case 4:\n          case 5:\n          case 6:\n          case 7:\n          case 8:\n          case 9:\n          case 10:\n          case 11:\n          case 12:\n          case 13:\n          case 14:\n          case 15:\n            return count_bit_noESC_from3(ix, ixPos, endPos, huf_tbl_noESC[max - 1], s);\n          default:\n            /* try tables with linbits */if (max > QuantizePVT.IXMAX_VAL) {\n              s.bits = QuantizePVT.LARGE_BITS;\n              return -1;\n            }\n            max -= 15;\n            var choice2;\n            for (choice2 = 24; choice2 < 32; choice2++) {\n              if (Tables.ht[choice2].linmax >= max) {\n                break;\n              }\n            }\n            var choice;\n            for (choice = choice2 - 8; choice < 24; choice++) {\n              if (Tables.ht[choice].linmax >= max) {\n                break;\n              }\n            }\n            return count_bit_ESC(ix, ixPos, endPos, choice, choice2, s);\n        }\n      } /**\r\n        * count_bit\r\n        */\n      this.noquant_count_bits = function (gfc, gi, prev_noise) {\n        var ix = gi.l3_enc;\n        var i = Math.min(576, gi.max_nonzero_coeff + 2 >> 1 << 1);\n        if (prev_noise != null) prev_noise.sfb_count1 = 0; /* Determine count1 region */\n        for (; i > 1; i -= 2) {\n          if ((ix[i - 1] | ix[i - 2]) != 0) break;\n        }\n        gi.count1 = i; /* Determines the number of bits to encode the quadruples. */\n        var a1 = 0;\n        var a2 = 0;\n        for (; i > 3; i -= 4) {\n          var p; /* hack to check if all values <= 1 */ //throw \"TODO: HACK         if ((((long) ix[i - 1] | (long) ix[i - 2] | (long) ix[i - 3] | (long) ix[i - 4]) & 0xffffffffL) > 1L        \"\n          //if (true) {\n          if (((ix[i - 1] | ix[i - 2] | ix[i - 3] | ix[i - 4]) & 0x7fffffff) > 1) {\n            break;\n          }\n          p = ((ix[i - 4] * 2 + ix[i - 3]) * 2 + ix[i - 2]) * 2 + ix[i - 1];\n          a1 += Tables.t32l[p];\n          a2 += Tables.t33l[p];\n        }\n        var bits = a1;\n        gi.count1table_select = 0;\n        if (a1 > a2) {\n          bits = a2;\n          gi.count1table_select = 1;\n        }\n        gi.count1bits = bits;\n        gi.big_values = i;\n        if (i == 0) return bits;\n        if (gi.block_type == Encoder.SHORT_TYPE) {\n          a1 = 3 * gfc.scalefac_band.s[3];\n          if (a1 > gi.big_values) a1 = gi.big_values;\n          a2 = gi.big_values;\n        } else if (gi.block_type == Encoder.NORM_TYPE) {\n          /* bv_scf has 576 entries (0..575) */a1 = gi.region0_count = gfc.bv_scf[i - 2];\n          a2 = gi.region1_count = gfc.bv_scf[i - 1];\n          a2 = gfc.scalefac_band.l[a1 + a2 + 2];\n          a1 = gfc.scalefac_band.l[a1 + 1];\n          if (a2 < i) {\n            var bi = new Bits(bits);\n            gi.table_select[2] = choose_table(ix, a2, i, bi);\n            bits = bi.bits;\n          }\n        } else {\n          gi.region0_count = 7; /* gi.region1_count = SBPSY_l - 7 - 1; */\n          gi.region1_count = Encoder.SBMAX_l - 1 - 7 - 1;\n          a1 = gfc.scalefac_band.l[7 + 1];\n          a2 = i;\n          if (a1 > a2) {\n            a1 = a2;\n          }\n        } /* have to allow for the case when bigvalues < region0 < region1 */ /* (and region0, region1 are ignored) */\n        a1 = Math.min(a1, i);\n        a2 = Math.min(a2, i); /* Count the number of bits necessary to code the bigvalues region. */\n        if (0 < a1) {\n          var bi = new Bits(bits);\n          gi.table_select[0] = choose_table(ix, 0, a1, bi);\n          bits = bi.bits;\n        }\n        if (a1 < a2) {\n          var bi = new Bits(bits);\n          gi.table_select[1] = choose_table(ix, a1, a2, bi);\n          bits = bi.bits;\n        }\n        if (gfc.use_best_huffman == 2) {\n          gi.part2_3_length = bits;\n          best_huffman_divide(gfc, gi);\n          bits = gi.part2_3_length;\n        }\n        if (prev_noise != null) {\n          if (gi.block_type == Encoder.NORM_TYPE) {\n            var sfb = 0;\n            while (gfc.scalefac_band.l[sfb] < gi.big_values) {\n              sfb++;\n            }\n            prev_noise.sfb_count1 = sfb;\n          }\n        }\n        return bits;\n      };\n      this.count_bits = function (gfc, xr, gi, prev_noise) {\n        var ix = gi.l3_enc; /* since quantize_xrpow uses table lookup, we need to check this first: */\n        var w = QuantizePVT.IXMAX_VAL / qupvt.IPOW20(gi.global_gain);\n        if (gi.xrpow_max > w) return QuantizePVT.LARGE_BITS;\n        quantize_xrpow(xr, ix, qupvt.IPOW20(gi.global_gain), gi, prev_noise);\n        if ((gfc.substep_shaping & 2) != 0) {\n          var j = 0; /* 0.634521682242439 = 0.5946*2**(.5*0.1875) */\n          var gain = gi.global_gain + gi.scalefac_scale;\n          var roundfac = 0.634521682242439 / qupvt.IPOW20(gain);\n          for (var sfb = 0; sfb < gi.sfbmax; sfb++) {\n            var width = gi.width[sfb];\n            if (0 == gfc.pseudohalf[sfb]) {\n              j += width;\n            } else {\n              var k;\n              for (k = j, j += width; k < j; ++k) {\n                ix[k] = xr[k] >= roundfac ? ix[k] : 0;\n              }\n            }\n          }\n        }\n        return this.noquant_count_bits(gfc, gi, prev_noise);\n      }; /**\r\n         * re-calculate the best scalefac_compress using scfsi the saved bits are\r\n         * kept in the bit reservoir.\r\n         */\n      function recalc_divide_init(gfc, cod_info, ix, r01_bits, r01_div, r0_tbl, r1_tbl) {\n        var bigv = cod_info.big_values;\n        for (var r0 = 0; r0 <= 7 + 15; r0++) {\n          r01_bits[r0] = QuantizePVT.LARGE_BITS;\n        }\n        for (var r0 = 0; r0 < 16; r0++) {\n          var a1 = gfc.scalefac_band.l[r0 + 1];\n          if (a1 >= bigv) break;\n          var r0bits = 0;\n          var bi = new Bits(r0bits);\n          var r0t = choose_table(ix, 0, a1, bi);\n          r0bits = bi.bits;\n          for (var r1 = 0; r1 < 8; r1++) {\n            var a2 = gfc.scalefac_band.l[r0 + r1 + 2];\n            if (a2 >= bigv) break;\n            var bits = r0bits;\n            bi = new Bits(bits);\n            var r1t = choose_table(ix, a1, a2, bi);\n            bits = bi.bits;\n            if (r01_bits[r0 + r1] > bits) {\n              r01_bits[r0 + r1] = bits;\n              r01_div[r0 + r1] = r0;\n              r0_tbl[r0 + r1] = r0t;\n              r1_tbl[r0 + r1] = r1t;\n            }\n          }\n        }\n      }\n      function recalc_divide_sub(gfc, cod_info2, gi, ix, r01_bits, r01_div, r0_tbl, r1_tbl) {\n        var bigv = cod_info2.big_values;\n        for (var r2 = 2; r2 < Encoder.SBMAX_l + 1; r2++) {\n          var a2 = gfc.scalefac_band.l[r2];\n          if (a2 >= bigv) break;\n          var bits = r01_bits[r2 - 2] + cod_info2.count1bits;\n          if (gi.part2_3_length <= bits) break;\n          var bi = new Bits(bits);\n          var r2t = choose_table(ix, a2, bigv, bi);\n          bits = bi.bits;\n          if (gi.part2_3_length <= bits) continue;\n          gi.assign(cod_info2);\n          gi.part2_3_length = bits;\n          gi.region0_count = r01_div[r2 - 2];\n          gi.region1_count = r2 - 2 - r01_div[r2 - 2];\n          gi.table_select[0] = r0_tbl[r2 - 2];\n          gi.table_select[1] = r1_tbl[r2 - 2];\n          gi.table_select[2] = r2t;\n        }\n      }\n      this.best_huffman_divide = function (gfc, gi) {\n        var cod_info2 = new GrInfo();\n        var ix = gi.l3_enc;\n        var r01_bits = new_int(7 + 15 + 1);\n        var r01_div = new_int(7 + 15 + 1);\n        var r0_tbl = new_int(7 + 15 + 1);\n        var r1_tbl = new_int(7 + 15 + 1); /* SHORT BLOCK stuff fails for MPEG2 */\n        if (gi.block_type == Encoder.SHORT_TYPE && gfc.mode_gr == 1) return;\n        cod_info2.assign(gi);\n        if (gi.block_type == Encoder.NORM_TYPE) {\n          recalc_divide_init(gfc, gi, ix, r01_bits, r01_div, r0_tbl, r1_tbl);\n          recalc_divide_sub(gfc, cod_info2, gi, ix, r01_bits, r01_div, r0_tbl, r1_tbl);\n        }\n        var i = cod_info2.big_values;\n        if (i == 0 || (ix[i - 2] | ix[i - 1]) > 1) return;\n        i = gi.count1 + 2;\n        if (i > 576) return; /* Determines the number of bits to encode the quadruples. */\n        cod_info2.assign(gi);\n        cod_info2.count1 = i;\n        var a1 = 0;\n        var a2 = 0;\n        for (; i > cod_info2.big_values; i -= 4) {\n          var p = ((ix[i - 4] * 2 + ix[i - 3]) * 2 + ix[i - 2]) * 2 + ix[i - 1];\n          a1 += Tables.t32l[p];\n          a2 += Tables.t33l[p];\n        }\n        cod_info2.big_values = i;\n        cod_info2.count1table_select = 0;\n        if (a1 > a2) {\n          a1 = a2;\n          cod_info2.count1table_select = 1;\n        }\n        cod_info2.count1bits = a1;\n        if (cod_info2.block_type == Encoder.NORM_TYPE) recalc_divide_sub(gfc, cod_info2, gi, ix, r01_bits, r01_div, r0_tbl, r1_tbl);else {\n          /* Count the number of bits necessary to code the bigvalues region. */cod_info2.part2_3_length = a1;\n          a1 = gfc.scalefac_band.l[7 + 1];\n          if (a1 > i) {\n            a1 = i;\n          }\n          if (a1 > 0) {\n            var bi = new Bits(cod_info2.part2_3_length);\n            cod_info2.table_select[0] = choose_table(ix, 0, a1, bi);\n            cod_info2.part2_3_length = bi.bits;\n          }\n          if (i > a1) {\n            var bi = new Bits(cod_info2.part2_3_length);\n            cod_info2.table_select[1] = choose_table(ix, a1, i, bi);\n            cod_info2.part2_3_length = bi.bits;\n          }\n          if (gi.part2_3_length > cod_info2.part2_3_length) gi.assign(cod_info2);\n        }\n      };\n      var slen1_n = [1, 1, 1, 1, 8, 2, 2, 2, 4, 4, 4, 8, 8, 8, 16, 16];\n      var slen2_n = [1, 2, 4, 8, 1, 2, 4, 8, 2, 4, 8, 2, 4, 8, 4, 8];\n      var slen1_tab = [0, 0, 0, 0, 3, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4];\n      var slen2_tab = [0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3, 1, 2, 3, 2, 3];\n      Takehiro.slen1_tab = slen1_tab;\n      Takehiro.slen2_tab = slen2_tab;\n      function scfsi_calc(ch, l3_side) {\n        var sfb;\n        var gi = l3_side.tt[1][ch];\n        var g0 = l3_side.tt[0][ch];\n        for (var i = 0; i < Tables.scfsi_band.length - 1; i++) {\n          for (sfb = Tables.scfsi_band[i]; sfb < Tables.scfsi_band[i + 1]; sfb++) {\n            if (g0.scalefac[sfb] != gi.scalefac[sfb] && gi.scalefac[sfb] >= 0) break;\n          }\n          if (sfb == Tables.scfsi_band[i + 1]) {\n            for (sfb = Tables.scfsi_band[i]; sfb < Tables.scfsi_band[i + 1]; sfb++) {\n              gi.scalefac[sfb] = -1;\n            }\n            l3_side.scfsi[ch][i] = 1;\n          }\n        }\n        var s1 = 0;\n        var c1 = 0;\n        for (sfb = 0; sfb < 11; sfb++) {\n          if (gi.scalefac[sfb] == -1) continue;\n          c1++;\n          if (s1 < gi.scalefac[sfb]) s1 = gi.scalefac[sfb];\n        }\n        var s2 = 0;\n        var c2 = 0;\n        for (; sfb < Encoder.SBPSY_l; sfb++) {\n          if (gi.scalefac[sfb] == -1) continue;\n          c2++;\n          if (s2 < gi.scalefac[sfb]) s2 = gi.scalefac[sfb];\n        }\n        for (var i = 0; i < 16; i++) {\n          if (s1 < slen1_n[i] && s2 < slen2_n[i]) {\n            var c = slen1_tab[i] * c1 + slen2_tab[i] * c2;\n            if (gi.part2_length > c) {\n              gi.part2_length = c;\n              gi.scalefac_compress = i;\n            }\n          }\n        }\n      } /**\r\n        * Find the optimal way to store the scalefactors. Only call this routine\r\n        * after final scalefactors have been chosen and the channel/granule will\r\n        * not be re-encoded.\r\n        */\n      this.best_scalefac_store = function (gfc, gr, ch, l3_side) {\n        /* use scalefac_scale if we can */var gi = l3_side.tt[gr][ch];\n        var sfb, i, j, l;\n        var recalc = 0; /*\r\n                        * remove scalefacs from bands with ix=0. This idea comes from the AAC\r\n                        * ISO docs. added mt 3/00\r\n                        */ /* check if l3_enc=0 */\n        j = 0;\n        for (sfb = 0; sfb < gi.sfbmax; sfb++) {\n          var width = gi.width[sfb];\n          j += width;\n          for (l = -width; l < 0; l++) {\n            if (gi.l3_enc[l + j] != 0) break;\n          }\n          if (l == 0) gi.scalefac[sfb] = recalc = -2; /* anything goes. */ /*\r\n                                                                           * only best_scalefac_store and calc_scfsi know--and only they\r\n                                                                           * should know--about the magic number -2.\r\n                                                                           */\n        }\n        if (0 == gi.scalefac_scale && 0 == gi.preflag) {\n          var s = 0;\n          for (sfb = 0; sfb < gi.sfbmax; sfb++) {\n            if (gi.scalefac[sfb] > 0) s |= gi.scalefac[sfb];\n          }\n          if (0 == (s & 1) && s != 0) {\n            for (sfb = 0; sfb < gi.sfbmax; sfb++) {\n              if (gi.scalefac[sfb] > 0) gi.scalefac[sfb] >>= 1;\n            }\n            gi.scalefac_scale = recalc = 1;\n          }\n        }\n        if (0 == gi.preflag && gi.block_type != Encoder.SHORT_TYPE && gfc.mode_gr == 2) {\n          for (sfb = 11; sfb < Encoder.SBPSY_l; sfb++) {\n            if (gi.scalefac[sfb] < qupvt.pretab[sfb] && gi.scalefac[sfb] != -2) break;\n          }\n          if (sfb == Encoder.SBPSY_l) {\n            for (sfb = 11; sfb < Encoder.SBPSY_l; sfb++) {\n              if (gi.scalefac[sfb] > 0) gi.scalefac[sfb] -= qupvt.pretab[sfb];\n            }\n            gi.preflag = recalc = 1;\n          }\n        }\n        for (i = 0; i < 4; i++) {\n          l3_side.scfsi[ch][i] = 0;\n        }\n        if (gfc.mode_gr == 2 && gr == 1 && l3_side.tt[0][ch].block_type != Encoder.SHORT_TYPE && l3_side.tt[1][ch].block_type != Encoder.SHORT_TYPE) {\n          scfsi_calc(ch, l3_side);\n          recalc = 0;\n        }\n        for (sfb = 0; sfb < gi.sfbmax; sfb++) {\n          if (gi.scalefac[sfb] == -2) {\n            gi.scalefac[sfb] = 0; /* if anything goes, then 0 is a good choice */\n          }\n        }\n        if (recalc != 0) {\n          if (gfc.mode_gr == 2) {\n            this.scale_bitcount(gi);\n          } else {\n            this.scale_bitcount_lsf(gfc, gi);\n          }\n        }\n      };\n      function all_scalefactors_not_negative(scalefac, n) {\n        for (var i = 0; i < n; ++i) {\n          if (scalefac[i] < 0) return false;\n        }\n        return true;\n      } /**\r\n        * number of bits used to encode scalefacs.\r\n        *\r\n        * 18*slen1_tab[i] + 18*slen2_tab[i]\r\n        */\n      var scale_short = [0, 18, 36, 54, 54, 36, 54, 72, 54, 72, 90, 72, 90, 108, 108, 126]; /**\r\n                                                                                            * number of bits used to encode scalefacs.\r\n                                                                                            *\r\n                                                                                            * 17*slen1_tab[i] + 18*slen2_tab[i]\r\n                                                                                            */\n      var scale_mixed = [0, 18, 36, 54, 51, 35, 53, 71, 52, 70, 88, 69, 87, 105, 104, 122]; /**\r\n                                                                                            * number of bits used to encode scalefacs.\r\n                                                                                            *\r\n                                                                                            * 11*slen1_tab[i] + 10*slen2_tab[i]\r\n                                                                                            */\n      var scale_long = [0, 10, 20, 30, 33, 21, 31, 41, 32, 42, 52, 43, 53, 63, 64, 74]; /**\r\n                                                                                        * Also calculates the number of bits necessary to code the scalefactors.\r\n                                                                                        */\n      this.scale_bitcount = function (cod_info) {\n        var k,\n          sfb,\n          max_slen1 = 0,\n          max_slen2 = 0; /* maximum values */\n        var tab;\n        var scalefac = cod_info.scalefac;\n        if (cod_info.block_type == Encoder.SHORT_TYPE) {\n          tab = scale_short;\n          if (cod_info.mixed_block_flag != 0) tab = scale_mixed;\n        } else {\n          /* block_type == 1,2,or 3 */tab = scale_long;\n          if (0 == cod_info.preflag) {\n            for (sfb = 11; sfb < Encoder.SBPSY_l; sfb++) {\n              if (scalefac[sfb] < qupvt.pretab[sfb]) break;\n            }\n            if (sfb == Encoder.SBPSY_l) {\n              cod_info.preflag = 1;\n              for (sfb = 11; sfb < Encoder.SBPSY_l; sfb++) {\n                scalefac[sfb] -= qupvt.pretab[sfb];\n              }\n            }\n          }\n        }\n        for (sfb = 0; sfb < cod_info.sfbdivide; sfb++) {\n          if (max_slen1 < scalefac[sfb]) max_slen1 = scalefac[sfb];\n        }\n        for (; sfb < cod_info.sfbmax; sfb++) {\n          if (max_slen2 < scalefac[sfb]) max_slen2 = scalefac[sfb];\n        } /*\r\n          * from Takehiro TOMINAGA <tominaga@isoternet.org> 10/99 loop over *all*\r\n          * posible values of scalefac_compress to find the one which uses the\r\n          * smallest number of bits. ISO would stop at first valid index\r\n          */\n        cod_info.part2_length = QuantizePVT.LARGE_BITS;\n        for (k = 0; k < 16; k++) {\n          if (max_slen1 < slen1_n[k] && max_slen2 < slen2_n[k] && cod_info.part2_length > tab[k]) {\n            cod_info.part2_length = tab[k];\n            cod_info.scalefac_compress = k;\n          }\n        }\n        return cod_info.part2_length == QuantizePVT.LARGE_BITS;\n      }; /**\r\n         * table of largest scalefactor values for MPEG2\r\n         */\n      var max_range_sfac_tab = [[15, 15, 7, 7], [15, 15, 7, 0], [7, 3, 0, 0], [15, 31, 31, 0], [7, 7, 7, 0], [3, 3, 0, 0]]; /**\r\n                                                                                                                            * Also counts the number of bits to encode the scalefacs but for MPEG 2\r\n                                                                                                                            * Lower sampling frequencies (24, 22.05 and 16 kHz.)\r\n                                                                                                                            *\r\n                                                                                                                            * This is reverse-engineered from section 2.4.3.2 of the MPEG2 IS,\r\n                                                                                                                            * \"Audio Decoding Layer III\"\r\n                                                                                                                            */\n      this.scale_bitcount_lsf = function (gfc, cod_info) {\n        var table_number, row_in_table, partition, nr_sfb, window;\n        var over;\n        var i, sfb;\n        var max_sfac = new_int(4); //var partition_table;\n        var scalefac = cod_info.scalefac; /*\r\n                                          * Set partition table. Note that should try to use table one, but do\r\n                                          * not yet...\r\n                                          */\n        if (cod_info.preflag != 0) table_number = 2;else table_number = 0;\n        for (i = 0; i < 4; i++) {\n          max_sfac[i] = 0;\n        }\n        if (cod_info.block_type == Encoder.SHORT_TYPE) {\n          row_in_table = 1;\n          var partition_table = qupvt.nr_of_sfb_block[table_number][row_in_table];\n          for (sfb = 0, partition = 0; partition < 4; partition++) {\n            nr_sfb = partition_table[partition] / 3;\n            for (i = 0; i < nr_sfb; i++, sfb++) {\n              for (window = 0; window < 3; window++) {\n                if (scalefac[sfb * 3 + window] > max_sfac[partition]) max_sfac[partition] = scalefac[sfb * 3 + window];\n              }\n            }\n          }\n        } else {\n          row_in_table = 0;\n          var partition_table = qupvt.nr_of_sfb_block[table_number][row_in_table];\n          for (sfb = 0, partition = 0; partition < 4; partition++) {\n            nr_sfb = partition_table[partition];\n            for (i = 0; i < nr_sfb; i++, sfb++) {\n              if (scalefac[sfb] > max_sfac[partition]) max_sfac[partition] = scalefac[sfb];\n            }\n          }\n        }\n        for (over = false, partition = 0; partition < 4; partition++) {\n          if (max_sfac[partition] > max_range_sfac_tab[table_number][partition]) over = true;\n        }\n        if (!over) {\n          var slen1, slen2, slen3, slen4;\n          cod_info.sfb_partition_table = qupvt.nr_of_sfb_block[table_number][row_in_table];\n          for (partition = 0; partition < 4; partition++) {\n            cod_info.slen[partition] = log2tab[max_sfac[partition]];\n          } /* set scalefac_compress */\n          slen1 = cod_info.slen[0];\n          slen2 = cod_info.slen[1];\n          slen3 = cod_info.slen[2];\n          slen4 = cod_info.slen[3];\n          switch (table_number) {\n            case 0:\n              cod_info.scalefac_compress = (slen1 * 5 + slen2 << 4) + (slen3 << 2) + slen4;\n              break;\n            case 1:\n              cod_info.scalefac_compress = 400 + (slen1 * 5 + slen2 << 2) + slen3;\n              break;\n            case 2:\n              cod_info.scalefac_compress = 500 + slen1 * 3 + slen2;\n              break;\n            default:\n              System.err.printf(\"intensity stereo not implemented yet\\n\");\n              break;\n          }\n        }\n        if (!over) {\n          cod_info.part2_length = 0;\n          for (partition = 0; partition < 4; partition++) {\n            cod_info.part2_length += cod_info.slen[partition] * cod_info.sfb_partition_table[partition];\n          }\n        }\n        return over;\n      }; /*\r\n         * Since no bands have been over-amplified, we can set scalefac_compress and\r\n         * slen[] for the formatter\r\n         */\n      var log2tab = [0, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4];\n      this.huffman_init = function (gfc) {\n        for (var i = 2; i <= 576; i += 2) {\n          var scfb_anz = 0,\n            bv_index;\n          while (gfc.scalefac_band.l[++scfb_anz] < i) {}\n          bv_index = subdv_table[scfb_anz][0]; // .region0_count\n          while (gfc.scalefac_band.l[bv_index + 1] > i) {\n            bv_index--;\n          }\n          if (bv_index < 0) {\n            /*\r\n            * this is an indication that everything is going to be encoded\r\n            * as region0: bigvalues < region0 < region1 so lets set\r\n            * region0, region1 to some value larger than bigvalues\r\n            */\n            bv_index = subdv_table[scfb_anz][0]; // .region0_count\n          }\n          gfc.bv_scf[i - 2] = bv_index;\n          bv_index = subdv_table[scfb_anz][1]; // .region1_count\n          while (gfc.scalefac_band.l[bv_index + gfc.bv_scf[i - 2] + 2] > i) {\n            bv_index--;\n          }\n          if (bv_index < 0) {\n            bv_index = subdv_table[scfb_anz][1]; // .region1_count\n          }\n          gfc.bv_scf[i - 1] = bv_index;\n        }\n      };\n    } /*\r\n      *  ReplayGainAnalysis - analyzes input samples and give the recommended dB change\r\n      *  Copyright (C) 2001 David Robinson and Glen Sawyer\r\n      *  Improvements and optimizations added by Frank Klemm, and by Marcel Muller\r\n      *\r\n      *  This library is free software; you can redistribute it and/or\r\n      *  modify it under the terms of the GNU Lesser General Public\r\n      *  License as published by the Free Software Foundation; either\r\n      *  version 2.1 of the License, or (at your option) any later version.\r\n      *\r\n      *  This library is distributed in the hope that it will be useful,\r\n      *  but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n      *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n      *  Lesser General Public License for more details.\r\n      *\r\n      *  You should have received a copy of the GNU Lesser General Public\r\n      *  License along with this library; if not, write to the Free Software\r\n      *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\r\n      *\r\n      *  concept and filter values by David Robinson (David@Robinson.org)\r\n      *    -- blame him if you think the idea is flawed\r\n      *  original coding by Glen Sawyer (mp3gain@hotmail.com)\r\n      *    -- blame him if you think this runs too slowly, or the coding is otherwise flawed\r\n      *\r\n      *  lots of code improvements by Frank Klemm ( http://www.uni-jena.de/~pfk/mpp/ )\r\n      *    -- credit him for all the _good_ programming ;)\r\n      *\r\n      *\r\n      *  For an explanation of the concepts and the basic algorithms involved, go to:\r\n      *    http://www.replaygain.org/\r\n      */ /*\r\n         *  Here's the deal. Call\r\n         *\r\n         *    InitGainAnalysis ( long samplefreq );\r\n         *\r\n         *  to initialize everything. Call\r\n         *\r\n         *    AnalyzeSamples ( var Float_t*  left_samples,\r\n         *                     var Float_t*  right_samples,\r\n         *                     size_t          num_samples,\r\n         *                     int             num_channels );\r\n         *\r\n         *  as many times as you want, with as many or as few samples as you want.\r\n         *  If mono, pass the sample buffer in through left_samples, leave\r\n         *  right_samples NULL, and make sure num_channels = 1.\r\n         *\r\n         *    GetTitleGain()\r\n         *\r\n         *  will return the recommended dB level change for all samples analyzed\r\n         *  SINCE THE LAST TIME you called GetTitleGain() OR InitGainAnalysis().\r\n         *\r\n         *    GetAlbumGain()\r\n         *\r\n         *  will return the recommended dB level change for all samples analyzed\r\n         *  since InitGainAnalysis() was called and finalized with GetTitleGain().\r\n         *\r\n         *  Pseudo-code to process an album:\r\n         *\r\n         *    Float_t       l_samples [4096];\r\n         *    Float_t       r_samples [4096];\r\n         *    size_t        num_samples;\r\n         *    unsigned int  num_songs;\r\n         *    unsigned int  i;\r\n         *\r\n         *    InitGainAnalysis ( 44100 );\r\n         *    for ( i = 1; i <= num_songs; i++ ) {\r\n         *        while ( ( num_samples = getSongSamples ( song[i], left_samples, right_samples ) ) > 0 )\r\n         *            AnalyzeSamples ( left_samples, right_samples, num_samples, 2 );\r\n         *        fprintf (\"Recommended dB change for song %2d: %+6.2 dB\\n\", i, GetTitleGain() );\r\n         *    }\r\n         *    fprintf (\"Recommended dB change for whole album: %+6.2 dB\\n\", GetAlbumGain() );\r\n         */ /*\r\n            *  So here's the main source of potential code confusion:\r\n            *\r\n            *  The filters applied to the incoming samples are IIR filters,\r\n            *  meaning they rely on up to <filter order> number of previous samples\r\n            *  AND up to <filter order> number of previous filtered samples.\r\n            *\r\n            *  I set up the AnalyzeSamples routine to minimize memory usage and interface\r\n            *  complexity. The speed isn't compromised too much (I don't think), but the\r\n            *  internal complexity is higher than it should be for such a relatively\r\n            *  simple routine.\r\n            *\r\n            *  Optimization/clarity suggestions are welcome.\r\n            */ /**\r\n               * Table entries per dB\r\n               */\n    GainAnalysis.STEPS_per_dB = 100.; /**\r\n                                      * Table entries for 0...MAX_dB (normal max. values are 70...80 dB)\r\n                                      */\n    GainAnalysis.MAX_dB = 120.;\n    GainAnalysis.GAIN_NOT_ENOUGH_SAMPLES = -24601;\n    GainAnalysis.GAIN_ANALYSIS_ERROR = 0;\n    GainAnalysis.GAIN_ANALYSIS_OK = 1;\n    GainAnalysis.INIT_GAIN_ANALYSIS_ERROR = 0;\n    GainAnalysis.INIT_GAIN_ANALYSIS_OK = 1;\n    GainAnalysis.YULE_ORDER = 10;\n    GainAnalysis.MAX_ORDER = GainAnalysis.YULE_ORDER;\n    GainAnalysis.MAX_SAMP_FREQ = 48000;\n    GainAnalysis.RMS_WINDOW_TIME_NUMERATOR = 1;\n    GainAnalysis.RMS_WINDOW_TIME_DENOMINATOR = 20;\n    GainAnalysis.MAX_SAMPLES_PER_WINDOW = GainAnalysis.MAX_SAMP_FREQ * GainAnalysis.RMS_WINDOW_TIME_NUMERATOR / GainAnalysis.RMS_WINDOW_TIME_DENOMINATOR + 1;\n    function GainAnalysis() {\n      /**\r\n      * calibration value for 89dB\r\n      */\n      var PINK_REF = 64.82;\n      var YULE_ORDER = GainAnalysis.YULE_ORDER; /**\r\n                                                * percentile which is louder than the proposed level\r\n                                                */\n      var RMS_PERCENTILE = 0.95; /**\r\n                                 * maximum allowed sample frequency [Hz]\r\n                                 */\n      var MAX_SAMP_FREQ = GainAnalysis.MAX_SAMP_FREQ;\n      var RMS_WINDOW_TIME_NUMERATOR = GainAnalysis.RMS_WINDOW_TIME_NUMERATOR; /**\r\n                                                                              * numerator / denominator = time slice size [s]\r\n                                                                              */\n      var RMS_WINDOW_TIME_DENOMINATOR = GainAnalysis.RMS_WINDOW_TIME_DENOMINATOR; /**\r\n                                                                                  * max. Samples per Time slice\r\n                                                                                  */\n      var MAX_SAMPLES_PER_WINDOW = GainAnalysis.MAX_SAMPLES_PER_WINDOW;\n      var ABYule = [[0.03857599435200, -3.84664617118067, -0.02160367184185, 7.81501653005538, -0.00123395316851, -11.34170355132042, -0.00009291677959, 13.05504219327545, -0.01655260341619, -12.28759895145294, 0.02161526843274, 9.48293806319790, -0.02074045215285, -5.87257861775999, 0.00594298065125, 2.75465861874613, 0.00306428023191, -0.86984376593551, 0.00012025322027, 0.13919314567432, 0.00288463683916], [0.05418656406430, -3.47845948550071, -0.02911007808948, 6.36317777566148, -0.00848709379851, -8.54751527471874, -0.00851165645469, 9.47693607801280, -0.00834990904936, -8.81498681370155, 0.02245293253339, 6.85401540936998, -0.02596338512915, -4.39470996079559, 0.01624864962975, 2.19611684890774, -0.00240879051584, -0.75104302451432, 0.00674613682247, 0.13149317958808, -0.00187763777362], [0.15457299681924, -2.37898834973084, -0.09331049056315, 2.84868151156327, -0.06247880153653, -2.64577170229825, 0.02163541888798, 2.23697657451713, -0.05588393329856, -1.67148153367602, 0.04781476674921, 1.00595954808547, 0.00222312597743, -0.45953458054983, 0.03174092540049, 0.16378164858596, -0.01390589421898, -0.05032077717131, 0.00651420667831, 0.02347897407020, -0.00881362733839], [0.30296907319327, -1.61273165137247, -0.22613988682123, 1.07977492259970, -0.08587323730772, -0.25656257754070, 0.03282930172664, -0.16276719120440, -0.00915702933434, -0.22638893773906, -0.02364141202522, 0.39120800788284, -0.00584456039913, -0.22138138954925, 0.06276101321749, 0.04500235387352, -0.00000828086748, 0.02005851806501, 0.00205861885564, 0.00302439095741, -0.02950134983287], [0.33642304856132, -1.49858979367799, -0.25572241425570, 0.87350271418188, -0.11828570177555, 0.12205022308084, 0.11921148675203, -0.80774944671438, -0.07834489609479, 0.47854794562326, -0.00469977914380, -0.12453458140019, -0.00589500224440, -0.04067510197014, 0.05724228140351, 0.08333755284107, 0.00832043980773, -0.04237348025746, -0.01635381384540, 0.02977207319925, -0.01760176568150], [0.44915256608450, -0.62820619233671, -0.14351757464547, 0.29661783706366, -0.22784394429749, -0.37256372942400, -0.01419140100551, 0.00213767857124, 0.04078262797139, -0.42029820170918, -0.12398163381748, 0.22199650564824, 0.04097565135648, 0.00613424350682, 0.10478503600251, 0.06747620744683, -0.01863887810927, 0.05784820375801, -0.03193428438915, 0.03222754072173, 0.00541907748707], [0.56619470757641, -1.04800335126349, -0.75464456939302, 0.29156311971249, 0.16242137742230, -0.26806001042947, 0.16744243493672, 0.00819999645858, -0.18901604199609, 0.45054734505008, 0.30931782841830, -0.33032403314006, -0.27562961986224, 0.06739368333110, 0.00647310677246, -0.04784254229033, 0.08647503780351, 0.01639907836189, -0.03788984554840, 0.01807364323573, -0.00588215443421], [0.58100494960553, -0.51035327095184, -0.53174909058578, -0.31863563325245, -0.14289799034253, -0.20256413484477, 0.17520704835522, 0.14728154134330, 0.02377945217615, 0.38952639978999, 0.15558449135573, -0.23313271880868, -0.25344790059353, -0.05246019024463, 0.01628462406333, -0.02505961724053, 0.06920467763959, 0.02442357316099, -0.03721611395801, 0.01818801111503, -0.00749618797172], [0.53648789255105, -0.25049871956020, -0.42163034350696, -0.43193942311114, -0.00275953611929, -0.03424681017675, 0.04267842219415, -0.04678328784242, -0.10214864179676, 0.26408300200955, 0.14590772289388, 0.15113130533216, -0.02459864859345, -0.17556493366449, -0.11202315195388, -0.18823009262115, -0.04060034127000, 0.05477720428674, 0.04788665548180, 0.04704409688120, -0.02217936801134]];\n      var ABButter = [[0.98621192462708, -1.97223372919527, -1.97242384925416, 0.97261396931306, 0.98621192462708], [0.98500175787242, -1.96977855582618, -1.97000351574484, 0.97022847566350, 0.98500175787242], [0.97938932735214, -1.95835380975398, -1.95877865470428, 0.95920349965459, 0.97938932735214], [0.97531843204928, -1.95002759149878, -1.95063686409857, 0.95124613669835, 0.97531843204928], [0.97316523498161, -1.94561023566527, -1.94633046996323, 0.94705070426118, 0.97316523498161], [0.96454515552826, -1.92783286977036, -1.92909031105652, 0.93034775234268, 0.96454515552826], [0.96009142950541, -1.91858953033784, -1.92018285901082, 0.92177618768381, 0.96009142950541], [0.95856916599601, -1.91542108074780, -1.91713833199203, 0.91885558323625, 0.95856916599601], [0.94597685600279, -1.88903307939452, -1.89195371200558, 0.89487434461664, 0.94597685600279]]; /**\r\nhen calling this procedure, make sure that ip[-order] and op[-order]\r\npoint to real data\r\nprivate void filterYule(final float[] input, int inputPos, float[] output,\n      //int outputPos, int nSamples, final float[] kernel) {\n      function filterYule(input, inputPos, output, outputPos, nSamples, kernel) {\n        while (nSamples-- != 0) {\n          /* 1e-10 is a hack to avoid slowdown because of denormals */output[outputPos] = 1e-10 + input[inputPos + 0] * kernel[0] - output[outputPos - 1] * kernel[1] + input[inputPos - 1] * kernel[2] - output[outputPos - 2] * kernel[3] + input[inputPos - 2] * kernel[4] - output[outputPos - 3] * kernel[5] + input[inputPos - 3] * kernel[6] - output[outputPos - 4] * kernel[7] + input[inputPos - 4] * kernel[8] - output[outputPos - 5] * kernel[9] + input[inputPos - 5] * kernel[10] - output[outputPos - 6] * kernel[11] + input[inputPos - 6] * kernel[12] - output[outputPos - 7] * kernel[13] + input[inputPos - 7] * kernel[14] - output[outputPos - 8] * kernel[15] + input[inputPos - 8] * kernel[16] - output[outputPos - 9] * kernel[17] + input[inputPos - 9] * kernel[18] - output[outputPos - 10] * kernel[19] + input[inputPos - 10] * kernel[20];\n          ++outputPos;\n          ++inputPos;\n        }\n      } //private void filterButter(final float[] input, int inputPos,\n      //    float[] output, int outputPos, int nSamples, final float[] kernel) {\n      function filterButter(input, inputPos, output, outputPos, nSamples, kernel) {\n        while (nSamples-- != 0) {\n          output[outputPos] = input[inputPos + 0] * kernel[0] - output[outputPos - 1] * kernel[1] + input[inputPos - 1] * kernel[2] - output[outputPos - 2] * kernel[3] + input[inputPos - 2] * kernel[4];\n          ++outputPos;\n          ++inputPos;\n        }\n      } /**\r\n        * @return INIT_GAIN_ANALYSIS_OK if successful, INIT_GAIN_ANALYSIS_ERROR if\r\n        *         not\r\n        */\n      function ResetSampleFrequency(rgData, samplefreq) {\n        /* zero out initial values */for (var i = 0; i < MAX_ORDER; i++) {\n          rgData.linprebuf[i] = rgData.lstepbuf[i] = rgData.loutbuf[i] = rgData.rinprebuf[i] = rgData.rstepbuf[i] = rgData.routbuf[i] = 0.;\n        }\n        switch (0 | samplefreq) {\n          case 48000:\n            rgData.reqindex = 0;\n            break;\n          case 44100:\n            rgData.reqindex = 1;\n            break;\n          case 32000:\n            rgData.reqindex = 2;\n            break;\n          case 24000:\n            rgData.reqindex = 3;\n            break;\n          case 22050:\n            rgData.reqindex = 4;\n            break;\n          case 16000:\n            rgData.reqindex = 5;\n            break;\n          case 12000:\n            rgData.reqindex = 6;\n            break;\n          case 11025:\n            rgData.reqindex = 7;\n            break;\n          case 8000:\n            rgData.reqindex = 8;\n            break;\n          default:\n            return INIT_GAIN_ANALYSIS_ERROR;\n        }\n        rgData.sampleWindow = 0 | (samplefreq * RMS_WINDOW_TIME_NUMERATOR + RMS_WINDOW_TIME_DENOMINATOR - 1) / RMS_WINDOW_TIME_DENOMINATOR;\n        rgData.lsum = 0.;\n        rgData.rsum = 0.;\n        rgData.totsamp = 0;\n        Arrays.ill(rgData.A, 0);\n        return INIT_GAIN_ANALYSIS_OK;\n      }\n      this.InitGainAnalysis = function (rgData, samplefreq) {\n        if (ResetSampleFrequency(rgData, samplefreq) != INIT_GAIN_ANALYSIS_OK) {\n          return INIT_GAIN_ANALYSIS_ERROR;\n        }\n        rgData.linpre = MAX_ORDER;\n        rgData.rinpre = MAX_ORDER;\n        rgData.lstep = MAX_ORDER;\n        rgData.rstep = MAX_ORDER;\n        rgData.lout = MAX_ORDER;\n        rgData.rout = MAX_ORDER;\n        Arrays.fill(rgData.B, 0);\n        return INIT_GAIN_ANALYSIS_OK;\n      }; /**\r\n         * square\r\n         */\n      function fsqr(d) {\n        return d * d;\n      }\n      this.AnalyzeSamples = function (rgData, left_samples, left_samplesPos, right_samples, right_samplesPos, num_samples, num_channels) {\n        var curleft;\n        var curleftBase;\n        var curright;\n        var currightBase;\n        var batchsamples;\n        var cursamples;\n        var cursamplepos;\n        if (num_samples == 0) return GAIN_ANALYSIS_OK;\n        cursamplepos = 0;\n        batchsamples = num_samples;\n        switch (num_channels) {\n          case 1:\n            right_samples = left_samples;\n            right_samplesPos = left_samplesPos;\n            break;\n          case 2:\n            break;\n          default:\n            return GAIN_ANALYSIS_ERROR;\n        }\n        if (num_samples < MAX_ORDER) {\n          System.arraycopy(left_samples, left_samplesPos, rgData.linprebuf, MAX_ORDER, num_samples);\n          System.arraycopy(right_samples, right_samplesPos, rgData.rinprebuf, MAX_ORDER, num_samples);\n        } else {\n          System.arraycopy(left_samples, left_samplesPos, rgData.linprebuf, MAX_ORDER, MAX_ORDER);\n          System.arraycopy(right_samples, right_samplesPos, rgData.rinprebuf, MAX_ORDER, MAX_ORDER);\n        }\n        while (batchsamples > 0) {\n          cursamples = batchsamples > rgData.sampleWindow - rgData.totsamp ? rgData.sampleWindow - rgData.totsamp : batchsamples;\n          if (cursamplepos < MAX_ORDER) {\n            curleft = rgData.linpre + cursamplepos;\n            curleftBase = rgData.linprebuf;\n            curright = rgData.rinpre + cursamplepos;\n            currightBase = rgData.rinprebuf;\n            if (cursamples > MAX_ORDER - cursamplepos) cursamples = MAX_ORDER - cursamplepos;\n          } else {\n            curleft = left_samplesPos + cursamplepos;\n            curleftBase = left_samples;\n            curright = right_samplesPos + cursamplepos;\n            currightBase = right_samples;\n          }\n          filterYule(curleftBase, curleft, rgData.lstepbuf, rgData.lstep + rgData.totsamp, cursamples, ABYule[rgData.reqindex]);\n          filterYule(currightBase, curright, rgData.rstepbuf, rgData.rstep + rgData.totsamp, cursamples, ABYule[rgData.reqindex]);\n          filterButter(rgData.lstepbuf, rgData.lstep + rgData.totsamp, rgData.loutbuf, rgData.lout + rgData.totsamp, cursamples, ABButter[rgData.reqindex]);\n          filterButter(rgData.rstepbuf, rgData.rstep + rgData.totsamp, rgData.routbuf, rgData.rout + rgData.totsamp, cursamples, ABButter[rgData.reqindex]);\n          curleft = rgData.lout + rgData.totsamp; /* Get the squared values */\n          curleftBase = rgData.loutbuf;\n          curright = rgData.rout + rgData.totsamp;\n          currightBase = rgData.routbuf;\n          var i = cursamples % 8;\n          while (i-- != 0) {\n            rgData.lsum += fsqr(curleftBase[curleft++]);\n            rgData.rsum += fsqr(currightBase[curright++]);\n          }\n          i = cursamples / 8;\n          while (i-- != 0) {\n            rgData.lsum += fsqr(curleftBase[curleft + 0]) + fsqr(curleftBase[curleft + 1]) + fsqr(curleftBase[curleft + 2]) + fsqr(curleftBase[curleft + 3]) + fsqr(curleftBase[curleft + 4]) + fsqr(curleftBase[curleft + 5]) + fsqr(curleftBase[curleft + 6]) + fsqr(curleftBase[curleft + 7]);\n            curleft += 8;\n            rgData.rsum += fsqr(currightBase[curright + 0]) + fsqr(currightBase[curright + 1]) + fsqr(currightBase[curright + 2]) + fsqr(currightBase[curright + 3]) + fsqr(currightBase[curright + 4]) + fsqr(currightBase[curright + 5]) + fsqr(currightBase[curright + 6]) + fsqr(currightBase[curright + 7]);\n            curright += 8;\n          }\n          batchsamples -= cursamples;\n          cursamplepos += cursamples;\n          rgData.totsamp += cursamples;\n          if (rgData.totsamp == rgData.sampleWindow) {\n            /* Get the Root Mean Square (RMS) for this set of samples */var val = GainAnalysis.STEPS_per_dB * 10. * Math.log10((rgData.lsum + rgData.rsum) / rgData.totsamp * 0.5 + 1.e-37);\n            var ival = val <= 0 ? 0 : 0 | val;\n            if (ival >= rgData.A.length) ival = rgData.A.length - 1;\n            rgData.A[ival]++;\n            rgData.lsum = rgData.rsum = 0.;\n            System.arraycopy(rgData.loutbuf, rgData.totsamp, rgData.loutbuf, 0, MAX_ORDER);\n            System.arraycopy(rgData.routbuf, rgData.totsamp, rgData.routbuf, 0, MAX_ORDER);\n            System.arraycopy(rgData.lstepbuf, rgData.totsamp, rgData.lstepbuf, 0, MAX_ORDER);\n            System.arraycopy(rgData.rstepbuf, rgData.totsamp, rgData.rstepbuf, 0, MAX_ORDER);\n            rgData.totsamp = 0;\n          }\n          if (rgData.totsamp > rgData.sampleWindow) {\n            /*\r\n            * somehow I really screwed up: Error in programming! Contact\r\n            * author about totsamp > sampleWindow\r\n            */\n            return GAIN_ANALYSIS_ERROR;\n          }\n        }\n        if (num_samples < MAX_ORDER) {\n          System.arraycopy(rgData.linprebuf, num_samples, rgData.linprebuf, 0, MAX_ORDER - num_samples);\n          System.arraycopy(rgData.rinprebuf, num_samples, rgData.rinprebuf, 0, MAX_ORDER - num_samples);\n          System.arraycopy(left_samples, left_samplesPos, rgData.linprebuf, MAX_ORDER - num_samples, num_samples);\n          System.arraycopy(right_samples, right_samplesPos, rgData.rinprebuf, MAX_ORDER - num_samples, num_samples);\n        } else {\n          System.arraycopy(left_samples, left_samplesPos + num_samples - MAX_ORDER, rgData.linprebuf, 0, MAX_ORDER);\n          System.arraycopy(right_samples, right_samplesPos + num_samples - MAX_ORDER, rgData.rinprebuf, 0, MAX_ORDER);\n        }\n        return GAIN_ANALYSIS_OK;\n      };\n      function analyzeResult(Array, len) {\n        var i;\n        var elems = 0;\n        for (i = 0; i < len; i++) {\n          elems += Array[i];\n        }\n        if (elems == 0) return GAIN_NOT_ENOUGH_SAMPLES;\n        var upper = 0 | Math.ceil(elems * (1. - RMS_PERCENTILE));\n        for (i = len; i-- > 0;) {\n          if ((upper -= Array[i]) <= 0) break;\n        } //return (float) ((float) PINK_REF - (float) i / (float) STEPS_per_dB);\n        return PINK_REF - i / GainAnalysis.STEPS_per_dB;\n      }\n      this.GetTitleGain = function (rgData) {\n        var retval = analyzeResult(rgData.A, rgData.A.length);\n        for (var i = 0; i < rgData.A.length; i++) {\n          rgData.B[i] += rgData.A[i];\n          rgData.A[i] = 0;\n        }\n        for (var i = 0; i < MAX_ORDER; i++) {\n          rgData.linprebuf[i] = rgData.lstepbuf[i] = rgData.loutbuf[i] = rgData.rinprebuf[i] = rgData.rstepbuf[i] = rgData.routbuf[i] = 0.;\n        }\n        rgData.totsamp = 0;\n        rgData.lsum = rgData.rsum = 0.;\n        return retval;\n      };\n    }\n    function Presets() {\n      function VBRPresets(qual, comp, compS, y, shThreshold, shThresholdS, adj, adjShort, lower, curve, sens, inter, joint, mod, fix) {\n        this.vbr_q = qual;\n        this.quant_comp = comp;\n        this.quant_comp_s = compS;\n        this.expY = y;\n        this.st_lrm = shThreshold;\n        this.st_s = shThresholdS;\n        this.masking_adj = adj;\n        this.masking_adj_short = adjShort;\n        this.ath_lower = lower;\n        this.ath_curve = curve;\n        this.ath_sensitivity = sens;\n        this.interch = inter;\n        this.safejoint = joint;\n        this.sfb21mod = mod;\n        this.msfix = fix;\n      }\n      function ABRPresets(kbps, comp, compS, joint, fix, shThreshold, shThresholdS, bass, sc, mask, lower, curve, interCh, sfScale) {\n        this.quant_comp = comp;\n        this.quant_comp_s = compS;\n        this.safejoint = joint;\n        this.nsmsfix = fix;\n        this.st_lrm = shThreshold;\n        this.st_s = shThresholdS;\n        this.nsbass = bass;\n        this.scale = sc;\n        this.masking_adj = mask;\n        this.ath_lower = lower;\n        this.ath_curve = curve;\n        this.interch = interCh;\n        this.sfscale = sfScale;\n      }\n      var lame;\n      this.setModules = function (_lame) {\n        lame = _lame;\n      }; /**\r\n         * <PRE>\r\n         * Switch mappings for VBR mode VBR_RH\r\n         *             vbr_q  qcomp_l  qcomp_s  expY  st_lrm   st_s  mask adj_l  adj_s  ath_lower  ath_curve  ath_sens  interChR  safejoint sfb21mod  msfix\r\n         * </PRE>\r\n         */\n      var vbr_old_switch_map = [new VBRPresets(0, 9, 9, 0, 5.20, 125.0, -4.2, -6.3, 4.8, 1, 0, 0, 2, 21, 0.97), new VBRPresets(1, 9, 9, 0, 5.30, 125.0, -3.6, -5.6, 4.5, 1.5, 0, 0, 2, 21, 1.35), new VBRPresets(2, 9, 9, 0, 5.60, 125.0, -2.2, -3.5, 2.8, 2, 0, 0, 2, 21, 1.49), new VBRPresets(3, 9, 9, 1, 5.80, 130.0, -1.8, -2.8, 2.6, 3, -4, 0, 2, 20, 1.64), new VBRPresets(4, 9, 9, 1, 6.00, 135.0, -0.7, -1.1, 1.1, 3.5, -8, 0, 2, 0, 1.79), new VBRPresets(5, 9, 9, 1, 6.40, 140.0, 0.5, 0.4, -7.5, 4, -12, 0.0002, 0, 0, 1.95), new VBRPresets(6, 9, 9, 1, 6.60, 145.0, 0.67, 0.65, -14.7, 6.5, -19, 0.0004, 0, 0, 2.30), new VBRPresets(7, 9, 9, 1, 6.60, 145.0, 0.8, 0.75, -19.7, 8, -22, 0.0006, 0, 0, 2.70), new VBRPresets(8, 9, 9, 1, 6.60, 145.0, 1.2, 1.15, -27.5, 10, -23, 0.0007, 0, 0, 0), new VBRPresets(9, 9, 9, 1, 6.60, 145.0, 1.6, 1.6, -36, 11, -25, 0.0008, 0, 0, 0), new VBRPresets(10, 9, 9, 1, 6.60, 145.0, 2.0, 2.0, -36, 12, -25, 0.0008, 0, 0, 0)]; /**\r\nr\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *                 vbr_q  qcomp_l  qcomp_s  expY  st_lrm   st_s  mask adj_l  adj_s  ath_lower  ath_curve  ath_sens  interChR  safejoint sfb21mod  msfix\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * </PRE>\r\nn      var vbr_psy_switch_map = [new VBRPresets(0, 9, 9, 0, 4.20, 25.0, -7.0, -4.0, 7.5, 1, 0, 0, 2, 26, 0.97), new VBRPresets(1, 9, 9, 0, 4.20, 25.0, -5.6, -3.6, 4.5, 1.5, 0, 0, 2, 21, 1.35), new VBRPresets(2, 9, 9, 0, 4.20, 25.0, -4.4, -1.8, 2, 2, 0, 0, 2, 18, 1.49), new VBRPresets(3, 9, 9, 1, 4.20, 25.0, -3.4, -1.25, 1.1, 3, -4, 0, 2, 15, 1.64), new VBRPresets(4, 9, 9, 1, 4.20, 25.0, -2.2, 0.1, 0, 3.5, -8, 0, 2, 0, 1.79), new VBRPresets(5, 9, 9, 1, 4.20, 25.0, -1.0, 1.65, -7.7, 4, -12, 0.0002, 0, 0, 1.95), new VBRPresets(6, 9, 9, 1, 4.20, 25.0, -0.0, 2.47, -7.7, 6.5, -19, 0.0004, 0, 0, 2), new VBRPresets(7, 9, 9, 1, 4.20, 25.0, 0.5, 2.0, -14.5, 8, -22, 0.0006, 0, 0, 2), new VBRPresets(8, 9, 9, 1, 4.20, 25.0, 1.0, 2.4, -22.0, 10, -23, 0.0007, 0, 0, 2), new VBRPresets(9, 9, 9, 1, 4.20, 25.0, 1.5, 2.95, -30.0, 11, -25, 0.0008, 0, 0, 2), new VBRPresets(10, 9, 9, 1, 4.20, 25.0, 2.0, 2.95, -36.0, 12, -30, 0.0008, 0, 0, 2)];\n      function apply_vbr_preset(gfp, a, enforce) {\n        var vbr_preset = gfp.VBR == VbrMode.vbr_rh ? vbr_old_switch_map : vbr_psy_switch_map;\n        var x = gfp.VBR_q_frac;\n        var p = vbr_preset[a];\n        var q = vbr_preset[a + 1];\n        var set = p; // NOOP(vbr_q);\n        // NOOP(quant_comp);\n        // NOOP(quant_comp_s);\n        // NOOP(expY);\n        p.st_lrm = p.st_lrm + x * (q.st_lrm - p.st_lrm); // LERP(st_lrm);\n        p.st_s = p.st_s + x * (q.st_s - p.st_s); // LERP(st_s);\n        p.masking_adj = p.masking_adj + x * (q.masking_adj - p.masking_adj); // LERP(masking_adj);\n        p.masking_adj_short = p.masking_adj_short + x * (q.masking_adj_short - p.masking_adj_short); // LERP(masking_adj_short);\n        p.ath_lower = p.ath_lower + x * (q.ath_lower - p.ath_lower); // LERP(ath_lower);\n        p.ath_curve = p.ath_curve + x * (q.ath_curve - p.ath_curve); // LERP(ath_curve);\n        p.ath_sensitivity = p.ath_sensitivity + x * (q.ath_sensitivity - p.ath_sensitivity); // LERP(ath_sensitivity);\n        p.interch = p.interch + x * (q.interch - p.interch); // LERP(interch);\n        // NOOP(safejoint);\n        // NOOP(sfb21mod);\n        p.msfix = p.msfix + x * (q.msfix - p.msfix); // LERP(msfix);\n        lame_set_VBR_q(gfp, set.vbr_q);\n        if (enforce != 0) gfp.quant_comp = set.quant_comp;else if (!(Math.abs(gfp.quant_comp - -1) > 0)) gfp.quant_comp = set.quant_comp; // SET_OPTION(quant_comp, set.quant_comp, -1);\n        if (enforce != 0) gfp.quant_comp_short = set.quant_comp_s;else if (!(Math.abs(gfp.quant_comp_short - -1) > 0)) gfp.quant_comp_short = set.quant_comp_s; // SET_OPTION(quant_comp_short, set.quant_comp_s, -1);\n        if (set.expY != 0) {\n          gfp.experimentalY = set.expY != 0;\n        }\n        if (enforce != 0) gfp.internal_flags.nsPsy.attackthre = set.st_lrm;else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre - -1) > 0)) gfp.internal_flags.nsPsy.attackthre = set.st_lrm; // SET_OPTION(short_threshold_lrm, set.st_lrm, -1);\n        if (enforce != 0) gfp.internal_flags.nsPsy.attackthre_s = set.st_s;else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre_s - -1) > 0)) gfp.internal_flags.nsPsy.attackthre_s = set.st_s; // SET_OPTION(short_threshold_s, set.st_s, -1);\n        if (enforce != 0) gfp.maskingadjust = set.masking_adj;else if (!(Math.abs(gfp.maskingadjust - 0) > 0)) gfp.maskingadjust = set.masking_adj; // SET_OPTION(maskingadjust, set.masking_adj, 0);\n        if (enforce != 0) gfp.maskingadjust_short = set.masking_adj_short;else if (!(Math.abs(gfp.maskingadjust_short - 0) > 0)) gfp.maskingadjust_short = set.masking_adj_short; // SET_OPTION(maskingadjust_short, set.masking_adj_short, 0);\n        if (enforce != 0) gfp.ATHlower = -set.ath_lower / 10.0;else if (!(Math.abs(-gfp.ATHlower * 10.0 - 0) > 0)) gfp.ATHlower = -set.ath_lower / 10.0; // SET_OPTION(ATHlower, set.ath_lower, 0);\n        if (enforce != 0) gfp.ATHcurve = set.ath_curve;else if (!(Math.abs(gfp.ATHcurve - -1) > 0)) gfp.ATHcurve = set.ath_curve; // SET_OPTION(ATHcurve, set.ath_curve, -1);\n        if (enforce != 0) gfp.athaa_sensitivity = set.ath_sensitivity;else if (!(Math.abs(gfp.athaa_sensitivity - -1) > 0)) gfp.athaa_sensitivity = set.ath_sensitivity; // SET_OPTION(athaa_sensitivity, set.ath_sensitivity, 0);\n        if (set.interch > 0) {\n          if (enforce != 0) gfp.interChRatio = set.interch;else if (!(Math.abs(gfp.interChRatio - -1) > 0)) gfp.interChRatio = set.interch; // SET_OPTION(interChRatio, set.interch, -1);\n        } /* parameters for which there is no proper set/get interface */\n        if (set.safejoint > 0) {\n          gfp.exp_nspsytune = gfp.exp_nspsytune | set.safejoint;\n        }\n        if (set.sfb21mod > 0) {\n          gfp.exp_nspsytune = gfp.exp_nspsytune | set.sfb21mod << 20;\n        }\n        if (enforce != 0) gfp.msfix = set.msfix;else if (!(Math.abs(gfp.msfix - -1) > 0)) gfp.msfix = set.msfix; // SET_OPTION(msfix, set.msfix, -1);\n        if (enforce == 0) {\n          gfp.VBR_q = a;\n          gfp.VBR_q_frac = x;\n        }\n      } /**\r\n        * <PRE>\r\n        *  Switch mappings for ABR mode\r\n        *\r\n        *              kbps  quant q_s safejoint nsmsfix st_lrm  st_s  ns-bass scale   msk ath_lwr ath_curve  interch , sfscale\r\n        * </PRE>\r\n        */\n      var abr_switch_map = [new ABRPresets(8, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -30.0, 11, 0.0012, 1), /*   8, impossible to use in stereo */new ABRPresets(16, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -25.0, 11, 0.0010, 1), /*  16 */new ABRPresets(24, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -20.0, 11, 0.0010, 1), /*  24 */new ABRPresets(32, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -15.0, 11, 0.0010, 1), /*  32 */new ABRPresets(40, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -10.0, 11, 0.0009, 1), /*  40 */new ABRPresets(48, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -10.0, 11, 0.0009, 1), /*  48 */new ABRPresets(56, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -6.0, 11, 0.0008, 1), /*  56 */new ABRPresets(64, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -2.0, 11, 0.0008, 1), /*  64 */new ABRPresets(80, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, .0, 8, 0.0007, 1), /*  80 */new ABRPresets(96, 9, 9, 0, 2.50, 6.60, 145, 0, 0.95, 0, 1.0, 5.5, 0.0006, 1), /*  96 */new ABRPresets(112, 9, 9, 0, 2.25, 6.60, 145, 0, 0.95, 0, 2.0, 4.5, 0.0005, 1), /* 112 */new ABRPresets(128, 9, 9, 0, 1.95, 6.40, 140, 0, 0.95, 0, 3.0, 4, 0.0002, 1), /* 128 */new ABRPresets(160, 9, 9, 1, 1.79, 6.00, 135, 0, 0.95, -2, 5.0, 3.5, 0, 1), /* 160 */new ABRPresets(192, 9, 9, 1, 1.49, 5.60, 125, 0, 0.97, -4, 7.0, 3, 0, 0), /* 192 */new ABRPresets(224, 9, 9, 1, 1.25, 5.20, 125, 0, 0.98, -6, 9.0, 2, 0, 0), /* 224 */new ABRPresets(256, 9, 9, 1, 0.97, 5.20, 125, 0, 1.00, -8, 10.0, 1, 0, 0), /* 256 */new ABRPresets(320, 9, 9, 1, 0.90, 5.20, 125, 0, 1.00, -10, 12.0, 0, 0, 0) /* 320 */];\n      function apply_abr_preset(gfp, preset, enforce) {\n        /* Variables for the ABR stuff */var actual_bitrate = preset;\n        var r = lame.nearestBitrateFullIndex(preset);\n        gfp.VBR = VbrMode.vbr_abr;\n        gfp.VBR_mean_bitrate_kbps = actual_bitrate;\n        gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps, 320);\n        gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps, 8);\n        gfp.brate = gfp.VBR_mean_bitrate_kbps;\n        if (gfp.VBR_mean_bitrate_kbps > 320) {\n          gfp.disable_reservoir = true;\n        } /* parameters for which there is no proper set/get interface */\n        if (abr_switch_map[r].safejoint > 0) gfp.exp_nspsytune = gfp.exp_nspsytune | 2; /* safejoint */\n        if (abr_switch_map[r].sfscale > 0) {\n          gfp.internal_flags.noise_shaping = 2;\n        } /* ns-bass tweaks */\n        if (Math.abs(abr_switch_map[r].nsbass) > 0) {\n          var k = int(abr_switch_map[r].nsbass * 4);\n          if (k < 0) k += 64;\n          gfp.exp_nspsytune = gfp.exp_nspsytune | k << 2;\n        }\n        if (enforce != 0) gfp.quant_comp = abr_switch_map[r].quant_comp;else if (!(Math.abs(gfp.quant_comp - -1) > 0)) gfp.quant_comp = abr_switch_map[r].quant_comp; // SET_OPTION(quant_comp, abr_switch_map[r].quant_comp, -1);\n        if (enforce != 0) gfp.quant_comp_short = abr_switch_map[r].quant_comp_s;else if (!(Math.abs(gfp.quant_comp_short - -1) > 0)) gfp.quant_comp_short = abr_switch_map[r].quant_comp_s; // SET_OPTION(quant_comp_short, abr_switch_map[r].quant_comp_s, -1);\n        if (enforce != 0) gfp.msfix = abr_switch_map[r].nsmsfix;else if (!(Math.abs(gfp.msfix - -1) > 0)) gfp.msfix = abr_switch_map[r].nsmsfix; // SET_OPTION(msfix, abr_switch_map[r].nsmsfix, -1);\n        if (enforce != 0) gfp.internal_flags.nsPsy.attackthre = abr_switch_map[r].st_lrm;else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre - -1) > 0)) gfp.internal_flags.nsPsy.attackthre = abr_switch_map[r].st_lrm; // SET_OPTION(short_threshold_lrm, abr_switch_map[r].st_lrm, -1);\n        if (enforce != 0) gfp.internal_flags.nsPsy.attackthre_s = abr_switch_map[r].st_s;else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre_s - -1) > 0)) gfp.internal_flags.nsPsy.attackthre_s = abr_switch_map[r].st_s; // SET_OPTION(short_threshold_s, abr_switch_map[r].st_s, -1);\n        /*\r\n                         * ABR seems to have big problems with clipping, especially at low\r\n                         * bitrates\r\n                         */ /*\r\n                            * so we compensate for that here by using a scale value depending on\r\n                            * bitrate\r\n                            */\n        if (enforce != 0) gfp.scale = abr_switch_map[r].scale;else if (!(Math.abs(gfp.scale - -1) > 0)) gfp.scale = abr_switch_map[r].scale; // SET_OPTION(scale, abr_switch_map[r].scale, -1);\n        if (enforce != 0) gfp.maskingadjust = abr_switch_map[r].masking_adj;else if (!(Math.abs(gfp.maskingadjust - 0) > 0)) gfp.maskingadjust = abr_switch_map[r].masking_adj; // SET_OPTION(maskingadjust, abr_switch_map[r].masking_adj, 0);\n        if (abr_switch_map[r].masking_adj > 0) {\n          if (enforce != 0) gfp.maskingadjust_short = abr_switch_map[r].masking_adj * .9;else if (!(Math.abs(gfp.maskingadjust_short - 0) > 0)) gfp.maskingadjust_short = abr_switch_map[r].masking_adj * .9; // SET_OPTION(maskingadjust_short, abr_switch_map[r].masking_adj *\n          // .9, 0);\n        } else {\n          if (enforce != 0) gfp.maskingadjust_short = abr_switch_map[r].masking_adj * 1.1;else if (!(Math.abs(gfp.maskingadjust_short - 0) > 0)) gfp.maskingadjust_short = abr_switch_map[r].masking_adj * 1.1; // SET_OPTION(maskingadjust_short, abr_switch_map[r].masking_adj *\n          // 1.1, 0);\n        }\n        if (enforce != 0) gfp.ATHlower = -abr_switch_map[r].ath_lower / 10.;else if (!(Math.abs(-gfp.ATHlower * 10. - 0) > 0)) gfp.ATHlower = -abr_switch_map[r].ath_lower / 10.; // SET_OPTION(ATHlower, abr_switch_map[r].ath_lower, 0);\n        if (enforce != 0) gfp.ATHcurve = abr_switch_map[r].ath_curve;else if (!(Math.abs(gfp.ATHcurve - -1) > 0)) gfp.ATHcurve = abr_switch_map[r].ath_curve; // SET_OPTION(ATHcurve, abr_switch_map[r].ath_curve, -1);\n        if (enforce != 0) gfp.interChRatio = abr_switch_map[r].interch;else if (!(Math.abs(gfp.interChRatio - -1) > 0)) gfp.interChRatio = abr_switch_map[r].interch; // SET_OPTION(interChRatio, abr_switch_map[r].interch, -1);\n        return preset;\n      }\n      this.apply_preset = function (gfp, preset, enforce) {\n        /* translate legacy presets */switch (preset) {\n          case Lame.R3MIX:\n            {\n              preset = Lame.V3;\n              gfp.VBR = VbrMode.vbr_mtrh;\n              break;\n            }\n          case Lame.MEDIUM:\n            {\n              preset = Lame.V4;\n              gfp.VBR = VbrMode.vbr_rh;\n              break;\n            }\n          case Lame.MEDIUM_FAST:\n            {\n              preset = Lame.V4;\n              gfp.VBR = VbrMode.vbr_mtrh;\n              break;\n            }\n          case Lame.STANDARD:\n            {\n              preset = Lame.V2;\n              gfp.VBR = VbrMode.vbr_rh;\n              break;\n            }\n          case Lame.STANDARD_FAST:\n            {\n              preset = Lame.V2;\n              gfp.VBR = VbrMode.vbr_mtrh;\n              break;\n            }\n          case Lame.EXTREME:\n            {\n              preset = Lame.V0;\n              gfp.VBR = VbrMode.vbr_rh;\n              break;\n            }\n          case Lame.EXTREME_FAST:\n            {\n              preset = Lame.V0;\n              gfp.VBR = VbrMode.vbr_mtrh;\n              break;\n            }\n          case Lame.INSANE:\n            {\n              preset = 320;\n              gfp.preset = preset;\n              apply_abr_preset(gfp, preset, enforce);\n              gfp.VBR = VbrMode.vbr_off;\n              return preset;\n            }\n        }\n        gfp.preset = preset;\n        {\n          switch (preset) {\n            case Lame.V9:\n              apply_vbr_preset(gfp, 9, enforce);\n              return preset;\n            case Lame.V8:\n              apply_vbr_preset(gfp, 8, enforce);\n              return preset;\n            case Lame.V7:\n              apply_vbr_preset(gfp, 7, enforce);\n              return preset;\n            case Lame.V6:\n              apply_vbr_preset(gfp, 6, enforce);\n              return preset;\n            case Lame.V5:\n              apply_vbr_preset(gfp, 5, enforce);\n              return preset;\n            case Lame.V4:\n              apply_vbr_preset(gfp, 4, enforce);\n              return preset;\n            case Lame.V3:\n              apply_vbr_preset(gfp, 3, enforce);\n              return preset;\n            case Lame.V2:\n              apply_vbr_preset(gfp, 2, enforce);\n              return preset;\n            case Lame.V1:\n              apply_vbr_preset(gfp, 1, enforce);\n              return preset;\n            case Lame.V0:\n              apply_vbr_preset(gfp, 0, enforce);\n              return preset;\n            default:\n              break;\n          }\n        }\n        if (8 <= preset && preset <= 320) {\n          return apply_abr_preset(gfp, preset, enforce);\n        } /* no corresponding preset found */\n        gfp.preset = 0;\n        return preset;\n      }; // Rest from getset.c:\n      /**\r\n                   * VBR quality level.<BR>\r\n                   * 0 = highest<BR>\r\n                   * 9 = lowest\r\n                   */\n      function lame_set_VBR_q(gfp, VBR_q) {\n        var ret = 0;\n        if (0 > VBR_q) {\n          /* Unknown VBR quality level! */ret = -1;\n          VBR_q = 0;\n        }\n        if (9 < VBR_q) {\n          ret = -1;\n          VBR_q = 9;\n        }\n        gfp.VBR_q = VBR_q;\n        gfp.VBR_q_frac = 0;\n        return ret;\n      }\n    } /*\r\n      *      bit reservoir source file\r\n      *\r\n      *      Copyright (c) 1999-2000 Mark Taylor\r\n      *\r\n      * This library is free software; you can redistribute it and/or\r\n      * modify it under the terms of the GNU Lesser General Public\r\n      * License as published by the Free Software Foundation; either\r\n      * version 2 of the License, or (at your option) any later version.\r\n      *\r\n      * This library is distributed in the hope that it will be useful,\r\n      * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n      * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n      * Library General Public License for more details.\r\n      *\r\n      * You should have received a copy of the GNU Lesser General Public\r\n      * License along with this library; if not, write to the\r\n      * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\r\n      * Boston, MA 02111-1307, USA.\r\n      */ /* $Id: Reservoir.java,v 1.9 2011/05/24 20:48:06 kenchis Exp $ */ //package mp3;\n    /**\r\n             * ResvFrameBegin:<BR>\r\n             * Called (repeatedly) at the beginning of a frame. Updates the maximum size of\r\n             * the reservoir, and checks to make sure main_data_begin was set properly by\r\n             * the formatter<BR>\r\n             * Background information:\r\n             *\r\n             * This is the original text from the ISO standard. Because of sooo many bugs\r\n             * and irritations correcting comments are added in brackets []. A '^W' means\r\n             * you should remove the last word.\r\n             *\r\n             * <PRE>\r\n             *  1. The following rule can be used to calculate the maximum\r\n             *     number of bits used for one granule [^W frame]:<BR>\r\n             *     At the highest possible bitrate of Layer III (320 kbps\r\n             *     per stereo signal [^W^W^W], 48 kHz) the frames must be of\r\n             *     [^W^W^W are designed to have] constant length, i.e.\r\n             *     one buffer [^W^W the frame] length is:<BR>\r\n             *\r\n             *         320 kbps * 1152/48 kHz = 7680 bit = 960 byte\r\n             *\r\n             *     This value is used as the maximum buffer per channel [^W^W] at\r\n             *     lower bitrates [than 320 kbps]. At 64 kbps mono or 128 kbps\r\n             *     stereo the main granule length is 64 kbps * 576/48 kHz = 768 bit\r\n             *     [per granule and channel] at 48 kHz sampling frequency.\r\n             *     This means that there is a maximum deviation (short time buffer\r\n             *     [= reservoir]) of 7680 - 2*2*768 = 4608 bits is allowed at 64 kbps.\r\n             *     The actual deviation is equal to the number of bytes [with the\r\n             *     meaning of octets] denoted by the main_data_end offset pointer.\r\n             *     The actual maximum deviation is (2^9-1)*8 bit = 4088 bits\r\n             *     [for MPEG-1 and (2^8-1)*8 bit for MPEG-2, both are hard limits].\r\n             *     ... The xchange of buffer bits between the left and right channel\r\n             *     is allowed without restrictions [exception: dual channel].\r\n             *     Because of the [constructed] constraint on the buffer size\r\n             *     main_data_end is always set to 0 in the case of bit_rate_index==14,\r\n             *     i.e. data rate 320 kbps per stereo signal [^W^W^W]. In this case\r\n             *     all data are allocated between adjacent header [^W sync] words\r\n             *     [, i.e. there is no buffering at all].\r\n             * </PRE>\r\n             */\n    function Reservoir() {\n      var bs;\n      this.setModules = function (_bs) {\n        bs = _bs;\n      };\n      this.ResvFrameBegin = function (gfp, mean_bits) {\n        var gfc = gfp.internal_flags;\n        var maxmp3buf;\n        var l3_side = gfc.l3_side;\n        var frameLength = bs.getframebits(gfp);\n        mean_bits.bits = (frameLength - gfc.sideinfo_len * 8) / gfc.mode_gr; /**\r\n                                                                             * <PRE>\r\n                                                                             *  Meaning of the variables:\r\n                                                                             *      resvLimit: (0, 8, ..., 8*255 (MPEG-2), 8*511 (MPEG-1))\r\n                                                                             *          Number of bits can be stored in previous frame(s) due to\r\n                                                                             *          counter size constaints\r\n                                                                             *      maxmp3buf: ( ??? ... 8*1951 (MPEG-1 and 2), 8*2047 (MPEG-2.5))\r\n                                                                             *          Number of bits allowed to encode one frame (you can take 8*511 bit\r\n                                                                             *          from the bit reservoir and at most 8*1440 bit from the current\r\n                                                                             *          frame (320 kbps, 32 kHz), so 8*1951 bit is the largest possible\r\n                                                                             *          value for MPEG-1 and -2)\r\n                                                                             *\r\n                                                                             *          maximum allowed granule/channel size times 4 = 8*2047 bits.,\r\n                                                                             *          so this is the absolute maximum supported by the format.\r\n                                                                             *\r\n                                                                             *\r\n                                                                             *      fullFrameBits:  maximum number of bits available for encoding\r\n                                                                             *                      the current frame.\r\n                                                                             *\r\n                                                                             *      mean_bits:      target number of bits per granule.\r\n                                                                             *\r\n                                                                             *      frameLength:\r\n                                                                             *\r\n                                                                             *      gfc.ResvMax:   maximum allowed reservoir\r\n                                                                             *\r\n                                                                             *      gfc.ResvSize:  current reservoir size\r\n                                                                             *\r\n                                                                             *      l3_side.resvDrain_pre:\r\n                                                                             *         ancillary data to be added to previous frame:\r\n                                                                             *         (only usefull in VBR modes if it is possible to have\r\n                                                                             *         maxmp3buf < fullFrameBits)).  Currently disabled,\r\n                                                                             *         see #define NEW_DRAIN\r\n                                                                             *         2010-02-13: RH now enabled, it seems to be needed for CBR too,\r\n                                                                             *                     as there exists one example, where the FhG decoder\r\n                                                                             *                     can't decode a -b320 CBR file anymore.\r\n                                                                             *\r\n                                                                             *      l3_side.resvDrain_post:\r\n                                                                             *         ancillary data to be added to this frame:\r\n                                                                             *\r\n                                                                             * </PRE>\r\n                                                                             */ /* main_data_begin has 9 bits in MPEG-1, 8 bits MPEG-2 */\n        var resvLimit = 8 * 256 * gfc.mode_gr - 8; /*\r\n                                                   * maximum allowed frame size. dont use more than this number of bits,\r\n                                                   * even if the frame has the space for them:\r\n                                                   */\n        if (gfp.brate > 320) {\n          /* in freeformat the buffer is constant */maxmp3buf = 8 * int(gfp.brate * 1000 / (gfp.out_samplerate / 1152) / 8 + .5);\n        } else {\n          /*\r\n          * all mp3 decoders should have enough buffer to handle this value:\r\n          * size of a 320kbps 32kHz frame\r\n          */\n          maxmp3buf = 8 * 1440; /*\r\n                                * Bouvigne suggests this more lax interpretation of the ISO doc\r\n                                * instead of using 8*960.\r\n                                */\n          if (gfp.strict_ISO) {\n            maxmp3buf = 8 * int(320000 / (gfp.out_samplerate / 1152) / 8 + .5);\n          }\n        }\n        gfc.ResvMax = maxmp3buf - frameLength;\n        if (gfc.ResvMax > resvLimit) gfc.ResvMax = resvLimit;\n        if (gfc.ResvMax < 0 || gfp.disable_reservoir) gfc.ResvMax = 0;\n        var fullFrameBits = mean_bits.bits * gfc.mode_gr + Math.min(gfc.ResvSize, gfc.ResvMax);\n        if (fullFrameBits > maxmp3buf) fullFrameBits = maxmp3buf;\n        l3_side.resvDrain_pre = 0; // frame analyzer code\n        if (gfc.pinfo != null) {\n          /*\r\n           * expected bits per channel per granule [is this also right for\r\n           * mono/stereo, MPEG-1/2 ?]\r\n           */\n          gfc.pinfo.mean_bits = mean_bits.bits / 2;\n          gfc.pinfo.resvsize = gfc.ResvSize;\n        }\n        return fullFrameBits;\n      }; /**\r\n         * returns targ_bits: target number of bits to use for 1 granule<BR>\r\n         * extra_bits: amount extra available from reservoir<BR>\r\n         * Mark Taylor 4/99\r\n         */\n      this.ResvMaxBits = function (gfp, mean_bits, targ_bits, cbr) {\n        var gfc = gfp.internal_flags;\n        var add_bits;\n        var ResvSize = gfc.ResvSize,\n          ResvMax = gfc.ResvMax; /* compensate the saved bits used in the 1st granule */\n        if (cbr != 0) ResvSize += mean_bits;\n        if ((gfc.substep_shaping & 1) != 0) ResvMax *= 0.9;\n        targ_bits.bits = mean_bits; /* extra bits if the reservoir is almost full */\n        if (ResvSize * 10 > ResvMax * 9) {\n          add_bits = ResvSize - ResvMax * 9 / 10;\n          targ_bits.bits += add_bits;\n          gfc.substep_shaping |= 0x80;\n        } else {\n          add_bits = 0;\n          gfc.substep_shaping &= 0x7f; /*\r\n                                       * build up reservoir. this builds the reservoir a little slower\r\n                                       * than FhG. It could simple be mean_bits/15, but this was rigged to\r\n                                       * always produce 100 (the old value) at 128kbs\r\n                                       */\n          if (!gfp.disable_reservoir && 0 == (gfc.substep_shaping & 1)) targ_bits.bits -= .1 * mean_bits;\n        } /* amount from the reservoir we are allowed to use. ISO says 6/10 */\n        var extra_bits = ResvSize < gfc.ResvMax * 6 / 10 ? ResvSize : gfc.ResvMax * 6 / 10;\n        extra_bits -= add_bits;\n        if (extra_bits < 0) extra_bits = 0;\n        return extra_bits;\n      }; /**\r\n         * Called after a granule's bit allocation. Readjusts the size of the\r\n         * reservoir to reflect the granule's usage.\r\n         */\n      this.ResvAdjust = function (gfc, gi) {\n        gfc.ResvSize -= gi.part2_3_length + gi.part2_length;\n      }; /**\r\n         * Called after all granules in a frame have been allocated. Makes sure that\r\n         * the reservoir size is within limits, possibly by adding stuffing bits.\r\n         */\n      this.ResvFrameEnd = function (gfc, mean_bits) {\n        var over_bits;\n        var l3_side = gfc.l3_side;\n        gfc.ResvSize += mean_bits * gfc.mode_gr;\n        var stuffingBits = 0;\n        l3_side.resvDrain_post = 0;\n        l3_side.resvDrain_pre = 0; /* we must be byte aligned */\n        if ((over_bits = gfc.ResvSize % 8) != 0) stuffingBits += over_bits;\n        over_bits = gfc.ResvSize - stuffingBits - gfc.ResvMax;\n        if (over_bits > 0) {\n          stuffingBits += over_bits;\n        } /*\r\n          * NOTE: enabling the NEW_DRAIN code fixes some problems with FhG\r\n          * decoder shipped with MS Windows operating systems. Using this, it is\r\n          * even possible to use Gabriel's lax buffer consideration again, which\r\n          * assumes, any decoder should have a buffer large enough for a 320 kbps\r\n          * frame at 32 kHz sample rate.\r\n          *\r\n          * old drain code: lame -b320 BlackBird.wav --. does not play with\r\n          * GraphEdit.exe using FhG decoder V1.5 Build 50\r\n          *\r\n          * new drain code: lame -b320 BlackBird.wav --. plays fine with\r\n          * GraphEdit.exe using FhG decoder V1.5 Build 50\r\n          *\r\n          * Robert Hegemann, 2010-02-13.\r\n          */ /*\r\n             * drain as many bits as possible into previous frame ancillary data In\r\n             * particular, in VBR mode ResvMax may have changed, and we have to make\r\n             * sure main_data_begin does not create a reservoir bigger than ResvMax\r\n             * mt 4/00\r\n             */\n        {\n          var mdb_bytes = Math.min(l3_side.main_data_begin * 8, stuffingBits) / 8;\n          l3_side.resvDrain_pre += 8 * mdb_bytes;\n          stuffingBits -= 8 * mdb_bytes;\n          gfc.ResvSize -= 8 * mdb_bytes;\n          l3_side.main_data_begin -= mdb_bytes;\n        } /* drain the rest into this frames ancillary data */\n        l3_side.resvDrain_post += stuffingBits;\n        gfc.ResvSize -= stuffingBits;\n      };\n    } /**\r\n      * A Vbr header may be present in the ancillary data field of the first frame of\r\n      * an mp3 bitstream<BR>\r\n      * The Vbr header (optionally) contains\r\n      * <UL>\r\n      * <LI>frames total number of audio frames in the bitstream\r\n      * <LI>bytes total number of bytes in the bitstream\r\n      * <LI>toc table of contents\r\n      * </UL>\r\n      *\r\n      * toc (table of contents) gives seek points for random access.<BR>\r\n      * The ith entry determines the seek point for i-percent duration.<BR>\r\n      * seek point in bytes = (toc[i]/256.0) * total_bitstream_bytes<BR>\r\n      * e.g. half duration seek point = (toc[50]/256.0) * total_bitstream_bytes\r\n      */\n    VBRTag.NUMTOCENTRIES = 100;\n    VBRTag.MAXFRAMESIZE = 2880;\n    function VBRTag() {\n      var lame;\n      var bs;\n      var v;\n      this.setModules = function (_lame, _bs, _v) {\n        lame = _lame;\n        bs = _bs;\n        v = _v;\n      };\n      var FRAMES_FLAG = 0x0001;\n      var BYTES_FLAG = 0x0002;\n      var TOC_FLAG = 0x0004;\n      var VBR_SCALE_FLAG = 0x0008;\n      var NUMTOCENTRIES = VBRTag.NUMTOCENTRIES; /**\r\n                                                * (0xB40) the max freeformat 640 32kHz framesize.\r\n                                                */\n      var MAXFRAMESIZE = VBRTag.MAXFRAMESIZE; /**\r\n                                              * <PRE>\r\n                                              *    4 bytes for Header Tag\r\n                                              *    4 bytes for Header Flags\r\n                                              *  100 bytes for entry (toc)\r\n                                              *    4 bytes for frame size\r\n                                              *    4 bytes for stream size\r\n                                              *    4 bytes for VBR scale. a VBR quality indicator: 0=best 100=worst\r\n                                              *   20 bytes for LAME tag.  for example, \"LAME3.12 (beta 6)\"\r\n                                              * ___________\r\n                                              *  140 bytes\r\n                                              * </PRE>\r\n                                              */\n      var VBRHEADERSIZE = NUMTOCENTRIES + 4 + 4 + 4 + 4 + 4;\n      var LAMEHEADERSIZE = VBRHEADERSIZE + 9 + 1 + 1 + 8 + 1 + 1 + 3 + 1 + 1 + 2 + 4 + 2 + 2; /**\r\n                                                                                              * The size of the Xing header MPEG-1, bit rate in kbps.\r\n                                                                                              */\n      var XING_BITRATE1 = 128; /**\r\n                               * The size of the Xing header MPEG-2, bit rate in kbps.\r\n                               */\n      var XING_BITRATE2 = 64; /**\r\n                              * The size of the Xing header MPEG-2.5, bit rate in kbps.\r\n                              */\n      var XING_BITRATE25 = 32; /**\r\n                               * ISO-8859-1 charset for byte to string operations.\r\n                               */\n      var ISO_8859_1 = null; //Charset.forName(\"ISO-8859-1\");\n      /**\r\n                   * VBR header magic string.\r\n                   */\n      var VBRTag0 = \"Xing\"; /**\r\n                            * VBR header magic string (VBR == VBRMode.vbr_off).\r\n                            */\n      var VBRTag1 = \"Info\"; /**\r\n                            * Lookup table for fast CRC-16 computation. Uses the polynomial\r\n                            * x^16+x^15+x^2+1\r\n                            */\n      var crc16Lookup = [0x0000, 0xC0C1, 0xC181, 0x0140, 0xC301, 0x03C0, 0x0280, 0xC241, 0xC601, 0x06C0, 0x0780, 0xC741, 0x0500, 0xC5C1, 0xC481, 0x0440, 0xCC01, 0x0CC0, 0x0D80, 0xCD41, 0x0F00, 0xCFC1, 0xCE81, 0x0E40, 0x0A00, 0xCAC1, 0xCB81, 0x0B40, 0xC901, 0x09C0, 0x0880, 0xC841, 0xD801, 0x18C0, 0x1980, 0xD941, 0x1B00, 0xDBC1, 0xDA81, 0x1A40, 0x1E00, 0xDEC1, 0xDF81, 0x1F40, 0xDD01, 0x1DC0, 0x1C80, 0xDC41, 0x1400, 0xD4C1, 0xD581, 0x1540, 0xD701, 0x17C0, 0x1680, 0xD641, 0xD201, 0x12C0, 0x1380, 0xD341, 0x1100, 0xD1C1, 0xD081, 0x1040, 0xF001, 0x30C0, 0x3180, 0xF141, 0x3300, 0xF3C1, 0xF281, 0x3240, 0x3600, 0xF6C1, 0xF781, 0x3740, 0xF501, 0x35C0, 0x3480, 0xF441, 0x3C00, 0xFCC1, 0xFD81, 0x3D40, 0xFF01, 0x3FC0, 0x3E80, 0xFE41, 0xFA01, 0x3AC0, 0x3B80, 0xFB41, 0x3900, 0xF9C1, 0xF881, 0x3840, 0x2800, 0xE8C1, 0xE981, 0x2940, 0xEB01, 0x2BC0, 0x2A80, 0xEA41, 0xEE01, 0x2EC0, 0x2F80, 0xEF41, 0x2D00, 0xEDC1, 0xEC81, 0x2C40, 0xE401, 0x24C0, 0x2580, 0xE541, 0x2700, 0xE7C1, 0xE681, 0x2640, 0x2200, 0xE2C1, 0xE381, 0x2340, 0xE101, 0x21C0, 0x2080, 0xE041, 0xA001, 0x60C0, 0x6180, 0xA141, 0x6300, 0xA3C1, 0xA281, 0x6240, 0x6600, 0xA6C1, 0xA781, 0x6740, 0xA501, 0x65C0, 0x6480, 0xA441, 0x6C00, 0xACC1, 0xAD81, 0x6D40, 0xAF01, 0x6FC0, 0x6E80, 0xAE41, 0xAA01, 0x6AC0, 0x6B80, 0xAB41, 0x6900, 0xA9C1, 0xA881, 0x6840, 0x7800, 0xB8C1, 0xB981, 0x7940, 0xBB01, 0x7BC0, 0x7A80, 0xBA41, 0xBE01, 0x7EC0, 0x7F80, 0xBF41, 0x7D00, 0xBDC1, 0xBC81, 0x7C40, 0xB401, 0x74C0, 0x7580, 0xB541, 0x7700, 0xB7C1, 0xB681, 0x7640, 0x7200, 0xB2C1, 0xB381, 0x7340, 0xB101, 0x71C0, 0x7080, 0xB041, 0x5000, 0x90C1, 0x9181, 0x5140, 0x9301, 0x53C0, 0x5280, 0x9241, 0x9601, 0x56C0, 0x5780, 0x9741, 0x5500, 0x95C1, 0x9481, 0x5440, 0x9C01, 0x5CC0, 0x5D80, 0x9D41, 0x5F00, 0x9FC1, 0x9E81, 0x5E40, 0x5A00, 0x9AC1, 0x9B81, 0x5B40, 0x9901, 0x59C0, 0x5880, 0x9841, 0x8801, 0x48C0, 0x4980, 0x8941, 0x4B00, 0x8BC1, 0x8A81, 0x4A40, 0x4E00, 0x8EC1, 0x8F81, 0x4F40, 0x8D01, 0x4DC0, 0x4C80, 0x8C41, 0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641, 0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040]; /***********************************************************************\r\nobert Hegemann 2001-01-17\r\nn      function addVbr(v, bitrate) {\n        v.nVbrNumFrames++;\n        v.sum += bitrate;\n        v.seen++;\n        if (v.seen < v.want) {\n          return;\n        }\n        if (v.pos < v.size) {\n          v.bag[v.pos] = v.sum;\n          v.pos++;\n          v.seen = 0;\n        }\n        if (v.pos == v.size) {\n          for (var i = 1; i < v.size; i += 2) {\n            v.bag[i / 2] = v.bag[i];\n          }\n          v.want *= 2;\n          v.pos /= 2;\n        }\n      }\n      function xingSeekTable(v, t) {\n        if (v.pos <= 0) return;\n        for (var i = 1; i < NUMTOCENTRIES; ++i) {\n          var j = i / NUMTOCENTRIES,\n            act,\n            sum;\n          var indx = 0 | Math.floor(j * v.pos);\n          if (indx > v.pos - 1) indx = v.pos - 1;\n          act = v.bag[indx];\n          sum = v.sum;\n          var seek_point = 0 | 256. * act / sum;\n          if (seek_point > 255) seek_point = 255;\n          t[i] = 0xff & seek_point;\n        }\n      } /**\r\n        * Add VBR entry, used to fill the VBR TOC entries.\r\n        *\r\n        * @param gfp\r\n        *            global flags\r\n        */\n      this.addVbrFrame = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var kbps = Tables.bitrate_table[gfp.version][gfc.bitrate_index];\n        addVbr(gfc.VBR_seek_table, kbps);\n      }; /**\r\n         * Read big endian integer (4-bytes) from header.\r\n         *\r\n         * @param buf\r\n         *            header containing the integer\r\n         * @param bufPos\r\n         *            offset into the header\r\n         * @return extracted integer\r\n         */\n      function extractInteger(buf, bufPos) {\n        var x = buf[bufPos + 0] & 0xff;\n        x <<= 8;\n        x |= buf[bufPos + 1] & 0xff;\n        x <<= 8;\n        x |= buf[bufPos + 2] & 0xff;\n        x <<= 8;\n        x |= buf[bufPos + 3] & 0xff;\n        return x;\n      } /**\r\n        * Write big endian integer (4-bytes) in the header.\r\n        *\r\n        * @param buf\r\n        *            header to write the integer into\r\n        * @param bufPos\r\n        *            offset into the header\r\n        * @param value\r\n        *            integer value to write\r\n        */\n      function createInteger(buf, bufPos, value) {\n        buf[bufPos + 0] = 0xff & (value >> 24 & 0xff);\n        buf[bufPos + 1] = 0xff & (value >> 16 & 0xff);\n        buf[bufPos + 2] = 0xff & (value >> 8 & 0xff);\n        buf[bufPos + 3] = 0xff & (value & 0xff);\n      } /**\r\n        * Write big endian short (2-bytes) in the header.\r\n        *\r\n        * @param buf\r\n        *            header to write the integer into\r\n        * @param bufPos\r\n        *            offset into the header\r\n        * @param value\r\n        *            integer value to write\r\n        */\n      function createShort(buf, bufPos, value) {\n        buf[bufPos + 0] = 0xff & (value >> 8 & 0xff);\n        buf[bufPos + 1] = 0xff & (value & 0xff);\n      } /**\r\n        * Check for magic strings (Xing/Info).\r\n        *\r\n        * @param buf\r\n        *            header to check\r\n        * @param bufPos\r\n        *            header offset to check\r\n        * @return magic string found\r\n        */\n      function isVbrTag(buf, bufPos) {\n        return new String(buf, bufPos, VBRTag0.length(), ISO_8859_1).equals(VBRTag0) || new String(buf, bufPos, VBRTag1.length(), ISO_8859_1).equals(VBRTag1);\n      }\n      function shiftInBitsValue(x, n, v) {\n        return 0xff & (x << n | v & ~(-1 << n));\n      } /**\r\n        * Construct the MP3 header using the settings of the global flags.\r\n        *\r\n        * <img src=\"1000px-Mp3filestructure.svg.png\">\r\n        *\r\n        * @param gfp\r\n        *            global flags\r\n        * @param buffer\r\n        *            header\r\n        */\n      function setLameTagFrameHeader(gfp, buffer) {\n        var gfc = gfp.internal_flags; // MP3 Sync Word\n        buffer[0] = shiftInBitsValue(buffer[0], 8, 0xff);\n        buffer[1] = shiftInBitsValue(buffer[1], 3, 7);\n        buffer[1] = shiftInBitsValue(buffer[1], 1, gfp.out_samplerate < 16000 ? 0 : 1); // Version\n        buffer[1] = shiftInBitsValue(buffer[1], 1, gfp.version); // 01 == Layer 3\n        buffer[1] = shiftInBitsValue(buffer[1], 2, 4 - 3); // Error protection\n        buffer[1] = shiftInBitsValue(buffer[1], 1, !gfp.error_protection ? 1 : 0); // Bit rate\n        buffer[2] = shiftInBitsValue(buffer[2], 4, gfc.bitrate_index); // Frequency\n        buffer[2] = shiftInBitsValue(buffer[2], 2, gfc.samplerate_index); // Pad. Bit\n        buffer[2] = shiftInBitsValue(buffer[2], 1, 0); // Priv. Bit\n        buffer[2] = shiftInBitsValue(buffer[2], 1, gfp.extension); // Mode\n        buffer[3] = shiftInBitsValue(buffer[3], 2, gfp.mode.ordinal()); // Mode extension (Used with Joint Stereo)\n        buffer[3] = shiftInBitsValue(buffer[3], 2, gfc.mode_ext); // Copy\n        buffer[3] = shiftInBitsValue(buffer[3], 1, gfp.copyright); // Original\n        buffer[3] = shiftInBitsValue(buffer[3], 1, gfp.original); // Emphasis\n        buffer[3] = shiftInBitsValue(buffer[3], 2, gfp.emphasis); /* the default VBR header. 48 kbps layer III, no padding, no crc */ /* but sampling freq, mode and copyright/copy protection taken */ /* from first valid frame */\n        buffer[0] = 0xff;\n        var abyte = 0xff & (buffer[1] & 0xf1);\n        var bitrate;\n        if (1 == gfp.version) {\n          bitrate = XING_BITRATE1;\n        } else {\n          if (gfp.out_samplerate < 16000) bitrate = XING_BITRATE25;else bitrate = XING_BITRATE2;\n        }\n        if (gfp.VBR == VbrMode.vbr_off) bitrate = gfp.brate;\n        var bbyte;\n        if (gfp.free_format) bbyte = 0x00;else bbyte = 0xff & 16 * lame.BitrateIndex(bitrate, gfp.version, gfp.out_samplerate); /*\r\n                                                                                                                                * Use as much of the info from the real frames in the Xing header:\r\n                                                                                                                                * samplerate, channels, crc, etc...\r\n                                                                                                                                */\n        if (gfp.version == 1) {\n          /* MPEG1 */buffer[1] = 0xff & (abyte | 0x0a); /* was 0x0b; */\n          abyte = 0xff & (buffer[2] & 0x0d); /* AF keep also private bit */\n          buffer[2] = 0xff & (bbyte | abyte); /* 64kbs MPEG1 frame */\n        } else {\n          /* MPEG2 */buffer[1] = 0xff & (abyte | 0x02); /* was 0x03; */\n          abyte = 0xff & (buffer[2] & 0x0d); /* AF keep also private bit */\n          buffer[2] = 0xff & (bbyte | abyte); /* 64kbs MPEG2 frame */\n        }\n      } /**\r\n        * Get VBR tag information\r\n        *\r\n        * @param buf\r\n        *            header to analyze\r\n        * @param bufPos\r\n        *            offset into the header\r\n        * @return VBR tag data\r\n        */\n      this.getVbrTag = function (buf) {\n        var pTagData = new VBRTagData();\n        var bufPos = 0; /* get Vbr header data */\n        pTagData.flags = 0; /* get selected MPEG header data */\n        var hId = buf[bufPos + 1] >> 3 & 1;\n        var hSrIndex = buf[bufPos + 2] >> 2 & 3;\n        var hMode = buf[bufPos + 3] >> 6 & 3;\n        var hBitrate = buf[bufPos + 2] >> 4 & 0xf;\n        hBitrate = Tables.bitrate_table[hId][hBitrate]; /* check for FFE syncword */\n        if (buf[bufPos + 1] >> 4 == 0xE) pTagData.samprate = Tables.samplerate_table[2][hSrIndex];else pTagData.samprate = Tables.samplerate_table[hId][hSrIndex]; /* determine offset of header */\n        if (hId != 0) {\n          /* mpeg1 */if (hMode != 3) bufPos += 32 + 4;else bufPos += 17 + 4;\n        } else {\n          /* mpeg2 */if (hMode != 3) bufPos += 17 + 4;else bufPos += 9 + 4;\n        }\n        if (!isVbrTag(buf, bufPos)) return null;\n        bufPos += 4;\n        pTagData.hId = hId; /* get flags */\n        var head_flags = pTagData.flags = extractInteger(buf, bufPos);\n        bufPos += 4;\n        if ((head_flags & FRAMES_FLAG) != 0) {\n          pTagData.frames = extractInteger(buf, bufPos);\n          bufPos += 4;\n        }\n        if ((head_flags & BYTES_FLAG) != 0) {\n          pTagData.bytes = extractInteger(buf, bufPos);\n          bufPos += 4;\n        }\n        if ((head_flags & TOC_FLAG) != 0) {\n          if (pTagData.toc != null) {\n            for (var i = 0; i < NUMTOCENTRIES; i++) {\n              pTagData.toc[i] = buf[bufPos + i];\n            }\n          }\n          bufPos += NUMTOCENTRIES;\n        }\n        pTagData.vbrScale = -1;\n        if ((head_flags & VBR_SCALE_FLAG) != 0) {\n          pTagData.vbrScale = extractInteger(buf, bufPos);\n          bufPos += 4;\n        }\n        pTagData.headersize = (hId + 1) * 72000 * hBitrate / pTagData.samprate;\n        bufPos += 21;\n        var encDelay = buf[bufPos + 0] << 4;\n        encDelay += buf[bufPos + 1] >> 4;\n        var encPadding = (buf[bufPos + 1] & 0x0F) << 8;\n        encPadding += buf[bufPos + 2] & 0xff; /* check for reasonable values (this may be an old Xing header, */ /* not a INFO tag) */\n        if (encDelay < 0 || encDelay > 3000) encDelay = -1;\n        if (encPadding < 0 || encPadding > 3000) encPadding = -1;\n        pTagData.encDelay = encDelay;\n        pTagData.encPadding = encPadding; /* success */\n        return pTagData;\n      }; /**\r\n         * Initializes the header\r\n         *\r\n         * @param gfp\r\n         *            global flags\r\n         */\n      this.InitVbrTag = function (gfp) {\n        var gfc = gfp.internal_flags; /**\r\n                                      * <PRE>\r\n                                      * Xing VBR pretends to be a 48kbs layer III frame.  (at 44.1kHz).\r\n                                      * (at 48kHz they use 56kbs since 48kbs frame not big enough for\r\n                                      * table of contents)\r\n                                      * let's always embed Xing header inside a 64kbs layer III frame.\r\n                                      * this gives us enough room for a LAME version string too.\r\n                                      * size determined by sampling frequency (MPEG1)\r\n                                      * 32kHz:    216 bytes@48kbs    288bytes@ 64kbs\r\n                                      * 44.1kHz:  156 bytes          208bytes@64kbs     (+1 if padding = 1)\r\n                                      * 48kHz:    144 bytes          192\r\n                                      *\r\n                                      * MPEG 2 values are the same since the framesize and samplerate\r\n                                      * are each reduced by a factor of 2.\r\n                                      * </PRE>\r\n                                      */\n        var kbps_header;\n        if (1 == gfp.version) {\n          kbps_header = XING_BITRATE1;\n        } else {\n          if (gfp.out_samplerate < 16000) kbps_header = XING_BITRATE25;else kbps_header = XING_BITRATE2;\n        }\n        if (gfp.VBR == VbrMode.vbr_off) kbps_header = gfp.brate; // make sure LAME Header fits into Frame\n        var totalFrameSize = (gfp.version + 1) * 72000 * kbps_header / gfp.out_samplerate;\n        var headerSize = gfc.sideinfo_len + LAMEHEADERSIZE;\n        gfc.VBR_seek_table.TotalFrameSize = totalFrameSize;\n        if (totalFrameSize < headerSize || totalFrameSize > MAXFRAMESIZE) {\n          /* disable tag, it wont fit */gfp.bWriteVbrTag = false;\n          return;\n        }\n        gfc.VBR_seek_table.nVbrNumFrames = 0;\n        gfc.VBR_seek_table.nBytesWritten = 0;\n        gfc.VBR_seek_table.sum = 0;\n        gfc.VBR_seek_table.seen = 0;\n        gfc.VBR_seek_table.want = 1;\n        gfc.VBR_seek_table.pos = 0;\n        if (gfc.VBR_seek_table.bag == null) {\n          gfc.VBR_seek_table.bag = new int[400]();\n          gfc.VBR_seek_table.size = 400;\n        } // write dummy VBR tag of all 0's into bitstream\n        var buffer = new_byte(MAXFRAMESIZE);\n        setLameTagFrameHeader(gfp, buffer);\n        var n = gfc.VBR_seek_table.TotalFrameSize;\n        for (var i = 0; i < n; ++i) {\n          bs.add_dummy_byte(gfp, buffer[i] & 0xff, 1);\n        }\n      }; /**\r\n         * Fast CRC-16 computation (uses table crc16Lookup).\r\n         *\r\n         * @param value\r\n         * @param crc\r\n         * @return\r\n         */\n      function crcUpdateLookup(value, crc) {\n        var tmp = crc ^ value;\n        crc = crc >> 8 ^ crc16Lookup[tmp & 0xff];\n        return crc;\n      }\n      this.updateMusicCRC = function (crc, buffer, bufferPos, size) {\n        for (var i = 0; i < size; ++i) {\n          crc[0] = crcUpdateLookup(buffer[bufferPos + i], crc[0]);\n        }\n      }; /**\r\n         * Write LAME info: mini version + info on various switches used (Jonathan\r\n         * Dee 2001/08/31).\r\n         *\r\n         * @param gfp\r\n         *            global flags\r\n         * @param musicLength\r\n         *            music length\r\n         * @param streamBuffer\r\n         *            pointer to output buffer\r\n         * @param streamBufferPos\r\n         *            offset into the output buffer\r\n         * @param crc\r\n         *            computation of CRC-16 of Lame Tag so far (starting at frame\r\n         *            sync)\r\n         * @return number of bytes written to the stream\r\n         */\n      function putLameVBR(gfp, musicLength, streamBuffer, streamBufferPos, crc) {\n        var gfc = gfp.internal_flags;\n        var bytesWritten = 0; /* encoder delay */\n        var encDelay = gfp.encoder_delay; /* encoder padding */\n        var encPadding = gfp.encoder_padding; /* recall: gfp.VBR_q is for example set by the switch -V */ /* gfp.quality by -q, -h, -f, etc */\n        var quality = 100 - 10 * gfp.VBR_q - gfp.quality;\n        var version = v.getLameVeryShortVersion();\n        var vbr;\n        var revision = 0x00;\n        var revMethod; // numbering different in vbr_mode vs. Lame tag\n        var vbrTypeTranslator = [1, 5, 3, 2, 4, 0, 3];\n        var lowpass = 0 | (gfp.lowpassfreq / 100.0 + .5 > 255 ? 255 : gfp.lowpassfreq / 100.0 + .5);\n        var peakSignalAmplitude = 0;\n        var radioReplayGain = 0;\n        var audiophileReplayGain = 0;\n        var noiseShaping = gfp.internal_flags.noise_shaping;\n        var stereoMode = 0;\n        var nonOptimal = 0;\n        var sourceFreq = 0;\n        var misc = 0;\n        var musicCRC = 0; // psy model type: Gpsycho or NsPsytune\n        var expNPsyTune = (gfp.exp_nspsytune & 1) != 0;\n        var safeJoint = (gfp.exp_nspsytune & 2) != 0;\n        var noGapMore = false;\n        var noGapPrevious = false;\n        var noGapCount = gfp.internal_flags.nogap_total;\n        var noGapCurr = gfp.internal_flags.nogap_current; // 4 bits\n        var athType = gfp.ATHtype;\n        var flags = 0; // vbr modes\n        var abrBitrate;\n        switch (gfp.VBR) {\n          case vbr_abr:\n            abrBitrate = gfp.VBR_mean_bitrate_kbps;\n            break;\n          case vbr_off:\n            abrBitrate = gfp.brate;\n            break;\n          default:\n            abrBitrate = gfp.VBR_min_bitrate_kbps;\n        } // revision and vbr method\n        if (gfp.VBR.ordinal() < vbrTypeTranslator.length) vbr = vbrTypeTranslator[gfp.VBR.ordinal()];else vbr = 0x00; // unknown\n        revMethod = 0x10 * revision + vbr; // ReplayGain\n        if (gfc.findReplayGain) {\n          if (gfc.RadioGain > 0x1FE) gfc.RadioGain = 0x1FE;\n          if (gfc.RadioGain < -0x1FE) gfc.RadioGain = -0x1FE; // set name code\n          radioReplayGain = 0x2000; // set originator code to `determined automatically'\n          radioReplayGain |= 0xC00;\n          if (gfc.RadioGain >= 0) {\n            // set gain adjustment\n            radioReplayGain |= gfc.RadioGain;\n          } else {\n            // set the sign bit\n            radioReplayGain |= 0x200; // set gain adjustment\n            radioReplayGain |= -gfc.RadioGain;\n          }\n        } // peak sample\n        if (gfc.findPeakSample) peakSignalAmplitude = Math.abs(0 | gfc.PeakSample / 32767.0 * Math.pow(2, 23) + .5); // nogap\n        if (noGapCount != -1) {\n          if (noGapCurr > 0) noGapPrevious = true;\n          if (noGapCurr < noGapCount - 1) noGapMore = true;\n        } // flags\n        flags = athType + ((expNPsyTune ? 1 : 0) << 4) + ((safeJoint ? 1 : 0) << 5) + ((noGapMore ? 1 : 0) << 6) + ((noGapPrevious ? 1 : 0) << 7);\n        if (quality < 0) quality = 0; // stereo mode field (Intensity stereo is not implemented)\n        switch (gfp.mode) {\n          case MONO:\n            stereoMode = 0;\n            break;\n          case STEREO:\n            stereoMode = 1;\n            break;\n          case DUAL_CHANNEL:\n            stereoMode = 2;\n            break;\n          case JOINT_STEREO:\n            if (gfp.force_ms) stereoMode = 4;else stereoMode = 3;\n            break;\n          case NOT_SET: //$FALL-THROUGH$\n          default:\n            stereoMode = 7;\n            break;\n        }\n        if (gfp.in_samplerate <= 32000) sourceFreq = 0x00;else if (gfp.in_samplerate == 48000) sourceFreq = 0x02;else if (gfp.in_samplerate > 48000) sourceFreq = 0x03;else {\n          // default is 44100Hz\n          sourceFreq = 0x01;\n        } // Check if the user overrided the default LAME behavior with some\n        // nasty options\n        if (gfp.short_blocks == ShortBlock.short_block_forced || gfp.short_blocks == ShortBlock.short_block_dispensed || gfp.lowpassfreq == -1 && gfp.highpassfreq == -1 || /* \"-k\" */gfp.scale_left < gfp.scale_right || gfp.scale_left > gfp.scale_right || gfp.disable_reservoir && gfp.brate < 320 || gfp.noATH || gfp.ATHonly || athType == 0 || gfp.in_samplerate <= 32000) nonOptimal = 1;\n        misc = noiseShaping + (stereoMode << 2) + (nonOptimal << 5) + (sourceFreq << 6);\n        musicCRC = gfc.nMusicCRC; // Write all this information into the stream\n        createInteger(streamBuffer, streamBufferPos + bytesWritten, quality);\n        bytesWritten += 4;\n        for (var j = 0; j < 9; j++) {\n          streamBuffer[streamBufferPos + bytesWritten + j] = 0xff & version.charAt(j);\n        }\n        bytesWritten += 9;\n        streamBuffer[streamBufferPos + bytesWritten] = 0xff & revMethod;\n        bytesWritten++;\n        streamBuffer[streamBufferPos + bytesWritten] = 0xff & lowpass;\n        bytesWritten++;\n        createInteger(streamBuffer, streamBufferPos + bytesWritten, peakSignalAmplitude);\n        bytesWritten += 4;\n        createShort(streamBuffer, streamBufferPos + bytesWritten, radioReplayGain);\n        bytesWritten += 2;\n        createShort(streamBuffer, streamBufferPos + bytesWritten, audiophileReplayGain);\n        bytesWritten += 2;\n        streamBuffer[streamBufferPos + bytesWritten] = 0xff & flags;\n        bytesWritten++;\n        if (abrBitrate >= 255) streamBuffer[streamBufferPos + bytesWritten] = 0xFF;else streamBuffer[streamBufferPos + bytesWritten] = 0xff & abrBitrate;\n        bytesWritten++;\n        streamBuffer[streamBufferPos + bytesWritten] = 0xff & encDelay >> 4;\n        streamBuffer[streamBufferPos + bytesWritten + 1] = 0xff & (encDelay << 4) + (encPadding >> 8);\n        streamBuffer[streamBufferPos + bytesWritten + 2] = 0xff & encPadding;\n        bytesWritten += 3;\n        streamBuffer[streamBufferPos + bytesWritten] = 0xff & misc;\n        bytesWritten++; // unused in rev0\n        streamBuffer[streamBufferPos + bytesWritten++] = 0;\n        createShort(streamBuffer, streamBufferPos + bytesWritten, gfp.preset);\n        bytesWritten += 2;\n        createInteger(streamBuffer, streamBufferPos + bytesWritten, musicLength);\n        bytesWritten += 4;\n        createShort(streamBuffer, streamBufferPos + bytesWritten, musicCRC);\n        bytesWritten += 2; // Calculate tag CRC.... must be done here, since it includes previous\n        // information\n        for (var i = 0; i < bytesWritten; i++) {\n          crc = crcUpdateLookup(streamBuffer[streamBufferPos + i], crc);\n        }\n        createShort(streamBuffer, streamBufferPos + bytesWritten, crc);\n        bytesWritten += 2;\n        return bytesWritten;\n      }\n      function skipId3v2(fpStream) {\n        // seek to the beginning of the stream\n        fpStream.seek(0); // read 10 bytes in case there's an ID3 version 2 header here\n        var id3v2Header = new_byte(10);\n        fpStream.readFully(id3v2Header); /* does the stream begin with the ID3 version 2 file identifier? */\n        var id3v2TagSize;\n        if (!new String(id3v2Header, \"ISO-8859-1\").startsWith(\"ID3\")) {\n          /*\r\n          * the tag size (minus the 10-byte header) is encoded into four\r\n          * bytes where the most significant bit is clear in each byte\r\n          */\n          id3v2TagSize = ((id3v2Header[6] & 0x7f) << 21 | (id3v2Header[7] & 0x7f) << 14 | (id3v2Header[8] & 0x7f) << 7 | id3v2Header[9] & 0x7f) + id3v2Header.length;\n        } else {\n          /* no ID3 version 2 tag in this stream */id3v2TagSize = 0;\n        }\n        return id3v2TagSize;\n      }\n      this.getLameTagFrame = function (gfp, buffer) {\n        var gfc = gfp.internal_flags;\n        if (!gfp.bWriteVbrTag) {\n          return 0;\n        }\n        if (gfc.Class_ID != Lame.LAME_ID) {\n          return 0;\n        }\n        if (gfc.VBR_seek_table.pos <= 0) {\n          return 0;\n        }\n        if (buffer.length < gfc.VBR_seek_table.TotalFrameSize) {\n          return gfc.VBR_seek_table.TotalFrameSize;\n        }\n        Arrays.fill(buffer, 0, gfc.VBR_seek_table.TotalFrameSize, 0); // 4 bytes frame header\n        setLameTagFrameHeader(gfp, buffer); // Create TOC entries\n        var toc = new_byte(NUMTOCENTRIES);\n        if (gfp.free_format) {\n          for (var i = 1; i < NUMTOCENTRIES; ++i) {\n            toc[i] = 0xff & 255 * i / 100;\n          }\n        } else {\n          xingSeekTable(gfc.VBR_seek_table, toc);\n        } // Start writing the tag after the zero frame\n        var streamIndex = gfc.sideinfo_len; /**\r\n                                            * Note: Xing header specifies that Xing data goes in the ancillary data\r\n                                            * with NO ERROR PROTECTION. If error protecton in enabled, the Xing\r\n                                            * data still starts at the same offset, and now it is in sideinfo data\r\n                                            * block, and thus will not decode correctly by non-Xing tag aware\r\n                                            * players\r\n                                            */\n        if (gfp.error_protection) streamIndex -= 2; // Put Vbr tag\n        if (gfp.VBR == VbrMode.vbr_off) {\n          buffer[streamIndex++] = 0xff & VBRTag1.charAt(0);\n          buffer[streamIndex++] = 0xff & VBRTag1.charAt(1);\n          buffer[streamIndex++] = 0xff & VBRTag1.charAt(2);\n          buffer[streamIndex++] = 0xff & VBRTag1.charAt(3);\n        } else {\n          buffer[streamIndex++] = 0xff & VBRTag0.charAt(0);\n          buffer[streamIndex++] = 0xff & VBRTag0.charAt(1);\n          buffer[streamIndex++] = 0xff & VBRTag0.charAt(2);\n          buffer[streamIndex++] = 0xff & VBRTag0.charAt(3);\n        } // Put header flags\n        createInteger(buffer, streamIndex, FRAMES_FLAG + BYTES_FLAG + TOC_FLAG + VBR_SCALE_FLAG);\n        streamIndex += 4; // Put Total Number of frames\n        createInteger(buffer, streamIndex, gfc.VBR_seek_table.nVbrNumFrames);\n        streamIndex += 4; // Put total audio stream size, including Xing/LAME Header\n        var streamSize = gfc.VBR_seek_table.nBytesWritten + gfc.VBR_seek_table.TotalFrameSize;\n        createInteger(buffer, streamIndex, 0 | streamSize);\n        streamIndex += 4; /* Put TOC */\n        System.arraycopy(toc, 0, buffer, streamIndex, toc.length);\n        streamIndex += toc.length;\n        if (gfp.error_protection) {\n          // (jo) error_protection: add crc16 information to header\n          bs.CRC_writeheader(gfc, buffer);\n        } // work out CRC so far: initially crc = 0\n        var crc = 0x00;\n        for (var i = 0; i < streamIndex; i++) {\n          crc = crcUpdateLookup(buffer[i], crc);\n        } // Put LAME VBR info\n        streamIndex += putLameVBR(gfp, streamSize, buffer, streamIndex, crc);\n        return gfc.VBR_seek_table.TotalFrameSize;\n      }; /**\r\n         * Write final VBR tag to the file.\r\n         *\r\n         * @param gfp\r\n         *            global flags\r\n         * @param stream\r\n         *            stream to add the VBR tag to\r\n         * @return 0 (OK), -1 else\r\n         * @throws IOException\r\n         *             I/O error\r\n         */\n      this.putVbrTag = function (gfp, stream) {\n        var gfc = gfp.internal_flags;\n        if (gfc.VBR_seek_table.pos <= 0) return -1; // Seek to end of file\n        stream.seek(stream.length()); // Get file size, abort if file has zero length.\n        if (stream.length() == 0) return -1; // The VBR tag may NOT be located at the beginning of the stream. If an\n        // ID3 version 2 tag was added, then it must be skipped to write the VBR\n        // tag data.\n        var id3v2TagSize = skipId3v2(stream); // Seek to the beginning of the stream\n        stream.seek(id3v2TagSize);\n        var buffer = new_byte(MAXFRAMESIZE);\n        var bytes = getLameTagFrame(gfp, buffer);\n        if (bytes > buffer.length) {\n          return -1;\n        }\n        if (bytes < 1) {\n          return 0;\n        } // Put it all to disk again\n        stream.write(buffer, 0, bytes); // success\n        return 0;\n      };\n    }\n    BitStream.EQ = function (a, b) {\n      return Math.abs(a) > Math.abs(b) ? Math.abs(a - b) <= Math.abs(a) * 1e-6 : Math.abs(a - b) <= Math.abs(b) * 1e-6;\n    };\n    BitStream.NEQ = function (a, b) {\n      return !BitStream.EQ(a, b);\n    };\n    function BitStream() {\n      var self = this;\n      var CRC16_POLYNOMIAL = 0x8005; /*\r\n                                     * we work with ints, so when doing bit manipulation, we limit ourselves to\r\n                                     * MAX_LENGTH-2 just to be on the safe side\r\n                                     */\n      var MAX_LENGTH = 32; //GainAnalysis ga;\n      //MPGLib mpg;\n      //Version ver;\n      //VBRTag vbr;\n      var ga = null;\n      var mpg = null;\n      var ver = null;\n      var vbr = null; //public final void setModules(GainAnalysis ga, MPGLib mpg, Version ver,\n      //\tVBRTag vbr) {\n      this.setModules = function (_ga, _mpg, _ver, _vbr) {\n        ga = _ga;\n        mpg = _mpg;\n        ver = _ver;\n        vbr = _vbr;\n      }; /**\r\n         * Bit stream buffer.\r\n         */ //private byte[] buf;\n      var buf = null; /**\r\n                      * Bit counter of bit stream.\r\n                      */\n      var totbit = 0; /**\r\n                      * Pointer to top byte in buffer.\r\n                      */\n      var bufByteIdx = 0; /**\r\n                          * Pointer to top bit of top byte in buffer.\r\n                          */\n      var bufBitIdx = 0; /**\r\n                         * compute bitsperframe and mean_bits for a layer III frame\r\n                         */\n      this.getframebits = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var bit_rate; /* get bitrate in kbps [?] */\n        if (gfc.bitrate_index != 0) bit_rate = Tables.bitrate_table[gfp.version][gfc.bitrate_index];else bit_rate = gfp.brate; /* main encoding routine toggles padding on and off */ /* one Layer3 Slot consists of 8 bits */\n        var bytes = 0 | (gfp.version + 1) * 72000 * bit_rate / gfp.out_samplerate + gfc.padding;\n        return 8 * bytes;\n      };\n      function putheader_bits(gfc) {\n        System.arraycopy(gfc.header[gfc.w_ptr].buf, 0, buf, bufByteIdx, gfc.sideinfo_len);\n        bufByteIdx += gfc.sideinfo_len;\n        totbit += gfc.sideinfo_len * 8;\n        gfc.w_ptr = gfc.w_ptr + 1 & LameInternalFlags.MAX_HEADER_BUF - 1;\n      } /**\r\n        * write j bits into the bit stream\r\n        */\n      function putbits2(gfc, val, j) {\n        while (j > 0) {\n          var k;\n          if (bufBitIdx == 0) {\n            bufBitIdx = 8;\n            bufByteIdx++;\n            if (gfc.header[gfc.w_ptr].write_timing == totbit) {\n              putheader_bits(gfc);\n            }\n            buf[bufByteIdx] = 0;\n          }\n          k = Math.min(j, bufBitIdx);\n          j -= k;\n          bufBitIdx -= k; /* 32 too large on 32 bit machines */\n          buf[bufByteIdx] |= val >> j << bufBitIdx;\n          totbit += k;\n        }\n      } /**\r\n        * write j bits into the bit stream, ignoring frame headers\r\n        */\n      function putbits_noheaders(gfc, val, j) {\n        while (j > 0) {\n          var k;\n          if (bufBitIdx == 0) {\n            bufBitIdx = 8;\n            bufByteIdx++;\n            buf[bufByteIdx] = 0;\n          }\n          k = Math.min(j, bufBitIdx);\n          j -= k;\n          bufBitIdx -= k; /* 32 too large on 32 bit machines */\n          buf[bufByteIdx] |= val >> j << bufBitIdx;\n          totbit += k;\n        }\n      } /**\r\n        * Some combinations of bitrate, Fs, and stereo make it impossible to stuff\r\n        * out a frame using just main_data, due to the limited number of bits to\r\n        * indicate main_data_length. In these situations, we put stuffing bits into\r\n        * the ancillary data...\r\n        */\n      function drain_into_ancillary(gfp, remainingBits) {\n        var gfc = gfp.internal_flags;\n        var i;\n        if (remainingBits >= 8) {\n          putbits2(gfc, 0x4c, 8);\n          remainingBits -= 8;\n        }\n        if (remainingBits >= 8) {\n          putbits2(gfc, 0x41, 8);\n          remainingBits -= 8;\n        }\n        if (remainingBits >= 8) {\n          putbits2(gfc, 0x4d, 8);\n          remainingBits -= 8;\n        }\n        if (remainingBits >= 8) {\n          putbits2(gfc, 0x45, 8);\n          remainingBits -= 8;\n        }\n        if (remainingBits >= 32) {\n          var version = ver.getLameShortVersion();\n          if (remainingBits >= 32) for (i = 0; i < version.length && remainingBits >= 8; ++i) {\n            remainingBits -= 8;\n            putbits2(gfc, version.charAt(i), 8);\n          }\n        }\n        for (; remainingBits >= 1; remainingBits -= 1) {\n          putbits2(gfc, gfc.ancillary_flag, 1);\n          gfc.ancillary_flag ^= !gfp.disable_reservoir ? 1 : 0;\n        }\n      } /**\r\n        * write N bits into the header\r\n        */\n      function writeheader(gfc, val, j) {\n        var ptr = gfc.header[gfc.h_ptr].ptr;\n        while (j > 0) {\n          var k = Math.min(j, 8 - (ptr & 7));\n          j -= k; /* >> 32 too large for 32 bit machines */\n          gfc.header[gfc.h_ptr].buf[ptr >> 3] |= val >> j << 8 - (ptr & 7) - k;\n          ptr += k;\n        }\n        gfc.header[gfc.h_ptr].ptr = ptr;\n      }\n      function CRC_update(value, crc) {\n        value <<= 8;\n        for (var i = 0; i < 8; i++) {\n          value <<= 1;\n          crc <<= 1;\n          if (((crc ^ value) & 0x10000) != 0) crc ^= CRC16_POLYNOMIAL;\n        }\n        return crc;\n      }\n      this.CRC_writeheader = function (gfc, header) {\n        var crc = 0xffff; /* (jo) init crc16 for error_protection */\n        crc = CRC_update(header[2] & 0xff, crc);\n        crc = CRC_update(header[3] & 0xff, crc);\n        for (var i = 6; i < gfc.sideinfo_len; i++) {\n          crc = CRC_update(header[i] & 0xff, crc);\n        }\n        header[4] = byte(crc >> 8);\n        header[5] = byte(crc & 255);\n      };\n      function encodeSideInfo2(gfp, bitsPerFrame) {\n        var gfc = gfp.internal_flags;\n        var l3_side;\n        var gr, ch;\n        l3_side = gfc.l3_side;\n        gfc.header[gfc.h_ptr].ptr = 0;\n        Arrays.fill(gfc.header[gfc.h_ptr].buf, 0, gfc.sideinfo_len, 0);\n        if (gfp.out_samplerate < 16000) writeheader(gfc, 0xffe, 12);else writeheader(gfc, 0xfff, 12);\n        writeheader(gfc, gfp.version, 1);\n        writeheader(gfc, 4 - 3, 2);\n        writeheader(gfc, !gfp.error_protection ? 1 : 0, 1);\n        writeheader(gfc, gfc.bitrate_index, 4);\n        writeheader(gfc, gfc.samplerate_index, 2);\n        writeheader(gfc, gfc.padding, 1);\n        writeheader(gfc, gfp.extension, 1);\n        writeheader(gfc, gfp.mode.ordinal(), 2);\n        writeheader(gfc, gfc.mode_ext, 2);\n        writeheader(gfc, gfp.copyright, 1);\n        writeheader(gfc, gfp.original, 1);\n        writeheader(gfc, gfp.emphasis, 2);\n        if (gfp.error_protection) {\n          writeheader(gfc, 0, 16); /* dummy */\n        }\n        if (gfp.version == 1) {\n          /* MPEG1 */writeheader(gfc, l3_side.main_data_begin, 9);\n          if (gfc.channels_out == 2) writeheader(gfc, l3_side.private_bits, 3);else writeheader(gfc, l3_side.private_bits, 5);\n          for (ch = 0; ch < gfc.channels_out; ch++) {\n            var band;\n            for (band = 0; band < 4; band++) {\n              writeheader(gfc, l3_side.scfsi[ch][band], 1);\n            }\n          }\n          for (gr = 0; gr < 2; gr++) {\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n              var gi = l3_side.tt[gr][ch];\n              writeheader(gfc, gi.part2_3_length + gi.part2_length, 12);\n              writeheader(gfc, gi.big_values / 2, 9);\n              writeheader(gfc, gi.global_gain, 8);\n              writeheader(gfc, gi.scalefac_compress, 4);\n              if (gi.block_type != Encoder.NORM_TYPE) {\n                writeheader(gfc, 1, 1); /* window_switching_flag */\n                writeheader(gfc, gi.block_type, 2);\n                writeheader(gfc, gi.mixed_block_flag, 1);\n                if (gi.table_select[0] == 14) gi.table_select[0] = 16;\n                writeheader(gfc, gi.table_select[0], 5);\n                if (gi.table_select[1] == 14) gi.table_select[1] = 16;\n                writeheader(gfc, gi.table_select[1], 5);\n                writeheader(gfc, gi.subblock_gain[0], 3);\n                writeheader(gfc, gi.subblock_gain[1], 3);\n                writeheader(gfc, gi.subblock_gain[2], 3);\n              } else {\n                writeheader(gfc, 0, 1); /* window_switching_flag */\n                if (gi.table_select[0] == 14) gi.table_select[0] = 16;\n                writeheader(gfc, gi.table_select[0], 5);\n                if (gi.table_select[1] == 14) gi.table_select[1] = 16;\n                writeheader(gfc, gi.table_select[1], 5);\n                if (gi.table_select[2] == 14) gi.table_select[2] = 16;\n                writeheader(gfc, gi.table_select[2], 5);\n                writeheader(gfc, gi.region0_count, 4);\n                writeheader(gfc, gi.region1_count, 3);\n              }\n              writeheader(gfc, gi.preflag, 1);\n              writeheader(gfc, gi.scalefac_scale, 1);\n              writeheader(gfc, gi.count1table_select, 1);\n            }\n          }\n        } else {\n          /* MPEG2 */writeheader(gfc, l3_side.main_data_begin, 8);\n          writeheader(gfc, l3_side.private_bits, gfc.channels_out);\n          gr = 0;\n          for (ch = 0; ch < gfc.channels_out; ch++) {\n            var gi = l3_side.tt[gr][ch];\n            writeheader(gfc, gi.part2_3_length + gi.part2_length, 12);\n            writeheader(gfc, gi.big_values / 2, 9);\n            writeheader(gfc, gi.global_gain, 8);\n            writeheader(gfc, gi.scalefac_compress, 9);\n            if (gi.block_type != Encoder.NORM_TYPE) {\n              writeheader(gfc, 1, 1); /* window_switching_flag */\n              writeheader(gfc, gi.block_type, 2);\n              writeheader(gfc, gi.mixed_block_flag, 1);\n              if (gi.table_select[0] == 14) gi.table_select[0] = 16;\n              writeheader(gfc, gi.table_select[0], 5);\n              if (gi.table_select[1] == 14) gi.table_select[1] = 16;\n              writeheader(gfc, gi.table_select[1], 5);\n              writeheader(gfc, gi.subblock_gain[0], 3);\n              writeheader(gfc, gi.subblock_gain[1], 3);\n              writeheader(gfc, gi.subblock_gain[2], 3);\n            } else {\n              writeheader(gfc, 0, 1); /* window_switching_flag */\n              if (gi.table_select[0] == 14) gi.table_select[0] = 16;\n              writeheader(gfc, gi.table_select[0], 5);\n              if (gi.table_select[1] == 14) gi.table_select[1] = 16;\n              writeheader(gfc, gi.table_select[1], 5);\n              if (gi.table_select[2] == 14) gi.table_select[2] = 16;\n              writeheader(gfc, gi.table_select[2], 5);\n              writeheader(gfc, gi.region0_count, 4);\n              writeheader(gfc, gi.region1_count, 3);\n            }\n            writeheader(gfc, gi.scalefac_scale, 1);\n            writeheader(gfc, gi.count1table_select, 1);\n          }\n        }\n        if (gfp.error_protection) {\n          /* (jo) error_protection: add crc16 information to header */CRC_writeheader(gfc, gfc.header[gfc.h_ptr].buf);\n        }\n        {\n          var old = gfc.h_ptr;\n          gfc.h_ptr = old + 1 & LameInternalFlags.MAX_HEADER_BUF - 1;\n          gfc.header[gfc.h_ptr].write_timing = gfc.header[old].write_timing + bitsPerFrame;\n          if (gfc.h_ptr == gfc.w_ptr) {\n            /* yikes! we are out of header buffer space */System.err.println(\"Error: MAX_HEADER_BUF too small in bitstream.c \\n\");\n          }\n        }\n      }\n      function huffman_coder_count1(gfc, gi) {\n        /* Write count1 area */var h = Tables.ht[gi.count1table_select + 32];\n        var i,\n          bits = 0;\n        var ix = gi.big_values;\n        var xr = gi.big_values;\n        for (i = (gi.count1 - gi.big_values) / 4; i > 0; --i) {\n          var huffbits = 0;\n          var p = 0,\n            v;\n          v = gi.l3_enc[ix + 0];\n          if (v != 0) {\n            p += 8;\n            if (gi.xr[xr + 0] < 0) huffbits++;\n          }\n          v = gi.l3_enc[ix + 1];\n          if (v != 0) {\n            p += 4;\n            huffbits *= 2;\n            if (gi.xr[xr + 1] < 0) huffbits++;\n          }\n          v = gi.l3_enc[ix + 2];\n          if (v != 0) {\n            p += 2;\n            huffbits *= 2;\n            if (gi.xr[xr + 2] < 0) huffbits++;\n          }\n          v = gi.l3_enc[ix + 3];\n          if (v != 0) {\n            p++;\n            huffbits *= 2;\n            if (gi.xr[xr + 3] < 0) huffbits++;\n          }\n          ix += 4;\n          xr += 4;\n          putbits2(gfc, huffbits + h.table[p], h.hlen[p]);\n          bits += h.hlen[p];\n        }\n        return bits;\n      } /**\r\n        * Implements the pseudocode of page 98 of the IS\r\n        */\n      function Huffmancode(gfc, tableindex, start, end, gi) {\n        var h = Tables.ht[tableindex];\n        var bits = 0;\n        if (0 == tableindex) return bits;\n        for (var i = start; i < end; i += 2) {\n          var cbits = 0;\n          var xbits = 0;\n          var linbits = h.xlen;\n          var xlen = h.xlen;\n          var ext = 0;\n          var x1 = gi.l3_enc[i];\n          var x2 = gi.l3_enc[i + 1];\n          if (x1 != 0) {\n            if (gi.xr[i] < 0) ext++;\n            cbits--;\n          }\n          if (tableindex > 15) {\n            /* use ESC-words */if (x1 > 14) {\n              var linbits_x1 = x1 - 15;\n              ext |= linbits_x1 << 1;\n              xbits = linbits;\n              x1 = 15;\n            }\n            if (x2 > 14) {\n              var linbits_x2 = x2 - 15;\n              ext <<= linbits;\n              ext |= linbits_x2;\n              xbits += linbits;\n              x2 = 15;\n            }\n            xlen = 16;\n          }\n          if (x2 != 0) {\n            ext <<= 1;\n            if (gi.xr[i + 1] < 0) ext++;\n            cbits--;\n          }\n          x1 = x1 * xlen + x2;\n          xbits -= cbits;\n          cbits += h.hlen[x1];\n          putbits2(gfc, h.table[x1], cbits);\n          putbits2(gfc, ext, xbits);\n          bits += cbits + xbits;\n        }\n        return bits;\n      } /**\r\n        * Note the discussion of huffmancodebits() on pages 28 and 29 of the IS, as\r\n        * well as the definitions of the side information on pages 26 and 27.\r\n        */\n      function ShortHuffmancodebits(gfc, gi) {\n        var region1Start = 3 * gfc.scalefac_band.s[3];\n        if (region1Start > gi.big_values) region1Start = gi.big_values; /* short blocks do not have a region2 */\n        var bits = Huffmancode(gfc, gi.table_select[0], 0, region1Start, gi);\n        bits += Huffmancode(gfc, gi.table_select[1], region1Start, gi.big_values, gi);\n        return bits;\n      }\n      function LongHuffmancodebits(gfc, gi) {\n        var bigvalues, bits;\n        var region1Start, region2Start;\n        bigvalues = gi.big_values;\n        var i = gi.region0_count + 1;\n        region1Start = gfc.scalefac_band.l[i];\n        i += gi.region1_count + 1;\n        region2Start = gfc.scalefac_band.l[i];\n        if (region1Start > bigvalues) region1Start = bigvalues;\n        if (region2Start > bigvalues) region2Start = bigvalues;\n        bits = Huffmancode(gfc, gi.table_select[0], 0, region1Start, gi);\n        bits += Huffmancode(gfc, gi.table_select[1], region1Start, region2Start, gi);\n        bits += Huffmancode(gfc, gi.table_select[2], region2Start, bigvalues, gi);\n        return bits;\n      }\n      function writeMainData(gfp) {\n        var gr,\n          ch,\n          sfb,\n          data_bits,\n          tot_bits = 0;\n        var gfc = gfp.internal_flags;\n        var l3_side = gfc.l3_side;\n        if (gfp.version == 1) {\n          /* MPEG 1 */for (gr = 0; gr < 2; gr++) {\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n              var gi = l3_side.tt[gr][ch];\n              var slen1 = Takehiro.slen1_tab[gi.scalefac_compress];\n              var slen2 = Takehiro.slen2_tab[gi.scalefac_compress];\n              data_bits = 0;\n              for (sfb = 0; sfb < gi.sfbdivide; sfb++) {\n                if (gi.scalefac[sfb] == -1) continue; /* scfsi is used */\n                putbits2(gfc, gi.scalefac[sfb], slen1);\n                data_bits += slen1;\n              }\n              for (; sfb < gi.sfbmax; sfb++) {\n                if (gi.scalefac[sfb] == -1) continue; /* scfsi is used */\n                putbits2(gfc, gi.scalefac[sfb], slen2);\n                data_bits += slen2;\n              }\n              if (gi.block_type == Encoder.SHORT_TYPE) {\n                data_bits += ShortHuffmancodebits(gfc, gi);\n              } else {\n                data_bits += LongHuffmancodebits(gfc, gi);\n              }\n              data_bits += huffman_coder_count1(gfc, gi); /* does bitcount in quantize.c agree with actual bit count? */\n              tot_bits += data_bits;\n            } /* for ch */\n          } /* for gr */\n        } else {\n          /* MPEG 2 */gr = 0;\n          for (ch = 0; ch < gfc.channels_out; ch++) {\n            var gi = l3_side.tt[gr][ch];\n            var i,\n              sfb_partition,\n              scale_bits = 0;\n            data_bits = 0;\n            sfb = 0;\n            sfb_partition = 0;\n            if (gi.block_type == Encoder.SHORT_TYPE) {\n              for (; sfb_partition < 4; sfb_partition++) {\n                var sfbs = gi.sfb_partition_table[sfb_partition] / 3;\n                var slen = gi.slen[sfb_partition];\n                for (i = 0; i < sfbs; i++, sfb++) {\n                  putbits2(gfc, Math.max(gi.scalefac[sfb * 3 + 0], 0), slen);\n                  putbits2(gfc, Math.max(gi.scalefac[sfb * 3 + 1], 0), slen);\n                  putbits2(gfc, Math.max(gi.scalefac[sfb * 3 + 2], 0), slen);\n                  scale_bits += 3 * slen;\n                }\n              }\n              data_bits += ShortHuffmancodebits(gfc, gi);\n            } else {\n              for (; sfb_partition < 4; sfb_partition++) {\n                var sfbs = gi.sfb_partition_table[sfb_partition];\n                var slen = gi.slen[sfb_partition];\n                for (i = 0; i < sfbs; i++, sfb++) {\n                  putbits2(gfc, Math.max(gi.scalefac[sfb], 0), slen);\n                  scale_bits += slen;\n                }\n              }\n              data_bits += LongHuffmancodebits(gfc, gi);\n            }\n            data_bits += huffman_coder_count1(gfc, gi); /* does bitcount in quantize.c agree with actual bit count? */\n            tot_bits += scale_bits + data_bits;\n          } /* for ch */\n        } /* for gf */\n        return tot_bits;\n      } /* main_data */\n      function TotalBytes() {\n        this.total = 0;\n      } /*\r\n        * compute the number of bits required to flush all mp3 frames currently in\r\n        * the buffer. This should be the same as the reservoir size. Only call this\r\n        * routine between frames - i.e. only after all headers and data have been\r\n        * added to the buffer by format_bitstream().\r\n        *\r\n        * Also compute total_bits_output = size of mp3 buffer (including frame\r\n        * headers which may not have yet been send to the mp3 buffer) + number of\r\n        * bits needed to flush all mp3 frames.\r\n        *\r\n        * total_bytes_output is the size of the mp3 output buffer if\r\n        * lame_encode_flush_nogap() was called right now.\r\n        */\n      function compute_flushbits(gfp, total_bytes_output) {\n        var gfc = gfp.internal_flags;\n        var flushbits, remaining_headers;\n        var bitsPerFrame;\n        var last_ptr, first_ptr;\n        first_ptr = gfc.w_ptr; /* first header to add to bitstream */\n        last_ptr = gfc.h_ptr - 1; /* last header to add to bitstream */\n        if (last_ptr == -1) last_ptr = LameInternalFlags.MAX_HEADER_BUF - 1; /* add this many bits to bitstream so we can flush all headers */\n        flushbits = gfc.header[last_ptr].write_timing - totbit;\n        total_bytes_output.total = flushbits;\n        if (flushbits >= 0) {\n          /* if flushbits >= 0, some headers have not yet been written */ /* reduce flushbits by the size of the headers */remaining_headers = 1 + last_ptr - first_ptr;\n          if (last_ptr < first_ptr) remaining_headers = 1 + last_ptr - first_ptr + LameInternalFlags.MAX_HEADER_BUF;\n          flushbits -= remaining_headers * 8 * gfc.sideinfo_len;\n        } /*\r\n          * finally, add some bits so that the last frame is complete these bits\r\n          * are not necessary to decode the last frame, but some decoders will\r\n          * ignore last frame if these bits are missing\r\n          */\n        bitsPerFrame = self.getframebits(gfp);\n        flushbits += bitsPerFrame;\n        total_bytes_output.total += bitsPerFrame; /* round up: */\n        if (total_bytes_output.total % 8 != 0) total_bytes_output.total = 1 + total_bytes_output.total / 8;else total_bytes_output.total = total_bytes_output.total / 8;\n        total_bytes_output.total += bufByteIdx + 1;\n        if (flushbits < 0) {\n          System.err.println(\"strange error flushing buffer ... \\n\");\n        }\n        return flushbits;\n      }\n      this.flush_bitstream = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var l3_side;\n        var flushbits;\n        var last_ptr = gfc.h_ptr - 1; /* last header to add to bitstream */\n        if (last_ptr == -1) last_ptr = LameInternalFlags.MAX_HEADER_BUF - 1;\n        l3_side = gfc.l3_side;\n        if ((flushbits = compute_flushbits(gfp, new TotalBytes())) < 0) return;\n        drain_into_ancillary(gfp, flushbits); /* check that the 100% of the last frame has been written to bitstream */ /*\r\n                                                                                                                        * we have padded out all frames with ancillary data, which is the same\r\n                                                                                                                        * as filling the bitreservoir with ancillary data, so :\r\n                                                                                                                        */\n        gfc.ResvSize = 0;\n        l3_side.main_data_begin = 0; /* save the ReplayGain value */\n        if (gfc.findReplayGain) {\n          var RadioGain = ga.GetTitleGain(gfc.rgdata);\n          gfc.RadioGain = Math.floor(RadioGain * 10.0 + 0.5) | 0; /* round to nearest */\n        } /* find the gain and scale change required for no clipping */\n        if (gfc.findPeakSample) {\n          gfc.noclipGainChange = Math.ceil(Math.log10(gfc.PeakSample / 32767.0) * 20.0 * 10.0) | 0; /* round up */\n          if (gfc.noclipGainChange > 0) {\n            /* clipping occurs */if (EQ(gfp.scale, 1.0) || EQ(gfp.scale, 0.0)) gfc.noclipScale = Math.floor(32767.0 / gfc.PeakSample * 100.0) / 100.0; /* round down */else {\n              /*\r\n              * the user specified his own scaling factor. We could\r\n              * suggest the scaling factor of\r\n              * (32767.0/gfp.PeakSample)*(gfp.scale) but it's usually\r\n              * very inaccurate. So we'd rather not advice him on the\r\n              * scaling factor.\r\n              */\n              gfc.noclipScale = -1;\n            }\n          } else /* no clipping */gfc.noclipScale = -1;\n        }\n      };\n      this.add_dummy_byte = function (gfp, val, n) {\n        var gfc = gfp.internal_flags;\n        var i;\n        while (n-- > 0) {\n          putbits_noheaders(gfc, val, 8);\n          for (i = 0; i < LameInternalFlags.MAX_HEADER_BUF; ++i) {\n            gfc.header[i].write_timing += 8;\n          }\n        }\n      }; /**\r\n         * This is called after a frame of audio has been quantized and coded. It\r\n         * will write the encoded audio to the bitstream. Note that from a layer3\r\n         * encoder's perspective the bit stream is primarily a series of main_data()\r\n         * blocks, with header and side information inserted at the proper locations\r\n         * to maintain framing. (See Figure A.7 in the IS).\r\n         */\n      this.format_bitstream = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var l3_side;\n        l3_side = gfc.l3_side;\n        var bitsPerFrame = this.getframebits(gfp);\n        drain_into_ancillary(gfp, l3_side.resvDrain_pre);\n        encodeSideInfo2(gfp, bitsPerFrame);\n        var bits = 8 * gfc.sideinfo_len;\n        bits += writeMainData(gfp);\n        drain_into_ancillary(gfp, l3_side.resvDrain_post);\n        bits += l3_side.resvDrain_post;\n        l3_side.main_data_begin += (bitsPerFrame - bits) / 8; /*\r\n                                                              * compare number of bits needed to clear all buffered mp3 frames with\r\n                                                              * what we think the resvsize is:\r\n                                                              */\n        if (compute_flushbits(gfp, new TotalBytes()) != gfc.ResvSize) {\n          System.err.println(\"Internal buffer inconsistency. flushbits <> ResvSize\");\n        } /*\r\n          * compare main_data_begin for the next frame with what we think the\r\n          * resvsize is:\r\n          */\n        if (l3_side.main_data_begin * 8 != gfc.ResvSize) {\n          System.err.printf(\"bit reservoir error: \\n\" + \"l3_side.main_data_begin: %d \\n\" + \"Resvoir size:             %d \\n\" + \"resv drain (post)         %d \\n\" + \"resv drain (pre)          %d \\n\" + \"header and sideinfo:      %d \\n\" + \"data bits:                %d \\n\" + \"total bits:               %d (remainder: %d) \\n\" + \"bitsperframe:             %d \\n\", 8 * l3_side.main_data_begin, gfc.ResvSize, l3_side.resvDrain_post, l3_side.resvDrain_pre, 8 * gfc.sideinfo_len, bits - l3_side.resvDrain_post - 8 * gfc.sideinfo_len, bits, bits % 8, bitsPerFrame);\n          System.err.println(\"This is a fatal error.  It has several possible causes:\");\n          System.err.println(\"90%%  LAME compiled with buggy version of gcc using advanced optimizations\");\n          System.err.println(\" 9%%  Your system is overclocked\");\n          System.err.println(\" 1%%  bug in LAME encoding library\");\n          gfc.ResvSize = l3_side.main_data_begin * 8;\n        } //;\n        if (totbit > 1000000000) {\n          /*\r\n          * to avoid totbit overflow, (at 8h encoding at 128kbs) lets reset\r\n          * bit counter\r\n          */\n          var i;\n          for (i = 0; i < LameInternalFlags.MAX_HEADER_BUF; ++i) {\n            gfc.header[i].write_timing -= totbit;\n          }\n          totbit = 0;\n        }\n        return 0;\n      }; /**\r\n         * <PRE>\r\n         * copy data out of the internal MP3 bit buffer into a user supplied\r\n         *       unsigned char buffer.\r\n         *\r\n         *       mp3data=0      indicates data in buffer is an id3tags and VBR tags\r\n         *       mp3data=1      data is real mp3 frame data.\r\n         * </PRE>\r\n         */\n      this.copy_buffer = function (gfc, buffer, bufferPos, size, mp3data) {\n        var minimum = bufByteIdx + 1;\n        if (minimum <= 0) return 0;\n        if (size != 0 && minimum > size) {\n          /* buffer is too small */return -1;\n        }\n        System.arraycopy(buf, 0, buffer, bufferPos, minimum);\n        bufByteIdx = -1;\n        bufBitIdx = 0;\n        if (mp3data != 0) {\n          var crc = new_int(1);\n          crc[0] = gfc.nMusicCRC;\n          vbr.updateMusicCRC(crc, buffer, bufferPos, minimum);\n          gfc.nMusicCRC = crc[0]; /**\r\n                                  * sum number of bytes belonging to the mp3 stream this info will be\r\n                                  * written into the Xing/LAME header for seeking\r\n                                  */\n          if (minimum > 0) {\n            gfc.VBR_seek_table.nBytesWritten += minimum;\n          }\n          if (gfc.decode_on_the_fly) {\n            /* decode the frame */var pcm_buf = new_float_n([2, 1152]);\n            var mp3_in = minimum;\n            var samples_out = -1;\n            var i; /* re-synthesis to pcm. Repeat until we get a samples_out=0 */\n            while (samples_out != 0) {\n              samples_out = mpg.hip_decode1_unclipped(gfc.hip, buffer, bufferPos, mp3_in, pcm_buf[0], pcm_buf[1]); /*\r\n                                                                                                                   * samples_out = 0: need more data to decode samples_out =\r\n                                                                                                                   * -1: error. Lets assume 0 pcm output samples_out = number\r\n                                                                                                                   * of samples output\r\n                                                                                                                   */ /*\r\n                                                                                                                      * set the lenght of the mp3 input buffer to zero, so that\r\n                                                                                                                      * in the next iteration of the loop we will be querying\r\n                                                                                                                      * mpglib about buffered data\r\n                                                                                                                      */\n              mp3_in = 0;\n              if (samples_out == -1) {\n                /*\r\n                * error decoding. Not fatal, but might screw up the\r\n                * ReplayGain tag. What should we do? Ignore for now\r\n                */\n                samples_out = 0;\n              }\n              if (samples_out > 0) {\n                /* process the PCM data */ /*\r\n                                           * this should not be possible, and indicates we have\r\n                                           * overflown the pcm_buf buffer\r\n                                           */if (gfc.findPeakSample) {\n                  for (i = 0; i < samples_out; i++) {\n                    if (pcm_buf[0][i] > gfc.PeakSample) gfc.PeakSample = pcm_buf[0][i];else if (-pcm_buf[0][i] > gfc.PeakSample) gfc.PeakSample = -pcm_buf[0][i];\n                  }\n                  if (gfc.channels_out > 1) for (i = 0; i < samples_out; i++) {\n                    if (pcm_buf[1][i] > gfc.PeakSample) gfc.PeakSample = pcm_buf[1][i];else if (-pcm_buf[1][i] > gfc.PeakSample) gfc.PeakSample = -pcm_buf[1][i];\n                  }\n                }\n                if (gfc.findReplayGain) if (ga.AnalyzeSamples(gfc.rgdata, pcm_buf[0], 0, pcm_buf[1], 0, samples_out, gfc.channels_out) == GainAnalysis.GAIN_ANALYSIS_ERROR) return -6;\n              } /* if (samples_out>0) */\n            } /* while (samples_out!=0) */\n          } /* if (gfc.decode_on_the_fly) */\n        } /* if (mp3data) */\n        return minimum;\n      };\n      this.init_bit_stream_w = function (gfc) {\n        buf = new_byte(Lame.LAME_MAXMP3BUFFER);\n        gfc.h_ptr = gfc.w_ptr = 0;\n        gfc.header[gfc.h_ptr].write_timing = 0;\n        bufByteIdx = -1;\n        bufBitIdx = 0;\n        totbit = 0;\n      }; // From machine.h\n    }\n    function HuffCodeTab(len, max, tab, hl) {\n      this.xlen = len;\n      this.linmax = max;\n      this.table = tab;\n      this.hlen = hl;\n    }\n    var Tables = {};\n    Tables.t1HB = [1, 1, 1, 0];\n    Tables.t2HB = [1, 2, 1, 3, 1, 1, 3, 2, 0];\n    Tables.t3HB = [3, 2, 1, 1, 1, 1, 3, 2, 0];\n    Tables.t5HB = [1, 2, 6, 5, 3, 1, 4, 4, 7, 5, 7, 1, 6, 1, 1, 0];\n    Tables.t6HB = [7, 3, 5, 1, 6, 2, 3, 2, 5, 4, 4, 1, 3, 3, 2, 0];\n    Tables.t7HB = [1, 2, 10, 19, 16, 10, 3, 3, 7, 10, 5, 3, 11, 4, 13, 17, 8, 4, 12, 11, 18, 15, 11, 2, 7, 6, 9, 14, 3, 1, 6, 4, 5, 3, 2, 0];\n    Tables.t8HB = [3, 4, 6, 18, 12, 5, 5, 1, 2, 16, 9, 3, 7, 3, 5, 14, 7, 3, 19, 17, 15, 13, 10, 4, 13, 5, 8, 11, 5, 1, 12, 4, 4, 1, 1, 0];\n    Tables.t9HB = [7, 5, 9, 14, 15, 7, 6, 4, 5, 5, 6, 7, 7, 6, 8, 8, 8, 5, 15, 6, 9, 10, 5, 1, 11, 7, 9, 6, 4, 1, 14, 4, 6, 2, 6, 0];\n    Tables.t10HB = [1, 2, 10, 23, 35, 30, 12, 17, 3, 3, 8, 12, 18, 21, 12, 7, 11, 9, 15, 21, 32, 40, 19, 6, 14, 13, 22, 34, 46, 23, 18, 7, 20, 19, 33, 47, 27, 22, 9, 3, 31, 22, 41, 26, 21, 20, 5, 3, 14, 13, 10, 11, 16, 6, 5, 1, 9, 8, 7, 8, 4, 4, 2, 0];\n    Tables.t11HB = [3, 4, 10, 24, 34, 33, 21, 15, 5, 3, 4, 10, 32, 17, 11, 10, 11, 7, 13, 18, 30, 31, 20, 5, 25, 11, 19, 59, 27, 18, 12, 5, 35, 33, 31, 58, 30, 16, 7, 5, 28, 26, 32, 19, 17, 15, 8, 14, 14, 12, 9, 13, 14, 9, 4, 1, 11, 4, 6, 6, 6, 3, 2, 0];\n    Tables.t12HB = [9, 6, 16, 33, 41, 39, 38, 26, 7, 5, 6, 9, 23, 16, 26, 11, 17, 7, 11, 14, 21, 30, 10, 7, 17, 10, 15, 12, 18, 28, 14, 5, 32, 13, 22, 19, 18, 16, 9, 5, 40, 17, 31, 29, 17, 13, 4, 2, 27, 12, 11, 15, 10, 7, 4, 1, 27, 12, 8, 12, 6, 3, 1, 0];\n    Tables.t13HB = [1, 5, 14, 21, 34, 51, 46, 71, 42, 52, 68, 52, 67, 44, 43, 19, 3, 4, 12, 19, 31, 26, 44, 33, 31, 24, 32, 24, 31, 35, 22, 14, 15, 13, 23, 36, 59, 49, 77, 65, 29, 40, 30, 40, 27, 33, 42, 16, 22, 20, 37, 61, 56, 79, 73, 64, 43, 76, 56, 37, 26, 31, 25, 14, 35, 16, 60, 57, 97, 75, 114, 91, 54, 73, 55, 41, 48, 53, 23, 24, 58, 27, 50, 96, 76, 70, 93, 84, 77, 58, 79, 29, 74, 49, 41, 17, 47, 45, 78, 74, 115, 94, 90, 79, 69, 83, 71, 50, 59, 38, 36, 15, 72, 34, 56, 95, 92, 85, 91, 90, 86, 73, 77, 65, 51, 44, 43, 42, 43, 20, 30, 44, 55, 78, 72, 87, 78, 61, 46, 54, 37, 30, 20, 16, 53, 25, 41, 37, 44, 59, 54, 81, 66, 76, 57, 54, 37, 18, 39, 11, 35, 33, 31, 57, 42, 82, 72, 80, 47, 58, 55, 21, 22, 26, 38, 22, 53, 25, 23, 38, 70, 60, 51, 36, 55, 26, 34, 23, 27, 14, 9, 7, 34, 32, 28, 39, 49, 75, 30, 52, 48, 40, 52, 28, 18, 17, 9, 5, 45, 21, 34, 64, 56, 50, 49, 45, 31, 19, 12, 15, 10, 7, 6, 3, 48, 23, 20, 39, 36, 35, 53, 21, 16, 23, 13, 10, 6, 1, 4, 2, 16, 15, 17, 27, 25, 20, 29, 11, 17, 12, 16, 8, 1, 1, 0, 1];\n    Tables.t15HB = [7, 12, 18, 53, 47, 76, 124, 108, 89, 123, 108, 119, 107, 81, 122, 63, 13, 5, 16, 27, 46, 36, 61, 51, 42, 70, 52, 83, 65, 41, 59, 36, 19, 17, 15, 24, 41, 34, 59, 48, 40, 64, 50, 78, 62, 80, 56, 33, 29, 28, 25, 43, 39, 63, 55, 93, 76, 59, 93, 72, 54, 75, 50, 29, 52, 22, 42, 40, 67, 57, 95, 79, 72, 57, 89, 69, 49, 66, 46, 27, 77, 37, 35, 66, 58, 52, 91, 74, 62, 48, 79, 63, 90, 62, 40, 38, 125, 32, 60, 56, 50, 92, 78, 65, 55, 87, 71, 51, 73, 51, 70, 30, 109, 53, 49, 94, 88, 75, 66, 122, 91, 73, 56, 42, 64, 44, 21, 25, 90, 43, 41, 77, 73, 63, 56, 92, 77, 66, 47, 67, 48, 53, 36, 20, 71, 34, 67, 60, 58, 49, 88, 76, 67, 106, 71, 54, 38, 39, 23, 15, 109, 53, 51, 47, 90, 82, 58, 57, 48, 72, 57, 41, 23, 27, 62, 9, 86, 42, 40, 37, 70, 64, 52, 43, 70, 55, 42, 25, 29, 18, 11, 11, 118, 68, 30, 55, 50, 46, 74, 65, 49, 39, 24, 16, 22, 13, 14, 7, 91, 44, 39, 38, 34, 63, 52, 45, 31, 52, 28, 19, 14, 8, 9, 3, 123, 60, 58, 53, 47, 43, 32, 22, 37, 24, 17, 12, 15, 10, 2, 1, 71, 37, 34, 30, 28, 20, 17, 26, 21, 16, 10, 6, 8, 6, 2, 0];\n    Tables.t16HB = [1, 5, 14, 44, 74, 63, 110, 93, 172, 149, 138, 242, 225, 195, 376, 17, 3, 4, 12, 20, 35, 62, 53, 47, 83, 75, 68, 119, 201, 107, 207, 9, 15, 13, 23, 38, 67, 58, 103, 90, 161, 72, 127, 117, 110, 209, 206, 16, 45, 21, 39, 69, 64, 114, 99, 87, 158, 140, 252, 212, 199, 387, 365, 26, 75, 36, 68, 65, 115, 101, 179, 164, 155, 264, 246, 226, 395, 382, 362, 9, 66, 30, 59, 56, 102, 185, 173, 265, 142, 253, 232, 400, 388, 378, 445, 16, 111, 54, 52, 100, 184, 178, 160, 133, 257, 244, 228, 217, 385, 366, 715, 10, 98, 48, 91, 88, 165, 157, 148, 261, 248, 407, 397, 372, 380, 889, 884, 8, 85, 84, 81, 159, 156, 143, 260, 249, 427, 401, 392, 383, 727, 713, 708, 7, 154, 76, 73, 141, 131, 256, 245, 426, 406, 394, 384, 735, 359, 710, 352, 11, 139, 129, 67, 125, 247, 233, 229, 219, 393, 743, 737, 720, 885, 882, 439, 4, 243, 120, 118, 115, 227, 223, 396, 746, 742, 736, 721, 712, 706, 223, 436, 6, 202, 224, 222, 218, 216, 389, 386, 381, 364, 888, 443, 707, 440, 437, 1728, 4, 747, 211, 210, 208, 370, 379, 734, 723, 714, 1735, 883, 877, 876, 3459, 865, 2, 377, 369, 102, 187, 726, 722, 358, 711, 709, 866, 1734, 871, 3458, 870, 434, 0, 12, 10, 7, 11, 10, 17, 11, 9, 13, 12, 10, 7, 5, 3, 1, 3];\n    Tables.t24HB = [15, 13, 46, 80, 146, 262, 248, 434, 426, 669, 653, 649, 621, 517, 1032, 88, 14, 12, 21, 38, 71, 130, 122, 216, 209, 198, 327, 345, 319, 297, 279, 42, 47, 22, 41, 74, 68, 128, 120, 221, 207, 194, 182, 340, 315, 295, 541, 18, 81, 39, 75, 70, 134, 125, 116, 220, 204, 190, 178, 325, 311, 293, 271, 16, 147, 72, 69, 135, 127, 118, 112, 210, 200, 188, 352, 323, 306, 285, 540, 14, 263, 66, 129, 126, 119, 114, 214, 202, 192, 180, 341, 317, 301, 281, 262, 12, 249, 123, 121, 117, 113, 215, 206, 195, 185, 347, 330, 308, 291, 272, 520, 10, 435, 115, 111, 109, 211, 203, 196, 187, 353, 332, 313, 298, 283, 531, 381, 17, 427, 212, 208, 205, 201, 193, 186, 177, 169, 320, 303, 286, 268, 514, 377, 16, 335, 199, 197, 191, 189, 181, 174, 333, 321, 305, 289, 275, 521, 379, 371, 11, 668, 184, 183, 179, 175, 344, 331, 314, 304, 290, 277, 530, 383, 373, 366, 10, 652, 346, 171, 168, 164, 318, 309, 299, 287, 276, 263, 513, 375, 368, 362, 6, 648, 322, 316, 312, 307, 302, 292, 284, 269, 261, 512, 376, 370, 364, 359, 4, 620, 300, 296, 294, 288, 282, 273, 266, 515, 380, 374, 369, 365, 361, 357, 2, 1033, 280, 278, 274, 267, 264, 259, 382, 378, 372, 367, 363, 360, 358, 356, 0, 43, 20, 19, 17, 15, 13, 11, 9, 7, 6, 4, 7, 5, 3, 1, 3];\n    Tables.t32HB = [1 << 0, 5 << 1, 4 << 1, 5 << 2, 6 << 1, 5 << 2, 4 << 2, 4 << 3, 7 << 1, 3 << 2, 6 << 2, 0 << 3, 7 << 2, 2 << 3, 3 << 3, 1 << 4];\n    Tables.t33HB = [15 << 0, 14 << 1, 13 << 1, 12 << 2, 11 << 1, 10 << 2, 9 << 2, 8 << 3, 7 << 1, 6 << 2, 5 << 2, 4 << 3, 3 << 2, 2 << 3, 1 << 3, 0 << 4];\n    Tables.t1l = [1, 4, 3, 5];\n    Tables.t2l = [1, 4, 7, 4, 5, 7, 6, 7, 8];\n    Tables.t3l = [2, 3, 7, 4, 4, 7, 6, 7, 8];\n    Tables.t5l = [1, 4, 7, 8, 4, 5, 8, 9, 7, 8, 9, 10, 8, 8, 9, 10];\n    Tables.t6l = [3, 4, 6, 8, 4, 4, 6, 7, 5, 6, 7, 8, 7, 7, 8, 9];\n    Tables.t7l = [1, 4, 7, 9, 9, 10, 4, 6, 8, 9, 9, 10, 7, 7, 9, 10, 10, 11, 8, 9, 10, 11, 11, 11, 8, 9, 10, 11, 11, 12, 9, 10, 11, 12, 12, 12];\n    Tables.t8l = [2, 4, 7, 9, 9, 10, 4, 4, 6, 10, 10, 10, 7, 6, 8, 10, 10, 11, 9, 10, 10, 11, 11, 12, 9, 9, 10, 11, 12, 12, 10, 10, 11, 11, 13, 13];\n    Tables.t9l = [3, 4, 6, 7, 9, 10, 4, 5, 6, 7, 8, 10, 5, 6, 7, 8, 9, 10, 7, 7, 8, 9, 9, 10, 8, 8, 9, 9, 10, 11, 9, 9, 10, 10, 11, 11];\n    Tables.t10l = [1, 4, 7, 9, 10, 10, 10, 11, 4, 6, 8, 9, 10, 11, 10, 10, 7, 8, 9, 10, 11, 12, 11, 11, 8, 9, 10, 11, 12, 12, 11, 12, 9, 10, 11, 12, 12, 12, 12, 12, 10, 11, 12, 12, 13, 13, 12, 13, 9, 10, 11, 12, 12, 12, 13, 13, 10, 10, 11, 12, 12, 13, 13, 13];\n    Tables.t11l = [2, 4, 6, 8, 9, 10, 9, 10, 4, 5, 6, 8, 10, 10, 9, 10, 6, 7, 8, 9, 10, 11, 10, 10, 8, 8, 9, 11, 10, 12, 10, 11, 9, 10, 10, 11, 11, 12, 11, 12, 9, 10, 11, 12, 12, 13, 12, 13, 9, 9, 9, 10, 11, 12, 12, 12, 9, 9, 10, 11, 12, 12, 12, 12];\n    Tables.t12l = [4, 4, 6, 8, 9, 10, 10, 10, 4, 5, 6, 7, 9, 9, 10, 10, 6, 6, 7, 8, 9, 10, 9, 10, 7, 7, 8, 8, 9, 10, 10, 10, 8, 8, 9, 9, 10, 10, 10, 11, 9, 9, 10, 10, 10, 11, 10, 11, 9, 9, 9, 10, 10, 11, 11, 12, 10, 10, 10, 11, 11, 11, 11, 12];\n    Tables.t13l = [1, 5, 7, 8, 9, 10, 10, 11, 10, 11, 12, 12, 13, 13, 14, 14, 4, 6, 8, 9, 10, 10, 11, 11, 11, 11, 12, 12, 13, 14, 14, 14, 7, 8, 9, 10, 11, 11, 12, 12, 11, 12, 12, 13, 13, 14, 15, 15, 8, 9, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 15, 15, 9, 9, 11, 11, 12, 12, 13, 13, 12, 13, 13, 14, 14, 15, 15, 16, 10, 10, 11, 12, 12, 12, 13, 13, 13, 13, 14, 13, 15, 15, 16, 16, 10, 11, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 15, 15, 16, 16, 11, 11, 12, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 16, 18, 18, 10, 10, 11, 12, 12, 13, 13, 14, 14, 14, 14, 15, 15, 16, 17, 17, 11, 11, 12, 12, 13, 13, 13, 15, 14, 15, 15, 16, 16, 16, 18, 17, 11, 12, 12, 13, 13, 14, 14, 15, 14, 15, 16, 15, 16, 17, 18, 19, 12, 12, 12, 13, 14, 14, 14, 14, 15, 15, 15, 16, 17, 17, 17, 18, 12, 13, 13, 14, 14, 15, 14, 15, 16, 16, 17, 17, 17, 18, 18, 18, 13, 13, 14, 15, 15, 15, 16, 16, 16, 16, 16, 17, 18, 17, 18, 18, 14, 14, 14, 15, 15, 15, 17, 16, 16, 19, 17, 17, 17, 19, 18, 18, 13, 14, 15, 16, 16, 16, 17, 16, 17, 17, 18, 18, 21, 20, 21, 18];\n    Tables.t15l = [3, 5, 6, 8, 8, 9, 10, 10, 10, 11, 11, 12, 12, 12, 13, 14, 5, 5, 7, 8, 9, 9, 10, 10, 10, 11, 11, 12, 12, 12, 13, 13, 6, 7, 7, 8, 9, 9, 10, 10, 10, 11, 11, 12, 12, 13, 13, 13, 7, 8, 8, 9, 9, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 8, 8, 9, 9, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13, 9, 9, 9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 13, 13, 13, 14, 10, 9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 14, 14, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 14, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 14, 14, 14, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 15, 14, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 15, 12, 12, 11, 12, 12, 12, 13, 13, 13, 13, 13, 13, 14, 14, 15, 15, 12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 14, 15, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15];\n    Tables.t16_5l = [1, 5, 7, 9, 10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 14, 11, 4, 6, 8, 9, 10, 11, 11, 11, 12, 12, 12, 13, 14, 13, 14, 11, 7, 8, 9, 10, 11, 11, 12, 12, 13, 12, 13, 13, 13, 14, 14, 12, 9, 9, 10, 11, 11, 12, 12, 12, 13, 13, 14, 14, 14, 15, 15, 13, 10, 10, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 12, 10, 10, 11, 11, 12, 13, 13, 14, 13, 14, 14, 15, 15, 15, 16, 13, 11, 11, 11, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 16, 13, 11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 17, 17, 13, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 13, 12, 12, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 15, 16, 15, 14, 12, 13, 12, 13, 14, 14, 14, 14, 15, 16, 16, 16, 17, 17, 16, 13, 13, 13, 13, 13, 14, 14, 15, 16, 16, 16, 16, 16, 16, 15, 16, 14, 13, 14, 14, 14, 14, 15, 15, 15, 15, 17, 16, 16, 16, 16, 18, 14, 15, 14, 14, 14, 15, 15, 16, 16, 16, 18, 17, 17, 17, 19, 17, 14, 14, 15, 13, 14, 16, 16, 15, 16, 16, 17, 18, 17, 19, 17, 16, 14, 11, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 12];\n    Tables.t16l = [1, 5, 7, 9, 10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 14, 10, 4, 6, 8, 9, 10, 11, 11, 11, 12, 12, 12, 13, 14, 13, 14, 10, 7, 8, 9, 10, 11, 11, 12, 12, 13, 12, 13, 13, 13, 14, 14, 11, 9, 9, 10, 11, 11, 12, 12, 12, 13, 13, 14, 14, 14, 15, 15, 12, 10, 10, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 11, 10, 10, 11, 11, 12, 13, 13, 14, 13, 14, 14, 15, 15, 15, 16, 12, 11, 11, 11, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 16, 12, 11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 17, 17, 12, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 12, 12, 12, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 15, 16, 15, 13, 12, 13, 12, 13, 14, 14, 14, 14, 15, 16, 16, 16, 17, 17, 16, 12, 13, 13, 13, 13, 14, 14, 15, 16, 16, 16, 16, 16, 16, 15, 16, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 17, 16, 16, 16, 16, 18, 13, 15, 14, 14, 14, 15, 15, 16, 16, 16, 18, 17, 17, 17, 19, 17, 13, 14, 15, 13, 14, 16, 16, 15, 16, 16, 17, 18, 17, 19, 17, 16, 13, 10, 10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 10];\n    Tables.t24l = [4, 5, 7, 8, 9, 10, 10, 11, 11, 12, 12, 12, 12, 12, 13, 10, 5, 6, 7, 8, 9, 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 10, 7, 7, 8, 9, 9, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 9, 8, 8, 9, 9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 12, 12, 12, 12, 13, 9, 10, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 9, 11, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 10, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 10, 12, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 10, 12, 12, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 10, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 10, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 10, 13, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 6];\n    Tables.t32l = [1 + 0, 4 + 1, 4 + 1, 5 + 2, 4 + 1, 6 + 2, 5 + 2, 6 + 3, 4 + 1, 5 + 2, 5 + 2, 6 + 3, 5 + 2, 6 + 3, 6 + 3, 6 + 4];\n    Tables.t33l = [4 + 0, 4 + 1, 4 + 1, 4 + 2, 4 + 1, 4 + 2, 4 + 2, 4 + 3, 4 + 1, 4 + 2, 4 + 2, 4 + 3, 4 + 2, 4 + 3, 4 + 3, 4 + 4];\n    Tables.ht = [/* xlen, linmax, table, hlen */new HuffCodeTab(0, 0, null, null), new HuffCodeTab(2, 0, Tables.t1HB, Tables.t1l), new HuffCodeTab(3, 0, Tables.t2HB, Tables.t2l), new HuffCodeTab(3, 0, Tables.t3HB, Tables.t3l), new HuffCodeTab(0, 0, null, null), /* Apparently not used */new HuffCodeTab(4, 0, Tables.t5HB, Tables.t5l), new HuffCodeTab(4, 0, Tables.t6HB, Tables.t6l), new HuffCodeTab(6, 0, Tables.t7HB, Tables.t7l), new HuffCodeTab(6, 0, Tables.t8HB, Tables.t8l), new HuffCodeTab(6, 0, Tables.t9HB, Tables.t9l), new HuffCodeTab(8, 0, Tables.t10HB, Tables.t10l), new HuffCodeTab(8, 0, Tables.t11HB, Tables.t11l), new HuffCodeTab(8, 0, Tables.t12HB, Tables.t12l), new HuffCodeTab(16, 0, Tables.t13HB, Tables.t13l), new HuffCodeTab(0, 0, null, Tables.t16_5l), /* Apparently not used */new HuffCodeTab(16, 0, Tables.t15HB, Tables.t15l), new HuffCodeTab(1, 1, Tables.t16HB, Tables.t16l), new HuffCodeTab(2, 3, Tables.t16HB, Tables.t16l), new HuffCodeTab(3, 7, Tables.t16HB, Tables.t16l), new HuffCodeTab(4, 15, Tables.t16HB, Tables.t16l), new HuffCodeTab(6, 63, Tables.t16HB, Tables.t16l), new HuffCodeTab(8, 255, Tables.t16HB, Tables.t16l), new HuffCodeTab(10, 1023, Tables.t16HB, Tables.t16l), new HuffCodeTab(13, 8191, Tables.t16HB, Tables.t16l), new HuffCodeTab(4, 15, Tables.t24HB, Tables.t24l), new HuffCodeTab(5, 31, Tables.t24HB, Tables.t24l), new HuffCodeTab(6, 63, Tables.t24HB, Tables.t24l), new HuffCodeTab(7, 127, Tables.t24HB, Tables.t24l), new HuffCodeTab(8, 255, Tables.t24HB, Tables.t24l), new HuffCodeTab(9, 511, Tables.t24HB, Tables.t24l), new HuffCodeTab(11, 2047, Tables.t24HB, Tables.t24l), new HuffCodeTab(13, 8191, Tables.t24HB, Tables.t24l), new HuffCodeTab(0, 0, Tables.t32HB, Tables.t32l), new HuffCodeTab(0, 0, Tables.t33HB, Tables.t33l)]; /**\r\nr\nfor (i = 0; i < 16*16; i++) [\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *      largetbl[i] = ((ht[16].hlen[i]) << 16) + ht[24].hlen[i];\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *  ]\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  * </CODE>\r\nr\nn    Tables.largetbl = [0x010004, 0x050005, 0x070007, 0x090008, 0x0a0009, 0x0a000a, 0x0b000a, 0x0b000b, 0x0c000b, 0x0c000c, 0x0c000c, 0x0d000c, 0x0d000c, 0x0d000c, 0x0e000d, 0x0a000a, 0x040005, 0x060006, 0x080007, 0x090008, 0x0a0009, 0x0b000a, 0x0b000a, 0x0b000b, 0x0c000b, 0x0c000b, 0x0c000c, 0x0d000c, 0x0e000c, 0x0d000c, 0x0e000c, 0x0a000a, 0x070007, 0x080007, 0x090008, 0x0a0009, 0x0b0009, 0x0b000a, 0x0c000a, 0x0c000b, 0x0d000b, 0x0c000b, 0x0d000b, 0x0d000c, 0x0d000c, 0x0e000c, 0x0e000d, 0x0b0009, 0x090008, 0x090008, 0x0a0009, 0x0b0009, 0x0b000a, 0x0c000a, 0x0c000a, 0x0c000b, 0x0d000b, 0x0d000b, 0x0e000b, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x0c0009, 0x0a0009, 0x0a0009, 0x0b0009, 0x0b000a, 0x0c000a, 0x0c000a, 0x0d000a, 0x0d000b, 0x0d000b, 0x0e000b, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x0f000d, 0x0b0009, 0x0a000a, 0x0a0009, 0x0b000a, 0x0b000a, 0x0c000a, 0x0d000a, 0x0d000b, 0x0e000b, 0x0d000b, 0x0e000b, 0x0e000c, 0x0f000c, 0x0f000c, 0x0f000c, 0x10000c, 0x0c0009, 0x0b000a, 0x0b000a, 0x0b000a, 0x0c000a, 0x0d000a, 0x0d000b, 0x0d000b, 0x0d000b, 0x0e000b, 0x0e000c, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x10000d, 0x0c0009, 0x0b000b, 0x0b000a, 0x0c000a, 0x0c000a, 0x0d000b, 0x0d000b, 0x0d000b, 0x0e000b, 0x0e000c, 0x0f000c, 0x0f000c, 0x0f000c, 0x0f000c, 0x11000d, 0x11000d, 0x0c000a, 0x0b000b, 0x0c000b, 0x0c000b, 0x0d000b, 0x0d000b, 0x0d000b, 0x0e000b, 0x0e000b, 0x0f000b, 0x0f000c, 0x0f000c, 0x0f000c, 0x10000c, 0x10000d, 0x10000d, 0x0c000a, 0x0c000b, 0x0c000b, 0x0c000b, 0x0d000b, 0x0d000b, 0x0e000b, 0x0e000b, 0x0f000c, 0x0f000c, 0x0f000c, 0x0f000c, 0x10000c, 0x0f000d, 0x10000d, 0x0f000d, 0x0d000a, 0x0c000c, 0x0d000b, 0x0c000b, 0x0d000b, 0x0e000b, 0x0e000c, 0x0e000c, 0x0e000c, 0x0f000c, 0x10000c, 0x10000c, 0x10000d, 0x11000d, 0x11000d, 0x10000d, 0x0c000a, 0x0d000c, 0x0d000c, 0x0d000b, 0x0d000b, 0x0e000b, 0x0e000c, 0x0f000c, 0x10000c, 0x10000c, 0x10000c, 0x10000c, 0x10000d, 0x10000d, 0x0f000d, 0x10000d, 0x0d000a, 0x0d000c, 0x0e000c, 0x0e000c, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x0f000c, 0x0f000c, 0x11000c, 0x10000d, 0x10000d, 0x10000d, 0x10000d, 0x12000d, 0x0d000a, 0x0f000c, 0x0e000c, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x10000c, 0x10000c, 0x10000d, 0x12000d, 0x11000d, 0x11000d, 0x11000d, 0x13000d, 0x11000d, 0x0d000a, 0x0e000d, 0x0f000c, 0x0d000c, 0x0e000c, 0x10000c, 0x10000c, 0x0f000c, 0x10000d, 0x10000d, 0x11000d, 0x12000d, 0x11000d, 0x13000d, 0x11000d, 0x10000d, 0x0d000a, 0x0a0009, 0x0a0009, 0x0a0009, 0x0b0009, 0x0b0009, 0x0c0009, 0x0c0009, 0x0c0009, 0x0d0009, 0x0d0009, 0x0d0009, 0x0d000a, 0x0d000a, 0x0d000a, 0x0d000a, 0x0a0006]; /**\r\nr\nfor (i = 0; i < 3*3; i++) [\r\ntable23[i] = ((ht[2].hlen[i]) << 16) + ht[3].hlen[i];\r\nr\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        * </CODE>\r\nr\nn    Tables.table23 = [0x010002, 0x040003, 0x070007, 0x040004, 0x050004, 0x070007, 0x060006, 0x070007, 0x080008]; /**\r\n                                                                                                                 * <CODE>\r\n                                                                                                                 *  for (i = 0; i < 4*4; i++) [\r\n                                                                                                                 *       table56[i] = ((ht[5].hlen[i]) << 16) + ht[6].hlen[i];\r\n                                                                                                                 *   ]\r\n                                                                                                                 * </CODE>\r\n                                                                                                                 *\r\n                                                                                                                 */\n    Tables.table56 = [0x010003, 0x040004, 0x070006, 0x080008, 0x040004, 0x050004, 0x080006, 0x090007, 0x070005, 0x080006, 0x090007, 0x0a0008, 0x080007, 0x080007, 0x090008, 0x0a0009];\n    Tables.bitrate_table = [[0, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160, -1], /* MPEG 2 */[0, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, -1], /* MPEG 1 */[0, 8, 16, 24, 32, 40, 48, 56, 64, -1, -1, -1, -1, -1, -1, -1]]; /**\r\n                                                                                                                                                                                                                                                                 * MPEG 2, MPEG 1, MPEG 2.5.\r\n                                                                                                                                                                                                                                                                 */\n    Tables.samplerate_table = [[22050, 24000, 16000, -1], [44100, 48000, 32000, -1], [11025, 12000, 8000, -1]]; /**\r\n                                                                                                                * This is the scfsi_band table from 2.4.2.7 of the IS.\r\n                                                                                                                */\n    Tables.scfsi_band = [0, 6, 11, 16, 21];\n    function MeanBits(meanBits) {\n      this.bits = meanBits;\n    } //package mp3;\n    function CalcNoiseResult() {\n      /**\r\n      * sum of quantization noise > masking\r\n      */\n      this.over_noise = 0.; /**\r\n                            * sum of all quantization noise\r\n                            */\n      this.tot_noise = 0.; /**\r\n                           * max quantization noise\r\n                           */\n      this.max_noise = 0.; /**\r\n                           * number of quantization noise > masking\r\n                           */\n      this.over_count = 0; /**\r\n                           * SSD-like cost of distorted bands\r\n                           */\n      this.over_SSD = 0;\n      this.bits = 0;\n    }\n    function VBRQuantize() {\n      var qupvt;\n      var tak;\n      this.setModules = function (_qupvt, _tk) {\n        qupvt = _qupvt;\n        tak = _tk;\n      }; //TODO\n    } /**\r\n              * ATH related stuff, if something new ATH related has to be added, please plug\r\n              * it here into the ATH.\r\n              */\n    function ATH() {\n      /**\r\n      * Method for the auto adjustment.\r\n      */\n      this.useAdjust = 0; /**\r\n                          * factor for tuning the (sample power) point below which adaptive threshold\r\n                          * of hearing adjustment occurs\r\n                          */\n      this.aaSensitivityP = 0.; /**\r\n                                * Lowering based on peak volume, 1 = no lowering.\r\n                                */\n      this.adjust = 0.; /**\r\n                        * Limit for dynamic ATH adjust.\r\n                        */\n      this.adjustLimit = 0.; /**\r\n                             * Determined to lower x dB each second.\r\n                             */\n      this.decay = 0.; /**\r\n                       * Lowest ATH value.\r\n                       */\n      this.floor = 0.; /**\r\n                       * ATH for sfbs in long blocks.\r\n                       */\n      this.l = new_float(Encoder.SBMAX_l); /**\r\n                                           * ATH for sfbs in short blocks.\r\n                                           */\n      this.s = new_float(Encoder.SBMAX_s); /**\r\n                                           * ATH for partitioned sfb21 in long blocks.\r\n                                           */\n      this.psfb21 = new_float(Encoder.PSFB21); /**\r\n                                               * ATH for partitioned sfb12 in short blocks.\r\n                                               */\n      this.psfb12 = new_float(Encoder.PSFB12); /**\r\n                                               * ATH for long block convolution bands.\r\n                                               */\n      this.cb_l = new_float(Encoder.CBANDS); /**\r\n                                             * ATH for short block convolution bands.\r\n                                             */\n      this.cb_s = new_float(Encoder.CBANDS); /**\r\n                                             * Equal loudness weights (based on ATH).\r\n                                             */\n      this.eql_w = new_float(Encoder.BLKSIZE / 2);\n    }\n    function LameGlobalFlags() {\n      this.class_id = 0; /* input description */ /**\r\n                                                 * number of samples. default=-1\r\n                                                 */\n      this.num_samples = 0; /**\r\n                            * input number of channels. default=2\r\n                            */\n      this.num_channels = 0; /**\r\n                             * input_samp_rate in Hz. default=44.1 kHz\r\n                             */\n      this.in_samplerate = 0; /**\r\n                              * output_samp_rate. default: LAME picks best value at least not used for\r\n                              * MP3 decoding: Remember 44.1 kHz MP3s and AC97\r\n                              */\n      this.out_samplerate = 0; /**\r\n                               * scale input by this amount before encoding at least not used for MP3\r\n                               * decoding\r\n                               */\n      this.scale = 0.; /**\r\n                       * scale input of channel 0 (left) by this amount before encoding\r\n                       */\n      this.scale_left = 0.; /**\r\n                            * scale input of channel 1 (right) by this amount before encoding\r\n                            */\n      this.scale_right = 0.; /* general control params */ /**\r\n                                                          * collect data for a MP3 frame analyzer?\r\n                                                          */\n      this.analysis = false; /**\r\n                             * add Xing VBR tag?\r\n                             */\n      this.bWriteVbrTag = false; /**\r\n                                 * use lame/mpglib to convert mp3 to wav\r\n                                 */\n      this.decode_only = false; /**\r\n                                * quality setting 0=best, 9=worst default=5\r\n                                */\n      this.quality = 0; /**\r\n                        * see enum default = LAME picks best value\r\n                        */\n      this.mode = MPEGMode.STEREO; /**\r\n                                   * force M/S mode. requires mode=1\r\n                                   */\n      this.force_ms = false; /**\r\n                             * use free format? default=0\r\n                             */\n      this.free_format = false; /**\r\n                                * find the RG value? default=0\r\n                                */\n      this.findReplayGain = false; /**\r\n                                   * decode on the fly? default=0\r\n                                   */\n      this.decode_on_the_fly = false; /**\r\n                                      * 1 (default) writes ID3 tags, 0 not\r\n                                      */\n      this.write_id3tag_automatic = false; /*\r\n                                           * set either brate>0 or compression_ratio>0, LAME will compute the value of\r\n                                           * the variable not set. Default is compression_ratio = 11.025\r\n                                           */ /**\r\n                                              * bitrate\r\n                                              */\n      this.brate = 0; /**\r\n                      * sizeof(wav file)/sizeof(mp3 file)\r\n                      */\n      this.compression_ratio = 0.; /* frame params */ /**\r\n                                                      * mark as copyright. default=0\r\n                                                      */\n      this.copyright = 0; /**\r\n                          * mark as original. default=1\r\n                          */\n      this.original = 0; /**\r\n                         * the MP3 'private extension' bit. Meaningless\r\n                         */\n      this.extension = 0; /**\r\n                          * Input PCM is emphased PCM (for instance from one of the rarely emphased\r\n                          * CDs), it is STRONGLY not recommended to use this, because psycho does not\r\n                          * take it into account, and last but not least many decoders don't care\r\n                          * about these bits\r\n                          */\n      this.emphasis = 0; /**\r\n                         * use 2 bytes per frame for a CRC checksum. default=0\r\n                         */\n      this.error_protection = 0; /**\r\n                                 * enforce ISO spec as much as possible\r\n                                 */\n      this.strict_ISO = false; /**\r\n                               * use bit reservoir?\r\n                               */\n      this.disable_reservoir = false; /* quantization/noise shaping */\n      this.quant_comp = 0;\n      this.quant_comp_short = 0;\n      this.experimentalY = false;\n      this.experimentalZ = 0;\n      this.exp_nspsytune = 0;\n      this.preset = 0; /* VBR control */\n      this.VBR = null; /**\r\n                       * Range [0,...,1[\r\n                       */\n      this.VBR_q_frac = 0.; /**\r\n                            * Range [0,...,9]\r\n                            */\n      this.VBR_q = 0;\n      this.VBR_mean_bitrate_kbps = 0;\n      this.VBR_min_bitrate_kbps = 0;\n      this.VBR_max_bitrate_kbps = 0; /**\r\n                                     * strictly enforce VBR_min_bitrate normaly, it will be violated for analog\r\n                                     * silence\r\n                                     */\n      this.VBR_hard_min = 0; /* resampling and filtering */ /**\r\n                                                            * freq in Hz. 0=lame choses. -1=no filter\r\n                                                            */\n      this.lowpassfreq = 0; /**\r\n                            * freq in Hz. 0=lame choses. -1=no filter\r\n                            */\n      this.highpassfreq = 0; /**\r\n                             * freq width of filter, in Hz (default=15%)\r\n                             */\n      this.lowpasswidth = 0; /**\r\n                             * freq width of filter, in Hz (default=15%)\r\n                             */\n      this.highpasswidth = 0; /*\r\n                              * psycho acoustics and other arguments which you should not change unless\r\n                              * you know what you are doing\r\n                              */\n      this.maskingadjust = 0.;\n      this.maskingadjust_short = 0.; /**\r\n                                     * only use ATH\r\n                                     */\n      this.ATHonly = false; /**\r\n                            * only use ATH for short blocks\r\n                            */\n      this.ATHshort = false; /**\r\n                             * disable ATH\r\n                             */\n      this.noATH = false; /**\r\n                          * select ATH formula\r\n                          */\n      this.ATHtype = 0; /**\r\n                        * change ATH formula 4 shape\r\n                        */\n      this.ATHcurve = 0.; /**\r\n                          * lower ATH by this many db\r\n                          */\n      this.ATHlower = 0.; /**\r\n                          * select ATH auto-adjust scheme\r\n                          */\n      this.athaa_type = 0; /**\r\n                           * select ATH auto-adjust loudness calc\r\n                           */\n      this.athaa_loudapprox = 0; /**\r\n                                 * dB, tune active region of auto-level\r\n                                 */\n      this.athaa_sensitivity = 0.;\n      this.short_blocks = null; /**\r\n                                * use temporal masking effect\r\n                                */\n      this.useTemporal = false;\n      this.interChRatio = 0.; /**\r\n                              * Naoki's adjustment of Mid/Side maskings\r\n                              */\n      this.msfix = 0.; /**\r\n                       * 0 off, 1 on\r\n                       */\n      this.tune = false; /**\r\n                         * used to pass values for debugging and stuff\r\n                         */\n      this.tune_value_a = 0.; /************************************************************************/ /* internal variables, do not set... */ /* provided because they may be of use to calling application */ /************************************************************************/ /**\r\n                                                                                                                                                                                                                                                                                             * 0=MPEG-2/2.5 1=MPEG-1\r\n                                                                                                                                                                                                                                                                                             */\n      this.version = 0;\n      this.encoder_delay = 0; /**\r\n                              * number of samples of padding appended to input\r\n                              */\n      this.encoder_padding = 0;\n      this.framesize = 0; /**\r\n                          * number of frames encoded\r\n                          */\n      this.frameNum = 0; /**\r\n                         * is this struct owned by calling program or lame?\r\n                         */\n      this.lame_allocated_gfp = 0; /**************************************************************************/ /* more internal variables are stored in this structure: */ /**************************************************************************/\n      this.internal_flags = null;\n    }\n    function CBRNewIterationLoop(_quantize) {\n      var quantize = _quantize;\n      this.quantize = quantize;\n      this.iteration_loop = function (gfp, pe, ms_ener_ratio, ratio) {\n        var gfc = gfp.internal_flags;\n        var l3_xmin = new_float(L3Side.SFBMAX);\n        var xrpow = new_float(576);\n        var targ_bits = new_int(2);\n        var mean_bits = 0,\n          max_bits;\n        var l3_side = gfc.l3_side;\n        var mb = new MeanBits(mean_bits);\n        this.quantize.rv.ResvFrameBegin(gfp, mb);\n        mean_bits = mb.bits; /* quantize! */\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n          /*\r\n          * calculate needed bits\r\n          */\n          max_bits = this.quantize.qupvt.on_pe(gfp, pe, targ_bits, mean_bits, gr, gr);\n          if (gfc.mode_ext == Encoder.MPG_MD_MS_LR) {\n            this.quantize.ms_convert(gfc.l3_side, gr);\n            this.quantize.qupvt.reduce_side(targ_bits, ms_ener_ratio[gr], mean_bits, max_bits);\n          }\n          for (var ch = 0; ch < gfc.channels_out; ch++) {\n            var adjust, masking_lower_db;\n            var cod_info = l3_side.tt[gr][ch];\n            if (cod_info.block_type != Encoder.SHORT_TYPE) {\n              // NORM, START or STOP type\n              adjust = 0;\n              masking_lower_db = gfc.PSY.mask_adjust - adjust;\n            } else {\n              adjust = 0;\n              masking_lower_db = gfc.PSY.mask_adjust_short - adjust;\n            }\n            gfc.masking_lower = Math.pow(10.0, masking_lower_db * 0.1); /*\r\n                                                                        * init_outer_loop sets up cod_info, scalefac and xrpow\r\n                                                                        */\n            this.quantize.init_outer_loop(gfc, cod_info);\n            if (this.quantize.init_xrpow(gfc, cod_info, xrpow)) {\n              /*\r\n              * xr contains energy we will have to encode calculate the\r\n              * masking abilities find some good quantization in\r\n              * outer_loop\r\n              */\n              this.quantize.qupvt.calc_xmin(gfp, ratio[gr][ch], cod_info, l3_xmin);\n              this.quantize.outer_loop(gfp, cod_info, l3_xmin, xrpow, ch, targ_bits[ch]);\n            }\n            this.quantize.iteration_finish_one(gfc, gr, ch);\n          } /* for ch */\n        } /* for gr */\n        this.quantize.rv.ResvFrameEnd(gfc, mean_bits);\n      };\n    }\n    function ReplayGain() {\n      this.linprebuf = new_float(GainAnalysis.MAX_ORDER * 2); /**\r\n                                                              * left input samples, with pre-buffer\r\n                                                              */\n      this.linpre = 0;\n      this.lstepbuf = new_float(GainAnalysis.MAX_SAMPLES_PER_WINDOW + GainAnalysis.MAX_ORDER); /**\r\n                                                                                               * left \"first step\" (i.e. post first filter) samples\r\n                                                                                               */\n      this.lstep = 0;\n      this.loutbuf = new_float(GainAnalysis.MAX_SAMPLES_PER_WINDOW + GainAnalysis.MAX_ORDER); /**\r\n                                                                                              * left \"out\" (i.e. post second filter) samples\r\n                                                                                              */\n      this.lout = 0;\n      this.rinprebuf = new_float(GainAnalysis.MAX_ORDER * 2); /**\r\n                                                              * right input samples ...\r\n                                                              */\n      this.rinpre = 0;\n      this.rstepbuf = new_float(GainAnalysis.MAX_SAMPLES_PER_WINDOW + GainAnalysis.MAX_ORDER);\n      this.rstep = 0;\n      this.routbuf = new_float(GainAnalysis.MAX_SAMPLES_PER_WINDOW + GainAnalysis.MAX_ORDER);\n      this.rout = 0; /**\r\n                     * number of samples required to reach number of milliseconds required\r\n                     * for RMS window\r\n                     */\n      this.sampleWindow = 0;\n      this.totsamp = 0;\n      this.lsum = 0.;\n      this.rsum = 0.;\n      this.freqindex = 0;\n      this.first = 0;\n      this.A = new_int(0 | GainAnalysis.STEPS_per_dB * GainAnalysis.MAX_dB);\n      this.B = new_int(0 | GainAnalysis.STEPS_per_dB * GainAnalysis.MAX_dB);\n    } //package mp3;\n    /**\r\n             * Layer III side information.\r\n             *\r\n             * @author Ken\r\n             *\r\n             */\n    function ScaleFac(arrL, arrS, arr21, arr12) {\n      this.l = new_int(1 + Encoder.SBMAX_l);\n      this.s = new_int(1 + Encoder.SBMAX_s);\n      this.psfb21 = new_int(1 + Encoder.PSFB21);\n      this.psfb12 = new_int(1 + Encoder.PSFB12);\n      var l = this.l;\n      var s = this.s;\n      if (arguments.length == 4) {\n        //public ScaleFac(final int[] arrL, final int[] arrS, final int[] arr21,\n        //    final int[] arr12) {\n        this.arrL = arguments[0];\n        this.arrS = arguments[1];\n        this.arr21 = arguments[2];\n        this.arr12 = arguments[3];\n        System.arraycopy(this.arrL, 0, l, 0, Math.min(this.arrL.length, this.l.length));\n        System.arraycopy(this.arrS, 0, s, 0, Math.min(this.arrS.length, this.s.length));\n        System.arraycopy(this.arr21, 0, this.psfb21, 0, Math.min(this.arr21.length, this.psfb21.length));\n        System.arraycopy(this.arr12, 0, this.psfb12, 0, Math.min(this.arr12.length, this.psfb12.length));\n      }\n    } /*\r\n      *      quantize_pvt source file\r\n      *\r\n      *      Copyright (c) 1999-2002 Takehiro Tominaga\r\n      *      Copyright (c) 2000-2002 Robert Hegemann\r\n      *      Copyright (c) 2001 Naoki Shibata\r\n      *      Copyright (c) 2002-2005 Gabriel Bouvigne\r\n      *\r\n      * This library is free software; you can redistribute it and/or\r\n      * modify it under the terms of the GNU Lesser General Public\r\n      * License as published by the Free Software Foundation; either\r\n      * version 2 of the License, or (at your option) any later version.\r\n      *\r\n      * This library is distributed in the hope that it will be useful,\r\n      * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n      * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n      * Library General Public License for more details.\r\n      *\r\n      * You should have received a copy of the GNU Lesser General Public\r\n      * License along with this library; if not, write to the\r\n      * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\r\n      * Boston, MA 02111-1307, USA.\r\n      */ /* $Id: QuantizePVT.java,v 1.24 2011/05/24 20:48:06 kenchis Exp $ */\n    QuantizePVT.Q_MAX = 256 + 1;\n    QuantizePVT.Q_MAX2 = 116;\n    QuantizePVT.LARGE_BITS = 100000;\n    QuantizePVT.IXMAX_VAL = 8206;\n    function QuantizePVT() {\n      var tak = null;\n      var rv = null;\n      var psy = null;\n      this.setModules = function (_tk, _rv, _psy) {\n        tak = _tk;\n        rv = _rv;\n        psy = _psy;\n      };\n      function POW20(x) {\n        return pow20[x + QuantizePVT.Q_MAX2];\n      }\n      this.IPOW20 = function (x) {\n        return ipow20[x];\n      }; /**\r\n         * smallest such that 1.0+DBL_EPSILON != 1.0\r\n         */\n      var DBL_EPSILON = 2.2204460492503131e-016; /**\r\n                                                 * ix always <= 8191+15. see count_bits()\r\n                                                 */\n      var IXMAX_VAL = QuantizePVT.IXMAX_VAL;\n      var PRECALC_SIZE = IXMAX_VAL + 2;\n      var Q_MAX = QuantizePVT.Q_MAX; /**\r\n                                     * <CODE>\r\n                                     * minimum possible number of\r\n                                     * -cod_info.global_gain + ((scalefac[] + (cod_info.preflag ? pretab[sfb] : 0))\r\n                                     * << (cod_info.scalefac_scale + 1)) + cod_info.subblock_gain[cod_info.window[sfb]] * 8;\r\n                                     *\r\n                                     * for long block, 0+((15+3)<<2) = 18*4 = 72\r\n                                     * for short block, 0+(15<<2)+7*8 = 15*4+56 = 116\r\n                                     * </CODE>\r\n                                     */\n      var Q_MAX2 = QuantizePVT.Q_MAX2;\n      var LARGE_BITS = QuantizePVT.LARGE_BITS; /**\r\n                                               * Assuming dynamic range=96dB, this value should be 92\r\n                                               */\n      var NSATHSCALE = 100; /**\r\n                            * The following table is used to implement the scalefactor partitioning for\r\n                            * MPEG2 as described in section 2.4.3.2 of the IS. The indexing corresponds\r\n                            * to the way the tables are presented in the IS:\r\n                            *\r\n                            * [table_number][row_in_table][column of nr_of_sfb]\r\n                            */\n      this.nr_of_sfb_block = [[[6, 5, 5, 5], [9, 9, 9, 9], [6, 9, 9, 9]], [[6, 5, 7, 3], [9, 9, 12, 6], [6, 9, 12, 6]], [[11, 10, 0, 0], [18, 18, 0, 0], [15, 18, 0, 0]], [[7, 7, 7, 0], [12, 12, 12, 0], [6, 15, 12, 0]], [[6, 6, 6, 3], [12, 9, 9, 6], [6, 12, 9, 6]], [[8, 8, 5, 0], [15, 12, 9, 0], [6, 18, 9, 0]]]; /**\r\n                                                                                                                                                                                                                                                                                                                         * Table B.6: layer3 preemphasis\r\n                                                                                                                                                                                                                                                                                                                         */\n      var pretab = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 3, 3, 3, 2, 0];\n      this.pretab = pretab; /**\r\n                            * Here are MPEG1 Table B.8 and MPEG2 Table B.1 -- Layer III scalefactor\r\n                            * bands. <BR>\r\n                            * Index into this using a method such as:<BR>\r\n                            * idx = fr_ps.header.sampling_frequency + (fr_ps.header.version * 3)\r\n                            */\n      this.sfBandIndex = [\n      // Table B.2.b: 22.05 kHz\n      new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464, 522, 576], [0, 4, 8, 12, 18, 24, 32, 42, 56, 74, 100, 132, 174, 192], [0, 0, 0, 0, 0, 0, 0] //  sfb21 pseudo sub bands\n      , [0, 0, 0, 0, 0, 0, 0] //  sfb12 pseudo sub bands\n      ), /* Table B.2.c: 24 kHz */ /* docs: 332. mpg123(broken): 330 */new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 114, 136, 162, 194, 232, 278, 332, 394, 464, 540, 576], [0, 4, 8, 12, 18, 26, 36, 48, 62, 80, 104, 136, 180, 192], [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */, [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */), /* Table B.2.a: 16 kHz */new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464, 522, 576], [0, 4, 8, 12, 18, 26, 36, 48, 62, 80, 104, 134, 174, 192], [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */, [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */), /* Table B.8.b: 44.1 kHz */new ScaleFac([0, 4, 8, 12, 16, 20, 24, 30, 36, 44, 52, 62, 74, 90, 110, 134, 162, 196, 238, 288, 342, 418, 576], [0, 4, 8, 12, 16, 22, 30, 40, 52, 66, 84, 106, 136, 192], [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */, [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */), /* Table B.8.c: 48 kHz */new ScaleFac([0, 4, 8, 12, 16, 20, 24, 30, 36, 42, 50, 60, 72, 88, 106, 128, 156, 190, 230, 276, 330, 384, 576], [0, 4, 8, 12, 16, 22, 28, 38, 50, 64, 80, 100, 126, 192], [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */, [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */), /* Table B.8.a: 32 kHz */new ScaleFac([0, 4, 8, 12, 16, 20, 24, 30, 36, 44, 54, 66, 82, 102, 126, 156, 194, 240, 296, 364, 448, 550, 576], [0, 4, 8, 12, 16, 22, 30, 42, 58, 78, 104, 138, 180, 192], [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */, [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */), /* MPEG-2.5 11.025 kHz */new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464, 522, 576], [0 / 3, 12 / 3, 24 / 3, 36 / 3, 54 / 3, 78 / 3, 108 / 3, 144 / 3, 186 / 3, 240 / 3, 312 / 3, 402 / 3, 522 / 3, 576 / 3], [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */, [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */), /* MPEG-2.5 12 kHz */new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464, 522, 576], [0 / 3, 12 / 3, 24 / 3, 36 / 3, 54 / 3, 78 / 3, 108 / 3, 144 / 3, 186 / 3, 240 / 3, 312 / 3, 402 / 3, 522 / 3, 576 / 3], [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */, [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */), /* MPEG-2.5 8 kHz */new ScaleFac([0, 12, 24, 36, 48, 60, 72, 88, 108, 132, 160, 192, 232, 280, 336, 400, 476, 566, 568, 570, 572, 574, 576], [0 / 3, 24 / 3, 48 / 3, 72 / 3, 108 / 3, 156 / 3, 216 / 3, 288 / 3, 372 / 3, 480 / 3, 486 / 3, 492 / 3, 498 / 3, 576 / 3], [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */, [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */)];\n      var pow20 = new_float(Q_MAX + Q_MAX2 + 1);\n      var ipow20 = new_float(Q_MAX);\n      var pow43 = new_float(PRECALC_SIZE);\n      var adj43 = new_float(PRECALC_SIZE);\n      this.adj43 = adj43; /**\r\n                          * <PRE>\r\n                          * compute the ATH for each scalefactor band cd range: 0..96db\r\n                          *\r\n                          * Input: 3.3kHz signal 32767 amplitude (3.3kHz is where ATH is smallest =\r\n                          * -5db) longblocks: sfb=12 en0/bw=-11db max_en0 = 1.3db shortblocks: sfb=5\r\n                          * -9db 0db\r\n                          *\r\n                          * Input: 1 1 1 1 1 1 1 -1 -1 -1 -1 -1 -1 -1 (repeated) longblocks: amp=1\r\n                          * sfb=12 en0/bw=-103 db max_en0 = -92db amp=32767 sfb=12 -12 db -1.4db\r\n                          *\r\n                          * Input: 1 1 1 1 1 1 1 -1 -1 -1 -1 -1 -1 -1 (repeated) shortblocks: amp=1\r\n                          * sfb=5 en0/bw= -99 -86 amp=32767 sfb=5 -9 db 4db\r\n                          *\r\n                          *\r\n                          * MAX energy of largest wave at 3.3kHz = 1db AVE energy of largest wave at\r\n                          * 3.3kHz = -11db Let's take AVE: -11db = maximum signal in sfb=12. Dynamic\r\n                          * range of CD: 96db. Therefor energy of smallest audible wave in sfb=12 =\r\n                          * -11 - 96 = -107db = ATH at 3.3kHz.\r\n                          *\r\n                          * ATH formula for this wave: -5db. To adjust to LAME scaling, we need ATH =\r\n                          * ATH_formula - 103 (db) ATH = ATH * 2.5e-10 (ener)\r\n                          * </PRE>\r\n                          */\n      function ATHmdct(gfp, f) {\n        var ath = psy.ATHformula(f, gfp);\n        ath -= NSATHSCALE; /* modify the MDCT scaling for the ATH and convert to energy */\n        ath = Math.pow(10.0, ath / 10.0 + gfp.ATHlower);\n        return ath;\n      }\n      function compute_ath(gfp) {\n        var ATH_l = gfp.internal_flags.ATH.l;\n        var ATH_psfb21 = gfp.internal_flags.ATH.psfb21;\n        var ATH_s = gfp.internal_flags.ATH.s;\n        var ATH_psfb12 = gfp.internal_flags.ATH.psfb12;\n        var gfc = gfp.internal_flags;\n        var samp_freq = gfp.out_samplerate;\n        for (var sfb = 0; sfb < Encoder.SBMAX_l; sfb++) {\n          var start = gfc.scalefac_band.l[sfb];\n          var end = gfc.scalefac_band.l[sfb + 1];\n          ATH_l[sfb] = Float.MAX_VALUE;\n          for (var i = start; i < end; i++) {\n            var freq = i * samp_freq / (2 * 576);\n            var ATH_f = ATHmdct(gfp, freq); /* freq in kHz */\n            ATH_l[sfb] = Math.min(ATH_l[sfb], ATH_f);\n          }\n        }\n        for (var sfb = 0; sfb < Encoder.PSFB21; sfb++) {\n          var start = gfc.scalefac_band.psfb21[sfb];\n          var end = gfc.scalefac_band.psfb21[sfb + 1];\n          ATH_psfb21[sfb] = Float.MAX_VALUE;\n          for (var i = start; i < end; i++) {\n            var freq = i * samp_freq / (2 * 576);\n            var ATH_f = ATHmdct(gfp, freq); /* freq in kHz */\n            ATH_psfb21[sfb] = Math.min(ATH_psfb21[sfb], ATH_f);\n          }\n        }\n        for (var sfb = 0; sfb < Encoder.SBMAX_s; sfb++) {\n          var start = gfc.scalefac_band.s[sfb];\n          var end = gfc.scalefac_band.s[sfb + 1];\n          ATH_s[sfb] = Float.MAX_VALUE;\n          for (var i = start; i < end; i++) {\n            var freq = i * samp_freq / (2 * 192);\n            var ATH_f = ATHmdct(gfp, freq); /* freq in kHz */\n            ATH_s[sfb] = Math.min(ATH_s[sfb], ATH_f);\n          }\n          ATH_s[sfb] *= gfc.scalefac_band.s[sfb + 1] - gfc.scalefac_band.s[sfb];\n        }\n        for (var sfb = 0; sfb < Encoder.PSFB12; sfb++) {\n          var start = gfc.scalefac_band.psfb12[sfb];\n          var end = gfc.scalefac_band.psfb12[sfb + 1];\n          ATH_psfb12[sfb] = Float.MAX_VALUE;\n          for (var i = start; i < end; i++) {\n            var freq = i * samp_freq / (2 * 192);\n            var ATH_f = ATHmdct(gfp, freq); /* freq in kHz */\n            ATH_psfb12[sfb] = Math.min(ATH_psfb12[sfb], ATH_f);\n          } /* not sure about the following */\n          ATH_psfb12[sfb] *= gfc.scalefac_band.s[13] - gfc.scalefac_band.s[12];\n        } /*\r\n          * no-ATH mode: reduce ATH to -200 dB\r\n          */\n        if (gfp.noATH) {\n          for (var sfb = 0; sfb < Encoder.SBMAX_l; sfb++) {\n            ATH_l[sfb] = 1E-20;\n          }\n          for (var sfb = 0; sfb < Encoder.PSFB21; sfb++) {\n            ATH_psfb21[sfb] = 1E-20;\n          }\n          for (var sfb = 0; sfb < Encoder.SBMAX_s; sfb++) {\n            ATH_s[sfb] = 1E-20;\n          }\n          for (var sfb = 0; sfb < Encoder.PSFB12; sfb++) {\n            ATH_psfb12[sfb] = 1E-20;\n          }\n        } /*\r\n          * work in progress, don't rely on it too much\r\n          */\n        gfc.ATH.floor = 10. * Math.log10(ATHmdct(gfp, -1.));\n      } /**\r\n        * initialization for iteration_loop\r\n        */\n      this.iteration_init = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var l3_side = gfc.l3_side;\n        var i;\n        if (gfc.iteration_init_init == 0) {\n          gfc.iteration_init_init = 1;\n          l3_side.main_data_begin = 0;\n          compute_ath(gfp);\n          pow43[0] = 0.0;\n          for (i = 1; i < PRECALC_SIZE; i++) {\n            pow43[i] = Math.pow(i, 4.0 / 3.0);\n          }\n          for (i = 0; i < PRECALC_SIZE - 1; i++) {\n            adj43[i] = i + 1 - Math.pow(0.5 * (pow43[i] + pow43[i + 1]), 0.75);\n          }\n          adj43[i] = 0.5;\n          for (i = 0; i < Q_MAX; i++) {\n            ipow20[i] = Math.pow(2.0, (i - 210) * -0.1875);\n          }\n          for (i = 0; i <= Q_MAX + Q_MAX2; i++) {\n            pow20[i] = Math.pow(2.0, (i - 210 - Q_MAX2) * 0.25);\n          }\n          tak.huffman_init(gfc);\n          {\n            var bass, alto, treble, sfb21;\n            i = gfp.exp_nspsytune >> 2 & 63;\n            if (i >= 32) i -= 64;\n            bass = Math.pow(10, i / 4.0 / 10.0);\n            i = gfp.exp_nspsytune >> 8 & 63;\n            if (i >= 32) i -= 64;\n            alto = Math.pow(10, i / 4.0 / 10.0);\n            i = gfp.exp_nspsytune >> 14 & 63;\n            if (i >= 32) i -= 64;\n            treble = Math.pow(10, i / 4.0 / 10.0); /*\r\n                                                   * to be compatible with Naoki's original code, the next 6 bits\r\n                                                   * define only the amount of changing treble for sfb21\r\n                                                   */\n            i = gfp.exp_nspsytune >> 20 & 63;\n            if (i >= 32) i -= 64;\n            sfb21 = treble * Math.pow(10, i / 4.0 / 10.0);\n            for (i = 0; i < Encoder.SBMAX_l; i++) {\n              var f;\n              if (i <= 6) f = bass;else if (i <= 13) f = alto;else if (i <= 20) f = treble;else f = sfb21;\n              gfc.nsPsy.longfact[i] = f;\n            }\n            for (i = 0; i < Encoder.SBMAX_s; i++) {\n              var f;\n              if (i <= 5) f = bass;else if (i <= 10) f = alto;else if (i <= 11) f = treble;else f = sfb21;\n              gfc.nsPsy.shortfact[i] = f;\n            }\n          }\n        }\n      }; /**\r\n         * allocate bits among 2 channels based on PE<BR>\r\n         * mt 6/99<BR>\r\n         * bugfixes rh 8/01: often allocated more than the allowed 4095 bits\r\n         */\n      this.on_pe = function (gfp, pe, targ_bits, mean_bits, gr, cbr) {\n        var gfc = gfp.internal_flags;\n        var tbits = 0,\n          bits;\n        var add_bits = new_int(2);\n        var ch; /* allocate targ_bits for granule */\n        var mb = new MeanBits(tbits);\n        var extra_bits = rv.ResvMaxBits(gfp, mean_bits, mb, cbr);\n        tbits = mb.bits; /* maximum allowed bits for this granule */\n        var max_bits = tbits + extra_bits;\n        if (max_bits > LameInternalFlags.MAX_BITS_PER_GRANULE) {\n          // hard limit per granule\n          max_bits = LameInternalFlags.MAX_BITS_PER_GRANULE;\n        }\n        for (bits = 0, ch = 0; ch < gfc.channels_out; ++ch) {\n          /******************************************************************\r\n          * allocate bits for each channel\r\n          ******************************************************************/\n          targ_bits[ch] = Math.min(LameInternalFlags.MAX_BITS_PER_CHANNEL, tbits / gfc.channels_out);\n          add_bits[ch] = 0 | targ_bits[ch] * pe[gr][ch] / 700.0 - targ_bits[ch]; /* at most increase bits by 1.5*average */\n          if (add_bits[ch] > mean_bits * 3 / 4) add_bits[ch] = mean_bits * 3 / 4;\n          if (add_bits[ch] < 0) add_bits[ch] = 0;\n          if (add_bits[ch] + targ_bits[ch] > LameInternalFlags.MAX_BITS_PER_CHANNEL) add_bits[ch] = Math.max(0, LameInternalFlags.MAX_BITS_PER_CHANNEL - targ_bits[ch]);\n          bits += add_bits[ch];\n        }\n        if (bits > extra_bits) {\n          for (ch = 0; ch < gfc.channels_out; ++ch) {\n            add_bits[ch] = extra_bits * add_bits[ch] / bits;\n          }\n        }\n        for (ch = 0; ch < gfc.channels_out; ++ch) {\n          targ_bits[ch] += add_bits[ch];\n          extra_bits -= add_bits[ch];\n        }\n        for (bits = 0, ch = 0; ch < gfc.channels_out; ++ch) {\n          bits += targ_bits[ch];\n        }\n        if (bits > LameInternalFlags.MAX_BITS_PER_GRANULE) {\n          var sum = 0;\n          for (ch = 0; ch < gfc.channels_out; ++ch) {\n            targ_bits[ch] *= LameInternalFlags.MAX_BITS_PER_GRANULE;\n            targ_bits[ch] /= bits;\n            sum += targ_bits[ch];\n          }\n        }\n        return max_bits;\n      };\n      this.reduce_side = function (targ_bits, ms_ener_ratio, mean_bits, max_bits) {\n        /*\r\n        * ms_ener_ratio = 0: allocate 66/33 mid/side fac=.33 ms_ener_ratio =.5:\r\n        * allocate 50/50 mid/side fac= 0\r\n        */ /* 75/25 split is fac=.5 */\n        var fac = .33 * (.5 - ms_ener_ratio) / .5;\n        if (fac < 0) fac = 0;\n        if (fac > .5) fac = .5; /* number of bits to move from side channel to mid channel */ /* move_bits = fac*targ_bits[1]; */\n        var move_bits = 0 | fac * .5 * (targ_bits[0] + targ_bits[1]);\n        if (move_bits > LameInternalFlags.MAX_BITS_PER_CHANNEL - targ_bits[0]) {\n          move_bits = LameInternalFlags.MAX_BITS_PER_CHANNEL - targ_bits[0];\n        }\n        if (move_bits < 0) move_bits = 0;\n        if (targ_bits[1] >= 125) {\n          /* dont reduce side channel below 125 bits */if (targ_bits[1] - move_bits > 125) {\n            /* if mid channel already has 2x more than average, dont bother */ /* mean_bits = bits per granule (for both channels) */if (targ_bits[0] < mean_bits) targ_bits[0] += move_bits;\n            targ_bits[1] -= move_bits;\n          } else {\n            targ_bits[0] += targ_bits[1] - 125;\n            targ_bits[1] = 125;\n          }\n        }\n        move_bits = targ_bits[0] + targ_bits[1];\n        if (move_bits > max_bits) {\n          targ_bits[0] = max_bits * targ_bits[0] / move_bits;\n          targ_bits[1] = max_bits * targ_bits[1] / move_bits;\n        }\n      }; /**\r\n         *  Robert Hegemann 2001-04-27:\r\n         *  this adjusts the ATH, keeping the original noise floor\r\n         *  affects the higher frequencies more than the lower ones\r\n         */\n      this.athAdjust = function (a, x, athFloor) {\n        /*\r\n        * work in progress\r\n        */\n        var o = 90.30873362;\n        var p = 94.82444863;\n        var u = Util.FAST_LOG10_X(x, 10.0);\n        var v = a * a;\n        var w = 0.0;\n        u -= athFloor; /* undo scaling */\n        if (v > 1E-20) w = 1. + Util.FAST_LOG10_X(v, 10.0 / o);\n        if (w < 0) w = 0.;\n        u *= w;\n        u += athFloor + o - p; /* redo scaling */\n        return Math.pow(10., 0.1 * u);\n      }; /**\r\n         * Calculate the allowed distortion for each scalefactor band, as determined\r\n         * by the psychoacoustic model. xmin(sb) = ratio(sb) * en(sb) / bw(sb)\r\n         *\r\n         * returns number of sfb's with energy > ATH\r\n         */\n      this.calc_xmin = function (gfp, ratio, cod_info, pxmin) {\n        var pxminPos = 0;\n        var gfc = gfp.internal_flags;\n        var gsfb,\n          j = 0,\n          ath_over = 0;\n        var ATH = gfc.ATH;\n        var xr = cod_info.xr;\n        var enable_athaa_fix = gfp.VBR == VbrMode.vbr_mtrh ? 1 : 0;\n        var masking_lower = gfc.masking_lower;\n        if (gfp.VBR == VbrMode.vbr_mtrh || gfp.VBR == VbrMode.vbr_mt) {\n          /* was already done in PSY-Model */masking_lower = 1.0;\n        }\n        for (gsfb = 0; gsfb < cod_info.psy_lmax; gsfb++) {\n          var en0, xmin;\n          var rh1, rh2;\n          var width, l;\n          if (gfp.VBR == VbrMode.vbr_rh || gfp.VBR == VbrMode.vbr_mtrh) xmin = athAdjust(ATH.adjust, ATH.l[gsfb], ATH.floor);else xmin = ATH.adjust * ATH.l[gsfb];\n          width = cod_info.width[gsfb];\n          rh1 = xmin / width;\n          rh2 = DBL_EPSILON;\n          l = width >> 1;\n          en0 = 0.0;\n          do {\n            var xa, xb;\n            xa = xr[j] * xr[j];\n            en0 += xa;\n            rh2 += xa < rh1 ? xa : rh1;\n            j++;\n            xb = xr[j] * xr[j];\n            en0 += xb;\n            rh2 += xb < rh1 ? xb : rh1;\n            j++;\n          } while (--l > 0);\n          if (en0 > xmin) ath_over++;\n          if (gsfb == Encoder.SBPSY_l) {\n            var x = xmin * gfc.nsPsy.longfact[gsfb];\n            if (rh2 < x) {\n              rh2 = x;\n            }\n          }\n          if (enable_athaa_fix != 0) {\n            xmin = rh2;\n          }\n          if (!gfp.ATHonly) {\n            var e = ratio.en.l[gsfb];\n            if (e > 0.0) {\n              var x;\n              x = en0 * ratio.thm.l[gsfb] * masking_lower / e;\n              if (enable_athaa_fix != 0) x *= gfc.nsPsy.longfact[gsfb];\n              if (xmin < x) xmin = x;\n            }\n          }\n          if (enable_athaa_fix != 0) pxmin[pxminPos++] = xmin;else pxmin[pxminPos++] = xmin * gfc.nsPsy.longfact[gsfb];\n        } /* end of long block loop */ /* use this function to determine the highest non-zero coeff */\n        var max_nonzero = 575;\n        if (cod_info.block_type != Encoder.SHORT_TYPE) {\n          // NORM, START or STOP type, but not SHORT\n          var k = 576;\n          while (k-- != 0 && BitStream.EQ(xr[k], 0)) {\n            max_nonzero = k;\n          }\n        }\n        cod_info.max_nonzero_coeff = max_nonzero;\n        for (var sfb = cod_info.sfb_smin; gsfb < cod_info.psymax; sfb++, gsfb += 3) {\n          var width, b;\n          var tmpATH;\n          if (gfp.VBR == VbrMode.vbr_rh || gfp.VBR == VbrMode.vbr_mtrh) tmpATH = athAdjust(ATH.adjust, ATH.s[sfb], ATH.floor);else tmpATH = ATH.adjust * ATH.s[sfb];\n          width = cod_info.width[gsfb];\n          for (b = 0; b < 3; b++) {\n            var en0 = 0.0,\n              xmin;\n            var rh1, rh2;\n            var l = width >> 1;\n            rh1 = tmpATH / width;\n            rh2 = DBL_EPSILON;\n            do {\n              var xa, xb;\n              xa = xr[j] * xr[j];\n              en0 += xa;\n              rh2 += xa < rh1 ? xa : rh1;\n              j++;\n              xb = xr[j] * xr[j];\n              en0 += xb;\n              rh2 += xb < rh1 ? xb : rh1;\n              j++;\n            } while (--l > 0);\n            if (en0 > tmpATH) ath_over++;\n            if (sfb == Encoder.SBPSY_s) {\n              var x = tmpATH * gfc.nsPsy.shortfact[sfb];\n              if (rh2 < x) {\n                rh2 = x;\n              }\n            }\n            if (enable_athaa_fix != 0) xmin = rh2;else xmin = tmpATH;\n            if (!gfp.ATHonly && !gfp.ATHshort) {\n              var e = ratio.en.s[sfb][b];\n              if (e > 0.0) {\n                var x;\n                x = en0 * ratio.thm.s[sfb][b] * masking_lower / e;\n                if (enable_athaa_fix != 0) x *= gfc.nsPsy.shortfact[sfb];\n                if (xmin < x) xmin = x;\n              }\n            }\n            if (enable_athaa_fix != 0) pxmin[pxminPos++] = xmin;else pxmin[pxminPos++] = xmin * gfc.nsPsy.shortfact[sfb];\n          } /* b */\n          if (gfp.useTemporal) {\n            if (pxmin[pxminPos - 3] > pxmin[pxminPos - 3 + 1]) pxmin[pxminPos - 3 + 1] += (pxmin[pxminPos - 3] - pxmin[pxminPos - 3 + 1]) * gfc.decay;\n            if (pxmin[pxminPos - 3 + 1] > pxmin[pxminPos - 3 + 2]) pxmin[pxminPos - 3 + 2] += (pxmin[pxminPos - 3 + 1] - pxmin[pxminPos - 3 + 2]) * gfc.decay;\n          }\n        } /* end of short block sfb loop */\n        return ath_over;\n      };\n      function StartLine(j) {\n        this.s = j;\n      }\n      this.calc_noise_core = function (cod_info, startline, l, step) {\n        var noise = 0;\n        var j = startline.s;\n        var ix = cod_info.l3_enc;\n        if (j > cod_info.count1) {\n          while (l-- != 0) {\n            var temp;\n            temp = cod_info.xr[j];\n            j++;\n            noise += temp * temp;\n            temp = cod_info.xr[j];\n            j++;\n            noise += temp * temp;\n          }\n        } else if (j > cod_info.big_values) {\n          var ix01 = new_float(2);\n          ix01[0] = 0;\n          ix01[1] = step;\n          while (l-- != 0) {\n            var temp;\n            temp = Math.abs(cod_info.xr[j]) - ix01[ix[j]];\n            j++;\n            noise += temp * temp;\n            temp = Math.abs(cod_info.xr[j]) - ix01[ix[j]];\n            j++;\n            noise += temp * temp;\n          }\n        } else {\n          while (l-- != 0) {\n            var temp;\n            temp = Math.abs(cod_info.xr[j]) - pow43[ix[j]] * step;\n            j++;\n            noise += temp * temp;\n            temp = Math.abs(cod_info.xr[j]) - pow43[ix[j]] * step;\n            j++;\n            noise += temp * temp;\n          }\n        }\n        startline.s = j;\n        return noise;\n      }; /**\r\n         * <PRE>\r\n         * -oo dB  =>  -1.00\r\n         * - 6 dB  =>  -0.97\r\n         * - 3 dB  =>  -0.80\r\n         * - 2 dB  =>  -0.64\r\n         * - 1 dB  =>  -0.38\r\n         *   0 dB  =>   0.00\r\n         * + 1 dB  =>  +0.49\r\n         * + 2 dB  =>  +1.06\r\n         * + 3 dB  =>  +1.68\r\n         * + 6 dB  =>  +3.69\r\n         * +10 dB  =>  +6.45\r\n         * </PRE>\r\n         */\n      this.calc_noise = function (cod_info, l3_xmin, distort, res, prev_noise) {\n        var distortPos = 0;\n        var l3_xminPos = 0;\n        var sfb,\n          l,\n          over = 0;\n        var over_noise_db = 0; /* 0 dB relative to masking */\n        var tot_noise_db = 0; /* -200 dB relative to masking */\n        var max_noise = -20.0;\n        var j = 0;\n        var scalefac = cod_info.scalefac;\n        var scalefacPos = 0;\n        res.over_SSD = 0;\n        for (sfb = 0; sfb < cod_info.psymax; sfb++) {\n          var s = cod_info.global_gain - (scalefac[scalefacPos++] + (cod_info.preflag != 0 ? pretab[sfb] : 0) << cod_info.scalefac_scale + 1) - cod_info.subblock_gain[cod_info.window[sfb]] * 8;\n          var noise = 0.0;\n          if (prev_noise != null && prev_noise.step[sfb] == s) {\n            /* use previously computed values */noise = prev_noise.noise[sfb];\n            j += cod_info.width[sfb];\n            distort[distortPos++] = noise / l3_xmin[l3_xminPos++];\n            noise = prev_noise.noise_log[sfb];\n          } else {\n            var step = POW20(s);\n            l = cod_info.width[sfb] >> 1;\n            if (j + cod_info.width[sfb] > cod_info.max_nonzero_coeff) {\n              var usefullsize;\n              usefullsize = cod_info.max_nonzero_coeff - j + 1;\n              if (usefullsize > 0) l = usefullsize >> 1;else l = 0;\n            }\n            var sl = new StartLine(j);\n            noise = this.calc_noise_core(cod_info, sl, l, step);\n            j = sl.s;\n            if (prev_noise != null) {\n              /* save noise values */prev_noise.step[sfb] = s;\n              prev_noise.noise[sfb] = noise;\n            }\n            noise = distort[distortPos++] = noise / l3_xmin[l3_xminPos++]; /* multiplying here is adding in dB, but can overflow */\n            noise = Util.FAST_LOG10(Math.max(noise, 1E-20));\n            if (prev_noise != null) {\n              /* save noise values */prev_noise.noise_log[sfb] = noise;\n            }\n          }\n          if (prev_noise != null) {\n            /* save noise values */prev_noise.global_gain = cod_info.global_gain;\n          }\n          tot_noise_db += noise;\n          if (noise > 0.0) {\n            var tmp;\n            tmp = Math.max(0 | noise * 10 + .5, 1);\n            res.over_SSD += tmp * tmp;\n            over++; /* multiplying here is adding in dB -but can overflow */ /* over_noise *= noise; */\n            over_noise_db += noise;\n          }\n          max_noise = Math.max(max_noise, noise);\n        }\n        res.over_count = over;\n        res.tot_noise = tot_noise_db;\n        res.over_noise = over_noise_db;\n        res.max_noise = max_noise;\n        return over;\n      }; /**\r\n         * updates plotting data\r\n         *\r\n         * Mark Taylor 2000-??-??\r\n         *\r\n         * Robert Hegemann: moved noise/distortion calc into it\r\n         */\n      this.set_pinfo = function (gfp, cod_info, ratio, gr, ch) {\n        var gfc = gfp.internal_flags;\n        var sfb, sfb2;\n        var l;\n        var en0, en1;\n        var ifqstep = cod_info.scalefac_scale == 0 ? .5 : 1.0;\n        var scalefac = cod_info.scalefac;\n        var l3_xmin = new_float(L3Side.SFBMAX);\n        var xfsf = new_float(L3Side.SFBMAX);\n        var noise = new CalcNoiseResult();\n        calc_xmin(gfp, ratio, cod_info, l3_xmin);\n        calc_noise(cod_info, l3_xmin, xfsf, noise, null);\n        var j = 0;\n        sfb2 = cod_info.sfb_lmax;\n        if (cod_info.block_type != Encoder.SHORT_TYPE && 0 == cod_info.mixed_block_flag) sfb2 = 22;\n        for (sfb = 0; sfb < sfb2; sfb++) {\n          var start = gfc.scalefac_band.l[sfb];\n          var end = gfc.scalefac_band.l[sfb + 1];\n          var bw = end - start;\n          for (en0 = 0.0; j < end; j++) {\n            en0 += cod_info.xr[j] * cod_info.xr[j];\n          }\n          en0 /= bw; /* convert to MDCT units */ /* scaling so it shows up on FFT plot */\n          en1 = 1e15;\n          gfc.pinfo.en[gr][ch][sfb] = en1 * en0;\n          gfc.pinfo.xfsf[gr][ch][sfb] = en1 * l3_xmin[sfb] * xfsf[sfb] / bw;\n          if (ratio.en.l[sfb] > 0 && !gfp.ATHonly) en0 = en0 / ratio.en.l[sfb];else en0 = 0.0;\n          gfc.pinfo.thr[gr][ch][sfb] = en1 * Math.max(en0 * ratio.thm.l[sfb], gfc.ATH.l[sfb]); /* there is no scalefactor bands >= SBPSY_l */\n          gfc.pinfo.LAMEsfb[gr][ch][sfb] = 0;\n          if (cod_info.preflag != 0 && sfb >= 11) gfc.pinfo.LAMEsfb[gr][ch][sfb] = -ifqstep * pretab[sfb];\n          if (sfb < Encoder.SBPSY_l) {\n            /* scfsi should be decoded by caller side */gfc.pinfo.LAMEsfb[gr][ch][sfb] -= ifqstep * scalefac[sfb];\n          }\n        } /* for sfb */\n        if (cod_info.block_type == Encoder.SHORT_TYPE) {\n          sfb2 = sfb;\n          for (sfb = cod_info.sfb_smin; sfb < Encoder.SBMAX_s; sfb++) {\n            var start = gfc.scalefac_band.s[sfb];\n            var end = gfc.scalefac_band.s[sfb + 1];\n            var bw = end - start;\n            for (var i = 0; i < 3; i++) {\n              for (en0 = 0.0, l = start; l < end; l++) {\n                en0 += cod_info.xr[j] * cod_info.xr[j];\n                j++;\n              }\n              en0 = Math.max(en0 / bw, 1e-20); /* convert to MDCT units */ /* scaling so it shows up on FFT plot */\n              en1 = 1e15;\n              gfc.pinfo.en_s[gr][ch][3 * sfb + i] = en1 * en0;\n              gfc.pinfo.xfsf_s[gr][ch][3 * sfb + i] = en1 * l3_xmin[sfb2] * xfsf[sfb2] / bw;\n              if (ratio.en.s[sfb][i] > 0) en0 = en0 / ratio.en.s[sfb][i];else en0 = 0.0;\n              if (gfp.ATHonly || gfp.ATHshort) en0 = 0;\n              gfc.pinfo.thr_s[gr][ch][3 * sfb + i] = en1 * Math.max(en0 * ratio.thm.s[sfb][i], gfc.ATH.s[sfb]); /* there is no scalefactor bands >= SBPSY_s */\n              gfc.pinfo.LAMEsfb_s[gr][ch][3 * sfb + i] = -2.0 * cod_info.subblock_gain[i];\n              if (sfb < Encoder.SBPSY_s) {\n                gfc.pinfo.LAMEsfb_s[gr][ch][3 * sfb + i] -= ifqstep * scalefac[sfb2];\n              }\n              sfb2++;\n            }\n          }\n        } /* block type short */\n        gfc.pinfo.LAMEqss[gr][ch] = cod_info.global_gain;\n        gfc.pinfo.LAMEmainbits[gr][ch] = cod_info.part2_3_length + cod_info.part2_length;\n        gfc.pinfo.LAMEsfbits[gr][ch] = cod_info.part2_length;\n        gfc.pinfo.over[gr][ch] = noise.over_count;\n        gfc.pinfo.max_noise[gr][ch] = noise.max_noise * 10.0;\n        gfc.pinfo.over_noise[gr][ch] = noise.over_noise * 10.0;\n        gfc.pinfo.tot_noise[gr][ch] = noise.tot_noise * 10.0;\n        gfc.pinfo.over_SSD[gr][ch] = noise.over_SSD;\n      }; /**\r\n         * updates plotting data for a whole frame\r\n         *\r\n         * Robert Hegemann 2000-10-21\r\n         */\n      function set_frame_pinfo(gfp, ratio) {\n        var gfc = gfp.internal_flags;\n        gfc.masking_lower = 1.0; /*\r\n                                 * for every granule and channel patch l3_enc and set info\r\n                                 */\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n          for (var ch = 0; ch < gfc.channels_out; ch++) {\n            var cod_info = gfc.l3_side.tt[gr][ch];\n            var scalefac_sav = new_int(L3Side.SFBMAX);\n            System.arraycopy(cod_info.scalefac, 0, scalefac_sav, 0, scalefac_sav.length); /*\r\n                                                                                          * reconstruct the scalefactors in case SCFSI was used\r\n                                                                                          */\n            if (gr == 1) {\n              var sfb;\n              for (sfb = 0; sfb < cod_info.sfb_lmax; sfb++) {\n                if (cod_info.scalefac[sfb] < 0) /* scfsi */cod_info.scalefac[sfb] = gfc.l3_side.tt[0][ch].scalefac[sfb];\n              }\n            }\n            set_pinfo(gfp, cod_info, ratio[gr][ch], gr, ch);\n            System.arraycopy(scalefac_sav, 0, cod_info.scalefac, 0, scalefac_sav.length);\n          } /* for ch */\n        } /* for gr */\n      }\n    }\n    function CalcNoiseData() {\n      this.global_gain = 0;\n      this.sfb_count1 = 0;\n      this.step = new_int(39);\n      this.noise = new_float(39);\n      this.noise_log = new_float(39);\n    } //package mp3;\n    function GrInfo() {\n      //float xr[] = new float[576];\n      this.xr = new_float(576); //int l3_enc[] = new int[576];\n      this.l3_enc = new_int(576); //int scalefac[] = new int[L3Side.SFBMAX];\n      this.scalefac = new_int(L3Side.SFBMAX);\n      this.xrpow_max = 0.;\n      this.part2_3_length = 0;\n      this.big_values = 0;\n      this.count1 = 0;\n      this.global_gain = 0;\n      this.scalefac_compress = 0;\n      this.block_type = 0;\n      this.mixed_block_flag = 0;\n      this.table_select = new_int(3);\n      this.subblock_gain = new_int(3 + 1);\n      this.region0_count = 0;\n      this.region1_count = 0;\n      this.preflag = 0;\n      this.scalefac_scale = 0;\n      this.count1table_select = 0;\n      this.part2_length = 0;\n      this.sfb_lmax = 0;\n      this.sfb_smin = 0;\n      this.psy_lmax = 0;\n      this.sfbmax = 0;\n      this.psymax = 0;\n      this.sfbdivide = 0;\n      this.width = new_int(L3Side.SFBMAX);\n      this.window = new_int(L3Side.SFBMAX);\n      this.count1bits = 0; /**\r\n                           * added for LSF\r\n                           */\n      this.sfb_partition_table = null;\n      this.slen = new_int(4);\n      this.max_nonzero_coeff = 0;\n      var self = this;\n      function clone_int(array) {\n        return new Int32Array(array);\n      }\n      function clone_float(array) {\n        return new Float32Array(array);\n      }\n      this.assign = function (other) {\n        self.xr = clone_float(other.xr); //.slice(0); //clone();\n        self.l3_enc = clone_int(other.l3_enc); //.slice(0); //clone();\n        self.scalefac = clone_int(other.scalefac); //.slice(0); //clone();\n        self.xrpow_max = other.xrpow_max;\n        self.part2_3_length = other.part2_3_length;\n        self.big_values = other.big_values;\n        self.count1 = other.count1;\n        self.global_gain = other.global_gain;\n        self.scalefac_compress = other.scalefac_compress;\n        self.block_type = other.block_type;\n        self.mixed_block_flag = other.mixed_block_flag;\n        self.table_select = clone_int(other.table_select); //.slice(0); //clone();\n        self.subblock_gain = clone_int(other.subblock_gain); //.slice(0); //.clone();\n        self.region0_count = other.region0_count;\n        self.region1_count = other.region1_count;\n        self.preflag = other.preflag;\n        self.scalefac_scale = other.scalefac_scale;\n        self.count1table_select = other.count1table_select;\n        self.part2_length = other.part2_length;\n        self.sfb_lmax = other.sfb_lmax;\n        self.sfb_smin = other.sfb_smin;\n        self.psy_lmax = other.psy_lmax;\n        self.sfbmax = other.sfbmax;\n        self.psymax = other.psymax;\n        self.sfbdivide = other.sfbdivide;\n        self.width = clone_int(other.width); //.slice(0); //.clone();\n        self.window = clone_int(other.window); //.slice(0); //.clone();\n        self.count1bits = other.count1bits;\n        self.sfb_partition_table = other.sfb_partition_table.slice(0); //.clone();\n        self.slen = clone_int(other.slen); //.slice(0); //.clone();\n        self.max_nonzero_coeff = other.max_nonzero_coeff;\n      };\n    }\n    var L3Side = {}; /**\r\n                     * max scalefactor band, max(SBMAX_l, SBMAX_s*3, (SBMAX_s-3)*3+8)\r\n                     */\n    L3Side.SFBMAX = Encoder.SBMAX_s * 3; /*\r\n                                         * MP3 quantization\r\n                                         *\r\n                                         *      Copyright (c) 1999-2000 Mark Taylor\r\n                                         *      Copyright (c) 1999-2003 Takehiro Tominaga\r\n                                         *      Copyright (c) 2000-2007 Robert Hegemann\r\n                                         *      Copyright (c) 2001-2005 Gabriel Bouvigne\r\n                                         *\r\n                                         * This library is free software; you can redistribute it and/or\r\n                                         * modify it under the terms of the GNU Lesser General Public\r\n                                         * License as published by the Free Software Foundation; either\r\n                                         * version 2 of the License, or (at your option) any later version.\r\n                                         *\r\n                                         * This library is distributed in the hope that it will be useful,\r\n                                         * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n                                         * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.     See the GNU\r\n                                         * Library General Public License for more details.\r\n                                         *\r\n                                         * You should have received a copy of the GNU Lesser General Public\r\n                                         * License along with this library; if not, write to the\r\n                                         * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\r\n                                         * Boston, MA 02111-1307, USA.\r\n                                         */ /* $Id: Quantize.java,v 1.24 2011/05/24 20:48:06 kenchis Exp $ */ //package mp3;\n    //import java.util.Arrays;\n    function Quantize() {\n      var bs;\n      this.rv = null;\n      var rv;\n      this.qupvt = null;\n      var qupvt;\n      var vbr = new VBRQuantize();\n      var tk;\n      this.setModules = function (_bs, _rv, _qupvt, _tk) {\n        bs = _bs;\n        rv = _rv;\n        this.rv = _rv;\n        qupvt = _qupvt;\n        this.qupvt = _qupvt;\n        tk = _tk;\n        vbr.setModules(qupvt, tk);\n      }; /**\r\n         * convert from L/R <. Mid/Side\r\n         */\n      this.ms_convert = function (l3_side, gr) {\n        for (var i = 0; i < 576; ++i) {\n          var l = l3_side.tt[gr][0].xr[i];\n          var r = l3_side.tt[gr][1].xr[i];\n          l3_side.tt[gr][0].xr[i] = (l + r) * (Util.SQRT2 * 0.5);\n          l3_side.tt[gr][1].xr[i] = (l - r) * (Util.SQRT2 * 0.5);\n        }\n      }; /**\r\n         * mt 6/99\r\n         *\r\n         * initializes cod_info, scalefac and xrpow\r\n         *\r\n         * returns 0 if all energies in xr are zero, else 1\r\n         */\n      function init_xrpow_core(cod_info, xrpow, upper, sum) {\n        sum = 0;\n        for (var i = 0; i <= upper; ++i) {\n          var tmp = Math.abs(cod_info.xr[i]);\n          sum += tmp;\n          xrpow[i] = Math.sqrt(tmp * Math.sqrt(tmp));\n          if (xrpow[i] > cod_info.xrpow_max) cod_info.xrpow_max = xrpow[i];\n        }\n        return sum;\n      }\n      this.init_xrpow = function (gfc, cod_info, xrpow) {\n        var sum = 0;\n        var upper = 0 | cod_info.max_nonzero_coeff;\n        cod_info.xrpow_max = 0; /*\r\n                                * check if there is some energy we have to quantize and calculate xrpow\r\n                                * matching our fresh scalefactors\r\n                                */\n        Arrays.fill(xrpow, upper, 576, 0);\n        sum = init_xrpow_core(cod_info, xrpow, upper, sum); /*\r\n                                                            * return 1 if we have something to quantize, else 0\r\n                                                            */\n        if (sum > 1E-20) {\n          var j = 0;\n          if ((gfc.substep_shaping & 2) != 0) j = 1;\n          for (var i = 0; i < cod_info.psymax; i++) {\n            gfc.pseudohalf[i] = j;\n          }\n          return true;\n        }\n        Arrays.fill(cod_info.l3_enc, 0, 576, 0);\n        return false;\n      }; /**\r\n         * Gabriel Bouvigne feb/apr 2003<BR>\r\n         * Analog silence detection in partitionned sfb21 or sfb12 for short blocks\r\n         *\r\n         * From top to bottom of sfb, changes to 0 coeffs which are below ath. It\r\n         * stops on the first coeff higher than ath.\r\n         */\n      function psfb21_analogsilence(gfc, cod_info) {\n        var ath = gfc.ATH;\n        var xr = cod_info.xr;\n        if (cod_info.block_type != Encoder.SHORT_TYPE) {\n          /* NORM, START or STOP type, but not SHORT blocks */var stop = false;\n          for (var gsfb = Encoder.PSFB21 - 1; gsfb >= 0 && !stop; gsfb--) {\n            var start = gfc.scalefac_band.psfb21[gsfb];\n            var end = gfc.scalefac_band.psfb21[gsfb + 1];\n            var ath21 = qupvt.athAdjust(ath.adjust, ath.psfb21[gsfb], ath.floor);\n            if (gfc.nsPsy.longfact[21] > 1e-12) ath21 *= gfc.nsPsy.longfact[21];\n            for (var j = end - 1; j >= start; j--) {\n              if (Math.abs(xr[j]) < ath21) xr[j] = 0;else {\n                stop = true;\n                break;\n              }\n            }\n          }\n        } else {\n          /* note: short blocks coeffs are reordered */for (var block = 0; block < 3; block++) {\n            var stop = false;\n            for (var gsfb = Encoder.PSFB12 - 1; gsfb >= 0 && !stop; gsfb--) {\n              var start = gfc.scalefac_band.s[12] * 3 + (gfc.scalefac_band.s[13] - gfc.scalefac_band.s[12]) * block + (gfc.scalefac_band.psfb12[gsfb] - gfc.scalefac_band.psfb12[0]);\n              var end = start + (gfc.scalefac_band.psfb12[gsfb + 1] - gfc.scalefac_band.psfb12[gsfb]);\n              var ath12 = qupvt.athAdjust(ath.adjust, ath.psfb12[gsfb], ath.floor);\n              if (gfc.nsPsy.shortfact[12] > 1e-12) ath12 *= gfc.nsPsy.shortfact[12];\n              for (var j = end - 1; j >= start; j--) {\n                if (Math.abs(xr[j]) < ath12) xr[j] = 0;else {\n                  stop = true;\n                  break;\n                }\n              }\n            }\n          }\n        }\n      }\n      this.init_outer_loop = function (gfc, cod_info) {\n        /*\r\n        * initialize fresh cod_info\r\n        */\n        cod_info.part2_3_length = 0;\n        cod_info.big_values = 0;\n        cod_info.count1 = 0;\n        cod_info.global_gain = 210;\n        cod_info.scalefac_compress = 0; /* mixed_block_flag, block_type was set in psymodel.c */\n        cod_info.table_select[0] = 0;\n        cod_info.table_select[1] = 0;\n        cod_info.table_select[2] = 0;\n        cod_info.subblock_gain[0] = 0;\n        cod_info.subblock_gain[1] = 0;\n        cod_info.subblock_gain[2] = 0;\n        cod_info.subblock_gain[3] = 0; /* this one is always 0 */\n        cod_info.region0_count = 0;\n        cod_info.region1_count = 0;\n        cod_info.preflag = 0;\n        cod_info.scalefac_scale = 0;\n        cod_info.count1table_select = 0;\n        cod_info.part2_length = 0;\n        cod_info.sfb_lmax = Encoder.SBPSY_l;\n        cod_info.sfb_smin = Encoder.SBPSY_s;\n        cod_info.psy_lmax = gfc.sfb21_extra ? Encoder.SBMAX_l : Encoder.SBPSY_l;\n        cod_info.psymax = cod_info.psy_lmax;\n        cod_info.sfbmax = cod_info.sfb_lmax;\n        cod_info.sfbdivide = 11;\n        for (var sfb = 0; sfb < Encoder.SBMAX_l; sfb++) {\n          cod_info.width[sfb] = gfc.scalefac_band.l[sfb + 1] - gfc.scalefac_band.l[sfb]; /* which is always 0. */\n          cod_info.window[sfb] = 3;\n        }\n        if (cod_info.block_type == Encoder.SHORT_TYPE) {\n          var ixwork = new_float(576);\n          cod_info.sfb_smin = 0;\n          cod_info.sfb_lmax = 0;\n          if (cod_info.mixed_block_flag != 0) {\n            /*\r\n            * MPEG-1: sfbs 0-7 long block, 3-12 short blocks MPEG-2(.5):\r\n            * sfbs 0-5 long block, 3-12 short blocks\r\n            */\n            cod_info.sfb_smin = 3;\n            cod_info.sfb_lmax = gfc.mode_gr * 2 + 4;\n          }\n          cod_info.psymax = cod_info.sfb_lmax + 3 * ((gfc.sfb21_extra ? Encoder.SBMAX_s : Encoder.SBPSY_s) - cod_info.sfb_smin);\n          cod_info.sfbmax = cod_info.sfb_lmax + 3 * (Encoder.SBPSY_s - cod_info.sfb_smin);\n          cod_info.sfbdivide = cod_info.sfbmax - 18;\n          cod_info.psy_lmax = cod_info.sfb_lmax; /* re-order the short blocks, for more efficient encoding below */ /* By Takehiro TOMINAGA */ /*\r\n                                                                                                                                               * Within each scalefactor band, data is given for successive time\r\n                                                                                                                                               * windows, beginning with window 0 and ending with window 2. Within\r\n                                                                                                                                               * each window, the quantized values are then arranged in order of\r\n                                                                                                                                               * increasing frequency...\r\n                                                                                                                                               */\n          var ix = gfc.scalefac_band.l[cod_info.sfb_lmax];\n          System.arraycopy(cod_info.xr, 0, ixwork, 0, 576);\n          for (var sfb = cod_info.sfb_smin; sfb < Encoder.SBMAX_s; sfb++) {\n            var start = gfc.scalefac_band.s[sfb];\n            var end = gfc.scalefac_band.s[sfb + 1];\n            for (var window = 0; window < 3; window++) {\n              for (var l = start; l < end; l++) {\n                cod_info.xr[ix++] = ixwork[3 * l + window];\n              }\n            }\n          }\n          var j = cod_info.sfb_lmax;\n          for (var sfb = cod_info.sfb_smin; sfb < Encoder.SBMAX_s; sfb++) {\n            cod_info.width[j] = cod_info.width[j + 1] = cod_info.width[j + 2] = gfc.scalefac_band.s[sfb + 1] - gfc.scalefac_band.s[sfb];\n            cod_info.window[j] = 0;\n            cod_info.window[j + 1] = 1;\n            cod_info.window[j + 2] = 2;\n            j += 3;\n          }\n        }\n        cod_info.count1bits = 0;\n        cod_info.sfb_partition_table = qupvt.nr_of_sfb_block[0][0];\n        cod_info.slen[0] = 0;\n        cod_info.slen[1] = 0;\n        cod_info.slen[2] = 0;\n        cod_info.slen[3] = 0;\n        cod_info.max_nonzero_coeff = 575; /*\r\n                                          * fresh scalefactors are all zero\r\n                                          */\n        Arrays.fill(cod_info.scalefac, 0);\n        psfb21_analogsilence(gfc, cod_info);\n      };\n      function BinSearchDirection(ordinal) {\n        this.ordinal = ordinal;\n      }\n      BinSearchDirection.BINSEARCH_NONE = new BinSearchDirection(0);\n      BinSearchDirection.BINSEARCH_UP = new BinSearchDirection(1);\n      BinSearchDirection.BINSEARCH_DOWN = new BinSearchDirection(2); /**\r\n                                                                     * author/date??\r\n                                                                     *\r\n                                                                     * binary step size search used by outer_loop to get a quantizer step size\r\n                                                                     * to start with\r\n                                                                     */\n      function bin_search_StepSize(gfc, cod_info, desired_rate, ch, xrpow) {\n        var nBits;\n        var CurrentStep = gfc.CurrentStep[ch];\n        var flagGoneOver = false;\n        var start = gfc.OldValue[ch];\n        var Direction = BinSearchDirection.BINSEARCH_NONE;\n        cod_info.global_gain = start;\n        desired_rate -= cod_info.part2_length;\n        for (;;) {\n          var step;\n          nBits = tk.count_bits(gfc, xrpow, cod_info, null);\n          if (CurrentStep == 1 || nBits == desired_rate) break; /* nothing to adjust anymore */\n          if (nBits > desired_rate) {\n            /* increase Quantize_StepSize */if (Direction == BinSearchDirection.BINSEARCH_DOWN) flagGoneOver = true;\n            if (flagGoneOver) CurrentStep /= 2;\n            Direction = BinSearchDirection.BINSEARCH_UP;\n            step = CurrentStep;\n          } else {\n            /* decrease Quantize_StepSize */if (Direction == BinSearchDirection.BINSEARCH_UP) flagGoneOver = true;\n            if (flagGoneOver) CurrentStep /= 2;\n            Direction = BinSearchDirection.BINSEARCH_DOWN;\n            step = -CurrentStep;\n          }\n          cod_info.global_gain += step;\n          if (cod_info.global_gain < 0) {\n            cod_info.global_gain = 0;\n            flagGoneOver = true;\n          }\n          if (cod_info.global_gain > 255) {\n            cod_info.global_gain = 255;\n            flagGoneOver = true;\n          }\n        }\n        while (nBits > desired_rate && cod_info.global_gain < 255) {\n          cod_info.global_gain++;\n          nBits = tk.count_bits(gfc, xrpow, cod_info, null);\n        }\n        gfc.CurrentStep[ch] = start - cod_info.global_gain >= 4 ? 4 : 2;\n        gfc.OldValue[ch] = cod_info.global_gain;\n        cod_info.part2_3_length = nBits;\n        return nBits;\n      }\n      this.trancate_smallspectrums = function (gfc, gi, l3_xmin, work) {\n        var distort = new_float(L3Side.SFBMAX);\n        if (0 == (gfc.substep_shaping & 4) && gi.block_type == Encoder.SHORT_TYPE || (gfc.substep_shaping & 0x80) != 0) return;\n        qupvt.calc_noise(gi, l3_xmin, distort, new CalcNoiseResult(), null);\n        for (var j = 0; j < 576; j++) {\n          var xr = 0.0;\n          if (gi.l3_enc[j] != 0) xr = Math.abs(gi.xr[j]);\n          work[j] = xr;\n        }\n        var j = 0;\n        var sfb = 8;\n        if (gi.block_type == Encoder.SHORT_TYPE) sfb = 6;\n        do {\n          var allowedNoise, trancateThreshold;\n          var nsame, start;\n          var width = gi.width[sfb];\n          j += width;\n          if (distort[sfb] >= 1.0) continue;\n          Arrays.sort(work, j - width, width);\n          if (BitStream.EQ(work[j - 1], 0.0)) continue; /* all zero sfb */\n          allowedNoise = (1.0 - distort[sfb]) * l3_xmin[sfb];\n          trancateThreshold = 0.0;\n          start = 0;\n          do {\n            var noise;\n            for (nsame = 1; start + nsame < width; nsame++) {\n              if (BitStream.NEQ(work[start + j - width], work[start + j + nsame - width])) break;\n            }\n            noise = work[start + j - width] * work[start + j - width] * nsame;\n            if (allowedNoise < noise) {\n              if (start != 0) trancateThreshold = work[start + j - width - 1];\n              break;\n            }\n            allowedNoise -= noise;\n            start += nsame;\n          } while (start < width);\n          if (BitStream.EQ(trancateThreshold, 0.0)) continue;\n          do {\n            if (Math.abs(gi.xr[j - width]) <= trancateThreshold) gi.l3_enc[j - width] = 0;\n          } while (--width > 0);\n        } while (++sfb < gi.psymax);\n        gi.part2_3_length = tk.noquant_count_bits(gfc, gi, null);\n      }; /**\r\n         * author/date??\r\n         *\r\n         * Function: Returns zero if there is a scalefac which has not been\r\n         * amplified. Otherwise it returns one.\r\n         */\n      function loop_break(cod_info) {\n        for (var sfb = 0; sfb < cod_info.sfbmax; sfb++) {\n          if (cod_info.scalefac[sfb] + cod_info.subblock_gain[cod_info.window[sfb]] == 0) return false;\n        }\n        return true;\n      } /* mt 5/99: Function: Improved calc_noise for a single channel */\n      function penalties(noise) {\n        return Util.FAST_LOG10(0.368 + 0.632 * noise * noise * noise);\n      } /**\r\n        * author/date??\r\n        *\r\n        * several different codes to decide which quantization is better\r\n        */\n      function get_klemm_noise(distort, gi) {\n        var klemm_noise = 1E-37;\n        for (var sfb = 0; sfb < gi.psymax; sfb++) {\n          klemm_noise += penalties(distort[sfb]);\n        }\n        return Math.max(1e-20, klemm_noise);\n      }\n      function quant_compare(quant_comp, best, calc, gi, distort) {\n        /**\r\n        * noise is given in decibels (dB) relative to masking thesholds.<BR>\r\n        *\r\n        * over_noise: ??? (the previous comment is fully wrong)<BR>\r\n        * tot_noise: ??? (the previous comment is fully wrong)<BR>\r\n        * max_noise: max quantization noise\r\n        */\n        var better;\n        switch (quant_comp) {\n          default:\n          case 9:\n            {\n              if (best.over_count > 0) {\n                /* there are distorted sfb */better = calc.over_SSD <= best.over_SSD;\n                if (calc.over_SSD == best.over_SSD) better = calc.bits < best.bits;\n              } else {\n                /* no distorted sfb */better = calc.max_noise < 0 && calc.max_noise * 10 + calc.bits <= best.max_noise * 10 + best.bits;\n              }\n              break;\n            }\n          case 0:\n            better = calc.over_count < best.over_count || calc.over_count == best.over_count && calc.over_noise < best.over_noise || calc.over_count == best.over_count && BitStream.EQ(calc.over_noise, best.over_noise) && calc.tot_noise < best.tot_noise;\n            break;\n          case 8:\n            calc.max_noise = get_klemm_noise(distort, gi);\n          //$FALL-THROUGH$\n          case 1:\n            better = calc.max_noise < best.max_noise;\n            break;\n          case 2:\n            better = calc.tot_noise < best.tot_noise;\n            break;\n          case 3:\n            better = calc.tot_noise < best.tot_noise && calc.max_noise < best.max_noise;\n            break;\n          case 4:\n            better = calc.max_noise <= 0.0 && best.max_noise > 0.2 || calc.max_noise <= 0.0 && best.max_noise < 0.0 && best.max_noise > calc.max_noise - 0.2 && calc.tot_noise < best.tot_noise || calc.max_noise <= 0.0 && best.max_noise > 0.0 && best.max_noise > calc.max_noise - 0.2 && calc.tot_noise < best.tot_noise + best.over_noise || calc.max_noise > 0.0 && best.max_noise > -0.05 && best.max_noise > calc.max_noise - 0.1 && calc.tot_noise + calc.over_noise < best.tot_noise + best.over_noise || calc.max_noise > 0.0 && best.max_noise > -0.1 && best.max_noise > calc.max_noise - 0.15 && calc.tot_noise + calc.over_noise + calc.over_noise < best.tot_noise + best.over_noise + best.over_noise;\n            break;\n          case 5:\n            better = calc.over_noise < best.over_noise || BitStream.EQ(calc.over_noise, best.over_noise) && calc.tot_noise < best.tot_noise;\n            break;\n          case 6:\n            better = calc.over_noise < best.over_noise || BitStream.EQ(calc.over_noise, best.over_noise) && (calc.max_noise < best.max_noise || BitStream.EQ(calc.max_noise, best.max_noise) && calc.tot_noise <= best.tot_noise);\n            break;\n          case 7:\n            better = calc.over_count < best.over_count || calc.over_noise < best.over_noise;\n            break;\n        }\n        if (best.over_count == 0) {\n          /*\r\n          * If no distorted bands, only use this quantization if it is\r\n          * better, and if it uses less bits. Unfortunately, part2_3_length\r\n          * is sometimes a poor estimator of the final size at low bitrates.\r\n          */\n          better = better && calc.bits < best.bits;\n        }\n        return better;\n      } /**\r\n        * author/date??\r\n        *\r\n        * <PRE>\r\n        *  Amplify the scalefactor bands that violate the masking threshold.\r\n        *  See ISO 11172-3 Section C.1.5.4.3.5\r\n        *\r\n        *  distort[] = noise/masking\r\n        *  distort[] > 1   ==> noise is not masked\r\n        *  distort[] < 1   ==> noise is masked\r\n        *  max_dist = maximum value of distort[]\r\n        *\r\n        *  Three algorithms:\r\n        *  noise_shaping_amp\r\n        *        0             Amplify all bands with distort[]>1.\r\n        *\r\n        *        1             Amplify all bands with distort[] >= max_dist^(.5);\r\n        *                     ( 50% in the db scale)\r\n        *\r\n        *        2             Amplify first band with distort[] >= max_dist;\r\n        *\r\n        *\r\n        *  For algorithms 0 and 1, if max_dist < 1, then amplify all bands\r\n        *  with distort[] >= .95*max_dist.  This is to make sure we always\r\n        *  amplify at least one band.\r\n        * </PRE>\r\n        */\n      function amp_scalefac_bands(gfp, cod_info, distort, xrpow, bRefine) {\n        var gfc = gfp.internal_flags;\n        var ifqstep34;\n        if (cod_info.scalefac_scale == 0) {\n          ifqstep34 = 1.29683955465100964055; /* 2**(.75*.5) */\n        } else {\n          ifqstep34 = 1.68179283050742922612; /* 2**(.75*1) */\n        } /* compute maximum value of distort[] */\n        var trigger = 0;\n        for (var sfb = 0; sfb < cod_info.sfbmax; sfb++) {\n          if (trigger < distort[sfb]) trigger = distort[sfb];\n        }\n        var noise_shaping_amp = gfc.noise_shaping_amp;\n        if (noise_shaping_amp == 3) {\n          if (bRefine) noise_shaping_amp = 2;else noise_shaping_amp = 1;\n        }\n        switch (noise_shaping_amp) {\n          case 2:\n            /* amplify exactly 1 band */break;\n          case 1:\n            /* amplify bands within 50% of max (on db scale) */if (trigger > 1.0) trigger = Math.pow(trigger, .5);else trigger *= .95;\n            break;\n          case 0:\n          default:\n            /* ISO algorithm. amplify all bands with distort>1 */if (trigger > 1.0) trigger = 1.0;else trigger *= .95;\n            break;\n        }\n        var j = 0;\n        for (var sfb = 0; sfb < cod_info.sfbmax; sfb++) {\n          var width = cod_info.width[sfb];\n          var l;\n          j += width;\n          if (distort[sfb] < trigger) continue;\n          if ((gfc.substep_shaping & 2) != 0) {\n            gfc.pseudohalf[sfb] = 0 == gfc.pseudohalf[sfb] ? 1 : 0;\n            if (0 == gfc.pseudohalf[sfb] && gfc.noise_shaping_amp == 2) return;\n          }\n          cod_info.scalefac[sfb]++;\n          for (l = -width; l < 0; l++) {\n            xrpow[j + l] *= ifqstep34;\n            if (xrpow[j + l] > cod_info.xrpow_max) cod_info.xrpow_max = xrpow[j + l];\n          }\n          if (gfc.noise_shaping_amp == 2) return;\n        }\n      } /**\r\n        * Takehiro Tominaga 2000-xx-xx\r\n        *\r\n        * turns on scalefac scale and adjusts scalefactors\r\n        */\n      function inc_scalefac_scale(cod_info, xrpow) {\n        var ifqstep34 = 1.29683955465100964055;\n        var j = 0;\n        for (var sfb = 0; sfb < cod_info.sfbmax; sfb++) {\n          var width = cod_info.width[sfb];\n          var s = cod_info.scalefac[sfb];\n          if (cod_info.preflag != 0) s += qupvt.pretab[sfb];\n          j += width;\n          if ((s & 1) != 0) {\n            s++;\n            for (var l = -width; l < 0; l++) {\n              xrpow[j + l] *= ifqstep34;\n              if (xrpow[j + l] > cod_info.xrpow_max) cod_info.xrpow_max = xrpow[j + l];\n            }\n          }\n          cod_info.scalefac[sfb] = s >> 1;\n        }\n        cod_info.preflag = 0;\n        cod_info.scalefac_scale = 1;\n      } /**\r\n        * Takehiro Tominaga 2000-xx-xx\r\n        *\r\n        * increases the subblock gain and adjusts scalefactors\r\n        */\n      function inc_subblock_gain(gfc, cod_info, xrpow) {\n        var sfb;\n        var scalefac = cod_info.scalefac; /* subbloc_gain can't do anything in the long block region */\n        for (sfb = 0; sfb < cod_info.sfb_lmax; sfb++) {\n          if (scalefac[sfb] >= 16) return true;\n        }\n        for (var window = 0; window < 3; window++) {\n          var s1 = 0;\n          var s2 = 0;\n          for (sfb = cod_info.sfb_lmax + window; sfb < cod_info.sfbdivide; sfb += 3) {\n            if (s1 < scalefac[sfb]) s1 = scalefac[sfb];\n          }\n          for (; sfb < cod_info.sfbmax; sfb += 3) {\n            if (s2 < scalefac[sfb]) s2 = scalefac[sfb];\n          }\n          if (s1 < 16 && s2 < 8) continue;\n          if (cod_info.subblock_gain[window] >= 7) return true; /*\r\n                                                                * even though there is no scalefactor for sfb12 subblock gain\r\n                                                                * affects upper frequencies too, that's why we have to go up to\r\n                                                                * SBMAX_s\r\n                                                                */\n          cod_info.subblock_gain[window]++;\n          var j = gfc.scalefac_band.l[cod_info.sfb_lmax];\n          for (sfb = cod_info.sfb_lmax + window; sfb < cod_info.sfbmax; sfb += 3) {\n            var amp;\n            var width = cod_info.width[sfb];\n            var s = scalefac[sfb];\n            s = s - (4 >> cod_info.scalefac_scale);\n            if (s >= 0) {\n              scalefac[sfb] = s;\n              j += width * 3;\n              continue;\n            }\n            scalefac[sfb] = 0;\n            {\n              var gain = 210 + (s << cod_info.scalefac_scale + 1);\n              amp = qupvt.IPOW20(gain);\n            }\n            j += width * (window + 1);\n            for (var l = -width; l < 0; l++) {\n              xrpow[j + l] *= amp;\n              if (xrpow[j + l] > cod_info.xrpow_max) cod_info.xrpow_max = xrpow[j + l];\n            }\n            j += width * (3 - window - 1);\n          }\n          {\n            var amp = qupvt.IPOW20(202);\n            j += cod_info.width[sfb] * (window + 1);\n            for (var l = -cod_info.width[sfb]; l < 0; l++) {\n              xrpow[j + l] *= amp;\n              if (xrpow[j + l] > cod_info.xrpow_max) cod_info.xrpow_max = xrpow[j + l];\n            }\n          }\n        }\n        return false;\n      } /**\r\n        * <PRE>\r\n        *  Takehiro Tominaga /date??\r\n        *  Robert Hegemann 2000-09-06: made a function of it\r\n        *\r\n        *  amplifies scalefactor bands,\r\n        *   - if all are already amplified returns 0\r\n        *   - if some bands are amplified too much:\r\n        *      * try to increase scalefac_scale\r\n        *      * if already scalefac_scale was set\r\n        *          try on short blocks to increase subblock gain\r\n        * </PRE>\r\n        */\n      function balance_noise(gfp, cod_info, distort, xrpow, bRefine) {\n        var gfc = gfp.internal_flags;\n        amp_scalefac_bands(gfp, cod_info, distort, xrpow, bRefine); /*\r\n                                                                    * check to make sure we have not amplified too much loop_break returns\r\n                                                                    * 0 if there is an unamplified scalefac scale_bitcount returns 0 if no\r\n                                                                    * scalefactors are too large\r\n                                                                    */\n        var status = loop_break(cod_info);\n        if (status) return false; /* all bands amplified */ /*\r\n                                                            * not all scalefactors have been amplified. so these scalefacs are\r\n                                                            * possibly valid. encode them:\r\n                                                            */\n        if (gfc.mode_gr == 2) status = tk.scale_bitcount(cod_info);else status = tk.scale_bitcount_lsf(gfc, cod_info);\n        if (!status) return true; /* amplified some bands not exceeding limits */ /*\r\n                                                                                  * some scalefactors are too large. lets try setting scalefac_scale=1\r\n                                                                                  */\n        if (gfc.noise_shaping > 1) {\n          Arrays.fill(gfc.pseudohalf, 0);\n          if (0 == cod_info.scalefac_scale) {\n            inc_scalefac_scale(cod_info, xrpow);\n            status = false;\n          } else {\n            if (cod_info.block_type == Encoder.SHORT_TYPE && gfc.subblock_gain > 0) {\n              status = inc_subblock_gain(gfc, cod_info, xrpow) || loop_break(cod_info);\n            }\n          }\n        }\n        if (!status) {\n          if (gfc.mode_gr == 2) status = tk.scale_bitcount(cod_info);else status = tk.scale_bitcount_lsf(gfc, cod_info);\n        }\n        return !status;\n      } /**\r\n        * <PRE>\r\n        *  Function: The outer iteration loop controls the masking conditions\r\n        *  of all scalefactorbands. It computes the best scalefac and\r\n        *  global gain. This module calls the inner iteration loop\r\n        *\r\n        *  mt 5/99 completely rewritten to allow for bit reservoir control,\r\n        *  mid/side channels with L/R or mid/side masking thresholds,\r\n        *  and chooses best quantization instead of last quantization when\r\n        *  no distortion free quantization can be found.\r\n        *\r\n        *  added VBR support mt 5/99\r\n        *\r\n        *  some code shuffle rh 9/00\r\n        * </PRE>\r\n        *\r\n        * @param l3_xmin\r\n        *            allowed distortion\r\n        * @param xrpow\r\n        *            coloured magnitudes of spectral\r\n        * @param targ_bits\r\n        *            maximum allowed bits\r\n        */\n      this.outer_loop = function (gfp, cod_info, l3_xmin, xrpow, ch, targ_bits) {\n        var gfc = gfp.internal_flags;\n        var cod_info_w = new GrInfo();\n        var save_xrpow = new_float(576);\n        var distort = new_float(L3Side.SFBMAX);\n        var best_noise_info = new CalcNoiseResult();\n        var better;\n        var prev_noise = new CalcNoiseData();\n        var best_part2_3_length = 9999999;\n        var bEndOfSearch = false;\n        var bRefine = false;\n        var best_ggain_pass1 = 0;\n        bin_search_StepSize(gfc, cod_info, targ_bits, ch, xrpow);\n        if (0 == gfc.noise_shaping) /* fast mode, no noise shaping, we are ready */return 100; /* default noise_info.over_count */ /* compute the distortion in this quantization */ /* coefficients and thresholds both l/r (or both mid/side) */\n        qupvt.calc_noise(cod_info, l3_xmin, distort, best_noise_info, prev_noise);\n        best_noise_info.bits = cod_info.part2_3_length;\n        cod_info_w.assign(cod_info);\n        var age = 0;\n        System.arraycopy(xrpow, 0, save_xrpow, 0, 576);\n        while (!bEndOfSearch) {\n          /* BEGIN MAIN LOOP */do {\n            var noise_info = new CalcNoiseResult();\n            var search_limit;\n            var maxggain = 255; /*\r\n                                * When quantization with no distorted bands is found, allow up\r\n                                * to X new unsuccesful tries in serial. This gives us more\r\n                                * possibilities for different quant_compare modes. Much more\r\n                                * than 3 makes not a big difference, it is only slower.\r\n                                */\n            if ((gfc.substep_shaping & 2) != 0) {\n              search_limit = 20;\n            } else {\n              search_limit = 3;\n            } /*\r\n              * Check if the last scalefactor band is distorted. in VBR mode\r\n              * we can't get rid of the distortion, so quit now and VBR mode\r\n              * will try again with more bits. (makes a 10% speed increase,\r\n              * the files I tested were binary identical, 2000/05/20 Robert\r\n              * Hegemann) distort[] > 1 means noise > allowed noise\r\n              */\n            if (gfc.sfb21_extra) {\n              if (distort[cod_info_w.sfbmax] > 1.0) break;\n              if (cod_info_w.block_type == Encoder.SHORT_TYPE && (distort[cod_info_w.sfbmax + 1] > 1.0 || distort[cod_info_w.sfbmax + 2] > 1.0)) break;\n            } /* try a new scalefactor conbination on cod_info_w */\n            if (!balance_noise(gfp, cod_info_w, distort, xrpow, bRefine)) break;\n            if (cod_info_w.scalefac_scale != 0) maxggain = 254; /*\r\n                                                                * inner_loop starts with the initial quantization step computed\r\n                                                                * above and slowly increases until the bits < huff_bits. Thus\r\n                                                                * it is important not to start with too large of an inital\r\n                                                                * quantization step. Too small is ok, but inner_loop will take\r\n                                                                * longer\r\n                                                                */\n            var huff_bits = targ_bits - cod_info_w.part2_length;\n            if (huff_bits <= 0) break; /*\r\n                                       * increase quantizer stepsize until needed bits are below\r\n                                       * maximum\r\n                                       */\n            while ((cod_info_w.part2_3_length = tk.count_bits(gfc, xrpow, cod_info_w, prev_noise)) > huff_bits && cod_info_w.global_gain <= maxggain) {\n              cod_info_w.global_gain++;\n            }\n            if (cod_info_w.global_gain > maxggain) break;\n            if (best_noise_info.over_count == 0) {\n              while ((cod_info_w.part2_3_length = tk.count_bits(gfc, xrpow, cod_info_w, prev_noise)) > best_part2_3_length && cod_info_w.global_gain <= maxggain) {\n                cod_info_w.global_gain++;\n              }\n              if (cod_info_w.global_gain > maxggain) break;\n            } /* compute the distortion in this quantization */\n            qupvt.calc_noise(cod_info_w, l3_xmin, distort, noise_info, prev_noise);\n            noise_info.bits = cod_info_w.part2_3_length; /*\r\n                                                         * check if this quantization is better than our saved\r\n                                                         * quantization\r\n                                                         */\n            if (cod_info.block_type != Encoder.SHORT_TYPE) {\n              // NORM, START or STOP type\n              better = gfp.quant_comp;\n            } else better = gfp.quant_comp_short;\n            better = quant_compare(better, best_noise_info, noise_info, cod_info_w, distort) ? 1 : 0; /* save data so we can restore this quantization later */\n            if (better != 0) {\n              best_part2_3_length = cod_info.part2_3_length;\n              best_noise_info = noise_info;\n              cod_info.assign(cod_info_w);\n              age = 0; /* save data so we can restore this quantization later */ /* store for later reuse */\n              System.arraycopy(xrpow, 0, save_xrpow, 0, 576);\n            } else {\n              /* early stop? */if (gfc.full_outer_loop == 0) {\n                if (++age > search_limit && best_noise_info.over_count == 0) break;\n                if (gfc.noise_shaping_amp == 3 && bRefine && age > 30) break;\n                if (gfc.noise_shaping_amp == 3 && bRefine && cod_info_w.global_gain - best_ggain_pass1 > 15) break;\n              }\n            }\n          } while (cod_info_w.global_gain + cod_info_w.scalefac_scale < 255);\n          if (gfc.noise_shaping_amp == 3) {\n            if (!bRefine) {\n              /* refine search */cod_info_w.assign(cod_info);\n              System.arraycopy(save_xrpow, 0, xrpow, 0, 576);\n              age = 0;\n              best_ggain_pass1 = cod_info_w.global_gain;\n              bRefine = true;\n            } else {\n              /* search already refined, stop */bEndOfSearch = true;\n            }\n          } else {\n            bEndOfSearch = true;\n          }\n        } /*\r\n          * finish up\r\n          */\n        if (gfp.VBR == VbrMode.vbr_rh || gfp.VBR == VbrMode.vbr_mtrh) /* restore for reuse on next try */System.arraycopy(save_xrpow, 0, xrpow, 0, 576); /*\r\n                                                                                                                                                         * do the 'substep shaping'\r\n                                                                                                                                                         */else if ((gfc.substep_shaping & 1) != 0) trancate_smallspectrums(gfc, cod_info, l3_xmin, xrpow);\n        return best_noise_info.over_count;\n      }; /**\r\n         * Robert Hegemann 2000-09-06\r\n         *\r\n         * update reservoir status after FINAL quantization/bitrate\r\n         */\n      this.iteration_finish_one = function (gfc, gr, ch) {\n        var l3_side = gfc.l3_side;\n        var cod_info = l3_side.tt[gr][ch]; /*\r\n                                           * try some better scalefac storage\r\n                                           */\n        tk.best_scalefac_store(gfc, gr, ch, l3_side); /*\r\n                                                      * best huffman_divide may save some bits too\r\n                                                      */\n        if (gfc.use_best_huffman == 1) tk.best_huffman_divide(gfc, cod_info); /*\r\n                                                                              * update reservoir status after FINAL quantization/bitrate\r\n                                                                              */\n        rv.ResvAdjust(gfc, cod_info);\n      }; /**\r\n         *\r\n         * 2000-09-04 Robert Hegemann\r\n         *\r\n         * @param l3_xmin\r\n         *            allowed distortion of the scalefactor\r\n         * @param xrpow\r\n         *            coloured magnitudes of spectral values\r\n         */\n      this.VBR_encode_granule = function (gfp, cod_info, l3_xmin, xrpow, ch, min_bits, max_bits) {\n        var gfc = gfp.internal_flags;\n        var bst_cod_info = new GrInfo();\n        var bst_xrpow = new_float(576);\n        var Max_bits = max_bits;\n        var real_bits = max_bits + 1;\n        var this_bits = (max_bits + min_bits) / 2;\n        var dbits,\n          over,\n          found = 0;\n        var sfb21_extra = gfc.sfb21_extra;\n        Arrays.fill(bst_cod_info.l3_enc, 0); /*\r\n                                             * search within round about 40 bits of optimal\r\n                                             */\n        do {\n          if (this_bits > Max_bits - 42) gfc.sfb21_extra = false;else gfc.sfb21_extra = sfb21_extra;\n          over = outer_loop(gfp, cod_info, l3_xmin, xrpow, ch, this_bits); /*\r\n                                                                           * is quantization as good as we are looking for ? in this case: is\r\n                                                                           * no scalefactor band distorted?\r\n                                                                           */\n          if (over <= 0) {\n            found = 1; /*\r\n                       * now we know it can be done with \"real_bits\" and maybe we can\r\n                       * skip some iterations\r\n                       */\n            real_bits = cod_info.part2_3_length; /*\r\n                                                 * store best quantization so far\r\n                                                 */\n            bst_cod_info.assign(cod_info);\n            System.arraycopy(xrpow, 0, bst_xrpow, 0, 576); /*\r\n                                                           * try with fewer bits\r\n                                                           */\n            max_bits = real_bits - 32;\n            dbits = max_bits - min_bits;\n            this_bits = (max_bits + min_bits) / 2;\n          } else {\n            /*\r\n            * try with more bits\r\n            */\n            min_bits = this_bits + 32;\n            dbits = max_bits - min_bits;\n            this_bits = (max_bits + min_bits) / 2;\n            if (found != 0) {\n              found = 2; /*\r\n                         * start again with best quantization so far\r\n                         */\n              cod_info.assign(bst_cod_info);\n              System.arraycopy(bst_xrpow, 0, xrpow, 0, 576);\n            }\n          }\n        } while (dbits > 12);\n        gfc.sfb21_extra = sfb21_extra; /*\r\n                                       * found=0 => nothing found, use last one found=1 => we just found the\r\n                                       * best and left the loop found=2 => we restored a good one and have now\r\n                                       * l3_enc to restore too\r\n                                       */\n        if (found == 2) {\n          System.arraycopy(bst_cod_info.l3_enc, 0, cod_info.l3_enc, 0, 576);\n        }\n      }; /**\r\n         * Robert Hegemann 2000-09-05\r\n         *\r\n         * calculates * how many bits are available for analog silent granules * how\r\n         * many bits to use for the lowest allowed bitrate * how many bits each\r\n         * bitrate would provide\r\n         */\n      this.get_framebits = function (gfp, frameBits) {\n        var gfc = gfp.internal_flags; /*\r\n                                      * always use at least this many bits per granule per channel unless we\r\n                                      * detect analog silence, see below\r\n                                      */\n        gfc.bitrate_index = gfc.VBR_min_bitrate;\n        var bitsPerFrame = bs.getframebits(gfp); /*\r\n                                                 * bits for analog silence\r\n                                                 */\n        gfc.bitrate_index = 1;\n        bitsPerFrame = bs.getframebits(gfp);\n        for (var i = 1; i <= gfc.VBR_max_bitrate; i++) {\n          gfc.bitrate_index = i;\n          var mb = new MeanBits(bitsPerFrame);\n          frameBits[i] = rv.ResvFrameBegin(gfp, mb);\n          bitsPerFrame = mb.bits;\n        }\n      }; /* RH: this one needs to be overhauled sometime */ /**\r\n                                                            * <PRE>\r\n                                                            *  2000-09-04 Robert Hegemann\r\n                                                            *\r\n                                                            *  * converts LR to MS coding when necessary\r\n                                                            *  * calculates allowed/adjusted quantization noise amounts\r\n                                                            *  * detects analog silent frames\r\n                                                            *\r\n                                                            *  some remarks:\r\n                                                            *  - lower masking depending on Quality setting\r\n                                                            *  - quality control together with adjusted ATH MDCT scaling\r\n                                                            *    on lower quality setting allocate more noise from\r\n                                                            *    ATH masking, and on higher quality setting allocate\r\n                                                            *    less noise from ATH masking.\r\n                                                            *  - experiments show that going more than 2dB over GPSYCHO's\r\n                                                            *    limits ends up in very annoying artefacts\r\n                                                            * </PRE>\r\n                                                            */\n      this.VBR_old_prepare = function (gfp, pe, ms_ener_ratio, ratio, l3_xmin, frameBits, min_bits, max_bits, bands) {\n        var gfc = gfp.internal_flags;\n        var masking_lower_db,\n          adjust = 0.0;\n        var analog_silence = 1;\n        var bits = 0;\n        gfc.bitrate_index = gfc.VBR_max_bitrate;\n        var avg = rv.ResvFrameBegin(gfp, new MeanBits(0)) / gfc.mode_gr;\n        get_framebits(gfp, frameBits);\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n          var mxb = qupvt.on_pe(gfp, pe, max_bits[gr], avg, gr, 0);\n          if (gfc.mode_ext == Encoder.MPG_MD_MS_LR) {\n            ms_convert(gfc.l3_side, gr);\n            qupvt.reduce_side(max_bits[gr], ms_ener_ratio[gr], avg, mxb);\n          }\n          for (var ch = 0; ch < gfc.channels_out; ++ch) {\n            var cod_info = gfc.l3_side.tt[gr][ch];\n            if (cod_info.block_type != Encoder.SHORT_TYPE) {\n              // NORM, START or STOP type\n              adjust = 1.28 / (1 + Math.exp(3.5 - pe[gr][ch] / 300.)) - 0.05;\n              masking_lower_db = gfc.PSY.mask_adjust - adjust;\n            } else {\n              adjust = 2.56 / (1 + Math.exp(3.5 - pe[gr][ch] / 300.)) - 0.14;\n              masking_lower_db = gfc.PSY.mask_adjust_short - adjust;\n            }\n            gfc.masking_lower = Math.pow(10.0, masking_lower_db * 0.1);\n            init_outer_loop(gfc, cod_info);\n            bands[gr][ch] = qupvt.calc_xmin(gfp, ratio[gr][ch], cod_info, l3_xmin[gr][ch]);\n            if (bands[gr][ch] != 0) analog_silence = 0;\n            min_bits[gr][ch] = 126;\n            bits += max_bits[gr][ch];\n          }\n        }\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n          for (var ch = 0; ch < gfc.channels_out; ch++) {\n            if (bits > frameBits[gfc.VBR_max_bitrate]) {\n              max_bits[gr][ch] *= frameBits[gfc.VBR_max_bitrate];\n              max_bits[gr][ch] /= bits;\n            }\n            if (min_bits[gr][ch] > max_bits[gr][ch]) min_bits[gr][ch] = max_bits[gr][ch];\n          } /* for ch */\n        } /* for gr */\n        return analog_silence;\n      };\n      this.bitpressure_strategy = function (gfc, l3_xmin, min_bits, max_bits) {\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n          for (var ch = 0; ch < gfc.channels_out; ch++) {\n            var gi = gfc.l3_side.tt[gr][ch];\n            var pxmin = l3_xmin[gr][ch];\n            var pxminPos = 0;\n            for (var sfb = 0; sfb < gi.psy_lmax; sfb++) {\n              pxmin[pxminPos++] *= 1. + .029 * sfb * sfb / Encoder.SBMAX_l / Encoder.SBMAX_l;\n            }\n            if (gi.block_type == Encoder.SHORT_TYPE) {\n              for (var sfb = gi.sfb_smin; sfb < Encoder.SBMAX_s; sfb++) {\n                pxmin[pxminPos++] *= 1. + .029 * sfb * sfb / Encoder.SBMAX_s / Encoder.SBMAX_s;\n                pxmin[pxminPos++] *= 1. + .029 * sfb * sfb / Encoder.SBMAX_s / Encoder.SBMAX_s;\n                pxmin[pxminPos++] *= 1. + .029 * sfb * sfb / Encoder.SBMAX_s / Encoder.SBMAX_s;\n              }\n            }\n            max_bits[gr][ch] = 0 | Math.max(min_bits[gr][ch], 0.9 * max_bits[gr][ch]);\n          }\n        }\n      };\n      this.VBR_new_prepare = function (gfp, pe, ratio, l3_xmin, frameBits, max_bits) {\n        var gfc = gfp.internal_flags;\n        var analog_silence = 1;\n        var avg = 0,\n          bits = 0;\n        var maximum_framebits;\n        if (!gfp.free_format) {\n          gfc.bitrate_index = gfc.VBR_max_bitrate;\n          var mb = new MeanBits(avg);\n          rv.ResvFrameBegin(gfp, mb);\n          avg = mb.bits;\n          get_framebits(gfp, frameBits);\n          maximum_framebits = frameBits[gfc.VBR_max_bitrate];\n        } else {\n          gfc.bitrate_index = 0;\n          var mb = new MeanBits(avg);\n          maximum_framebits = rv.ResvFrameBegin(gfp, mb);\n          avg = mb.bits;\n          frameBits[0] = maximum_framebits;\n        }\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n          qupvt.on_pe(gfp, pe, max_bits[gr], avg, gr, 0);\n          if (gfc.mode_ext == Encoder.MPG_MD_MS_LR) {\n            ms_convert(gfc.l3_side, gr);\n          }\n          for (var ch = 0; ch < gfc.channels_out; ++ch) {\n            var cod_info = gfc.l3_side.tt[gr][ch];\n            gfc.masking_lower = Math.pow(10.0, gfc.PSY.mask_adjust * 0.1);\n            init_outer_loop(gfc, cod_info);\n            if (0 != qupvt.calc_xmin(gfp, ratio[gr][ch], cod_info, l3_xmin[gr][ch])) analog_silence = 0;\n            bits += max_bits[gr][ch];\n          }\n        }\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n          for (var ch = 0; ch < gfc.channels_out; ch++) {\n            if (bits > maximum_framebits) {\n              max_bits[gr][ch] *= maximum_framebits;\n              max_bits[gr][ch] /= bits;\n            }\n          } /* for ch */\n        } /* for gr */\n        return analog_silence;\n      }; /**\r\n         * calculates target bits for ABR encoding\r\n         *\r\n         * mt 2000/05/31\r\n         */\n      this.calc_target_bits = function (gfp, pe, ms_ener_ratio, targ_bits, analog_silence_bits, max_frame_bits) {\n        var gfc = gfp.internal_flags;\n        var l3_side = gfc.l3_side;\n        var res_factor;\n        var gr,\n          ch,\n          totbits,\n          mean_bits = 0;\n        gfc.bitrate_index = gfc.VBR_max_bitrate;\n        var mb = new MeanBits(mean_bits);\n        max_frame_bits[0] = rv.ResvFrameBegin(gfp, mb);\n        mean_bits = mb.bits;\n        gfc.bitrate_index = 1;\n        mean_bits = bs.getframebits(gfp) - gfc.sideinfo_len * 8;\n        analog_silence_bits[0] = mean_bits / (gfc.mode_gr * gfc.channels_out);\n        mean_bits = gfp.VBR_mean_bitrate_kbps * gfp.framesize * 1000;\n        if ((gfc.substep_shaping & 1) != 0) mean_bits *= 1.09;\n        mean_bits /= gfp.out_samplerate;\n        mean_bits -= gfc.sideinfo_len * 8;\n        mean_bits /= gfc.mode_gr * gfc.channels_out; /**\r\n                                                     * <PRE>\r\n                                                     *           res_factor is the percentage of the target bitrate that should\r\n                                                     *           be used on average.  the remaining bits are added to the\r\n                                                     *           bitreservoir and used for difficult to encode frames.\r\n                                                     *\r\n                                                     *           Since we are tracking the average bitrate, we should adjust\r\n                                                     *           res_factor \"on the fly\", increasing it if the average bitrate\r\n                                                     *           is greater than the requested bitrate, and decreasing it\r\n                                                     *           otherwise.  Reasonable ranges are from .9 to 1.0\r\n                                                     *\r\n                                                     *           Until we get the above suggestion working, we use the following\r\n                                                     *           tuning:\r\n                                                     *           compression ratio    res_factor\r\n                                                     *           5.5  (256kbps)         1.0      no need for bitreservoir\r\n                                                     *           11   (128kbps)         .93      7% held for reservoir\r\n                                                     *\r\n                                                     *           with linear interpolation for other values.\r\n                                                     * </PRE>\r\n                                                     */\n        res_factor = .93 + .07 * (11.0 - gfp.compression_ratio) / (11.0 - 5.5);\n        if (res_factor < .90) res_factor = .90;\n        if (res_factor > 1.00) res_factor = 1.00;\n        for (gr = 0; gr < gfc.mode_gr; gr++) {\n          var sum = 0;\n          for (ch = 0; ch < gfc.channels_out; ch++) {\n            targ_bits[gr][ch] = int(res_factor * mean_bits);\n            if (pe[gr][ch] > 700) {\n              var add_bits = int((pe[gr][ch] - 700) / 1.4);\n              var cod_info = l3_side.tt[gr][ch];\n              targ_bits[gr][ch] = int(res_factor * mean_bits); /* short blocks use a little extra, no matter what the pe */\n              if (cod_info.block_type == Encoder.SHORT_TYPE) {\n                if (add_bits < mean_bits / 2) add_bits = mean_bits / 2;\n              } /* at most increase bits by 1.5*average */\n              if (add_bits > mean_bits * 3 / 2) add_bits = mean_bits * 3 / 2;else if (add_bits < 0) add_bits = 0;\n              targ_bits[gr][ch] += add_bits;\n            }\n            if (targ_bits[gr][ch] > LameInternalFlags.MAX_BITS_PER_CHANNEL) {\n              targ_bits[gr][ch] = LameInternalFlags.MAX_BITS_PER_CHANNEL;\n            }\n            sum += targ_bits[gr][ch];\n          } /* for ch */\n          if (sum > LameInternalFlags.MAX_BITS_PER_GRANULE) {\n            for (ch = 0; ch < gfc.channels_out; ++ch) {\n              targ_bits[gr][ch] *= LameInternalFlags.MAX_BITS_PER_GRANULE;\n              targ_bits[gr][ch] /= sum;\n            }\n          }\n        } /* for gr */\n        if (gfc.mode_ext == Encoder.MPG_MD_MS_LR) for (gr = 0; gr < gfc.mode_gr; gr++) {\n          qupvt.reduce_side(targ_bits[gr], ms_ener_ratio[gr], mean_bits * gfc.channels_out, LameInternalFlags.MAX_BITS_PER_GRANULE);\n        } /*\r\n          * sum target bits\r\n          */\n        totbits = 0;\n        for (gr = 0; gr < gfc.mode_gr; gr++) {\n          for (ch = 0; ch < gfc.channels_out; ch++) {\n            if (targ_bits[gr][ch] > LameInternalFlags.MAX_BITS_PER_CHANNEL) targ_bits[gr][ch] = LameInternalFlags.MAX_BITS_PER_CHANNEL;\n            totbits += targ_bits[gr][ch];\n          }\n        } /*\r\n          * repartion target bits if needed\r\n          */\n        if (totbits > max_frame_bits[0]) {\n          for (gr = 0; gr < gfc.mode_gr; gr++) {\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n              targ_bits[gr][ch] *= max_frame_bits[0];\n              targ_bits[gr][ch] /= totbits;\n            }\n          }\n        }\n      };\n    } /*\r\n      *      MP3 window subband -> subband filtering -> mdct routine\r\n      *\r\n      *      Copyright (c) 1999-2000 Takehiro Tominaga\r\n      *\r\n      *\r\n      * This library is free software; you can redistribute it and/or\r\n      * modify it under the terms of the GNU Lesser General Public\r\n      * License as published by the Free Software Foundation; either\r\n      * version 2 of the License, or (at your option) any later version.\r\n      *\r\n      * This library is distributed in the hope that it will be useful,\r\n      * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n      * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n      * Library General Public License for more details.\r\n      *\r\n      * You should have received a copy of the GNU Library General Public\r\n      * License along with this library; if not, write to the\r\n      * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\r\n      * Boston, MA 02111-1307, USA.\r\n      */ /*\r\n         *         Special Thanks to Patrick De Smet for your advices.\r\n         */ /* $Id: NewMDCT.java,v 1.11 2011/05/24 20:48:06 kenchis Exp $ */ //package mp3;\n    //import java.util.Arrays;\n    function NewMDCT() {\n      var enwindow = [-4.77e-07 * 0.740951125354959 / 2.384e-06, 1.03951e-04 * 0.740951125354959 / 2.384e-06, 9.53674e-04 * 0.740951125354959 / 2.384e-06, 2.841473e-03 * 0.740951125354959 / 2.384e-06, 3.5758972e-02 * 0.740951125354959 / 2.384e-06, 3.401756e-03 * 0.740951125354959 / 2.384e-06, 9.83715e-04 * 0.740951125354959 / 2.384e-06, 9.9182e-05 * 0.740951125354959 / 2.384e-06, /* 15 */1.2398e-05 * 0.740951125354959 / 2.384e-06, 1.91212e-04 * 0.740951125354959 / 2.384e-06, 2.283096e-03 * 0.740951125354959 / 2.384e-06, 1.6994476e-02 * 0.740951125354959 / 2.384e-06, -1.8756866e-02 * 0.740951125354959 / 2.384e-06, -2.630711e-03 * 0.740951125354959 / 2.384e-06, -2.47478e-04 * 0.740951125354959 / 2.384e-06, -1.4782e-05 * 0.740951125354959 / 2.384e-06, 9.063471690191471e-01, 1.960342806591213e-01, -4.77e-07 * 0.773010453362737 / 2.384e-06, 1.05858e-04 * 0.773010453362737 / 2.384e-06, 9.30786e-04 * 0.773010453362737 / 2.384e-06, 2.521515e-03 * 0.773010453362737 / 2.384e-06, 3.5694122e-02 * 0.773010453362737 / 2.384e-06, 3.643036e-03 * 0.773010453362737 / 2.384e-06, 9.91821e-04 * 0.773010453362737 / 2.384e-06, 9.6321e-05 * 0.773010453362737 / 2.384e-06, /* 14 */1.1444e-05 * 0.773010453362737 / 2.384e-06, 1.65462e-04 * 0.773010453362737 / 2.384e-06, 2.110004e-03 * 0.773010453362737 / 2.384e-06, 1.6112804e-02 * 0.773010453362737 / 2.384e-06, -1.9634247e-02 * 0.773010453362737 / 2.384e-06, -2.803326e-03 * 0.773010453362737 / 2.384e-06, -2.77042e-04 * 0.773010453362737 / 2.384e-06, -1.6689e-05 * 0.773010453362737 / 2.384e-06, 8.206787908286602e-01, 3.901806440322567e-01, -4.77e-07 * 0.803207531480645 / 2.384e-06, 1.07288e-04 * 0.803207531480645 / 2.384e-06, 9.02653e-04 * 0.803207531480645 / 2.384e-06, 2.174854e-03 * 0.803207531480645 / 2.384e-06, 3.5586357e-02 * 0.803207531480645 / 2.384e-06, 3.858566e-03 * 0.803207531480645 / 2.384e-06, 9.95159e-04 * 0.803207531480645 / 2.384e-06, 9.3460e-05 * 0.803207531480645 / 2.384e-06, /* 13 */1.0014e-05 * 0.803207531480645 / 2.384e-06, 1.40190e-04 * 0.803207531480645 / 2.384e-06, 1.937389e-03 * 0.803207531480645 / 2.384e-06, 1.5233517e-02 * 0.803207531480645 / 2.384e-06, -2.0506859e-02 * 0.803207531480645 / 2.384e-06, -2.974033e-03 * 0.803207531480645 / 2.384e-06, -3.07560e-04 * 0.803207531480645 / 2.384e-06, -1.8120e-05 * 0.803207531480645 / 2.384e-06, 7.416505462720353e-01, 5.805693545089249e-01, -4.77e-07 * 0.831469612302545 / 2.384e-06, 1.08242e-04 * 0.831469612302545 / 2.384e-06, 8.68797e-04 * 0.831469612302545 / 2.384e-06, 1.800537e-03 * 0.831469612302545 / 2.384e-06, 3.5435200e-02 * 0.831469612302545 / 2.384e-06, 4.049301e-03 * 0.831469612302545 / 2.384e-06, 9.94205e-04 * 0.831469612302545 / 2.384e-06, 9.0599e-05 * 0.831469612302545 / 2.384e-06, /* 12 */9.060e-06 * 0.831469612302545 / 2.384e-06, 1.16348e-04 * 0.831469612302545 / 2.384e-06, 1.766682e-03 * 0.831469612302545 / 2.384e-06, 1.4358521e-02 * 0.831469612302545 / 2.384e-06, -2.1372318e-02 * 0.831469612302545 / 2.384e-06, -3.14188e-03 * 0.831469612302545 / 2.384e-06, -3.39031e-04 * 0.831469612302545 / 2.384e-06, -1.9550e-05 * 0.831469612302545 / 2.384e-06, 6.681786379192989e-01, 7.653668647301797e-01, -4.77e-07 * 0.857728610000272 / 2.384e-06, 1.08719e-04 * 0.857728610000272 / 2.384e-06, 8.29220e-04 * 0.857728610000272 / 2.384e-06, 1.399517e-03 * 0.857728610000272 / 2.384e-06, 3.5242081e-02 * 0.857728610000272 / 2.384e-06, 4.215240e-03 * 0.857728610000272 / 2.384e-06, 9.89437e-04 * 0.857728610000272 / 2.384e-06, 8.7261e-05 * 0.857728610000272 / 2.384e-06, /* 11 */8.106e-06 * 0.857728610000272 / 2.384e-06, 9.3937e-05 * 0.857728610000272 / 2.384e-06, 1.597881e-03 * 0.857728610000272 / 2.384e-06, 1.3489246e-02 * 0.857728610000272 / 2.384e-06, -2.2228718e-02 * 0.857728610000272 / 2.384e-06, -3.306866e-03 * 0.857728610000272 / 2.384e-06, -3.71456e-04 * 0.857728610000272 / 2.384e-06, -2.1458e-05 * 0.857728610000272 / 2.384e-06, 5.993769336819237e-01, 9.427934736519954e-01, -4.77e-07 * 0.881921264348355 / 2.384e-06, 1.08719e-04 * 0.881921264348355 / 2.384e-06, 7.8392e-04 * 0.881921264348355 / 2.384e-06, 9.71317e-04 * 0.881921264348355 / 2.384e-06, 3.5007000e-02 * 0.881921264348355 / 2.384e-06, 4.357815e-03 * 0.881921264348355 / 2.384e-06, 9.80854e-04 * 0.881921264348355 / 2.384e-06, 8.3923e-05 * 0.881921264348355 / 2.384e-06, /* 10 */7.629e-06 * 0.881921264348355 / 2.384e-06, 7.2956e-05 * 0.881921264348355 / 2.384e-06, 1.432419e-03 * 0.881921264348355 / 2.384e-06, 1.2627602e-02 * 0.881921264348355 / 2.384e-06, -2.3074150e-02 * 0.881921264348355 / 2.384e-06, -3.467083e-03 * 0.881921264348355 / 2.384e-06, -4.04358e-04 * 0.881921264348355 / 2.384e-06, -2.3365e-05 * 0.881921264348355 / 2.384e-06, 5.345111359507916e-01, 1.111140466039205e+00, -9.54e-07 * 0.903989293123443 / 2.384e-06, 1.08242e-04 * 0.903989293123443 / 2.384e-06, 7.31945e-04 * 0.903989293123443 / 2.384e-06, 5.15938e-04 * 0.903989293123443 / 2.384e-06, 3.4730434e-02 * 0.903989293123443 / 2.384e-06, 4.477024e-03 * 0.903989293123443 / 2.384e-06, 9.68933e-04 * 0.903989293123443 / 2.384e-06, 8.0585e-05 * 0.903989293123443 / 2.384e-06, /* 9 */6.676e-06 * 0.903989293123443 / 2.384e-06, 5.2929e-05 * 0.903989293123443 / 2.384e-06, 1.269817e-03 * 0.903989293123443 / 2.384e-06, 1.1775017e-02 * 0.903989293123443 / 2.384e-06, -2.3907185e-02 * 0.903989293123443 / 2.384e-06, -3.622532e-03 * 0.903989293123443 / 2.384e-06, -4.38213e-04 * 0.903989293123443 / 2.384e-06, -2.5272e-05 * 0.903989293123443 / 2.384e-06, 4.729647758913199e-01, 1.268786568327291e+00, -9.54e-07 * 0.92387953251128675613 / 2.384e-06, 1.06812e-04 * 0.92387953251128675613 / 2.384e-06, 6.74248e-04 * 0.92387953251128675613 / 2.384e-06, 3.3379e-05 * 0.92387953251128675613 / 2.384e-06, 3.4412861e-02 * 0.92387953251128675613 / 2.384e-06, 4.573822e-03 * 0.92387953251128675613 / 2.384e-06, 9.54151e-04 * 0.92387953251128675613 / 2.384e-06, 7.6771e-05 * 0.92387953251128675613 / 2.384e-06, 6.199e-06 * 0.92387953251128675613 / 2.384e-06, 3.4332e-05 * 0.92387953251128675613 / 2.384e-06, 1.111031e-03 * 0.92387953251128675613 / 2.384e-06, 1.0933399e-02 * 0.92387953251128675613 / 2.384e-06, -2.4725437e-02 * 0.92387953251128675613 / 2.384e-06, -3.771782e-03 * 0.92387953251128675613 / 2.384e-06, -4.72546e-04 * 0.92387953251128675613 / 2.384e-06, -2.7657e-05 * 0.92387953251128675613 / 2.384e-06, 4.1421356237309504879e-01, /* tan(PI/8) */1.414213562373095e+00, -9.54e-07 * 0.941544065183021 / 2.384e-06, 1.05381e-04 * 0.941544065183021 / 2.384e-06, 6.10352e-04 * 0.941544065183021 / 2.384e-06, -4.75883e-04 * 0.941544065183021 / 2.384e-06, 3.4055710e-02 * 0.941544065183021 / 2.384e-06, 4.649162e-03 * 0.941544065183021 / 2.384e-06, 9.35555e-04 * 0.941544065183021 / 2.384e-06, 7.3433e-05 * 0.941544065183021 / 2.384e-06, /* 7 */5.245e-06 * 0.941544065183021 / 2.384e-06, 1.7166e-05 * 0.941544065183021 / 2.384e-06, 9.56535e-04 * 0.941544065183021 / 2.384e-06, 1.0103703e-02 * 0.941544065183021 / 2.384e-06, -2.5527000e-02 * 0.941544065183021 / 2.384e-06, -3.914356e-03 * 0.941544065183021 / 2.384e-06, -5.07355e-04 * 0.941544065183021 / 2.384e-06, -3.0041e-05 * 0.941544065183021 / 2.384e-06, 3.578057213145241e-01, 1.546020906725474e+00, -9.54e-07 * 0.956940335732209 / 2.384e-06, 1.02520e-04 * 0.956940335732209 / 2.384e-06, 5.39303e-04 * 0.956940335732209 / 2.384e-06, -1.011848e-03 * 0.956940335732209 / 2.384e-06, 3.3659935e-02 * 0.956940335732209 / 2.384e-06, 4.703045e-03 * 0.956940335732209 / 2.384e-06, 9.15051e-04 * 0.956940335732209 / 2.384e-06, 7.0095e-05 * 0.956940335732209 / 2.384e-06, /* 6 */4.768e-06 * 0.956940335732209 / 2.384e-06, 9.54e-07 * 0.956940335732209 / 2.384e-06, 8.06808e-04 * 0.956940335732209 / 2.384e-06, 9.287834e-03 * 0.956940335732209 / 2.384e-06, -2.6310921e-02 * 0.956940335732209 / 2.384e-06, -4.048824e-03 * 0.956940335732209 / 2.384e-06, -5.42164e-04 * 0.956940335732209 / 2.384e-06, -3.2425e-05 * 0.956940335732209 / 2.384e-06, 3.033466836073424e-01, 1.662939224605090e+00, -1.431e-06 * 0.970031253194544 / 2.384e-06, 9.9182e-05 * 0.970031253194544 / 2.384e-06, 4.62532e-04 * 0.970031253194544 / 2.384e-06, -1.573563e-03 * 0.970031253194544 / 2.384e-06, 3.3225536e-02 * 0.970031253194544 / 2.384e-06, 4.737377e-03 * 0.970031253194544 / 2.384e-06, 8.91685e-04 * 0.970031253194544 / 2.384e-06, 6.6280e-05 * 0.970031253194544 / 2.384e-06, /* 5 */4.292e-06 * 0.970031253194544 / 2.384e-06, -1.3828e-05 * 0.970031253194544 / 2.384e-06, 6.61850e-04 * 0.970031253194544 / 2.384e-06, 8.487225e-03 * 0.970031253194544 / 2.384e-06, -2.7073860e-02 * 0.970031253194544 / 2.384e-06, -4.174709e-03 * 0.970031253194544 / 2.384e-06, -5.76973e-04 * 0.970031253194544 / 2.384e-06, -3.4809e-05 * 0.970031253194544 / 2.384e-06, 2.504869601913055e-01, 1.763842528696710e+00, -1.431e-06 * 0.98078528040323 / 2.384e-06, 9.5367e-05 * 0.98078528040323 / 2.384e-06, 3.78609e-04 * 0.98078528040323 / 2.384e-06, -2.161503e-03 * 0.98078528040323 / 2.384e-06, 3.2754898e-02 * 0.98078528040323 / 2.384e-06, 4.752159e-03 * 0.98078528040323 / 2.384e-06, 8.66413e-04 * 0.98078528040323 / 2.384e-06, 6.2943e-05 * 0.98078528040323 / 2.384e-06, /* 4 */3.815e-06 * 0.98078528040323 / 2.384e-06, -2.718e-05 * 0.98078528040323 / 2.384e-06, 5.22137e-04 * 0.98078528040323 / 2.384e-06, 7.703304e-03 * 0.98078528040323 / 2.384e-06, -2.7815342e-02 * 0.98078528040323 / 2.384e-06, -4.290581e-03 * 0.98078528040323 / 2.384e-06, -6.11782e-04 * 0.98078528040323 / 2.384e-06, -3.7670e-05 * 0.98078528040323 / 2.384e-06, 1.989123673796580e-01, 1.847759065022573e+00, -1.907e-06 * 0.989176509964781 / 2.384e-06, 9.0122e-05 * 0.989176509964781 / 2.384e-06, 2.88486e-04 * 0.989176509964781 / 2.384e-06, -2.774239e-03 * 0.989176509964781 / 2.384e-06, 3.2248020e-02 * 0.989176509964781 / 2.384e-06, 4.748821e-03 * 0.989176509964781 / 2.384e-06, 8.38757e-04 * 0.989176509964781 / 2.384e-06, 5.9605e-05 * 0.989176509964781 / 2.384e-06, /* 3 */3.338e-06 * 0.989176509964781 / 2.384e-06, -3.9577e-05 * 0.989176509964781 / 2.384e-06, 3.88145e-04 * 0.989176509964781 / 2.384e-06, 6.937027e-03 * 0.989176509964781 / 2.384e-06, -2.8532982e-02 * 0.989176509964781 / 2.384e-06, -4.395962e-03 * 0.989176509964781 / 2.384e-06, -6.46591e-04 * 0.989176509964781 / 2.384e-06, -4.0531e-05 * 0.989176509964781 / 2.384e-06, 1.483359875383474e-01, 1.913880671464418e+00, -1.907e-06 * 0.995184726672197 / 2.384e-06, 8.4400e-05 * 0.995184726672197 / 2.384e-06, 1.91689e-04 * 0.995184726672197 / 2.384e-06, -3.411293e-03 * 0.995184726672197 / 2.384e-06, 3.1706810e-02 * 0.995184726672197 / 2.384e-06, 4.728317e-03 * 0.995184726672197 / 2.384e-06, 8.09669e-04 * 0.995184726672197 / 2.384e-06, 5.579e-05 * 0.995184726672197 / 2.384e-06, 3.338e-06 * 0.995184726672197 / 2.384e-06, -5.0545e-05 * 0.995184726672197 / 2.384e-06, 2.59876e-04 * 0.995184726672197 / 2.384e-06, 6.189346e-03 * 0.995184726672197 / 2.384e-06, -2.9224873e-02 * 0.995184726672197 / 2.384e-06, -4.489899e-03 * 0.995184726672197 / 2.384e-06, -6.80923e-04 * 0.995184726672197 / 2.384e-06, -4.3392e-05 * 0.995184726672197 / 2.384e-06, 9.849140335716425e-02, 1.961570560806461e+00, -2.384e-06 * 0.998795456205172 / 2.384e-06, 7.7724e-05 * 0.998795456205172 / 2.384e-06, 8.8215e-05 * 0.998795456205172 / 2.384e-06, -4.072189e-03 * 0.998795456205172 / 2.384e-06, 3.1132698e-02 * 0.998795456205172 / 2.384e-06, 4.691124e-03 * 0.998795456205172 / 2.384e-06, 7.79152e-04 * 0.998795456205172 / 2.384e-06, 5.2929e-05 * 0.998795456205172 / 2.384e-06, 2.861e-06 * 0.998795456205172 / 2.384e-06, -6.0558e-05 * 0.998795456205172 / 2.384e-06, 1.37329e-04 * 0.998795456205172 / 2.384e-06, 5.462170e-03 * 0.998795456205172 / 2.384e-06, -2.9890060e-02 * 0.998795456205172 / 2.384e-06, -4.570484e-03 * 0.998795456205172 / 2.384e-06, -7.14302e-04 * 0.998795456205172 / 2.384e-06, -4.6253e-05 * 0.998795456205172 / 2.384e-06, 4.912684976946725e-02, 1.990369453344394e+00, 3.5780907e-02 * Util.SQRT2 * 0.5 / 2.384e-06, 1.7876148e-02 * Util.SQRT2 * 0.5 / 2.384e-06, 3.134727e-03 * Util.SQRT2 * 0.5 / 2.384e-06, 2.457142e-03 * Util.SQRT2 * 0.5 / 2.384e-06, 9.71317e-04 * Util.SQRT2 * 0.5 / 2.384e-06, 2.18868e-04 * Util.SQRT2 * 0.5 / 2.384e-06, 1.01566e-04 * Util.SQRT2 * 0.5 / 2.384e-06, 1.3828e-05 * Util.SQRT2 * 0.5 / 2.384e-06, 3.0526638e-02 / 2.384e-06, 4.638195e-03 / 2.384e-06, 7.47204e-04 / 2.384e-06, 4.9591e-05 / 2.384e-06, 4.756451e-03 / 2.384e-06, 2.1458e-05 / 2.384e-06, -6.9618e-05 / 2.384e-06];\n      var NS = 12;\n      var NL = 36;\n      var win = [[2.382191739347913e-13, 6.423305872147834e-13, 9.400849094049688e-13, 1.122435026096556e-12, 1.183840321267481e-12, 1.122435026096556e-12, 9.400849094049690e-13, 6.423305872147839e-13, 2.382191739347918e-13, 5.456116108943412e-12, 4.878985199565852e-12, 4.240448995017367e-12, 3.559909094758252e-12, 2.858043359288075e-12, 2.156177623817898e-12, 1.475637723558783e-12, 8.371015190102974e-13, 2.599706096327376e-13, -5.456116108943412e-12, -4.878985199565852e-12, -4.240448995017367e-12, -3.559909094758252e-12, -2.858043359288076e-12, -2.156177623817898e-12, -1.475637723558783e-12, -8.371015190102975e-13, -2.599706096327376e-13, -2.382191739347923e-13, -6.423305872147843e-13, -9.400849094049696e-13, -1.122435026096556e-12, -1.183840321267481e-12, -1.122435026096556e-12, -9.400849094049694e-13, -6.423305872147840e-13, -2.382191739347918e-13], [2.382191739347913e-13, 6.423305872147834e-13, 9.400849094049688e-13, 1.122435026096556e-12, 1.183840321267481e-12, 1.122435026096556e-12, 9.400849094049688e-13, 6.423305872147841e-13, 2.382191739347918e-13, 5.456116108943413e-12, 4.878985199565852e-12, 4.240448995017367e-12, 3.559909094758253e-12, 2.858043359288075e-12, 2.156177623817898e-12, 1.475637723558782e-12, 8.371015190102975e-13, 2.599706096327376e-13, -5.461314069809755e-12, -4.921085770524055e-12, -4.343405037091838e-12, -3.732668368707687e-12, -3.093523840190885e-12, -2.430835727329465e-12, -1.734679010007751e-12, -9.748253656609281e-13, -2.797435120168326e-13, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.283748241799531e-13, -4.037858874020686e-13, -2.146547464825323e-13], [1.316524975873958e-01, /* win[SHORT_TYPE] */4.142135623730950e-01, 7.673269879789602e-01, 1.091308501069271e+00, /* tantab_l */1.303225372841206e+00, 1.569685577117490e+00, 1.920982126971166e+00, 2.414213562373094e+00, 3.171594802363212e+00, 4.510708503662055e+00, 7.595754112725146e+00, 2.290376554843115e+01, 0.98480775301220802032, /* cx */0.64278760968653936292, 0.34202014332566882393, 0.93969262078590842791, -0.17364817766693030343, -0.76604444311897790243, 0.86602540378443870761, 0.500000000000000e+00, -5.144957554275265e-01, /* ca */-4.717319685649723e-01, -3.133774542039019e-01, -1.819131996109812e-01, -9.457419252642064e-02, -4.096558288530405e-02, -1.419856857247115e-02, -3.699974673760037e-03, 8.574929257125442e-01, /* cs */8.817419973177052e-01, 9.496286491027329e-01, 9.833145924917901e-01, 9.955178160675857e-01, 9.991605581781475e-01, 9.998991952444470e-01, 9.999931550702802e-01], [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 2.283748241799531e-13, 4.037858874020686e-13, 2.146547464825323e-13, 5.461314069809755e-12, 4.921085770524055e-12, 4.343405037091838e-12, 3.732668368707687e-12, 3.093523840190885e-12, 2.430835727329466e-12, 1.734679010007751e-12, 9.748253656609281e-13, 2.797435120168326e-13, -5.456116108943413e-12, -4.878985199565852e-12, -4.240448995017367e-12, -3.559909094758253e-12, -2.858043359288075e-12, -2.156177623817898e-12, -1.475637723558782e-12, -8.371015190102975e-13, -2.599706096327376e-13, -2.382191739347913e-13, -6.423305872147834e-13, -9.400849094049688e-13, -1.122435026096556e-12, -1.183840321267481e-12, -1.122435026096556e-12, -9.400849094049688e-13, -6.423305872147841e-13, -2.382191739347918e-13]];\n      var tantab_l = win[Encoder.SHORT_TYPE];\n      var cx = win[Encoder.SHORT_TYPE];\n      var ca = win[Encoder.SHORT_TYPE];\n      var cs = win[Encoder.SHORT_TYPE]; /**\r\n                                        * new IDCT routine written by Takehiro TOMINAGA\r\n                                        *\r\n                                        * PURPOSE: Overlapping window on PCM samples<BR>\r\n                                        *\r\n                                        * SEMANTICS:<BR>\r\n                                        * 32 16-bit pcm samples are scaled to fractional 2's complement and\r\n                                        * concatenated to the end of the window buffer #x#. The updated window\r\n                                        * buffer #x# is then windowed by the analysis window #c# to produce the\r\n                                        * windowed sample #z#\r\n                                        */\n      var order = [0, 1, 16, 17, 8, 9, 24, 25, 4, 5, 20, 21, 12, 13, 28, 29, 2, 3, 18, 19, 10, 11, 26, 27, 6, 7, 22, 23, 14, 15, 30, 31]; /**\r\n                                                                                                                                          * returns sum_j=0^31 a[j]*cos(PI*j*(k+1/2)/32), 0<=k<32\r\n                                                                                                                                          */\n      function window_subband(x1, x1Pos, a) {\n        var wp = 10;\n        var x2 = x1Pos + 238 - 14 - 286;\n        for (var i = -15; i < 0; i++) {\n          var w, s, t;\n          w = enwindow[wp + -10];\n          s = x1[x2 + -224] * w;\n          t = x1[x1Pos + 224] * w;\n          w = enwindow[wp + -9];\n          s += x1[x2 + -160] * w;\n          t += x1[x1Pos + 160] * w;\n          w = enwindow[wp + -8];\n          s += x1[x2 + -96] * w;\n          t += x1[x1Pos + 96] * w;\n          w = enwindow[wp + -7];\n          s += x1[x2 + -32] * w;\n          t += x1[x1Pos + 32] * w;\n          w = enwindow[wp + -6];\n          s += x1[x2 + 32] * w;\n          t += x1[x1Pos + -32] * w;\n          w = enwindow[wp + -5];\n          s += x1[x2 + 96] * w;\n          t += x1[x1Pos + -96] * w;\n          w = enwindow[wp + -4];\n          s += x1[x2 + 160] * w;\n          t += x1[x1Pos + -160] * w;\n          w = enwindow[wp + -3];\n          s += x1[x2 + 224] * w;\n          t += x1[x1Pos + -224] * w;\n          w = enwindow[wp + -2];\n          s += x1[x1Pos + -256] * w;\n          t -= x1[x2 + 256] * w;\n          w = enwindow[wp + -1];\n          s += x1[x1Pos + -192] * w;\n          t -= x1[x2 + 192] * w;\n          w = enwindow[wp + 0];\n          s += x1[x1Pos + -128] * w;\n          t -= x1[x2 + 128] * w;\n          w = enwindow[wp + 1];\n          s += x1[x1Pos + -64] * w;\n          t -= x1[x2 + 64] * w;\n          w = enwindow[wp + 2];\n          s += x1[x1Pos + 0] * w;\n          t -= x1[x2 + 0] * w;\n          w = enwindow[wp + 3];\n          s += x1[x1Pos + 64] * w;\n          t -= x1[x2 + -64] * w;\n          w = enwindow[wp + 4];\n          s += x1[x1Pos + 128] * w;\n          t -= x1[x2 + -128] * w;\n          w = enwindow[wp + 5];\n          s += x1[x1Pos + 192] * w;\n          t -= x1[x2 + -192] * w; /*\r\n                                  * this multiplyer could be removed, but it needs more 256 FLOAT\r\n                                  * data. thinking about the data cache performance, I think we\r\n                                  * should not use such a huge table. tt 2000/Oct/25\r\n                                  */\n          s *= enwindow[wp + 6];\n          w = t - s;\n          a[30 + i * 2] = t + s;\n          a[31 + i * 2] = enwindow[wp + 7] * w;\n          wp += 18;\n          x1Pos--;\n          x2++;\n        }\n        {\n          var s, t, u, v;\n          t = x1[x1Pos + -16] * enwindow[wp + -10];\n          s = x1[x1Pos + -32] * enwindow[wp + -2];\n          t += (x1[x1Pos + -48] - x1[x1Pos + 16]) * enwindow[wp + -9];\n          s += x1[x1Pos + -96] * enwindow[wp + -1];\n          t += (x1[x1Pos + -80] + x1[x1Pos + 48]) * enwindow[wp + -8];\n          s += x1[x1Pos + -160] * enwindow[wp + 0];\n          t += (x1[x1Pos + -112] - x1[x1Pos + 80]) * enwindow[wp + -7];\n          s += x1[x1Pos + -224] * enwindow[wp + 1];\n          t += (x1[x1Pos + -144] + x1[x1Pos + 112]) * enwindow[wp + -6];\n          s -= x1[x1Pos + 32] * enwindow[wp + 2];\n          t += (x1[x1Pos + -176] - x1[x1Pos + 144]) * enwindow[wp + -5];\n          s -= x1[x1Pos + 96] * enwindow[wp + 3];\n          t += (x1[x1Pos + -208] + x1[x1Pos + 176]) * enwindow[wp + -4];\n          s -= x1[x1Pos + 160] * enwindow[wp + 4];\n          t += (x1[x1Pos + -240] - x1[x1Pos + 208]) * enwindow[wp + -3];\n          s -= x1[x1Pos + 224];\n          u = s - t;\n          v = s + t;\n          t = a[14];\n          s = a[15] - t;\n          a[31] = v + t; /* A0 */\n          a[30] = u + s; /* A1 */\n          a[15] = u - s; /* A2 */\n          a[14] = v - t; /* A3 */\n        }\n        {\n          var xr;\n          xr = a[28] - a[0];\n          a[0] += a[28];\n          a[28] = xr * enwindow[wp + -2 * 18 + 7];\n          xr = a[29] - a[1];\n          a[1] += a[29];\n          a[29] = xr * enwindow[wp + -2 * 18 + 7];\n          xr = a[26] - a[2];\n          a[2] += a[26];\n          a[26] = xr * enwindow[wp + -4 * 18 + 7];\n          xr = a[27] - a[3];\n          a[3] += a[27];\n          a[27] = xr * enwindow[wp + -4 * 18 + 7];\n          xr = a[24] - a[4];\n          a[4] += a[24];\n          a[24] = xr * enwindow[wp + -6 * 18 + 7];\n          xr = a[25] - a[5];\n          a[5] += a[25];\n          a[25] = xr * enwindow[wp + -6 * 18 + 7];\n          xr = a[22] - a[6];\n          a[6] += a[22];\n          a[22] = xr * Util.SQRT2;\n          xr = a[23] - a[7];\n          a[7] += a[23];\n          a[23] = xr * Util.SQRT2 - a[7];\n          a[7] -= a[6];\n          a[22] -= a[7];\n          a[23] -= a[22];\n          xr = a[6];\n          a[6] = a[31] - xr;\n          a[31] = a[31] + xr;\n          xr = a[7];\n          a[7] = a[30] - xr;\n          a[30] = a[30] + xr;\n          xr = a[22];\n          a[22] = a[15] - xr;\n          a[15] = a[15] + xr;\n          xr = a[23];\n          a[23] = a[14] - xr;\n          a[14] = a[14] + xr;\n          xr = a[20] - a[8];\n          a[8] += a[20];\n          a[20] = xr * enwindow[wp + -10 * 18 + 7];\n          xr = a[21] - a[9];\n          a[9] += a[21];\n          a[21] = xr * enwindow[wp + -10 * 18 + 7];\n          xr = a[18] - a[10];\n          a[10] += a[18];\n          a[18] = xr * enwindow[wp + -12 * 18 + 7];\n          xr = a[19] - a[11];\n          a[11] += a[19];\n          a[19] = xr * enwindow[wp + -12 * 18 + 7];\n          xr = a[16] - a[12];\n          a[12] += a[16];\n          a[16] = xr * enwindow[wp + -14 * 18 + 7];\n          xr = a[17] - a[13];\n          a[13] += a[17];\n          a[17] = xr * enwindow[wp + -14 * 18 + 7];\n          xr = -a[20] + a[24];\n          a[20] += a[24];\n          a[24] = xr * enwindow[wp + -12 * 18 + 7];\n          xr = -a[21] + a[25];\n          a[21] += a[25];\n          a[25] = xr * enwindow[wp + -12 * 18 + 7];\n          xr = a[4] - a[8];\n          a[4] += a[8];\n          a[8] = xr * enwindow[wp + -12 * 18 + 7];\n          xr = a[5] - a[9];\n          a[5] += a[9];\n          a[9] = xr * enwindow[wp + -12 * 18 + 7];\n          xr = a[0] - a[12];\n          a[0] += a[12];\n          a[12] = xr * enwindow[wp + -4 * 18 + 7];\n          xr = a[1] - a[13];\n          a[1] += a[13];\n          a[13] = xr * enwindow[wp + -4 * 18 + 7];\n          xr = a[16] - a[28];\n          a[16] += a[28];\n          a[28] = xr * enwindow[wp + -4 * 18 + 7];\n          xr = -a[17] + a[29];\n          a[17] += a[29];\n          a[29] = xr * enwindow[wp + -4 * 18 + 7];\n          xr = Util.SQRT2 * (a[2] - a[10]);\n          a[2] += a[10];\n          a[10] = xr;\n          xr = Util.SQRT2 * (a[3] - a[11]);\n          a[3] += a[11];\n          a[11] = xr;\n          xr = Util.SQRT2 * (-a[18] + a[26]);\n          a[18] += a[26];\n          a[26] = xr - a[18];\n          xr = Util.SQRT2 * (-a[19] + a[27]);\n          a[19] += a[27];\n          a[27] = xr - a[19];\n          xr = a[2];\n          a[19] -= a[3];\n          a[3] -= xr;\n          a[2] = a[31] - xr;\n          a[31] += xr;\n          xr = a[3];\n          a[11] -= a[19];\n          a[18] -= xr;\n          a[3] = a[30] - xr;\n          a[30] += xr;\n          xr = a[18];\n          a[27] -= a[11];\n          a[19] -= xr;\n          a[18] = a[15] - xr;\n          a[15] += xr;\n          xr = a[19];\n          a[10] -= xr;\n          a[19] = a[14] - xr;\n          a[14] += xr;\n          xr = a[10];\n          a[11] -= xr;\n          a[10] = a[23] - xr;\n          a[23] += xr;\n          xr = a[11];\n          a[26] -= xr;\n          a[11] = a[22] - xr;\n          a[22] += xr;\n          xr = a[26];\n          a[27] -= xr;\n          a[26] = a[7] - xr;\n          a[7] += xr;\n          xr = a[27];\n          a[27] = a[6] - xr;\n          a[6] += xr;\n          xr = Util.SQRT2 * (a[0] - a[4]);\n          a[0] += a[4];\n          a[4] = xr;\n          xr = Util.SQRT2 * (a[1] - a[5]);\n          a[1] += a[5];\n          a[5] = xr;\n          xr = Util.SQRT2 * (a[16] - a[20]);\n          a[16] += a[20];\n          a[20] = xr;\n          xr = Util.SQRT2 * (a[17] - a[21]);\n          a[17] += a[21];\n          a[21] = xr;\n          xr = -Util.SQRT2 * (a[8] - a[12]);\n          a[8] += a[12];\n          a[12] = xr - a[8];\n          xr = -Util.SQRT2 * (a[9] - a[13]);\n          a[9] += a[13];\n          a[13] = xr - a[9];\n          xr = -Util.SQRT2 * (a[25] - a[29]);\n          a[25] += a[29];\n          a[29] = xr - a[25];\n          xr = -Util.SQRT2 * (a[24] + a[28]);\n          a[24] -= a[28];\n          a[28] = xr - a[24];\n          xr = a[24] - a[16];\n          a[24] = xr;\n          xr = a[20] - xr;\n          a[20] = xr;\n          xr = a[28] - xr;\n          a[28] = xr;\n          xr = a[25] - a[17];\n          a[25] = xr;\n          xr = a[21] - xr;\n          a[21] = xr;\n          xr = a[29] - xr;\n          a[29] = xr;\n          xr = a[17] - a[1];\n          a[17] = xr;\n          xr = a[9] - xr;\n          a[9] = xr;\n          xr = a[25] - xr;\n          a[25] = xr;\n          xr = a[5] - xr;\n          a[5] = xr;\n          xr = a[21] - xr;\n          a[21] = xr;\n          xr = a[13] - xr;\n          a[13] = xr;\n          xr = a[29] - xr;\n          a[29] = xr;\n          xr = a[1] - a[0];\n          a[1] = xr;\n          xr = a[16] - xr;\n          a[16] = xr;\n          xr = a[17] - xr;\n          a[17] = xr;\n          xr = a[8] - xr;\n          a[8] = xr;\n          xr = a[9] - xr;\n          a[9] = xr;\n          xr = a[24] - xr;\n          a[24] = xr;\n          xr = a[25] - xr;\n          a[25] = xr;\n          xr = a[4] - xr;\n          a[4] = xr;\n          xr = a[5] - xr;\n          a[5] = xr;\n          xr = a[20] - xr;\n          a[20] = xr;\n          xr = a[21] - xr;\n          a[21] = xr;\n          xr = a[12] - xr;\n          a[12] = xr;\n          xr = a[13] - xr;\n          a[13] = xr;\n          xr = a[28] - xr;\n          a[28] = xr;\n          xr = a[29] - xr;\n          a[29] = xr;\n          xr = a[0];\n          a[0] += a[31];\n          a[31] -= xr;\n          xr = a[1];\n          a[1] += a[30];\n          a[30] -= xr;\n          xr = a[16];\n          a[16] += a[15];\n          a[15] -= xr;\n          xr = a[17];\n          a[17] += a[14];\n          a[14] -= xr;\n          xr = a[8];\n          a[8] += a[23];\n          a[23] -= xr;\n          xr = a[9];\n          a[9] += a[22];\n          a[22] -= xr;\n          xr = a[24];\n          a[24] += a[7];\n          a[7] -= xr;\n          xr = a[25];\n          a[25] += a[6];\n          a[6] -= xr;\n          xr = a[4];\n          a[4] += a[27];\n          a[27] -= xr;\n          xr = a[5];\n          a[5] += a[26];\n          a[26] -= xr;\n          xr = a[20];\n          a[20] += a[11];\n          a[11] -= xr;\n          xr = a[21];\n          a[21] += a[10];\n          a[10] -= xr;\n          xr = a[12];\n          a[12] += a[19];\n          a[19] -= xr;\n          xr = a[13];\n          a[13] += a[18];\n          a[18] -= xr;\n          xr = a[28];\n          a[28] += a[3];\n          a[3] -= xr;\n          xr = a[29];\n          a[29] += a[2];\n          a[2] -= xr;\n        }\n      } /**\r\n        * Function: Calculation of the MDCT In the case of long blocks (type 0,1,3)\r\n        * there are 36 coefficents in the time domain and 18 in the frequency\r\n        * domain.<BR>\r\n        * In the case of short blocks (type 2) there are 3 transformations with\r\n        * short length. This leads to 12 coefficents in the time and 6 in the\r\n        * frequency domain. In this case the results are stored side by side in the\r\n        * vector out[].\r\n        *\r\n        * New layer3\r\n        */\n      function mdct_short(inout, inoutPos) {\n        for (var l = 0; l < 3; l++) {\n          var tc0, tc1, tc2, ts0, ts1, ts2;\n          ts0 = inout[inoutPos + 2 * 3] * win[Encoder.SHORT_TYPE][0] - inout[inoutPos + 5 * 3];\n          tc0 = inout[inoutPos + 0 * 3] * win[Encoder.SHORT_TYPE][2] - inout[inoutPos + 3 * 3];\n          tc1 = ts0 + tc0;\n          tc2 = ts0 - tc0;\n          ts0 = inout[inoutPos + 5 * 3] * win[Encoder.SHORT_TYPE][0] + inout[inoutPos + 2 * 3];\n          tc0 = inout[inoutPos + 3 * 3] * win[Encoder.SHORT_TYPE][2] + inout[inoutPos + 0 * 3];\n          ts1 = ts0 + tc0;\n          ts2 = -ts0 + tc0;\n          tc0 = (inout[inoutPos + 1 * 3] * win[Encoder.SHORT_TYPE][1] - inout[inoutPos + 4 * 3]) * 2.069978111953089e-11; /*\r\n                                                                                                                          * tritab_s [ 1 ]\r\n                                                                                                                          */\n          ts0 = (inout[inoutPos + 4 * 3] * win[Encoder.SHORT_TYPE][1] + inout[inoutPos + 1 * 3]) * 2.069978111953089e-11; /*\r\n                                                                                                                          * tritab_s [ 1 ]\r\n                                                                                                                          */\n          inout[inoutPos + 3 * 0] = tc1 * 1.907525191737280e-11 + tc0; /*\r\n                                                                       * tritab_s[ 2 ]\r\n                                                                       */\n          inout[inoutPos + 3 * 5] = -ts1 * 1.907525191737280e-11 + ts0; /*\r\n                                                                        * tritab_s[0 ]\r\n                                                                        */\n          tc2 = tc2 * 0.86602540378443870761 * 1.907525191737281e-11; /*\r\n                                                                      * tritab_s[ 2]\r\n                                                                      */\n          ts1 = ts1 * 0.5 * 1.907525191737281e-11 + ts0;\n          inout[inoutPos + 3 * 1] = tc2 - ts1;\n          inout[inoutPos + 3 * 2] = tc2 + ts1;\n          tc1 = tc1 * 0.5 * 1.907525191737281e-11 - tc0;\n          ts2 = ts2 * 0.86602540378443870761 * 1.907525191737281e-11; /*\r\n                                                                      * tritab_s[ 0]\r\n                                                                      */\n          inout[inoutPos + 3 * 3] = tc1 + ts2;\n          inout[inoutPos + 3 * 4] = tc1 - ts2;\n          inoutPos++;\n        }\n      }\n      function mdct_long(out, outPos, _in) {\n        var ct, st;\n        {\n          var tc1, tc2, tc3, tc4, ts5, ts6, ts7, ts8; /* 1,2, 5,6, 9,10, 13,14, 17 */\n          tc1 = _in[17] - _in[9];\n          tc3 = _in[15] - _in[11];\n          tc4 = _in[14] - _in[12];\n          ts5 = _in[0] + _in[8];\n          ts6 = _in[1] + _in[7];\n          ts7 = _in[2] + _in[6];\n          ts8 = _in[3] + _in[5];\n          out[outPos + 17] = ts5 + ts7 - ts8 - (ts6 - _in[4]);\n          st = (ts5 + ts7 - ts8) * cx[12 + 7] + (ts6 - _in[4]);\n          ct = (tc1 - tc3 - tc4) * cx[12 + 6];\n          out[outPos + 5] = ct + st;\n          out[outPos + 6] = ct - st;\n          tc2 = (_in[16] - _in[10]) * cx[12 + 6];\n          ts6 = ts6 * cx[12 + 7] + _in[4];\n          ct = tc1 * cx[12 + 0] + tc2 + tc3 * cx[12 + 1] + tc4 * cx[12 + 2];\n          st = -ts5 * cx[12 + 4] + ts6 - ts7 * cx[12 + 5] + ts8 * cx[12 + 3];\n          out[outPos + 1] = ct + st;\n          out[outPos + 2] = ct - st;\n          ct = tc1 * cx[12 + 1] - tc2 - tc3 * cx[12 + 2] + tc4 * cx[12 + 0];\n          st = -ts5 * cx[12 + 5] + ts6 - ts7 * cx[12 + 3] + ts8 * cx[12 + 4];\n          out[outPos + 9] = ct + st;\n          out[outPos + 10] = ct - st;\n          ct = tc1 * cx[12 + 2] - tc2 + tc3 * cx[12 + 0] - tc4 * cx[12 + 1];\n          st = ts5 * cx[12 + 3] - ts6 + ts7 * cx[12 + 4] - ts8 * cx[12 + 5];\n          out[outPos + 13] = ct + st;\n          out[outPos + 14] = ct - st;\n        }\n        {\n          var ts1, ts2, ts3, ts4, tc5, tc6, tc7, tc8;\n          ts1 = _in[8] - _in[0];\n          ts3 = _in[6] - _in[2];\n          ts4 = _in[5] - _in[3];\n          tc5 = _in[17] + _in[9];\n          tc6 = _in[16] + _in[10];\n          tc7 = _in[15] + _in[11];\n          tc8 = _in[14] + _in[12];\n          out[outPos + 0] = tc5 + tc7 + tc8 + (tc6 + _in[13]);\n          ct = (tc5 + tc7 + tc8) * cx[12 + 7] - (tc6 + _in[13]);\n          st = (ts1 - ts3 + ts4) * cx[12 + 6];\n          out[outPos + 11] = ct + st;\n          out[outPos + 12] = ct - st;\n          ts2 = (_in[7] - _in[1]) * cx[12 + 6];\n          tc6 = _in[13] - tc6 * cx[12 + 7];\n          ct = tc5 * cx[12 + 3] - tc6 + tc7 * cx[12 + 4] + tc8 * cx[12 + 5];\n          st = ts1 * cx[12 + 2] + ts2 + ts3 * cx[12 + 0] + ts4 * cx[12 + 1];\n          out[outPos + 3] = ct + st;\n          out[outPos + 4] = ct - st;\n          ct = -tc5 * cx[12 + 5] + tc6 - tc7 * cx[12 + 3] - tc8 * cx[12 + 4];\n          st = ts1 * cx[12 + 1] + ts2 - ts3 * cx[12 + 2] - ts4 * cx[12 + 0];\n          out[outPos + 7] = ct + st;\n          out[outPos + 8] = ct - st;\n          ct = -tc5 * cx[12 + 4] + tc6 - tc7 * cx[12 + 5] - tc8 * cx[12 + 3];\n          st = ts1 * cx[12 + 0] - ts2 + ts3 * cx[12 + 1] - ts4 * cx[12 + 2];\n          out[outPos + 15] = ct + st;\n          out[outPos + 16] = ct - st;\n        }\n      }\n      this.mdct_sub48 = function (gfc, w0, w1) {\n        var wk = w0;\n        var wkPos = 286; /* thinking cache performance, ch->gr loop is better than gr->ch loop */\n        for (var ch = 0; ch < gfc.channels_out; ch++) {\n          for (var gr = 0; gr < gfc.mode_gr; gr++) {\n            var band;\n            var gi = gfc.l3_side.tt[gr][ch];\n            var mdct_enc = gi.xr;\n            var mdct_encPos = 0;\n            var samp = gfc.sb_sample[ch][1 - gr];\n            var sampPos = 0;\n            for (var k = 0; k < 18 / 2; k++) {\n              window_subband(wk, wkPos, samp[sampPos]);\n              window_subband(wk, wkPos + 32, samp[sampPos + 1]);\n              sampPos += 2;\n              wkPos += 64; /*\r\n                           * Compensate for inversion in the analysis filter\r\n                           */\n              for (band = 1; band < 32; band += 2) {\n                samp[sampPos - 1][band] *= -1;\n              }\n            } /*\r\n              * Perform imdct of 18 previous subband samples + 18 current\r\n              * subband samples\r\n              */\n            for (band = 0; band < 32; band++, mdct_encPos += 18) {\n              var type = gi.block_type;\n              var band0 = gfc.sb_sample[ch][gr];\n              var band1 = gfc.sb_sample[ch][1 - gr];\n              if (gi.mixed_block_flag != 0 && band < 2) type = 0;\n              if (gfc.amp_filter[band] < 1e-12) {\n                Arrays.fill(mdct_enc, mdct_encPos + 0, mdct_encPos + 18, 0);\n              } else {\n                if (gfc.amp_filter[band] < 1.0) {\n                  for (var k = 0; k < 18; k++) {\n                    band1[k][order[band]] *= gfc.amp_filter[band];\n                  }\n                }\n                if (type == Encoder.SHORT_TYPE) {\n                  for (var k = -NS / 4; k < 0; k++) {\n                    var w = win[Encoder.SHORT_TYPE][k + 3];\n                    mdct_enc[mdct_encPos + k * 3 + 9] = band0[9 + k][order[band]] * w - band0[8 - k][order[band]];\n                    mdct_enc[mdct_encPos + k * 3 + 18] = band0[14 - k][order[band]] * w + band0[15 + k][order[band]];\n                    mdct_enc[mdct_encPos + k * 3 + 10] = band0[15 + k][order[band]] * w - band0[14 - k][order[band]];\n                    mdct_enc[mdct_encPos + k * 3 + 19] = band1[2 - k][order[band]] * w + band1[3 + k][order[band]];\n                    mdct_enc[mdct_encPos + k * 3 + 11] = band1[3 + k][order[band]] * w - band1[2 - k][order[band]];\n                    mdct_enc[mdct_encPos + k * 3 + 20] = band1[8 - k][order[band]] * w + band1[9 + k][order[band]];\n                  }\n                  mdct_short(mdct_enc, mdct_encPos);\n                } else {\n                  var work = new_float(18);\n                  for (var k = -NL / 4; k < 0; k++) {\n                    var a, b;\n                    a = win[type][k + 27] * band1[k + 9][order[band]] + win[type][k + 36] * band1[8 - k][order[band]];\n                    b = win[type][k + 9] * band0[k + 9][order[band]] - win[type][k + 18] * band0[8 - k][order[band]];\n                    work[k + 9] = a - b * tantab_l[3 + k + 9];\n                    work[k + 18] = a * tantab_l[3 + k + 9] + b;\n                  }\n                  mdct_long(mdct_enc, mdct_encPos, work);\n                }\n              } /*\r\n                * Perform aliasing reduction butterfly\r\n                */\n              if (type != Encoder.SHORT_TYPE && band != 0) {\n                for (var k = 7; k >= 0; --k) {\n                  var bu, bd;\n                  bu = mdct_enc[mdct_encPos + k] * ca[20 + k] + mdct_enc[mdct_encPos + -1 - k] * cs[28 + k];\n                  bd = mdct_enc[mdct_encPos + k] * cs[28 + k] - mdct_enc[mdct_encPos + -1 - k] * ca[20 + k];\n                  mdct_enc[mdct_encPos + -1 - k] = bu;\n                  mdct_enc[mdct_encPos + k] = bd;\n                }\n              }\n            }\n          }\n          wk = w1;\n          wkPos = 286;\n          if (gfc.mode_gr == 1) {\n            for (var i = 0; i < 18; i++) {\n              System.arraycopy(gfc.sb_sample[ch][1][i], 0, gfc.sb_sample[ch][0][i], 0, 32);\n            }\n          }\n        }\n      };\n    } //package mp3;\n    function III_psy_ratio() {\n      this.thm = new III_psy_xmin();\n      this.en = new III_psy_xmin();\n    } /**\r\n      * ENCDELAY The encoder delay.\r\n      *\r\n      * Minimum allowed is MDCTDELAY (see below)\r\n      *\r\n      * The first 96 samples will be attenuated, so using a value less than 96\r\n      * will result in corrupt data for the first 96-ENCDELAY samples.\r\n      *\r\n      * suggested: 576 set to 1160 to sync with FhG.\r\n      */\n    Encoder.ENCDELAY = 576; /**\r\n                            * make sure there is at least one complete frame after the last frame\r\n                            * containing real data\r\n                            *\r\n                            * Using a value of 288 would be sufficient for a a very sophisticated\r\n                            * decoder that can decode granule-by-granule instead of frame by frame. But\r\n                            * lets not assume this, and assume the decoder will not decode frame N\r\n                            * unless it also has data for frame N+1\r\n                            */\n    Encoder.POSTDELAY = 1152; /**\r\n                              * delay of the MDCT used in mdct.c original ISO routines had a delay of\r\n                              * 528! Takehiro's routines:\r\n                              */\n    Encoder.MDCTDELAY = 48;\n    Encoder.FFTOFFSET = 224 + Encoder.MDCTDELAY; /**\r\n                                                 * Most decoders, including the one we use, have a delay of 528 samples.\r\n                                                 */\n    Encoder.DECDELAY = 528; /**\r\n                            * number of subbands\r\n                            */\n    Encoder.SBLIMIT = 32; /**\r\n                          * parition bands bands\r\n                          */\n    Encoder.CBANDS = 64; /**\r\n                         * number of critical bands/scale factor bands where masking is computed\r\n                         */\n    Encoder.SBPSY_l = 21;\n    Encoder.SBPSY_s = 12; /**\r\n                          * total number of scalefactor bands encoded\r\n                          */\n    Encoder.SBMAX_l = 22;\n    Encoder.SBMAX_s = 13;\n    Encoder.PSFB21 = 6;\n    Encoder.PSFB12 = 6; /**\r\n                        * FFT sizes\r\n                        */\n    Encoder.BLKSIZE = 1024;\n    Encoder.HBLKSIZE = Encoder.BLKSIZE / 2 + 1;\n    Encoder.BLKSIZE_s = 256;\n    Encoder.HBLKSIZE_s = Encoder.BLKSIZE_s / 2 + 1;\n    Encoder.NORM_TYPE = 0;\n    Encoder.START_TYPE = 1;\n    Encoder.SHORT_TYPE = 2;\n    Encoder.STOP_TYPE = 3; /**\r\n                           * <PRE>\r\n                           * Mode Extention:\r\n                           * When we are in stereo mode, there are 4 possible methods to store these\r\n                           * two channels. The stereo modes -m? are using a subset of them.\r\n                           *\r\n                           *  -ms: MPG_MD_LR_LR\r\n                           *  -mj: MPG_MD_LR_LR and MPG_MD_MS_LR\r\n                           *  -mf: MPG_MD_MS_LR\r\n                           *  -mi: all\r\n                           * </PRE>\r\n                           */\n    Encoder.MPG_MD_LR_LR = 0;\n    Encoder.MPG_MD_LR_I = 1;\n    Encoder.MPG_MD_MS_LR = 2;\n    Encoder.MPG_MD_MS_I = 3;\n    Encoder.fircoef = [-0.0207887 * 5, -0.0378413 * 5, -0.0432472 * 5, -0.031183 * 5, 7.79609e-18 * 5, 0.0467745 * 5, 0.10091 * 5, 0.151365 * 5, 0.187098 * 5];\n    function Encoder() {\n      var FFTOFFSET = Encoder.FFTOFFSET;\n      var MPG_MD_MS_LR = Encoder.MPG_MD_MS_LR; //BitStream bs;\n      //PsyModel psy;\n      //VBRTag vbr;\n      //QuantizePVT qupvt;\n      var bs = null;\n      this.psy = null;\n      var psy = null;\n      var vbr = null;\n      var qupvt = null; //public final void setModules(BitStream bs, PsyModel psy, QuantizePVT qupvt,\n      //    VBRTag vbr) {\n      this.setModules = function (_bs, _psy, _qupvt, _vbr) {\n        bs = _bs;\n        this.psy = _psy;\n        psy = _psy;\n        vbr = _vbr;\n        qupvt = _qupvt;\n      };\n      var newMDCT = new NewMDCT(); /***********************************************************************\r\n                                   *\r\n                                   * encoder and decoder delays\r\n                                   *\r\n                                   ***********************************************************************/ /**\r\n                                                                                                            * <PRE>\r\n                                                                                                            * layer III enc->dec delay:  1056 (1057?)   (observed)\r\n                                                                                                            * layer  II enc->dec delay:   480  (481?)   (observed)\r\n                                                                                                            *\r\n                                                                                                            * polyphase 256-16             (dec or enc)        = 240\r\n                                                                                                            * mdct      256+32  (9*32)     (dec or enc)        = 288\r\n                                                                                                            * total:    512+16\r\n                                                                                                            *\r\n                                                                                                            * My guess is that delay of polyphase filterbank is actualy 240.5\r\n                                                                                                            * (there are technical reasons for this, see postings in mp3encoder).\r\n                                                                                                            * So total Encode+Decode delay = ENCDELAY + 528 + 1\r\n                                                                                                            * </PRE>\r\n                                                                                                            */ /**\r\n                                                                                                               * auto-adjust of ATH, useful for low volume Gabriel Bouvigne 3 feb 2001\r\n                                                                                                               *\r\n                                                                                                               * modifies some values in gfp.internal_flags.ATH (gfc.ATH)\r\n                                                                                                               */ //private void adjust_ATH(final LameInternalFlags gfc) {\n      function adjust_ATH(gfc) {\n        var gr2_max, max_pow;\n        if (gfc.ATH.useAdjust == 0) {\n          gfc.ATH.adjust = 1.0; /* no adjustment */\n          return;\n        } /* jd - 2001 mar 12, 27, jun 30 */ /* loudness based on equal loudness curve; */ /* use granule with maximum combined loudness */\n        max_pow = gfc.loudness_sq[0][0];\n        gr2_max = gfc.loudness_sq[1][0];\n        if (gfc.channels_out == 2) {\n          max_pow += gfc.loudness_sq[0][1];\n          gr2_max += gfc.loudness_sq[1][1];\n        } else {\n          max_pow += max_pow;\n          gr2_max += gr2_max;\n        }\n        if (gfc.mode_gr == 2) {\n          max_pow = Math.max(max_pow, gr2_max);\n        }\n        max_pow *= 0.5; /* max_pow approaches 1.0 for full band noise */ /* jd - 2001 mar 31, jun 30 */ /* user tuning of ATH adjustment region */\n        max_pow *= gfc.ATH.aaSensitivityP; /*\r\n                                           * adjust ATH depending on range of maximum value\r\n                                           */ /* jd - 2001 feb27, mar12,20, jun30, jul22 */ /* continuous curves based on approximation */ /* to GB's original values. */ /* For an increase in approximate loudness, */ /* set ATH adjust to adjust_limit immediately */ /* after a delay of one frame. */ /* For a loudness decrease, reduce ATH adjust */ /* towards adjust_limit gradually. */ /* max_pow is a loudness squared or a power. */\n        if (max_pow > 0.03125) {\n          /* ((1 - 0.000625)/ 31.98) from curve below */if (gfc.ATH.adjust >= 1.0) {\n            gfc.ATH.adjust = 1.0;\n          } else {\n            /* preceding frame has lower ATH adjust; */ /* ascend only to the preceding adjust_limit */ /* in case there is leading low volume */if (gfc.ATH.adjust < gfc.ATH.adjustLimit) {\n              gfc.ATH.adjust = gfc.ATH.adjustLimit;\n            }\n          }\n          gfc.ATH.adjustLimit = 1.0;\n        } else {\n          /* adjustment curve */ /* about 32 dB maximum adjust (0.000625) */var adj_lim_new = 31.98 * max_pow + 0.000625;\n          if (gfc.ATH.adjust >= adj_lim_new) {\n            /* descend gradually */gfc.ATH.adjust *= adj_lim_new * 0.075 + 0.925;\n            if (gfc.ATH.adjust < adj_lim_new) {\n              /* stop descent */gfc.ATH.adjust = adj_lim_new;\n            }\n          } else {\n            /* ascend */if (gfc.ATH.adjustLimit >= adj_lim_new) {\n              gfc.ATH.adjust = adj_lim_new;\n            } else {\n              /* preceding frame has lower ATH adjust; */ /* ascend only to the preceding adjust_limit */if (gfc.ATH.adjust < gfc.ATH.adjustLimit) {\n                gfc.ATH.adjust = gfc.ATH.adjustLimit;\n              }\n            }\n          }\n          gfc.ATH.adjustLimit = adj_lim_new;\n        }\n      } /**\r\n        * <PRE>\r\n        *  some simple statistics\r\n        *\r\n        *  bitrate index 0: free bitrate . not allowed in VBR mode\r\n        *  : bitrates, kbps depending on MPEG version\r\n        *  bitrate index 15: forbidden\r\n        *\r\n        *  mode_ext:\r\n        *  0:  LR\r\n        *  1:  LR-i\r\n        *  2:  MS\r\n        *  3:  MS-i\r\n        * </PRE>\r\n        */\n      function updateStats(gfc) {\n        var gr, ch; /* count bitrate indices */\n        gfc.bitrate_stereoMode_Hist[gfc.bitrate_index][4]++;\n        gfc.bitrate_stereoMode_Hist[15][4]++; /* count 'em for every mode extension in case of 2 channel encoding */\n        if (gfc.channels_out == 2) {\n          gfc.bitrate_stereoMode_Hist[gfc.bitrate_index][gfc.mode_ext]++;\n          gfc.bitrate_stereoMode_Hist[15][gfc.mode_ext]++;\n        }\n        for (gr = 0; gr < gfc.mode_gr; ++gr) {\n          for (ch = 0; ch < gfc.channels_out; ++ch) {\n            var bt = gfc.l3_side.tt[gr][ch].block_type | 0;\n            if (gfc.l3_side.tt[gr][ch].mixed_block_flag != 0) bt = 4;\n            gfc.bitrate_blockType_Hist[gfc.bitrate_index][bt]++;\n            gfc.bitrate_blockType_Hist[gfc.bitrate_index][5]++;\n            gfc.bitrate_blockType_Hist[15][bt]++;\n            gfc.bitrate_blockType_Hist[15][5]++;\n          }\n        }\n      }\n      function lame_encode_frame_init(gfp, inbuf) {\n        var gfc = gfp.internal_flags;\n        var ch, gr;\n        if (gfc.lame_encode_frame_init == 0) {\n          /* prime the MDCT/polyphase filterbank with a short block */var i, j;\n          var primebuff0 = new_float(286 + 1152 + 576);\n          var primebuff1 = new_float(286 + 1152 + 576);\n          gfc.lame_encode_frame_init = 1;\n          for (i = 0, j = 0; i < 286 + 576 * (1 + gfc.mode_gr); ++i) {\n            if (i < 576 * gfc.mode_gr) {\n              primebuff0[i] = 0;\n              if (gfc.channels_out == 2) primebuff1[i] = 0;\n            } else {\n              primebuff0[i] = inbuf[0][j];\n              if (gfc.channels_out == 2) primebuff1[i] = inbuf[1][j];\n              ++j;\n            }\n          } /* polyphase filtering / mdct */\n          for (gr = 0; gr < gfc.mode_gr; gr++) {\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n              gfc.l3_side.tt[gr][ch].block_type = Encoder.SHORT_TYPE;\n            }\n          }\n          newMDCT.mdct_sub48(gfc, primebuff0, primebuff1); /* check FFT will not use a negative starting offset */ /* check if we have enough data for FFT */ /* check if we have enough data for polyphase filterbank */\n        }\n      } /**\r\n        * <PRE>\r\n        * encodeframe()           Layer 3\r\n        *\r\n        * encode a single frame\r\n        *\r\n        *\r\n        *    lame_encode_frame()\r\n        *\r\n        *\r\n        *                           gr 0            gr 1\r\n        *    inbuf:           |--------------|--------------|--------------|\r\n        *\r\n        *\r\n        *    Polyphase (18 windows, each shifted 32)\r\n        *    gr 0:\r\n        *    window1          <----512---.\r\n        *    window18                 <----512---.\r\n        *\r\n        *    gr 1:\r\n        *    window1                         <----512---.\r\n        *    window18                                <----512---.\r\n        *\r\n        *\r\n        *\r\n        *    MDCT output:  |--------------|--------------|--------------|\r\n        *\r\n        *    FFT's                    <---------1024---------.\r\n        *                                             <---------1024-------.\r\n        *\r\n        *\r\n        *\r\n        *        inbuf = buffer of PCM data size=MP3 framesize\r\n        *        encoder acts on inbuf[ch][0], but output is delayed by MDCTDELAY\r\n        *        so the MDCT coefficints are from inbuf[ch][-MDCTDELAY]\r\n        *\r\n        *        psy-model FFT has a 1 granule delay, so we feed it data for the\r\n        *        next granule.\r\n        *        FFT is centered over granule:  224+576+224\r\n        *        So FFT starts at:   576-224-MDCTDELAY\r\n        *\r\n        *        MPEG2:  FFT ends at:  BLKSIZE+576-224-MDCTDELAY      (1328)\r\n        *        MPEG1:  FFT ends at:  BLKSIZE+2*576-224-MDCTDELAY    (1904)\r\n        *\r\n        *        MPEG2:  polyphase first window:  [0..511]\r\n        *                          18th window:   [544..1055]          (1056)\r\n        *        MPEG1:            36th window:   [1120..1631]         (1632)\r\n        *                data needed:  512+framesize-32\r\n        *\r\n        *        A close look newmdct.c shows that the polyphase filterbank\r\n        *        only uses data from [0..510] for each window.  Perhaps because the window\r\n        *        used by the filterbank is zero for the last point, so Takehiro's\r\n        *        code doesn't bother to compute with it.\r\n        *\r\n        *        FFT starts at 576-224-MDCTDELAY (304)  = 576-FFTOFFSET\r\n        *\r\n        * </PRE>\r\n        */\n      this.lame_encode_mp3_frame = function (gfp, inbuf_l, inbuf_r, mp3buf, mp3bufPos, mp3buf_size) {\n        var mp3count;\n        var masking_LR = new_array_n([2, 2]); /*\r\n                                              * LR masking &\r\n                                              * energy\r\n                                              */\n        masking_LR[0][0] = new III_psy_ratio();\n        masking_LR[0][1] = new III_psy_ratio();\n        masking_LR[1][0] = new III_psy_ratio();\n        masking_LR[1][1] = new III_psy_ratio();\n        var masking_MS = new_array_n([2, 2]); /* MS masking & energy */\n        masking_MS[0][0] = new III_psy_ratio();\n        masking_MS[0][1] = new III_psy_ratio();\n        masking_MS[1][0] = new III_psy_ratio();\n        masking_MS[1][1] = new III_psy_ratio(); //III_psy_ratio masking[][];\n        var masking; /* pointer to selected maskings */\n        var inbuf = [null, null];\n        var gfc = gfp.internal_flags;\n        var tot_ener = new_float_n([2, 4]);\n        var ms_ener_ratio = [.5, .5];\n        var pe = [[0., 0.], [0., 0.]];\n        var pe_MS = [[0., 0.], [0., 0.]]; //float[][] pe_use;\n        var pe_use;\n        var ch, gr;\n        inbuf[0] = inbuf_l;\n        inbuf[1] = inbuf_r;\n        if (gfc.lame_encode_frame_init == 0) {\n          /* first run? */lame_encode_frame_init(gfp, inbuf);\n        } /********************** padding *****************************/ /**\r\n                                                                         * <PRE>\r\n                                                                         * padding method as described in\r\n                                                                         * \"MPEG-Layer3 / Bitstream Syntax and Decoding\"\r\n                                                                         * by Martin Sieler, Ralph Sperschneider\r\n                                                                         *\r\n                                                                         * note: there is no padding for the very first frame\r\n                                                                         *\r\n                                                                         * Robert Hegemann 2000-06-22\r\n                                                                         * </PRE>\r\n                                                                         */\n        gfc.padding = 0;\n        if ((gfc.slot_lag -= gfc.frac_SpF) < 0) {\n          gfc.slot_lag += gfp.out_samplerate;\n          gfc.padding = 1;\n        } /****************************************\r\n          * Stage 1: psychoacoustic model *\r\n          ****************************************/\n        if (gfc.psymodel != 0) {\n          /*\r\n          * psychoacoustic model psy model has a 1 granule (576) delay that\r\n          * we must compensate for (mt 6/99).\r\n          */\n          var ret;\n          var bufp = [null, null]; /* address of beginning of left & right granule */\n          var bufpPos = 0; /* address of beginning of left & right granule */\n          var blocktype = new_int(2);\n          for (gr = 0; gr < gfc.mode_gr; gr++) {\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n              bufp[ch] = inbuf[ch];\n              bufpPos = 576 + gr * 576 - Encoder.FFTOFFSET;\n            }\n            if (gfp.VBR == VbrMode.vbr_mtrh || gfp.VBR == VbrMode.vbr_mt) {\n              ret = psy.L3psycho_anal_vbr(gfp, bufp, bufpPos, gr, masking_LR, masking_MS, pe[gr], pe_MS[gr], tot_ener[gr], blocktype);\n            } else {\n              ret = psy.L3psycho_anal_ns(gfp, bufp, bufpPos, gr, masking_LR, masking_MS, pe[gr], pe_MS[gr], tot_ener[gr], blocktype);\n            }\n            if (ret != 0) return -4;\n            if (gfp.mode == MPEGMode.JOINT_STEREO) {\n              ms_ener_ratio[gr] = tot_ener[gr][2] + tot_ener[gr][3];\n              if (ms_ener_ratio[gr] > 0) ms_ener_ratio[gr] = tot_ener[gr][3] / ms_ener_ratio[gr];\n            } /* block type flags */\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n              var cod_info = gfc.l3_side.tt[gr][ch];\n              cod_info.block_type = blocktype[ch];\n              cod_info.mixed_block_flag = 0;\n            }\n          }\n        } else {\n          /* no psy model */for (gr = 0; gr < gfc.mode_gr; gr++) {\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n              gfc.l3_side.tt[gr][ch].block_type = Encoder.NORM_TYPE;\n              gfc.l3_side.tt[gr][ch].mixed_block_flag = 0;\n              pe_MS[gr][ch] = pe[gr][ch] = 700;\n            }\n          }\n        } /* auto-adjust of ATH, useful for low volume */\n        adjust_ATH(gfc); /****************************************\r\n                         * Stage 2: MDCT *\r\n                         ****************************************/ /* polyphase filtering / mdct */\n        newMDCT.mdct_sub48(gfc, inbuf[0], inbuf[1]); /****************************************\r\n                                                     * Stage 3: MS/LR decision *\r\n                                                     ****************************************/ /* Here will be selected MS or LR coding of the 2 stereo channels */\n        gfc.mode_ext = Encoder.MPG_MD_LR_LR;\n        if (gfp.force_ms) {\n          gfc.mode_ext = Encoder.MPG_MD_MS_LR;\n        } else if (gfp.mode == MPEGMode.JOINT_STEREO) {\n          /*\r\n          * ms_ratio = is scaled, for historical reasons, to look like a\r\n          * ratio of side_channel / total. 0 = signal is 100% mono .5 = L & R\r\n          * uncorrelated\r\n          */ /**\r\n             * <PRE>\r\n             * [0] and [1] are the results for the two granules in MPEG-1,\r\n             * in MPEG-2 it's only a faked averaging of the same value\r\n             * _prev is the value of the last granule of the previous frame\r\n             * _next is the value of the first granule of the next frame\r\n             * </PRE>\r\n             */\n          var sum_pe_MS = 0.;\n          var sum_pe_LR = 0.;\n          for (gr = 0; gr < gfc.mode_gr; gr++) {\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n              sum_pe_MS += pe_MS[gr][ch];\n              sum_pe_LR += pe[gr][ch];\n            }\n          } /* based on PE: M/S coding would not use much more bits than L/R */\n          if (sum_pe_MS <= 1.00 * sum_pe_LR) {\n            var gi0 = gfc.l3_side.tt[0];\n            var gi1 = gfc.l3_side.tt[gfc.mode_gr - 1];\n            if (gi0[0].block_type == gi0[1].block_type && gi1[0].block_type == gi1[1].block_type) {\n              gfc.mode_ext = Encoder.MPG_MD_MS_LR;\n            }\n          }\n        } /* bit and noise allocation */\n        if (gfc.mode_ext == MPG_MD_MS_LR) {\n          masking = masking_MS; /* use MS masking */\n          pe_use = pe_MS;\n        } else {\n          masking = masking_LR; /* use LR masking */\n          pe_use = pe;\n        } /* copy data for MP3 frame analyzer */\n        if (gfp.analysis && gfc.pinfo != null) {\n          for (gr = 0; gr < gfc.mode_gr; gr++) {\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n              gfc.pinfo.ms_ratio[gr] = gfc.ms_ratio[gr];\n              gfc.pinfo.ms_ener_ratio[gr] = ms_ener_ratio[gr];\n              gfc.pinfo.blocktype[gr][ch] = gfc.l3_side.tt[gr][ch].block_type;\n              gfc.pinfo.pe[gr][ch] = pe_use[gr][ch];\n              System.arraycopy(gfc.l3_side.tt[gr][ch].xr, 0, gfc.pinfo.xr[gr][ch], 0, 576); /*\r\n                                                                                            * in psymodel, LR and MS data was stored in pinfo. switch\r\n                                                                                            * to MS data:\r\n                                                                                            */\n              if (gfc.mode_ext == MPG_MD_MS_LR) {\n                gfc.pinfo.ers[gr][ch] = gfc.pinfo.ers[gr][ch + 2];\n                System.arraycopy(gfc.pinfo.energy[gr][ch + 2], 0, gfc.pinfo.energy[gr][ch], 0, gfc.pinfo.energy[gr][ch].length);\n              }\n            }\n          }\n        } /****************************************\r\n          * Stage 4: quantization loop *\r\n          ****************************************/\n        if (gfp.VBR == VbrMode.vbr_off || gfp.VBR == VbrMode.vbr_abr) {\n          var i;\n          var f;\n          for (i = 0; i < 18; i++) {\n            gfc.nsPsy.pefirbuf[i] = gfc.nsPsy.pefirbuf[i + 1];\n          }\n          f = 0.0;\n          for (gr = 0; gr < gfc.mode_gr; gr++) {\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n              f += pe_use[gr][ch];\n            }\n          }\n          gfc.nsPsy.pefirbuf[18] = f;\n          f = gfc.nsPsy.pefirbuf[9];\n          for (i = 0; i < 9; i++) {\n            f += (gfc.nsPsy.pefirbuf[i] + gfc.nsPsy.pefirbuf[18 - i]) * Encoder.fircoef[i];\n          }\n          f = 670 * 5 * gfc.mode_gr * gfc.channels_out / f;\n          for (gr = 0; gr < gfc.mode_gr; gr++) {\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n              pe_use[gr][ch] *= f;\n            }\n          }\n        }\n        gfc.iteration_loop.iteration_loop(gfp, pe_use, ms_ener_ratio, masking); /****************************************\r\n                                                                                * Stage 5: bitstream formatting *\r\n                                                                                ****************************************/ /* write the frame to the bitstream */\n        bs.format_bitstream(gfp); /* copy mp3 bit buffer into array */\n        mp3count = bs.copy_buffer(gfc, mp3buf, mp3bufPos, mp3buf_size, 1);\n        if (gfp.bWriteVbrTag) vbr.addVbrFrame(gfp);\n        if (gfp.analysis && gfc.pinfo != null) {\n          for (ch = 0; ch < gfc.channels_out; ch++) {\n            var j;\n            for (j = 0; j < FFTOFFSET; j++) {\n              gfc.pinfo.pcmdata[ch][j] = gfc.pinfo.pcmdata[ch][j + gfp.framesize];\n            }\n            for (j = FFTOFFSET; j < 1600; j++) {\n              gfc.pinfo.pcmdata[ch][j] = inbuf[ch][j - FFTOFFSET];\n            }\n          }\n          qupvt.set_frame_pinfo(gfp, masking);\n        }\n        updateStats(gfc);\n        return mp3count;\n      };\n    } //package mp3;\n    function VBRSeekInfo() {\n      /**\r\n      * What we have seen so far.\r\n      */\n      this.sum = 0; /**\r\n                    * How many frames we have seen in this chunk.\r\n                    */\n      this.seen = 0; /**\r\n                     * How many frames we want to collect into one chunk.\r\n                     */\n      this.want = 0; /**\r\n                     * Actual position in our bag.\r\n                     */\n      this.pos = 0; /**\r\n                    * Size of our bag.\r\n                    */\n      this.size = 0; /**\r\n                     * Pointer to our bag.\r\n                     */\n      this.bag = null;\n      this.nVbrNumFrames = 0;\n      this.nBytesWritten = 0; /* VBR tag data */\n      this.TotalFrameSize = 0;\n    }\n    function IIISideInfo() {\n      this.tt = [[null, null], [null, null]];\n      this.main_data_begin = 0;\n      this.private_bits = 0;\n      this.resvDrain_pre = 0;\n      this.resvDrain_post = 0;\n      this.scfsi = [new_int(4), new_int(4)];\n      for (var gr = 0; gr < 2; gr++) {\n        for (var ch = 0; ch < 2; ch++) {\n          this.tt[gr][ch] = new GrInfo();\n        }\n      }\n    }\n    function III_psy_xmin() {\n      this.l = new_float(Encoder.SBMAX_l);\n      this.s = new_float_n([Encoder.SBMAX_s, 3]);\n      var self = this;\n      this.assign = function (iii_psy_xmin) {\n        System.arraycopy(iii_psy_xmin.l, 0, self.l, 0, Encoder.SBMAX_l);\n        for (var i = 0; i < Encoder.SBMAX_s; i++) {\n          for (var j = 0; j < 3; j++) {\n            self.s[i][j] = iii_psy_xmin.s[i][j];\n          }\n        }\n      };\n    } //package mp3;\n    /**\r\n             * Variables used for --nspsytune\r\n             *\r\n             * @author Ken\r\n             *\r\n             */\n    function NsPsy() {\n      this.last_en_subshort = new_float_n([4, 9]);\n      this.lastAttacks = new_int(4);\n      this.pefirbuf = new_float(19);\n      this.longfact = new_float(Encoder.SBMAX_l);\n      this.shortfact = new_float(Encoder.SBMAX_s); /**\r\n                                                   * short block tuning\r\n                                                   */\n      this.attackthre = 0.;\n      this.attackthre_s = 0.;\n    }\n    LameInternalFlags.MFSIZE = 3 * 1152 + Encoder.ENCDELAY - Encoder.MDCTDELAY;\n    LameInternalFlags.MAX_HEADER_BUF = 256;\n    LameInternalFlags.MAX_BITS_PER_CHANNEL = 4095;\n    LameInternalFlags.MAX_BITS_PER_GRANULE = 7680;\n    LameInternalFlags.BPC = 320;\n    function LameInternalFlags() {\n      var MAX_HEADER_LEN = 40; /********************************************************************\r\n                               * internal variables NOT set by calling program, and should not be *\r\n                               * modified by the calling program *\r\n                               ********************************************************************/ /**\r\n                                                                                                     * Some remarks to the Class_ID field: The Class ID is an Identifier for a\r\n                                                                                                     * pointer to this struct. It is very unlikely that a pointer to\r\n                                                                                                     * lame_global_flags has the same 32 bits in it's structure (large and other\r\n                                                                                                     * special properties, for instance prime).\r\n                                                                                                     *\r\n                                                                                                     * To test that the structure is right and initialized, use: if ( gfc .\r\n                                                                                                     * Class_ID == LAME_ID ) ... Other remark: If you set a flag to 0 for uninit\r\n                                                                                                     * data and 1 for init data, the right test should be \"if (flag == 1)\" and\r\n                                                                                                     * NOT \"if (flag)\". Unintended modification of this element will be\r\n                                                                                                     * otherwise misinterpreted as an init.\r\n                                                                                                     */\n      this.Class_ID = 0;\n      this.lame_encode_frame_init = 0;\n      this.iteration_init_init = 0;\n      this.fill_buffer_resample_init = 0; //public float mfbuf[][] = new float[2][MFSIZE];\n      this.mfbuf = new_float_n([2, LameInternalFlags.MFSIZE]); /**\r\n                                                               * granules per frame\r\n                                                               */\n      this.mode_gr = 0; /**\r\n                        * number of channels in the input data stream (PCM or decoded PCM)\r\n                        */\n      this.channels_in = 0; /**\r\n                            * number of channels in the output data stream (not used for decoding)\r\n                            */\n      this.channels_out = 0; /**\r\n                             * input_samp_rate/output_samp_rate\r\n                             */ //public double resample_ratio;\n      this.resample_ratio = 0.;\n      this.mf_samples_to_encode = 0;\n      this.mf_size = 0; /**\r\n                        * min bitrate index\r\n                        */\n      this.VBR_min_bitrate = 0; /**\r\n                                * max bitrate index\r\n                                */\n      this.VBR_max_bitrate = 0;\n      this.bitrate_index = 0;\n      this.samplerate_index = 0;\n      this.mode_ext = 0; /* lowpass and highpass filter control */ /**\r\n                                                                   * normalized frequency bounds of passband\r\n                                                                   */\n      this.lowpass1 = 0.;\n      this.lowpass2 = 0.; /**\r\n                          * normalized frequency bounds of passband\r\n                          */\n      this.highpass1 = 0.;\n      this.highpass2 = 0.; /**\r\n                           * 0 = none 1 = ISO AAC model 2 = allow scalefac_select=1\r\n                           */\n      this.noise_shaping = 0; /**\r\n                              * 0 = ISO model: amplify all distorted bands<BR>\r\n                              * 1 = amplify within 50% of max (on db scale)<BR>\r\n                              * 2 = amplify only most distorted band<BR>\r\n                              * 3 = method 1 and refine with method 2<BR>\r\n                              */\n      this.noise_shaping_amp = 0; /**\r\n                                  * 0 = no substep<BR>\r\n                                  * 1 = use substep shaping at last step(VBR only)<BR>\r\n                                  * (not implemented yet)<BR>\r\n                                  * 2 = use substep inside loop<BR>\r\n                                  * 3 = use substep inside loop and last step<BR>\r\n                                  */\n      this.substep_shaping = 0; /**\r\n                                * 1 = gpsycho. 0 = none\r\n                                */\n      this.psymodel = 0; /**\r\n                         * 0 = stop at over=0, all scalefacs amplified or<BR>\r\n                         * a scalefac has reached max value<BR>\r\n                         * 1 = stop when all scalefacs amplified or a scalefac has reached max value<BR>\r\n                         * 2 = stop when all scalefacs amplified\r\n                         */\n      this.noise_shaping_stop = 0; /**\r\n                                   * 0 = no, 1 = yes\r\n                                   */\n      this.subblock_gain = 0; /**\r\n                              * 0 = no. 1=outside loop 2=inside loop(slow)\r\n                              */\n      this.use_best_huffman = 0; /**\r\n                                 * 0 = stop early after 0 distortion found. 1 = full search\r\n                                 */\n      this.full_outer_loop = 0; //public IIISideInfo l3_side = new IIISideInfo();\n      this.l3_side = new IIISideInfo();\n      this.ms_ratio = new_float(2); /* used for padding */ /**\r\n                                                           * padding for the current frame?\r\n                                                           */\n      this.padding = 0;\n      this.frac_SpF = 0;\n      this.slot_lag = 0; /**\r\n                         * optional ID3 tags\r\n                         */ //public ID3TagSpec tag_spec;\n      this.tag_spec = null;\n      this.nMusicCRC = 0; /* variables used by Quantize */ //public int OldValue[] = new int[2];\n      this.OldValue = new_int(2); //public int CurrentStep[] = new int[2];\n      this.CurrentStep = new_int(2);\n      this.masking_lower = 0.; //public int bv_scf[] = new int[576];\n      this.bv_scf = new_int(576); //public int pseudohalf[] = new int[L3Side.SFBMAX];\n      this.pseudohalf = new_int(L3Side.SFBMAX); /**\r\n                                                * will be set in lame_init_params\r\n                                                */\n      this.sfb21_extra = false; /* BPC = maximum number of filter convolution windows to precompute */ //public float[][] inbuf_old = new float[2][];\n      this.inbuf_old = new Array(2); //public float[][] blackfilt = new float[2 * BPC + 1][];\n      this.blackfilt = new Array(2 * LameInternalFlags.BPC + 1); //public double itime[] = new double[2];\n      this.itime = new_double(2);\n      this.sideinfo_len = 0; /* variables for newmdct.c */ //public float sb_sample[][][][] = new float[2][2][18][Encoder.SBLIMIT];\n      this.sb_sample = new_float_n([2, 2, 18, Encoder.SBLIMIT]);\n      this.amp_filter = new_float(32); /* variables for BitStream */ /**\r\n                                                                     * <PRE>\r\n                                                                     * mpeg1: buffer=511 bytes  smallest frame: 96-38(sideinfo)=58\r\n                                                                     * max number of frames in reservoir:  8\r\n                                                                     * mpeg2: buffer=255 bytes.  smallest frame: 24-23bytes=1\r\n                                                                     * with VBR, if you are encoding all silence, it is possible to\r\n                                                                     * have 8kbs/24khz frames with 1byte of data each, which means we need\r\n                                                                     * to buffer up to 255 headers!\r\n                                                                     * </PRE>\r\n                                                                     */ /**\r\n                                                                        * also, max_header_buf has to be a power of two\r\n                                                                        */ /**\r\n                                                                           * max size of header is 38\r\n                                                                           */\n      function Header() {\n        this.write_timing = 0;\n        this.ptr = 0; //public byte buf[] = new byte[MAX_HEADER_LEN];\n        this.buf = new_byte(MAX_HEADER_LEN);\n      }\n      this.header = new Array(LameInternalFlags.MAX_HEADER_BUF);\n      this.h_ptr = 0;\n      this.w_ptr = 0;\n      this.ancillary_flag = 0; /* variables for Reservoir */ /**\r\n                                                             * in bits\r\n                                                             */\n      this.ResvSize = 0; /**\r\n                         * in bits\r\n                         */\n      this.ResvMax = 0; //public ScaleFac scalefac_band = new ScaleFac();\n      this.scalefac_band = new ScaleFac(); /* daa from PsyModel */ /* The static variables \"r\", \"phi_sav\", \"new\", \"old\" and \"oldest\" have */ /* to be remembered for the unpredictability measure. For \"r\" and */ /* \"phi_sav\", the first index from the left is the channel select and */ /* the second index is the \"age\" of the data. */\n      this.minval_l = new_float(Encoder.CBANDS);\n      this.minval_s = new_float(Encoder.CBANDS);\n      this.nb_1 = new_float_n([4, Encoder.CBANDS]);\n      this.nb_2 = new_float_n([4, Encoder.CBANDS]);\n      this.nb_s1 = new_float_n([4, Encoder.CBANDS]);\n      this.nb_s2 = new_float_n([4, Encoder.CBANDS]);\n      this.s3_ss = null;\n      this.s3_ll = null;\n      this.decay = 0.; //public III_psy_xmin[] thm = new III_psy_xmin[4];\n      //public III_psy_xmin[] en = new III_psy_xmin[4];\n      this.thm = new Array(4);\n      this.en = new Array(4); /**\r\n                              * fft and energy calculation\r\n                              */\n      this.tot_ener = new_float(4); /* loudness calculation (for adaptive threshold of hearing) */ /**\r\n                                                                                                   * loudness^2 approx. per granule and channel\r\n                                                                                                   */\n      this.loudness_sq = new_float_n([2, 2]); /**\r\n                                              * account for granule delay of L3psycho_anal\r\n                                              */\n      this.loudness_sq_save = new_float(2); /**\r\n                                            * Scale Factor Bands\r\n                                            */\n      this.mld_l = new_float(Encoder.SBMAX_l);\n      this.mld_s = new_float(Encoder.SBMAX_s);\n      this.bm_l = new_int(Encoder.SBMAX_l);\n      this.bo_l = new_int(Encoder.SBMAX_l);\n      this.bm_s = new_int(Encoder.SBMAX_s);\n      this.bo_s = new_int(Encoder.SBMAX_s);\n      this.npart_l = 0;\n      this.npart_s = 0;\n      this.s3ind = new_int_n([Encoder.CBANDS, 2]);\n      this.s3ind_s = new_int_n([Encoder.CBANDS, 2]);\n      this.numlines_s = new_int(Encoder.CBANDS);\n      this.numlines_l = new_int(Encoder.CBANDS);\n      this.rnumlines_l = new_float(Encoder.CBANDS);\n      this.mld_cb_l = new_float(Encoder.CBANDS);\n      this.mld_cb_s = new_float(Encoder.CBANDS);\n      this.numlines_s_num1 = 0;\n      this.numlines_l_num1 = 0; /* ratios */\n      this.pe = new_float(4);\n      this.ms_ratio_s_old = 0.;\n      this.ms_ratio_l_old = 0.;\n      this.ms_ener_ratio_old = 0.; /**\r\n                                   * block type\r\n                                   */\n      this.blocktype_old = new_int(2); /**\r\n                                       * variables used for --nspsytune\r\n                                       */\n      this.nsPsy = new NsPsy(); /**\r\n                                * used for Xing VBR header\r\n                                */\n      this.VBR_seek_table = new VBRSeekInfo(); /**\r\n                                               * all ATH related stuff\r\n                                               */ //public ATH ATH;\n      this.ATH = null;\n      this.PSY = null;\n      this.nogap_total = 0;\n      this.nogap_current = 0; /* ReplayGain */\n      this.decode_on_the_fly = true;\n      this.findReplayGain = true;\n      this.findPeakSample = true;\n      this.PeakSample = 0.;\n      this.RadioGain = 0;\n      this.AudiophileGain = 0; //public ReplayGain rgdata;\n      this.rgdata = null; /**\r\n                          * gain change required for preventing clipping\r\n                          */\n      this.noclipGainChange = 0; /**\r\n                                 * user-specified scale factor required for preventing clipping\r\n                                 */\n      this.noclipScale = 0.; /* simple statistics */\n      this.bitrate_stereoMode_Hist = new_int_n([16, 4 + 1]); /**\r\n                                                             * norm/start/short/stop/mixed(short)/sum\r\n                                                             */\n      this.bitrate_blockType_Hist = new_int_n([16, 4 + 1 + 1]); //public PlottingData pinfo;\n      //public MPGLib.mpstr_tag hip;\n      this.pinfo = null;\n      this.hip = null;\n      this.in_buffer_nsamples = 0; //public float[] in_buffer_0;\n      //public float[] in_buffer_1;\n      this.in_buffer_0 = null;\n      this.in_buffer_1 = null; //public IIterationLoop iteration_loop;\n      this.iteration_loop = null;\n      for (var i = 0; i < this.en.length; i++) {\n        this.en[i] = new III_psy_xmin();\n      }\n      for (var i = 0; i < this.thm.length; i++) {\n        this.thm[i] = new III_psy_xmin();\n      }\n      for (var i = 0; i < this.header.length; i++) {\n        this.header[i] = new Header();\n      }\n    }\n    function FFT() {\n      var window = new_float(Encoder.BLKSIZE);\n      var window_s = new_float(Encoder.BLKSIZE_s / 2);\n      var costab = [9.238795325112867e-01, 3.826834323650898e-01, 9.951847266721969e-01, 9.801714032956060e-02, 9.996988186962042e-01, 2.454122852291229e-02, 9.999811752826011e-01, 6.135884649154475e-03];\n      function fht(fz, fzPos, n) {\n        var tri = 0;\n        var k4;\n        var fi;\n        var gi;\n        n <<= 1; /* to get BLKSIZE, because of 3DNow! ASM routine */\n        var fn = fzPos + n;\n        k4 = 4;\n        do {\n          var s1, c1;\n          var i, k1, k2, k3, kx;\n          kx = k4 >> 1;\n          k1 = k4;\n          k2 = k4 << 1;\n          k3 = k2 + k1;\n          k4 = k2 << 1;\n          fi = fzPos;\n          gi = fi + kx;\n          do {\n            var f0, f1, f2, f3;\n            f1 = fz[fi + 0] - fz[fi + k1];\n            f0 = fz[fi + 0] + fz[fi + k1];\n            f3 = fz[fi + k2] - fz[fi + k3];\n            f2 = fz[fi + k2] + fz[fi + k3];\n            fz[fi + k2] = f0 - f2;\n            fz[fi + 0] = f0 + f2;\n            fz[fi + k3] = f1 - f3;\n            fz[fi + k1] = f1 + f3;\n            f1 = fz[gi + 0] - fz[gi + k1];\n            f0 = fz[gi + 0] + fz[gi + k1];\n            f3 = Util.SQRT2 * fz[gi + k3];\n            f2 = Util.SQRT2 * fz[gi + k2];\n            fz[gi + k2] = f0 - f2;\n            fz[gi + 0] = f0 + f2;\n            fz[gi + k3] = f1 - f3;\n            fz[gi + k1] = f1 + f3;\n            gi += k4;\n            fi += k4;\n          } while (fi < fn);\n          c1 = costab[tri + 0];\n          s1 = costab[tri + 1];\n          for (i = 1; i < kx; i++) {\n            var c2, s2;\n            c2 = 1 - 2 * s1 * s1;\n            s2 = 2 * s1 * c1;\n            fi = fzPos + i;\n            gi = fzPos + k1 - i;\n            do {\n              var a, b, g0, f0, f1, g1, f2, g2, f3, g3;\n              b = s2 * fz[fi + k1] - c2 * fz[gi + k1];\n              a = c2 * fz[fi + k1] + s2 * fz[gi + k1];\n              f1 = fz[fi + 0] - a;\n              f0 = fz[fi + 0] + a;\n              g1 = fz[gi + 0] - b;\n              g0 = fz[gi + 0] + b;\n              b = s2 * fz[fi + k3] - c2 * fz[gi + k3];\n              a = c2 * fz[fi + k3] + s2 * fz[gi + k3];\n              f3 = fz[fi + k2] - a;\n              f2 = fz[fi + k2] + a;\n              g3 = fz[gi + k2] - b;\n              g2 = fz[gi + k2] + b;\n              b = s1 * f2 - c1 * g3;\n              a = c1 * f2 + s1 * g3;\n              fz[fi + k2] = f0 - a;\n              fz[fi + 0] = f0 + a;\n              fz[gi + k3] = g1 - b;\n              fz[gi + k1] = g1 + b;\n              b = c1 * g2 - s1 * f3;\n              a = s1 * g2 + c1 * f3;\n              fz[gi + k2] = g0 - a;\n              fz[gi + 0] = g0 + a;\n              fz[fi + k3] = f1 - b;\n              fz[fi + k1] = f1 + b;\n              gi += k4;\n              fi += k4;\n            } while (fi < fn);\n            c2 = c1;\n            c1 = c2 * costab[tri + 0] - s1 * costab[tri + 1];\n            s1 = c2 * costab[tri + 1] + s1 * costab[tri + 0];\n          }\n          tri += 2;\n        } while (k4 < n);\n      }\n      var rv_tbl = [0x00, 0x80, 0x40, 0xc0, 0x20, 0xa0, 0x60, 0xe0, 0x10, 0x90, 0x50, 0xd0, 0x30, 0xb0, 0x70, 0xf0, 0x08, 0x88, 0x48, 0xc8, 0x28, 0xa8, 0x68, 0xe8, 0x18, 0x98, 0x58, 0xd8, 0x38, 0xb8, 0x78, 0xf8, 0x04, 0x84, 0x44, 0xc4, 0x24, 0xa4, 0x64, 0xe4, 0x14, 0x94, 0x54, 0xd4, 0x34, 0xb4, 0x74, 0xf4, 0x0c, 0x8c, 0x4c, 0xcc, 0x2c, 0xac, 0x6c, 0xec, 0x1c, 0x9c, 0x5c, 0xdc, 0x3c, 0xbc, 0x7c, 0xfc, 0x02, 0x82, 0x42, 0xc2, 0x22, 0xa2, 0x62, 0xe2, 0x12, 0x92, 0x52, 0xd2, 0x32, 0xb2, 0x72, 0xf2, 0x0a, 0x8a, 0x4a, 0xca, 0x2a, 0xaa, 0x6a, 0xea, 0x1a, 0x9a, 0x5a, 0xda, 0x3a, 0xba, 0x7a, 0xfa, 0x06, 0x86, 0x46, 0xc6, 0x26, 0xa6, 0x66, 0xe6, 0x16, 0x96, 0x56, 0xd6, 0x36, 0xb6, 0x76, 0xf6, 0x0e, 0x8e, 0x4e, 0xce, 0x2e, 0xae, 0x6e, 0xee, 0x1e, 0x9e, 0x5e, 0xde, 0x3e, 0xbe, 0x7e, 0xfe];\n      this.fft_short = function (gfc, x_real, chn, buffer, bufPos) {\n        for (var b = 0; b < 3; b++) {\n          var x = Encoder.BLKSIZE_s / 2;\n          var k = 0xffff & 576 / 3 * (b + 1);\n          var j = Encoder.BLKSIZE_s / 8 - 1;\n          do {\n            var f0, f1, f2, f3, w;\n            var i = rv_tbl[j << 2] & 0xff;\n            f0 = window_s[i] * buffer[chn][bufPos + i + k];\n            w = window_s[0x7f - i] * buffer[chn][bufPos + i + k + 0x80];\n            f1 = f0 - w;\n            f0 = f0 + w;\n            f2 = window_s[i + 0x40] * buffer[chn][bufPos + i + k + 0x40];\n            w = window_s[0x3f - i] * buffer[chn][bufPos + i + k + 0xc0];\n            f3 = f2 - w;\n            f2 = f2 + w;\n            x -= 4;\n            x_real[b][x + 0] = f0 + f2;\n            x_real[b][x + 2] = f0 - f2;\n            x_real[b][x + 1] = f1 + f3;\n            x_real[b][x + 3] = f1 - f3;\n            f0 = window_s[i + 0x01] * buffer[chn][bufPos + i + k + 0x01];\n            w = window_s[0x7e - i] * buffer[chn][bufPos + i + k + 0x81];\n            f1 = f0 - w;\n            f0 = f0 + w;\n            f2 = window_s[i + 0x41] * buffer[chn][bufPos + i + k + 0x41];\n            w = window_s[0x3e - i] * buffer[chn][bufPos + i + k + 0xc1];\n            f3 = f2 - w;\n            f2 = f2 + w;\n            x_real[b][x + Encoder.BLKSIZE_s / 2 + 0] = f0 + f2;\n            x_real[b][x + Encoder.BLKSIZE_s / 2 + 2] = f0 - f2;\n            x_real[b][x + Encoder.BLKSIZE_s / 2 + 1] = f1 + f3;\n            x_real[b][x + Encoder.BLKSIZE_s / 2 + 3] = f1 - f3;\n          } while (--j >= 0);\n          fht(x_real[b], x, Encoder.BLKSIZE_s / 2); /* BLKSIZE_s/2 because of 3DNow! ASM routine */ /* BLKSIZE/2 because of 3DNow! ASM routine */\n        }\n      };\n      this.fft_long = function (gfc, y, chn, buffer, bufPos) {\n        var jj = Encoder.BLKSIZE / 8 - 1;\n        var x = Encoder.BLKSIZE / 2;\n        do {\n          var f0, f1, f2, f3, w;\n          var i = rv_tbl[jj] & 0xff;\n          f0 = window[i] * buffer[chn][bufPos + i];\n          w = window[i + 0x200] * buffer[chn][bufPos + i + 0x200];\n          f1 = f0 - w;\n          f0 = f0 + w;\n          f2 = window[i + 0x100] * buffer[chn][bufPos + i + 0x100];\n          w = window[i + 0x300] * buffer[chn][bufPos + i + 0x300];\n          f3 = f2 - w;\n          f2 = f2 + w;\n          x -= 4;\n          y[x + 0] = f0 + f2;\n          y[x + 2] = f0 - f2;\n          y[x + 1] = f1 + f3;\n          y[x + 3] = f1 - f3;\n          f0 = window[i + 0x001] * buffer[chn][bufPos + i + 0x001];\n          w = window[i + 0x201] * buffer[chn][bufPos + i + 0x201];\n          f1 = f0 - w;\n          f0 = f0 + w;\n          f2 = window[i + 0x101] * buffer[chn][bufPos + i + 0x101];\n          w = window[i + 0x301] * buffer[chn][bufPos + i + 0x301];\n          f3 = f2 - w;\n          f2 = f2 + w;\n          y[x + Encoder.BLKSIZE / 2 + 0] = f0 + f2;\n          y[x + Encoder.BLKSIZE / 2 + 2] = f0 - f2;\n          y[x + Encoder.BLKSIZE / 2 + 1] = f1 + f3;\n          y[x + Encoder.BLKSIZE / 2 + 3] = f1 - f3;\n        } while (--jj >= 0);\n        fht(y, x, Encoder.BLKSIZE / 2); /* BLKSIZE/2 because of 3DNow! ASM routine */\n      };\n      this.init_fft = function (gfc) {\n        /* The type of window used here will make no real difference, but */ /*\r\n                                                                             * in the interest of merging nspsytune stuff - switch to blackman\r\n                                                                             * window\r\n                                                                             */for (var i = 0; i < Encoder.BLKSIZE; i++) {\n          /* blackman window */window[i] = 0.42 - 0.5 * Math.cos(2 * Math.PI * (i + .5) / Encoder.BLKSIZE) + 0.08 * Math.cos(4 * Math.PI * (i + .5) / Encoder.BLKSIZE);\n        }\n        for (var i = 0; i < Encoder.BLKSIZE_s / 2; i++) {\n          window_s[i] = 0.5 * (1.0 - Math.cos(2.0 * Math.PI * (i + 0.5) / Encoder.BLKSIZE_s));\n        }\n      };\n    } /*\r\n      *      psymodel.c\r\n      *\r\n      *      Copyright (c) 1999-2000 Mark Taylor\r\n      *      Copyright (c) 2001-2002 Naoki Shibata\r\n      *      Copyright (c) 2000-2003 Takehiro Tominaga\r\n      *      Copyright (c) 2000-2008 Robert Hegemann\r\n      *      Copyright (c) 2000-2005 Gabriel Bouvigne\r\n      *      Copyright (c) 2000-2005 Alexander Leidinger\r\n      *\r\n      * This library is free software; you can redistribute it and/or\r\n      * modify it under the terms of the GNU Lesser General Public\r\n      * License as published by the Free Software Foundation; either\r\n      * version 2 of the License, or (at your option) any later version.\r\n      *\r\n      * This library is distributed in the hope that it will be useful,\r\n      * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n      * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n      * Library General Public License for more details.\r\n      *\r\n      * You should have received a copy of the GNU Lesser General Public\r\n      * License along with this library; if not, write to the\r\n      * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\r\n      * Boston, MA 02111-1307, USA.\r\n      */ /* $Id: PsyModel.java,v 1.27 2011/05/24 20:48:06 kenchis Exp $ */ /*\r\n                                                                           PSYCHO ACOUSTICS\r\n                                                                           This routine computes the psycho acoustics, delayed by one granule.\r\n                                                                           Input: buffer of PCM data (1024 samples).\r\n                                                                           This window should be centered over the 576 sample granule window.\r\n                                                                           The routine will compute the psycho acoustics for\r\n                                                                           this granule, but return the psycho acoustics computed\r\n                                                                           for the *previous* granule.  This is because the block\r\n                                                                           type of the previous granule can only be determined\r\n                                                                           after we have computed the psycho acoustics for the following\r\n                                                                           granule.\r\n                                                                           Output:  maskings and energies for each scalefactor band.\r\n                                                                           block type, PE, and some correlation measures.\r\n                                                                           The PE is used by CBR modes to determine if extra bits\r\n                                                                           from the bit reservoir should be used.  The correlation\r\n                                                                           measures are used to determine mid/side or regular stereo.\r\n                                                                           */ /*\r\n                                                                              Notation:\r\n                                                                              barks:  a non-linear frequency scale.  Mapping from frequency to\r\n                                                                              barks is given by freq2bark()\r\n                                                                              scalefactor bands: The spectrum (frequencies) are broken into\r\n                                                                              SBMAX \"scalefactor bands\".  Thes bands\r\n                                                                              are determined by the MPEG ISO spec.  In\r\n                                                                              the noise shaping/quantization code, we allocate\r\n                                                                              bits among the partition bands to achieve the\r\n                                                                              best possible quality\r\n                                                                              partition bands:   The spectrum is also broken into about\r\n                                                                              64 \"partition bands\".  Each partition\r\n                                                                              band is about .34 barks wide.  There are about 2-5\r\n                                                                              partition bands for each scalefactor band.\r\n                                                                              LAME computes all psycho acoustic information for each partition\r\n                                                                              band.  Then at the end of the computations, this information\r\n                                                                              is mapped to scalefactor bands.  The energy in each scalefactor\r\n                                                                              band is taken as the sum of the energy in all partition bands\r\n                                                                              which overlap the scalefactor band.  The maskings can be computed\r\n                                                                              in the same way (and thus represent the average masking in that band)\r\n                                                                              or by taking the minmum value multiplied by the number of\r\n                                                                              partition bands used (which represents a minimum masking in that band).\r\n                                                                              */ /*\r\n                                                                                 The general outline is as follows:\r\n                                                                                 1. compute the energy in each partition band\r\n                                                                                 2. compute the tonality in each partition band\r\n                                                                                 3. compute the strength of each partion band \"masker\"\r\n                                                                                 4. compute the masking (via the spreading function applied to each masker)\r\n                                                                                 5. Modifications for mid/side masking.\r\n                                                                                 Each partition band is considiered a \"masker\".  The strength\r\n                                                                                 of the i'th masker in band j is given by:\r\n                                                                                 s3(bark(i)-bark(j))*strength(i)\r\n                                                                                 The strength of the masker is a function of the energy and tonality.\r\n                                                                                 The more tonal, the less masking.  LAME uses a simple linear formula\r\n                                                                                 (controlled by NMT and TMN) which says the strength is given by the\r\n                                                                                 energy divided by a linear function of the tonality.\r\n                                                                                 */ /*\r\n                                                                                    s3() is the \"spreading function\".  It is given by a formula\r\n                                                                                    determined via listening tests.\r\n                                                                                    The total masking in the j'th partition band is the sum over\r\n                                                                                    all maskings i.  It is thus given by the convolution of\r\n                                                                                    the strength with s3(), the \"spreading function.\"\r\n                                                                                    masking(j) = sum_over_i  s3(i-j)*strength(i)  = s3 o strength\r\n                                                                                    where \"o\" = convolution operator.  s3 is given by a formula determined\r\n                                                                                    via listening tests.  It is normalized so that s3 o 1 = 1.\r\n                                                                                    Note: instead of a simple convolution, LAME also has the\r\n                                                                                    option of using \"additive masking\"\r\n                                                                                    The most critical part is step 2, computing the tonality of each\r\n                                                                                    partition band.  LAME has two tonality estimators.  The first\r\n                                                                                    is based on the ISO spec, and measures how predictiable the\r\n                                                                                    signal is over time.  The more predictable, the more tonal.\r\n                                                                                    The second measure is based on looking at the spectrum of\r\n                                                                                    a single granule.  The more peaky the spectrum, the more\r\n                                                                                    tonal.  By most indications, the latter approach is better.\r\n                                                                                    Finally, in step 5, the maskings for the mid and side\r\n                                                                                    channel are possibly increased.  Under certain circumstances,\r\n                                                                                    noise in the mid & side channels is assumed to also\r\n                                                                                    be masked by strong maskers in the L or R channels.\r\n                                                                                      Other data computed by the psy-model:\r\n                                                                                    ms_ratio        side-channel / mid-channel masking ratio (for previous granule)\r\n                                                                                    ms_ratio_next   side-channel / mid-channel masking ratio for this granule\r\n                                                                                    percep_entropy[2]     L and R values (prev granule) of PE - A measure of how\r\n                                                                                    much pre-echo is in the previous granule\r\n                                                                                    percep_entropy_MS[2]  mid and side channel values (prev granule) of percep_entropy\r\n                                                                                    energy[4]             L,R,M,S energy in each channel, prev granule\r\n                                                                                    blocktype_d[2]        block type to use for previous granule\r\n                                                                                    */ //package mp3;\n    //import java.util.Arrays;\n    function PsyModel() {\n      var fft = new FFT();\n      var LOG10 = 2.30258509299404568402;\n      var rpelev = 2;\n      var rpelev2 = 16;\n      var rpelev_s = 2;\n      var rpelev2_s = 16; /* size of each partition band, in barks: */\n      var DELBARK = .34; /* tuned for output level (sensitive to energy scale) */\n      var VO_SCALE = 1. / (14752 * 14752) / (Encoder.BLKSIZE / 2);\n      var temporalmask_sustain_sec = 0.01;\n      var NS_PREECHO_ATT0 = 0.8;\n      var NS_PREECHO_ATT1 = 0.6;\n      var NS_PREECHO_ATT2 = 0.3;\n      var NS_MSFIX = 3.5;\n      var NSATTACKTHRE = 4.4;\n      var NSATTACKTHRE_S = 25;\n      var NSFIRLEN = 21; /* size of each partition band, in barks: */\n      var LN_TO_LOG10 = 0.2302585093;\n      function NON_LINEAR_SCALE_ENERGY(x) {\n        return x;\n      } /**\r\n        * <PRE>\r\n        *       L3psycho_anal.  Compute psycho acoustics.\r\n        *\r\n        *       Data returned to the calling program must be delayed by one\r\n        *       granule.\r\n        *\r\n        *       This is done in two places.\r\n        *       If we do not need to know the blocktype, the copying\r\n        *       can be done here at the top of the program: we copy the data for\r\n        *       the last granule (computed during the last call) before it is\r\n        *       overwritten with the new data.  It looks like this:\r\n        *\r\n        *       0. static psymodel_data\r\n        *       1. calling_program_data = psymodel_data\r\n        *       2. compute psymodel_data\r\n        *\r\n        *       For data which needs to know the blocktype, the copying must be\r\n        *       done at the end of this loop, and the old values must be saved:\r\n        *\r\n        *       0. static psymodel_data_old\r\n        *       1. compute psymodel_data\r\n        *       2. compute possible block type of this granule\r\n        *       3. compute final block type of previous granule based on #2.\r\n        *       4. calling_program_data = psymodel_data_old\r\n        *       5. psymodel_data_old = psymodel_data\r\n        *     psycho_loudness_approx\r\n        *       jd - 2001 mar 12\r\n        *    in:  energy   - BLKSIZE/2 elements of frequency magnitudes ^ 2\r\n        *         gfp      - uses out_samplerate, ATHtype (also needed for ATHformula)\r\n        *    returns: loudness^2 approximation, a positive value roughly tuned for a value\r\n        *             of 1.0 for signals near clipping.\r\n        *    notes:   When calibrated, feeding this function binary white noise at sample\r\n        *             values +32767 or -32768 should return values that approach 3.\r\n        *             ATHformula is used to approximate an equal loudness curve.\r\n        *    future:  Data indicates that the shape of the equal loudness curve varies\r\n        *             with intensity.  This function might be improved by using an equal\r\n        *             loudness curve shaped for typical playback levels (instead of the\r\n        *             ATH, that is shaped for the threshold).  A flexible realization might\r\n        *             simply bend the existing ATH curve to achieve the desired shape.\r\n        *             However, the potential gain may not be enough to justify an effort.\r\n        * </PRE>\r\n        */\n      function psycho_loudness_approx(energy, gfc) {\n        var loudness_power = 0.0; /* apply weights to power in freq. bands */\n        for (var i = 0; i < Encoder.BLKSIZE / 2; ++i) {\n          loudness_power += energy[i] * gfc.ATH.eql_w[i];\n        }\n        loudness_power *= VO_SCALE;\n        return loudness_power;\n      }\n      function compute_ffts(gfp, fftenergy, fftenergy_s, wsamp_l, wsamp_lPos, wsamp_s, wsamp_sPos, gr_out, chn, buffer, bufPos) {\n        var gfc = gfp.internal_flags;\n        if (chn < 2) {\n          fft.fft_long(gfc, wsamp_l[wsamp_lPos], chn, buffer, bufPos);\n          fft.fft_short(gfc, wsamp_s[wsamp_sPos], chn, buffer, bufPos);\n        } /* FFT data for mid and side channel is derived from L & R */else if (chn == 2) {\n          for (var j = Encoder.BLKSIZE - 1; j >= 0; --j) {\n            var l = wsamp_l[wsamp_lPos + 0][j];\n            var r = wsamp_l[wsamp_lPos + 1][j];\n            wsamp_l[wsamp_lPos + 0][j] = (l + r) * Util.SQRT2 * 0.5;\n            wsamp_l[wsamp_lPos + 1][j] = (l - r) * Util.SQRT2 * 0.5;\n          }\n          for (var b = 2; b >= 0; --b) {\n            for (var j = Encoder.BLKSIZE_s - 1; j >= 0; --j) {\n              var l = wsamp_s[wsamp_sPos + 0][b][j];\n              var r = wsamp_s[wsamp_sPos + 1][b][j];\n              wsamp_s[wsamp_sPos + 0][b][j] = (l + r) * Util.SQRT2 * 0.5;\n              wsamp_s[wsamp_sPos + 1][b][j] = (l - r) * Util.SQRT2 * 0.5;\n            }\n          }\n        } /*********************************************************************\r\n          * compute energies\r\n          *********************************************************************/\n        fftenergy[0] = NON_LINEAR_SCALE_ENERGY(wsamp_l[wsamp_lPos + 0][0]);\n        fftenergy[0] *= fftenergy[0];\n        for (var j = Encoder.BLKSIZE / 2 - 1; j >= 0; --j) {\n          var re = wsamp_l[wsamp_lPos + 0][Encoder.BLKSIZE / 2 - j];\n          var im = wsamp_l[wsamp_lPos + 0][Encoder.BLKSIZE / 2 + j];\n          fftenergy[Encoder.BLKSIZE / 2 - j] = NON_LINEAR_SCALE_ENERGY((re * re + im * im) * 0.5);\n        }\n        for (var b = 2; b >= 0; --b) {\n          fftenergy_s[b][0] = wsamp_s[wsamp_sPos + 0][b][0];\n          fftenergy_s[b][0] *= fftenergy_s[b][0];\n          for (var j = Encoder.BLKSIZE_s / 2 - 1; j >= 0; --j) {\n            var re = wsamp_s[wsamp_sPos + 0][b][Encoder.BLKSIZE_s / 2 - j];\n            var im = wsamp_s[wsamp_sPos + 0][b][Encoder.BLKSIZE_s / 2 + j];\n            fftenergy_s[b][Encoder.BLKSIZE_s / 2 - j] = NON_LINEAR_SCALE_ENERGY((re * re + im * im) * 0.5);\n          }\n        } /* total energy */\n        {\n          var totalenergy = 0.0;\n          for (var j = 11; j < Encoder.HBLKSIZE; j++) {\n            totalenergy += fftenergy[j];\n          }\n          gfc.tot_ener[chn] = totalenergy;\n        }\n        if (gfp.analysis) {\n          for (var j = 0; j < Encoder.HBLKSIZE; j++) {\n            gfc.pinfo.energy[gr_out][chn][j] = gfc.pinfo.energy_save[chn][j];\n            gfc.pinfo.energy_save[chn][j] = fftenergy[j];\n          }\n          gfc.pinfo.pe[gr_out][chn] = gfc.pe[chn];\n        } /*********************************************************************\r\n          * compute loudness approximation (used for ATH auto-level adjustment)\r\n          *********************************************************************/\n        if (gfp.athaa_loudapprox == 2 && chn < 2) {\n          // no loudness for mid/side ch\n          gfc.loudness_sq[gr_out][chn] = gfc.loudness_sq_save[chn];\n          gfc.loudness_sq_save[chn] = psycho_loudness_approx(fftenergy, gfc);\n        }\n      } /* mask_add optimization */ /* init the limit values used to avoid computing log in mask_add when it is not necessary */ /**\r\n                                                                                                                                 * <PRE>\r\n                                                                                                                                 *  For example, with i = 10*log10(m2/m1)/10*16         (= log10(m2/m1)*16)\r\n                                                                                                                                 *\r\n                                                                                                                                 * abs(i)>8 is equivalent (as i is an integer) to\r\n                                                                                                                                 * abs(i)>=9\r\n                                                                                                                                 * i>=9 || i<=-9\r\n                                                                                                                                 * equivalent to (as i is the biggest integer smaller than log10(m2/m1)*16\r\n                                                                                                                                 * or the smallest integer bigger than log10(m2/m1)*16 depending on the sign of log10(m2/m1)*16)\r\n                                                                                                                                 * log10(m2/m1)>=9/16 || log10(m2/m1)<=-9/16\r\n                                                                                                                                 * exp10 is strictly increasing thus this is equivalent to\r\n                                                                                                                                 * m2/m1 >= 10^(9/16) || m2/m1<=10^(-9/16) which are comparisons to constants\r\n                                                                                                                                 * </PRE>\r\n                                                                                                                                 */ /**\r\n                                                                                                                                    * as in if(i>8)\r\n                                                                                                                                    */\n      var I1LIMIT = 8; /**\r\n                       * as in if(i>24) . changed 23\r\n                       */\n      var I2LIMIT = 23; /**\r\n                        * as in if(m<15)\r\n                        */\n      var MLIMIT = 15;\n      var ma_max_i1;\n      var ma_max_i2;\n      var ma_max_m; /**\r\n                    * This is the masking table:<BR>\r\n                    * According to tonality, values are going from 0dB (TMN) to 9.3dB (NMT).<BR>\r\n                    * After additive masking computation, 8dB are added, so final values are\r\n                    * going from 8dB to 17.3dB\r\n                    *\r\n                    * pow(10, -0.0..-0.6)\r\n                    */\n      var tab = [1.0, 0.79433, 0.63096, 0.63096, 0.63096, 0.63096, 0.63096, 0.25119, 0.11749];\n      function init_mask_add_max_values() {\n        ma_max_i1 = Math.pow(10, (I1LIMIT + 1) / 16.0);\n        ma_max_i2 = Math.pow(10, (I2LIMIT + 1) / 16.0);\n        ma_max_m = Math.pow(10, MLIMIT / 10.0);\n      }\n      var table1 = [3.3246 * 3.3246, 3.23837 * 3.23837, 3.15437 * 3.15437, 3.00412 * 3.00412, 2.86103 * 2.86103, 2.65407 * 2.65407, 2.46209 * 2.46209, 2.284 * 2.284, 2.11879 * 2.11879, 1.96552 * 1.96552, 1.82335 * 1.82335, 1.69146 * 1.69146, 1.56911 * 1.56911, 1.46658 * 1.46658, 1.37074 * 1.37074, 1.31036 * 1.31036, 1.25264 * 1.25264, 1.20648 * 1.20648, 1.16203 * 1.16203, 1.12765 * 1.12765, 1.09428 * 1.09428, 1.0659 * 1.0659, 1.03826 * 1.03826, 1.01895 * 1.01895, 1];\n      var table2 = [1.33352 * 1.33352, 1.35879 * 1.35879, 1.38454 * 1.38454, 1.39497 * 1.39497, 1.40548 * 1.40548, 1.3537 * 1.3537, 1.30382 * 1.30382, 1.22321 * 1.22321, 1.14758 * 1.14758, 1];\n      var table3 = [2.35364 * 2.35364, 2.29259 * 2.29259, 2.23313 * 2.23313, 2.12675 * 2.12675, 2.02545 * 2.02545, 1.87894 * 1.87894, 1.74303 * 1.74303, 1.61695 * 1.61695, 1.49999 * 1.49999, 1.39148 * 1.39148, 1.29083 * 1.29083, 1.19746 * 1.19746, 1.11084 * 1.11084, 1.03826 * 1.03826]; /**\r\n                                                                                                                                                                                                                                                                                               * addition of simultaneous masking Naoki Shibata 2000/7\r\n                                                                                                                                                                                                                                                                                               */\n      function mask_add(m1, m2, kk, b, gfc, shortblock) {\n        var ratio;\n        if (m2 > m1) {\n          if (m2 < m1 * ma_max_i2) ratio = m2 / m1;else return m1 + m2;\n        } else {\n          if (m1 >= m2 * ma_max_i2) return m1 + m2;\n          ratio = m1 / m2;\n        } /* Should always be true, just checking */\n        m1 += m2; //if (((long)(b + 3) & 0xffffffff) <= 3 + 3) {\n        if (b + 3 <= 3 + 3) {\n          /* approximately, 1 bark = 3 partitions */ /* 65% of the cases */ /* originally 'if(i > 8)' */if (ratio >= ma_max_i1) {\n            /* 43% of the total */return m1;\n          } /* 22% of the total */\n          var i = 0 | Util.FAST_LOG10_X(ratio, 16.0);\n          return m1 * table2[i];\n        } /**\r\n          * <PRE>\r\n          * m<15 equ log10((m1+m2)/gfc.ATH.cb[k])<1.5\r\n          * equ (m1+m2)/gfc.ATH.cb[k]<10^1.5\r\n          * equ (m1+m2)<10^1.5 * gfc.ATH.cb[k]\r\n          * </PRE>\r\n          */\n        var i = 0 | Util.FAST_LOG10_X(ratio, 16.0);\n        if (shortblock != 0) {\n          m2 = gfc.ATH.cb_s[kk] * gfc.ATH.adjust;\n        } else {\n          m2 = gfc.ATH.cb_l[kk] * gfc.ATH.adjust;\n        }\n        if (m1 < ma_max_m * m2) {\n          /* 3% of the total */ /* Originally if (m > 0) { */if (m1 > m2) {\n            var f, r;\n            f = 1.0;\n            if (i <= 13) f = table3[i];\n            r = Util.FAST_LOG10_X(m1 / m2, 10.0 / 15.0);\n            return m1 * ((table1[i] - f) * r + f);\n          }\n          if (i > 13) return m1;\n          return m1 * table3[i];\n        } /* 10% of total */\n        return m1 * table1[i];\n      }\n      var table2_ = [1.33352 * 1.33352, 1.35879 * 1.35879, 1.38454 * 1.38454, 1.39497 * 1.39497, 1.40548 * 1.40548, 1.3537 * 1.3537, 1.30382 * 1.30382, 1.22321 * 1.22321, 1.14758 * 1.14758, 1]; /**\r\n                                                                                                                                                                                                  * addition of simultaneous masking Naoki Shibata 2000/7\r\n                                                                                                                                                                                                  */\n      function vbrpsy_mask_add(m1, m2, b) {\n        var ratio;\n        if (m1 < 0) {\n          m1 = 0;\n        }\n        if (m2 < 0) {\n          m2 = 0;\n        }\n        if (m1 <= 0) {\n          return m2;\n        }\n        if (m2 <= 0) {\n          return m1;\n        }\n        if (m2 > m1) {\n          ratio = m2 / m1;\n        } else {\n          ratio = m1 / m2;\n        }\n        if (-2 <= b && b <= 2) {\n          /* approximately, 1 bark = 3 partitions */ /* originally 'if(i > 8)' */if (ratio >= ma_max_i1) {\n            return m1 + m2;\n          } else {\n            var i = 0 | Util.FAST_LOG10_X(ratio, 16.0);\n            return (m1 + m2) * table2_[i];\n          }\n        }\n        if (ratio < ma_max_i2) {\n          return m1 + m2;\n        }\n        if (m1 < m2) {\n          m1 = m2;\n        }\n        return m1;\n      } /**\r\n        * compute interchannel masking effects\r\n        */\n      function calc_interchannel_masking(gfp, ratio) {\n        var gfc = gfp.internal_flags;\n        if (gfc.channels_out > 1) {\n          for (var sb = 0; sb < Encoder.SBMAX_l; sb++) {\n            var l = gfc.thm[0].l[sb];\n            var r = gfc.thm[1].l[sb];\n            gfc.thm[0].l[sb] += r * ratio;\n            gfc.thm[1].l[sb] += l * ratio;\n          }\n          for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\n            for (var sblock = 0; sblock < 3; sblock++) {\n              var l = gfc.thm[0].s[sb][sblock];\n              var r = gfc.thm[1].s[sb][sblock];\n              gfc.thm[0].s[sb][sblock] += r * ratio;\n              gfc.thm[1].s[sb][sblock] += l * ratio;\n            }\n          }\n        }\n      } /**\r\n        * compute M/S thresholds from Johnston & Ferreira 1992 ICASSP paper\r\n        */\n      function msfix1(gfc) {\n        for (var sb = 0; sb < Encoder.SBMAX_l; sb++) {\n          /* use this fix if L & R masking differs by 2db or less */ /* if db = 10*log10(x2/x1) < 2 */ /* if (x2 < 1.58*x1) { */if (gfc.thm[0].l[sb] > 1.58 * gfc.thm[1].l[sb] || gfc.thm[1].l[sb] > 1.58 * gfc.thm[0].l[sb]) continue;\n          var mld = gfc.mld_l[sb] * gfc.en[3].l[sb];\n          var rmid = Math.max(gfc.thm[2].l[sb], Math.min(gfc.thm[3].l[sb], mld));\n          mld = gfc.mld_l[sb] * gfc.en[2].l[sb];\n          var rside = Math.max(gfc.thm[3].l[sb], Math.min(gfc.thm[2].l[sb], mld));\n          gfc.thm[2].l[sb] = rmid;\n          gfc.thm[3].l[sb] = rside;\n        }\n        for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\n          for (var sblock = 0; sblock < 3; sblock++) {\n            if (gfc.thm[0].s[sb][sblock] > 1.58 * gfc.thm[1].s[sb][sblock] || gfc.thm[1].s[sb][sblock] > 1.58 * gfc.thm[0].s[sb][sblock]) continue;\n            var mld = gfc.mld_s[sb] * gfc.en[3].s[sb][sblock];\n            var rmid = Math.max(gfc.thm[2].s[sb][sblock], Math.min(gfc.thm[3].s[sb][sblock], mld));\n            mld = gfc.mld_s[sb] * gfc.en[2].s[sb][sblock];\n            var rside = Math.max(gfc.thm[3].s[sb][sblock], Math.min(gfc.thm[2].s[sb][sblock], mld));\n            gfc.thm[2].s[sb][sblock] = rmid;\n            gfc.thm[3].s[sb][sblock] = rside;\n          }\n        }\n      } /**\r\n        * Adjust M/S maskings if user set \"msfix\"\r\n        *\r\n        * Naoki Shibata 2000\r\n        */\n      function ns_msfix(gfc, msfix, athadjust) {\n        var msfix2 = msfix;\n        var athlower = Math.pow(10, athadjust);\n        msfix *= 2.0;\n        msfix2 *= 2.0;\n        for (var sb = 0; sb < Encoder.SBMAX_l; sb++) {\n          var thmLR, thmM, thmS, ath;\n          ath = gfc.ATH.cb_l[gfc.bm_l[sb]] * athlower;\n          thmLR = Math.min(Math.max(gfc.thm[0].l[sb], ath), Math.max(gfc.thm[1].l[sb], ath));\n          thmM = Math.max(gfc.thm[2].l[sb], ath);\n          thmS = Math.max(gfc.thm[3].l[sb], ath);\n          if (thmLR * msfix < thmM + thmS) {\n            var f = thmLR * msfix2 / (thmM + thmS);\n            thmM *= f;\n            thmS *= f;\n          }\n          gfc.thm[2].l[sb] = Math.min(thmM, gfc.thm[2].l[sb]);\n          gfc.thm[3].l[sb] = Math.min(thmS, gfc.thm[3].l[sb]);\n        }\n        athlower *= Encoder.BLKSIZE_s / Encoder.BLKSIZE;\n        for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\n          for (var sblock = 0; sblock < 3; sblock++) {\n            var thmLR, thmM, thmS, ath;\n            ath = gfc.ATH.cb_s[gfc.bm_s[sb]] * athlower;\n            thmLR = Math.min(Math.max(gfc.thm[0].s[sb][sblock], ath), Math.max(gfc.thm[1].s[sb][sblock], ath));\n            thmM = Math.max(gfc.thm[2].s[sb][sblock], ath);\n            thmS = Math.max(gfc.thm[3].s[sb][sblock], ath);\n            if (thmLR * msfix < thmM + thmS) {\n              var f = thmLR * msfix / (thmM + thmS);\n              thmM *= f;\n              thmS *= f;\n            }\n            gfc.thm[2].s[sb][sblock] = Math.min(gfc.thm[2].s[sb][sblock], thmM);\n            gfc.thm[3].s[sb][sblock] = Math.min(gfc.thm[3].s[sb][sblock], thmS);\n          }\n        }\n      } /**\r\n        * short block threshold calculation (part 2)\r\n        *\r\n        * partition band bo_s[sfb] is at the transition from scalefactor band sfb\r\n        * to the next one sfb+1; enn and thmm have to be split between them\r\n        */\n      function convert_partition2scalefac_s(gfc, eb, thr, chn, sblock) {\n        var sb, b;\n        var enn = 0.0;\n        var thmm = 0.0;\n        for (sb = b = 0; sb < Encoder.SBMAX_s; ++b, ++sb) {\n          var bo_s_sb = gfc.bo_s[sb];\n          var npart_s = gfc.npart_s;\n          var b_lim = bo_s_sb < npart_s ? bo_s_sb : npart_s;\n          while (b < b_lim) {\n            // iff failed, it may indicate some index error elsewhere\n            enn += eb[b];\n            thmm += thr[b];\n            b++;\n          }\n          gfc.en[chn].s[sb][sblock] = enn;\n          gfc.thm[chn].s[sb][sblock] = thmm;\n          if (b >= npart_s) {\n            ++sb;\n            break;\n          } // iff failed, it may indicate some index error elsewhere\n          {\n            /* at transition sfb . sfb+1 */var w_curr = gfc.PSY.bo_s_weight[sb];\n            var w_next = 1.0 - w_curr;\n            enn = w_curr * eb[b];\n            thmm = w_curr * thr[b];\n            gfc.en[chn].s[sb][sblock] += enn;\n            gfc.thm[chn].s[sb][sblock] += thmm;\n            enn = w_next * eb[b];\n            thmm = w_next * thr[b];\n          }\n        } /* zero initialize the rest */\n        for (; sb < Encoder.SBMAX_s; ++sb) {\n          gfc.en[chn].s[sb][sblock] = 0;\n          gfc.thm[chn].s[sb][sblock] = 0;\n        }\n      } /**\r\n        * longblock threshold calculation (part 2)\r\n        */\n      function convert_partition2scalefac_l(gfc, eb, thr, chn) {\n        var sb, b;\n        var enn = 0.0;\n        var thmm = 0.0;\n        for (sb = b = 0; sb < Encoder.SBMAX_l; ++b, ++sb) {\n          var bo_l_sb = gfc.bo_l[sb];\n          var npart_l = gfc.npart_l;\n          var b_lim = bo_l_sb < npart_l ? bo_l_sb : npart_l;\n          while (b < b_lim) {\n            // iff failed, it may indicate some index error elsewhere\n            enn += eb[b];\n            thmm += thr[b];\n            b++;\n          }\n          gfc.en[chn].l[sb] = enn;\n          gfc.thm[chn].l[sb] = thmm;\n          if (b >= npart_l) {\n            ++sb;\n            break;\n          }\n          {\n            /* at transition sfb . sfb+1 */var w_curr = gfc.PSY.bo_l_weight[sb];\n            var w_next = 1.0 - w_curr;\n            enn = w_curr * eb[b];\n            thmm = w_curr * thr[b];\n            gfc.en[chn].l[sb] += enn;\n            gfc.thm[chn].l[sb] += thmm;\n            enn = w_next * eb[b];\n            thmm = w_next * thr[b];\n          }\n        } /* zero initialize the rest */\n        for (; sb < Encoder.SBMAX_l; ++sb) {\n          gfc.en[chn].l[sb] = 0;\n          gfc.thm[chn].l[sb] = 0;\n        }\n      }\n      function compute_masking_s(gfp, fftenergy_s, eb, thr, chn, sblock) {\n        var gfc = gfp.internal_flags;\n        var j, b;\n        for (b = j = 0; b < gfc.npart_s; ++b) {\n          var ebb = 0,\n            m = 0;\n          var n = gfc.numlines_s[b];\n          for (var i = 0; i < n; ++i, ++j) {\n            var el = fftenergy_s[sblock][j];\n            ebb += el;\n            if (m < el) m = el;\n          }\n          eb[b] = ebb;\n        }\n        for (j = b = 0; b < gfc.npart_s; b++) {\n          var kk = gfc.s3ind_s[b][0];\n          var ecb = gfc.s3_ss[j++] * eb[kk];\n          ++kk;\n          while (kk <= gfc.s3ind_s[b][1]) {\n            ecb += gfc.s3_ss[j] * eb[kk];\n            ++j;\n            ++kk;\n          }\n          {\n            /* limit calculated threshold by previous granule */var x = rpelev_s * gfc.nb_s1[chn][b];\n            thr[b] = Math.min(ecb, x);\n          }\n          if (gfc.blocktype_old[chn & 1] == Encoder.SHORT_TYPE) {\n            /* limit calculated threshold by even older granule */var x = rpelev2_s * gfc.nb_s2[chn][b];\n            var y = thr[b];\n            thr[b] = Math.min(x, y);\n          }\n          gfc.nb_s2[chn][b] = gfc.nb_s1[chn][b];\n          gfc.nb_s1[chn][b] = ecb;\n        }\n        for (; b <= Encoder.CBANDS; ++b) {\n          eb[b] = 0;\n          thr[b] = 0;\n        }\n      }\n      function block_type_set(gfp, uselongblock, blocktype_d, blocktype) {\n        var gfc = gfp.internal_flags;\n        if (gfp.short_blocks == ShortBlock.short_block_coupled /* force both channels to use the same block type */ /* this is necessary if the frame is to be encoded in ms_stereo. */ /* But even without ms_stereo, FhG does this */ && !(uselongblock[0] != 0 && uselongblock[1] != 0)) uselongblock[0] = uselongblock[1] = 0; /*\r\n                                                                                                                                                                                                                                                                                                                                   * update the blocktype of the previous granule, since it depends on\r\n                                                                                                                                                                                                                                                                                                                                   * what happend in this granule\r\n                                                                                                                                                                                                                                                                                                                                   */\n        for (var chn = 0; chn < gfc.channels_out; chn++) {\n          blocktype[chn] = Encoder.NORM_TYPE; /* disable short blocks */\n          if (gfp.short_blocks == ShortBlock.short_block_dispensed) uselongblock[chn] = 1;\n          if (gfp.short_blocks == ShortBlock.short_block_forced) uselongblock[chn] = 0;\n          if (uselongblock[chn] != 0) {\n            /* no attack : use long blocks */if (gfc.blocktype_old[chn] == Encoder.SHORT_TYPE) blocktype[chn] = Encoder.STOP_TYPE;\n          } else {\n            /* attack : use short blocks */blocktype[chn] = Encoder.SHORT_TYPE;\n            if (gfc.blocktype_old[chn] == Encoder.NORM_TYPE) {\n              gfc.blocktype_old[chn] = Encoder.START_TYPE;\n            }\n            if (gfc.blocktype_old[chn] == Encoder.STOP_TYPE) gfc.blocktype_old[chn] = Encoder.SHORT_TYPE;\n          }\n          blocktype_d[chn] = gfc.blocktype_old[chn]; // value returned to calling program\n          gfc.blocktype_old[chn] = blocktype[chn]; // save for next call to l3psy_anal\n        }\n      }\n      function NS_INTERP(x, y, r) {\n        /* was pow((x),(r))*pow((y),1-(r)) */if (r >= 1.0) {\n          /* 99.7% of the time */return x;\n        }\n        if (r <= 0.0) return y;\n        if (y > 0.0) {\n          /* rest of the time */return Math.pow(x / y, r) * y;\n        } /* never happens */\n        return 0.0;\n      } /**\r\n        * these values are tuned only for 44.1kHz...\r\n        */\n      var regcoef_s = [11.8, 13.6, 17.2, 32, 46.5, 51.3, 57.5, 67.1, 71.5, 84.6, 97.6, 130];\n      function pecalc_s(mr, masking_lower) {\n        var pe_s = 1236.28 / 4;\n        for (var sb = 0; sb < Encoder.SBMAX_s - 1; sb++) {\n          for (var sblock = 0; sblock < 3; sblock++) {\n            var thm = mr.thm.s[sb][sblock];\n            if (thm > 0.0) {\n              var x = thm * masking_lower;\n              var en = mr.en.s[sb][sblock];\n              if (en > x) {\n                if (en > x * 1e10) {\n                  pe_s += regcoef_s[sb] * (10.0 * LOG10);\n                } else {\n                  pe_s += regcoef_s[sb] * Util.FAST_LOG10(en / x);\n                }\n              }\n            }\n          }\n        }\n        return pe_s;\n      } /**\r\n        * these values are tuned only for 44.1kHz...\r\n        */\n      var regcoef_l = [6.8, 5.8, 5.8, 6.4, 6.5, 9.9, 12.1, 14.4, 15, 18.9, 21.6, 26.9, 34.2, 40.2, 46.8, 56.5, 60.7, 73.9, 85.7, 93.4, 126.1];\n      function pecalc_l(mr, masking_lower) {\n        var pe_l = 1124.23 / 4;\n        for (var sb = 0; sb < Encoder.SBMAX_l - 1; sb++) {\n          var thm = mr.thm.l[sb];\n          if (thm > 0.0) {\n            var x = thm * masking_lower;\n            var en = mr.en.l[sb];\n            if (en > x) {\n              if (en > x * 1e10) {\n                pe_l += regcoef_l[sb] * (10.0 * LOG10);\n              } else {\n                pe_l += regcoef_l[sb] * Util.FAST_LOG10(en / x);\n              }\n            }\n          }\n        }\n        return pe_l;\n      }\n      function calc_energy(gfc, fftenergy, eb, max, avg) {\n        var b, j;\n        for (b = j = 0; b < gfc.npart_l; ++b) {\n          var ebb = 0,\n            m = 0;\n          var i;\n          for (i = 0; i < gfc.numlines_l[b]; ++i, ++j) {\n            var el = fftenergy[j];\n            ebb += el;\n            if (m < el) m = el;\n          }\n          eb[b] = ebb;\n          max[b] = m;\n          avg[b] = ebb * gfc.rnumlines_l[b];\n        }\n      }\n      function calc_mask_index_l(gfc, max, avg, mask_idx) {\n        var last_tab_entry = tab.length - 1;\n        var b = 0;\n        var a = avg[b] + avg[b + 1];\n        if (a > 0.0) {\n          var m = max[b];\n          if (m < max[b + 1]) m = max[b + 1];\n          a = 20.0 * (m * 2.0 - a) / (a * (gfc.numlines_l[b] + gfc.numlines_l[b + 1] - 1));\n          var k = 0 | a;\n          if (k > last_tab_entry) k = last_tab_entry;\n          mask_idx[b] = k;\n        } else {\n          mask_idx[b] = 0;\n        }\n        for (b = 1; b < gfc.npart_l - 1; b++) {\n          a = avg[b - 1] + avg[b] + avg[b + 1];\n          if (a > 0.0) {\n            var m = max[b - 1];\n            if (m < max[b]) m = max[b];\n            if (m < max[b + 1]) m = max[b + 1];\n            a = 20.0 * (m * 3.0 - a) / (a * (gfc.numlines_l[b - 1] + gfc.numlines_l[b] + gfc.numlines_l[b + 1] - 1));\n            var k = 0 | a;\n            if (k > last_tab_entry) k = last_tab_entry;\n            mask_idx[b] = k;\n          } else {\n            mask_idx[b] = 0;\n          }\n        }\n        a = avg[b - 1] + avg[b];\n        if (a > 0.0) {\n          var m = max[b - 1];\n          if (m < max[b]) m = max[b];\n          a = 20.0 * (m * 2.0 - a) / (a * (gfc.numlines_l[b - 1] + gfc.numlines_l[b] - 1));\n          var k = 0 | a;\n          if (k > last_tab_entry) k = last_tab_entry;\n          mask_idx[b] = k;\n        } else {\n          mask_idx[b] = 0;\n        }\n      }\n      var fircoef = [-8.65163e-18 * 2, -0.00851586 * 2, -6.74764e-18 * 2, 0.0209036 * 2, -3.36639e-17 * 2, -0.0438162 * 2, -1.54175e-17 * 2, 0.0931738 * 2, -5.52212e-17 * 2, -0.313819 * 2];\n      this.L3psycho_anal_ns = function (gfp, buffer, bufPos, gr_out, masking_ratio, masking_MS_ratio, percep_entropy, percep_MS_entropy, energy, blocktype_d) {\n        /*\r\n        * to get a good cache performance, one has to think about the sequence,\r\n        * in which the variables are used.\r\n        */\n        var gfc = gfp.internal_flags; /* fft and energy calculation */\n        var wsamp_L = new_float_n([2, Encoder.BLKSIZE]);\n        var wsamp_S = new_float_n([2, 3, Encoder.BLKSIZE_s]); /* convolution */\n        var eb_l = new_float(Encoder.CBANDS + 1);\n        var eb_s = new_float(Encoder.CBANDS + 1);\n        var thr = new_float(Encoder.CBANDS + 2); /* block type */\n        var blocktype = new_int(2),\n          uselongblock = new_int(2); /* usual variables like loop indices, etc.. */\n        var numchn, chn;\n        var b, i, j, k;\n        var sb, sblock; /* variables used for --nspsytune */\n        var ns_hpfsmpl = new_float_n([2, 576]);\n        var pcfact;\n        var mask_idx_l = new_int(Encoder.CBANDS + 2),\n          mask_idx_s = new_int(Encoder.CBANDS + 2);\n        Arrays.fill(mask_idx_s, 0);\n        numchn = gfc.channels_out; /* chn=2 and 3 = Mid and Side channels */\n        if (gfp.mode == MPEGMode.JOINT_STEREO) numchn = 4;\n        if (gfp.VBR == VbrMode.vbr_off) pcfact = gfc.ResvMax == 0 ? 0 : gfc.ResvSize / gfc.ResvMax * 0.5;else if (gfp.VBR == VbrMode.vbr_rh || gfp.VBR == VbrMode.vbr_mtrh || gfp.VBR == VbrMode.vbr_mt) {\n          pcfact = 0.6;\n        } else pcfact = 1.0; /**********************************************************************\r\n                             * Apply HPF of fs/4 to the input signal. This is used for attack\r\n                             * detection / handling.\r\n                             **********************************************************************/ /* Don't copy the input buffer into a temporary buffer */ /* unroll the loop 2 times */\n        for (chn = 0; chn < gfc.channels_out; chn++) {\n          /* apply high pass filter of fs/4 */var firbuf = buffer[chn];\n          var firbufPos = bufPos + 576 - 350 - NSFIRLEN + 192;\n          for (i = 0; i < 576; i++) {\n            var sum1, sum2;\n            sum1 = firbuf[firbufPos + i + 10];\n            sum2 = 0.0;\n            for (j = 0; j < (NSFIRLEN - 1) / 2 - 1; j += 2) {\n              sum1 += fircoef[j] * (firbuf[firbufPos + i + j] + firbuf[firbufPos + i + NSFIRLEN - j]);\n              sum2 += fircoef[j + 1] * (firbuf[firbufPos + i + j + 1] + firbuf[firbufPos + i + NSFIRLEN - j - 1]);\n            }\n            ns_hpfsmpl[chn][i] = sum1 + sum2;\n          }\n          masking_ratio[gr_out][chn].en.assign(gfc.en[chn]);\n          masking_ratio[gr_out][chn].thm.assign(gfc.thm[chn]);\n          if (numchn > 2) {\n            /* MS maskings */ /* percep_MS_entropy [chn-2] = gfc . pe [chn]; */masking_MS_ratio[gr_out][chn].en.assign(gfc.en[chn + 2]);\n            masking_MS_ratio[gr_out][chn].thm.assign(gfc.thm[chn + 2]);\n          }\n        }\n        for (chn = 0; chn < numchn; chn++) {\n          var wsamp_l;\n          var wsamp_s;\n          var en_subshort = new_float(12);\n          var en_short = [0, 0, 0, 0];\n          var attack_intensity = new_float(12);\n          var ns_uselongblock = 1;\n          var attackThreshold;\n          var max = new_float(Encoder.CBANDS),\n            avg = new_float(Encoder.CBANDS);\n          var ns_attacks = [0, 0, 0, 0];\n          var fftenergy = new_float(Encoder.HBLKSIZE);\n          var fftenergy_s = new_float_n([3, Encoder.HBLKSIZE_s]); /*\r\n                                                                  * rh 20040301: the following loops do access one off the limits so\r\n                                                                  * I increase the array dimensions by one and initialize the\r\n                                                                  * accessed values to zero\r\n                                                                  */ /***************************************************************\r\n                                                                     * determine the block type (window type)\r\n                                                                     ***************************************************************/ /* calculate energies of each sub-shortblocks */\n          for (i = 0; i < 3; i++) {\n            en_subshort[i] = gfc.nsPsy.last_en_subshort[chn][i + 6];\n            attack_intensity[i] = en_subshort[i] / gfc.nsPsy.last_en_subshort[chn][i + 4];\n            en_short[0] += en_subshort[i];\n          }\n          if (chn == 2) {\n            for (i = 0; i < 576; i++) {\n              var l, r;\n              l = ns_hpfsmpl[0][i];\n              r = ns_hpfsmpl[1][i];\n              ns_hpfsmpl[0][i] = l + r;\n              ns_hpfsmpl[1][i] = l - r;\n            }\n          }\n          {\n            var pf = ns_hpfsmpl[chn & 1];\n            var pfPos = 0;\n            for (i = 0; i < 9; i++) {\n              var pfe = pfPos + 576 / 9;\n              var p = 1.;\n              for (; pfPos < pfe; pfPos++) {\n                if (p < Math.abs(pf[pfPos])) p = Math.abs(pf[pfPos]);\n              }\n              gfc.nsPsy.last_en_subshort[chn][i] = en_subshort[i + 3] = p;\n              en_short[1 + i / 3] += p;\n              if (p > en_subshort[i + 3 - 2]) {\n                p = p / en_subshort[i + 3 - 2];\n              } else if (en_subshort[i + 3 - 2] > p * 10.0) {\n                p = en_subshort[i + 3 - 2] / (p * 10.0);\n              } else p = 0.0;\n              attack_intensity[i + 3] = p;\n            }\n          }\n          if (gfp.analysis) {\n            var x = attack_intensity[0];\n            for (i = 1; i < 12; i++) {\n              if (x < attack_intensity[i]) x = attack_intensity[i];\n            }\n            gfc.pinfo.ers[gr_out][chn] = gfc.pinfo.ers_save[chn];\n            gfc.pinfo.ers_save[chn] = x;\n          } /* compare energies between sub-shortblocks */\n          attackThreshold = chn == 3 ? gfc.nsPsy.attackthre_s : gfc.nsPsy.attackthre;\n          for (i = 0; i < 12; i++) {\n            if (0 == ns_attacks[i / 3] && attack_intensity[i] > attackThreshold) ns_attacks[i / 3] = i % 3 + 1;\n          } /*\r\n            * should have energy change between short blocks, in order to avoid\r\n            * periodic signals\r\n            */\n          for (i = 1; i < 4; i++) {\n            var ratio;\n            if (en_short[i - 1] > en_short[i]) {\n              ratio = en_short[i - 1] / en_short[i];\n            } else {\n              ratio = en_short[i] / en_short[i - 1];\n            }\n            if (ratio < 1.7) {\n              ns_attacks[i] = 0;\n              if (i == 1) ns_attacks[0] = 0;\n            }\n          }\n          if (ns_attacks[0] != 0 && gfc.nsPsy.lastAttacks[chn] != 0) ns_attacks[0] = 0;\n          if (gfc.nsPsy.lastAttacks[chn] == 3 || ns_attacks[0] + ns_attacks[1] + ns_attacks[2] + ns_attacks[3] != 0) {\n            ns_uselongblock = 0;\n            if (ns_attacks[1] != 0 && ns_attacks[0] != 0) ns_attacks[1] = 0;\n            if (ns_attacks[2] != 0 && ns_attacks[1] != 0) ns_attacks[2] = 0;\n            if (ns_attacks[3] != 0 && ns_attacks[2] != 0) ns_attacks[3] = 0;\n          }\n          if (chn < 2) {\n            uselongblock[chn] = ns_uselongblock;\n          } else {\n            if (ns_uselongblock == 0) {\n              uselongblock[0] = uselongblock[1] = 0;\n            }\n          } /*\r\n            * there is a one granule delay. Copy maskings computed last call\r\n            * into masking_ratio to return to calling program.\r\n            */\n          energy[chn] = gfc.tot_ener[chn]; /*********************************************************************\r\n                                           * compute FFTs\r\n                                           *********************************************************************/\n          wsamp_s = wsamp_S;\n          wsamp_l = wsamp_L;\n          compute_ffts(gfp, fftenergy, fftenergy_s, wsamp_l, chn & 1, wsamp_s, chn & 1, gr_out, chn, buffer, bufPos); /*********************************************************************\r\n                                                                                                                      * Calculate the energy and the tonality of each partition.\r\n                                                                                                                      *********************************************************************/\n          calc_energy(gfc, fftenergy, eb_l, max, avg);\n          calc_mask_index_l(gfc, max, avg, mask_idx_l); /* compute masking thresholds for short blocks */\n          for (sblock = 0; sblock < 3; sblock++) {\n            var enn, thmm;\n            compute_masking_s(gfp, fftenergy_s, eb_s, thr, chn, sblock);\n            convert_partition2scalefac_s(gfc, eb_s, thr, chn, sblock); /**** short block pre-echo control ****/\n            for (sb = 0; sb < Encoder.SBMAX_s; sb++) {\n              thmm = gfc.thm[chn].s[sb][sblock];\n              thmm *= NS_PREECHO_ATT0;\n              if (ns_attacks[sblock] >= 2 || ns_attacks[sblock + 1] == 1) {\n                var idx = sblock != 0 ? sblock - 1 : 2;\n                var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm, NS_PREECHO_ATT1 * pcfact);\n                thmm = Math.min(thmm, p);\n              }\n              if (ns_attacks[sblock] == 1) {\n                var idx = sblock != 0 ? sblock - 1 : 2;\n                var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm, NS_PREECHO_ATT2 * pcfact);\n                thmm = Math.min(thmm, p);\n              } else if (sblock != 0 && ns_attacks[sblock - 1] == 3 || sblock == 0 && gfc.nsPsy.lastAttacks[chn] == 3) {\n                var idx = sblock != 2 ? sblock + 1 : 0;\n                var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm, NS_PREECHO_ATT2 * pcfact);\n                thmm = Math.min(thmm, p);\n              } /* pulse like signal detection for fatboy.wav and so on */\n              enn = en_subshort[sblock * 3 + 3] + en_subshort[sblock * 3 + 4] + en_subshort[sblock * 3 + 5];\n              if (en_subshort[sblock * 3 + 5] * 6 < enn) {\n                thmm *= 0.5;\n                if (en_subshort[sblock * 3 + 4] * 6 < enn) thmm *= 0.5;\n              }\n              gfc.thm[chn].s[sb][sblock] = thmm;\n            }\n          }\n          gfc.nsPsy.lastAttacks[chn] = ns_attacks[2]; /*********************************************************************\r\n                                                      * convolve the partitioned energy and unpredictability with the\r\n                                                      * spreading function, s3_l[b][k]\r\n                                                      ********************************************************************/\n          k = 0;\n          {\n            for (b = 0; b < gfc.npart_l; b++) {\n              /*\r\n              * convolve the partitioned energy with the spreading\r\n              * function\r\n              */\n              var kk = gfc.s3ind[b][0];\n              var eb2 = eb_l[kk] * tab[mask_idx_l[kk]];\n              var ecb = gfc.s3_ll[k++] * eb2;\n              while (++kk <= gfc.s3ind[b][1]) {\n                eb2 = eb_l[kk] * tab[mask_idx_l[kk]];\n                ecb = mask_add(ecb, gfc.s3_ll[k++] * eb2, kk, kk - b, gfc, 0);\n              }\n              ecb *= 0.158489319246111; /* pow(10,-0.8) */ /**** long block pre-echo control ****/ /**\r\n                                                                                                   * <PRE>\r\n                                                                                                   * dont use long block pre-echo control if previous granule was\r\n                                                                                                   * a short block.  This is to avoid the situation:\r\n                                                                                                   * frame0:  quiet (very low masking)\r\n                                                                                                   * frame1:  surge  (triggers short blocks)\r\n                                                                                                   * frame2:  regular frame.  looks like pre-echo when compared to\r\n                                                                                                   *          frame0, but all pre-echo was in frame1.\r\n                                                                                                   * </PRE>\r\n                                                                                                   */ /*\r\n                                                                                                      * chn=0,1 L and R channels\r\n                                                                                                      *\r\n                                                                                                      * chn=2,3 S and M channels.\r\n                                                                                                      */\n              if (gfc.blocktype_old[chn & 1] == Encoder.SHORT_TYPE) thr[b] = ecb;else thr[b] = NS_INTERP(Math.min(ecb, Math.min(rpelev * gfc.nb_1[chn][b], rpelev2 * gfc.nb_2[chn][b])), ecb, pcfact);\n              gfc.nb_2[chn][b] = gfc.nb_1[chn][b];\n              gfc.nb_1[chn][b] = ecb;\n            }\n          }\n          for (; b <= Encoder.CBANDS; ++b) {\n            eb_l[b] = 0;\n            thr[b] = 0;\n          } /* compute masking thresholds for long blocks */\n          convert_partition2scalefac_l(gfc, eb_l, thr, chn);\n        } /* end loop over chn */\n        if (gfp.mode == MPEGMode.STEREO || gfp.mode == MPEGMode.JOINT_STEREO) {\n          if (gfp.interChRatio > 0.0) {\n            calc_interchannel_masking(gfp, gfp.interChRatio);\n          }\n        }\n        if (gfp.mode == MPEGMode.JOINT_STEREO) {\n          var msfix;\n          msfix1(gfc);\n          msfix = gfp.msfix;\n          if (Math.abs(msfix) > 0.0) ns_msfix(gfc, msfix, gfp.ATHlower * gfc.ATH.adjust);\n        } /***************************************************************\r\n          * determine final block type\r\n          ***************************************************************/\n        block_type_set(gfp, uselongblock, blocktype_d, blocktype); /*********************************************************************\r\n                                                                   * compute the value of PE to return ... no delay and advance\r\n                                                                   *********************************************************************/\n        for (chn = 0; chn < numchn; chn++) {\n          var ppe;\n          var ppePos = 0;\n          var type;\n          var mr;\n          if (chn > 1) {\n            ppe = percep_MS_entropy;\n            ppePos = -2;\n            type = Encoder.NORM_TYPE;\n            if (blocktype_d[0] == Encoder.SHORT_TYPE || blocktype_d[1] == Encoder.SHORT_TYPE) type = Encoder.SHORT_TYPE;\n            mr = masking_MS_ratio[gr_out][chn - 2];\n          } else {\n            ppe = percep_entropy;\n            ppePos = 0;\n            type = blocktype_d[chn];\n            mr = masking_ratio[gr_out][chn];\n          }\n          if (type == Encoder.SHORT_TYPE) ppe[ppePos + chn] = pecalc_s(mr, gfc.masking_lower);else ppe[ppePos + chn] = pecalc_l(mr, gfc.masking_lower);\n          if (gfp.analysis) gfc.pinfo.pe[gr_out][chn] = ppe[ppePos + chn];\n        }\n        return 0;\n      };\n      function vbrpsy_compute_fft_l(gfp, buffer, bufPos, chn, gr_out, fftenergy, wsamp_l, wsamp_lPos) {\n        var gfc = gfp.internal_flags;\n        if (chn < 2) {\n          fft.fft_long(gfc, wsamp_l[wsamp_lPos], chn, buffer, bufPos);\n        } else if (chn == 2) {\n          /* FFT data for mid and side channel is derived from L & R */for (var j = Encoder.BLKSIZE - 1; j >= 0; --j) {\n            var l = wsamp_l[wsamp_lPos + 0][j];\n            var r = wsamp_l[wsamp_lPos + 1][j];\n            wsamp_l[wsamp_lPos + 0][j] = (l + r) * Util.SQRT2 * 0.5;\n            wsamp_l[wsamp_lPos + 1][j] = (l - r) * Util.SQRT2 * 0.5;\n          }\n        } /*********************************************************************\r\n          * compute energies\r\n          *********************************************************************/\n        fftenergy[0] = NON_LINEAR_SCALE_ENERGY(wsamp_l[wsamp_lPos + 0][0]);\n        fftenergy[0] *= fftenergy[0];\n        for (var j = Encoder.BLKSIZE / 2 - 1; j >= 0; --j) {\n          var re = wsamp_l[wsamp_lPos + 0][Encoder.BLKSIZE / 2 - j];\n          var im = wsamp_l[wsamp_lPos + 0][Encoder.BLKSIZE / 2 + j];\n          fftenergy[Encoder.BLKSIZE / 2 - j] = NON_LINEAR_SCALE_ENERGY((re * re + im * im) * 0.5);\n        } /* total energy */\n        {\n          var totalenergy = 0.0;\n          for (var j = 11; j < Encoder.HBLKSIZE; j++) {\n            totalenergy += fftenergy[j];\n          }\n          gfc.tot_ener[chn] = totalenergy;\n        }\n        if (gfp.analysis) {\n          for (var j = 0; j < Encoder.HBLKSIZE; j++) {\n            gfc.pinfo.energy[gr_out][chn][j] = gfc.pinfo.energy_save[chn][j];\n            gfc.pinfo.energy_save[chn][j] = fftenergy[j];\n          }\n          gfc.pinfo.pe[gr_out][chn] = gfc.pe[chn];\n        }\n      }\n      function vbrpsy_compute_fft_s(gfp, buffer, bufPos, chn, sblock, fftenergy_s, wsamp_s, wsamp_sPos) {\n        var gfc = gfp.internal_flags;\n        if (sblock == 0 && chn < 2) {\n          fft.fft_short(gfc, wsamp_s[wsamp_sPos], chn, buffer, bufPos);\n        }\n        if (chn == 2) {\n          /* FFT data for mid and side channel is derived from L & R */for (var j = Encoder.BLKSIZE_s - 1; j >= 0; --j) {\n            var l = wsamp_s[wsamp_sPos + 0][sblock][j];\n            var r = wsamp_s[wsamp_sPos + 1][sblock][j];\n            wsamp_s[wsamp_sPos + 0][sblock][j] = (l + r) * Util.SQRT2 * 0.5;\n            wsamp_s[wsamp_sPos + 1][sblock][j] = (l - r) * Util.SQRT2 * 0.5;\n          }\n        } /*********************************************************************\r\n          * compute energies\r\n          *********************************************************************/\n        fftenergy_s[sblock][0] = wsamp_s[wsamp_sPos + 0][sblock][0];\n        fftenergy_s[sblock][0] *= fftenergy_s[sblock][0];\n        for (var j = Encoder.BLKSIZE_s / 2 - 1; j >= 0; --j) {\n          var re = wsamp_s[wsamp_sPos + 0][sblock][Encoder.BLKSIZE_s / 2 - j];\n          var im = wsamp_s[wsamp_sPos + 0][sblock][Encoder.BLKSIZE_s / 2 + j];\n          fftenergy_s[sblock][Encoder.BLKSIZE_s / 2 - j] = NON_LINEAR_SCALE_ENERGY((re * re + im * im) * 0.5);\n        }\n      } /**\r\n        * compute loudness approximation (used for ATH auto-level adjustment)\r\n        */\n      function vbrpsy_compute_loudness_approximation_l(gfp, gr_out, chn, fftenergy) {\n        var gfc = gfp.internal_flags;\n        if (gfp.athaa_loudapprox == 2 && chn < 2) {\n          // no loudness for mid/side ch\n          gfc.loudness_sq[gr_out][chn] = gfc.loudness_sq_save[chn];\n          gfc.loudness_sq_save[chn] = psycho_loudness_approx(fftenergy, gfc);\n        }\n      }\n      var fircoef_ = [-8.65163e-18 * 2, -0.00851586 * 2, -6.74764e-18 * 2, 0.0209036 * 2, -3.36639e-17 * 2, -0.0438162 * 2, -1.54175e-17 * 2, 0.0931738 * 2, -5.52212e-17 * 2, -0.313819 * 2]; /**\r\n                                                                                                                                                                                               * Apply HPF of fs/4 to the input signal. This is used for attack detection\r\n                                                                                                                                                                                               * / handling.\r\n                                                                                                                                                                                               */\n      function vbrpsy_attack_detection(gfp, buffer, bufPos, gr_out, masking_ratio, masking_MS_ratio, energy, sub_short_factor, ns_attacks, uselongblock) {\n        var ns_hpfsmpl = new_float_n([2, 576]);\n        var gfc = gfp.internal_flags;\n        var n_chn_out = gfc.channels_out; /* chn=2 and 3 = Mid and Side channels */\n        var n_chn_psy = gfp.mode == MPEGMode.JOINT_STEREO ? 4 : n_chn_out; /* Don't copy the input buffer into a temporary buffer */ /* unroll the loop 2 times */\n        for (var chn = 0; chn < n_chn_out; chn++) {\n          /* apply high pass filter of fs/4 */firbuf = buffer[chn];\n          var firbufPos = bufPos + 576 - 350 - NSFIRLEN + 192;\n          for (var i = 0; i < 576; i++) {\n            var sum1, sum2;\n            sum1 = firbuf[firbufPos + i + 10];\n            sum2 = 0.0;\n            for (var j = 0; j < (NSFIRLEN - 1) / 2 - 1; j += 2) {\n              sum1 += fircoef_[j] * (firbuf[firbufPos + i + j] + firbuf[firbufPos + i + NSFIRLEN - j]);\n              sum2 += fircoef_[j + 1] * (firbuf[firbufPos + i + j + 1] + firbuf[firbufPos + i + NSFIRLEN - j - 1]);\n            }\n            ns_hpfsmpl[chn][i] = sum1 + sum2;\n          }\n          masking_ratio[gr_out][chn].en.assign(gfc.en[chn]);\n          masking_ratio[gr_out][chn].thm.assign(gfc.thm[chn]);\n          if (n_chn_psy > 2) {\n            /* MS maskings */ /* percep_MS_entropy [chn-2] = gfc . pe [chn]; */masking_MS_ratio[gr_out][chn].en.assign(gfc.en[chn + 2]);\n            masking_MS_ratio[gr_out][chn].thm.assign(gfc.thm[chn + 2]);\n          }\n        }\n        for (var chn = 0; chn < n_chn_psy; chn++) {\n          var attack_intensity = new_float(12);\n          var en_subshort = new_float(12);\n          var en_short = [0, 0, 0, 0];\n          var pf = ns_hpfsmpl[chn & 1];\n          var pfPos = 0;\n          var attackThreshold = chn == 3 ? gfc.nsPsy.attackthre_s : gfc.nsPsy.attackthre;\n          var ns_uselongblock = 1;\n          if (chn == 2) {\n            for (var i = 0, j = 576; j > 0; ++i, --j) {\n              var l = ns_hpfsmpl[0][i];\n              var r = ns_hpfsmpl[1][i];\n              ns_hpfsmpl[0][i] = l + r;\n              ns_hpfsmpl[1][i] = l - r;\n            }\n          } /***************************************************************\r\n            * determine the block type (window type)\r\n            ***************************************************************/ /* calculate energies of each sub-shortblocks */\n          for (var i = 0; i < 3; i++) {\n            en_subshort[i] = gfc.nsPsy.last_en_subshort[chn][i + 6];\n            attack_intensity[i] = en_subshort[i] / gfc.nsPsy.last_en_subshort[chn][i + 4];\n            en_short[0] += en_subshort[i];\n          }\n          for (var i = 0; i < 9; i++) {\n            var pfe = pfPos + 576 / 9;\n            var p = 1.;\n            for (; pfPos < pfe; pfPos++) {\n              if (p < Math.abs(pf[pfPos])) p = Math.abs(pf[pfPos]);\n            }\n            gfc.nsPsy.last_en_subshort[chn][i] = en_subshort[i + 3] = p;\n            en_short[1 + i / 3] += p;\n            if (p > en_subshort[i + 3 - 2]) {\n              p = p / en_subshort[i + 3 - 2];\n            } else if (en_subshort[i + 3 - 2] > p * 10.0) {\n              p = en_subshort[i + 3 - 2] / (p * 10.0);\n            } else {\n              p = 0.0;\n            }\n            attack_intensity[i + 3] = p;\n          } /* pulse like signal detection for fatboy.wav and so on */\n          for (var i = 0; i < 3; ++i) {\n            var enn = en_subshort[i * 3 + 3] + en_subshort[i * 3 + 4] + en_subshort[i * 3 + 5];\n            var factor = 1.;\n            if (en_subshort[i * 3 + 5] * 6 < enn) {\n              factor *= 0.5;\n              if (en_subshort[i * 3 + 4] * 6 < enn) {\n                factor *= 0.5;\n              }\n            }\n            sub_short_factor[chn][i] = factor;\n          }\n          if (gfp.analysis) {\n            var x = attack_intensity[0];\n            for (var i = 1; i < 12; i++) {\n              if (x < attack_intensity[i]) {\n                x = attack_intensity[i];\n              }\n            }\n            gfc.pinfo.ers[gr_out][chn] = gfc.pinfo.ers_save[chn];\n            gfc.pinfo.ers_save[chn] = x;\n          } /* compare energies between sub-shortblocks */\n          for (var i = 0; i < 12; i++) {\n            if (0 == ns_attacks[chn][i / 3] && attack_intensity[i] > attackThreshold) {\n              ns_attacks[chn][i / 3] = i % 3 + 1;\n            }\n          } /*\r\n            * should have energy change between short blocks, in order to avoid\r\n            * periodic signals\r\n            */ /* Good samples to show the effect are Trumpet test songs */ /*\r\n                                                                            * GB: tuned (1) to avoid too many short blocks for test sample\r\n                                                                            * TRUMPET\r\n                                                                            */ /*\r\n                                                                               * RH: tuned (2) to let enough short blocks through for test sample\r\n                                                                               * FSOL and SNAPS\r\n                                                                               */\n          for (var i = 1; i < 4; i++) {\n            var u = en_short[i - 1];\n            var v = en_short[i];\n            var m = Math.max(u, v);\n            if (m < 40000) {\n              /* (2) */if (u < 1.7 * v && v < 1.7 * u) {\n                /* (1) */if (i == 1 && ns_attacks[chn][0] <= ns_attacks[chn][i]) {\n                  ns_attacks[chn][0] = 0;\n                }\n                ns_attacks[chn][i] = 0;\n              }\n            }\n          }\n          if (ns_attacks[chn][0] <= gfc.nsPsy.lastAttacks[chn]) {\n            ns_attacks[chn][0] = 0;\n          }\n          if (gfc.nsPsy.lastAttacks[chn] == 3 || ns_attacks[chn][0] + ns_attacks[chn][1] + ns_attacks[chn][2] + ns_attacks[chn][3] != 0) {\n            ns_uselongblock = 0;\n            if (ns_attacks[chn][1] != 0 && ns_attacks[chn][0] != 0) {\n              ns_attacks[chn][1] = 0;\n            }\n            if (ns_attacks[chn][2] != 0 && ns_attacks[chn][1] != 0) {\n              ns_attacks[chn][2] = 0;\n            }\n            if (ns_attacks[chn][3] != 0 && ns_attacks[chn][2] != 0) {\n              ns_attacks[chn][3] = 0;\n            }\n          }\n          if (chn < 2) {\n            uselongblock[chn] = ns_uselongblock;\n          } else {\n            if (ns_uselongblock == 0) {\n              uselongblock[0] = uselongblock[1] = 0;\n            }\n          } /*\r\n            * there is a one granule delay. Copy maskings computed last call\r\n            * into masking_ratio to return to calling program.\r\n            */\n          energy[chn] = gfc.tot_ener[chn];\n        }\n      }\n      function vbrpsy_skip_masking_s(gfc, chn, sblock) {\n        if (sblock == 0) {\n          for (var b = 0; b < gfc.npart_s; b++) {\n            gfc.nb_s2[chn][b] = gfc.nb_s1[chn][b];\n            gfc.nb_s1[chn][b] = 0;\n          }\n        }\n      }\n      function vbrpsy_skip_masking_l(gfc, chn) {\n        for (var b = 0; b < gfc.npart_l; b++) {\n          gfc.nb_2[chn][b] = gfc.nb_1[chn][b];\n          gfc.nb_1[chn][b] = 0;\n        }\n      }\n      function psyvbr_calc_mask_index_s(gfc, max, avg, mask_idx) {\n        var last_tab_entry = tab.length - 1;\n        var b = 0;\n        var a = avg[b] + avg[b + 1];\n        if (a > 0.0) {\n          var m = max[b];\n          if (m < max[b + 1]) m = max[b + 1];\n          a = 20.0 * (m * 2.0 - a) / (a * (gfc.numlines_s[b] + gfc.numlines_s[b + 1] - 1));\n          var k = 0 | a;\n          if (k > last_tab_entry) k = last_tab_entry;\n          mask_idx[b] = k;\n        } else {\n          mask_idx[b] = 0;\n        }\n        for (b = 1; b < gfc.npart_s - 1; b++) {\n          a = avg[b - 1] + avg[b] + avg[b + 1];\n          if (a > 0.0) {\n            var m = max[b - 1];\n            if (m < max[b]) m = max[b];\n            if (m < max[b + 1]) m = max[b + 1];\n            a = 20.0 * (m * 3.0 - a) / (a * (gfc.numlines_s[b - 1] + gfc.numlines_s[b] + gfc.numlines_s[b + 1] - 1));\n            var k = 0 | a;\n            if (k > last_tab_entry) k = last_tab_entry;\n            mask_idx[b] = k;\n          } else {\n            mask_idx[b] = 0;\n          }\n        }\n        a = avg[b - 1] + avg[b];\n        if (a > 0.0) {\n          var m = max[b - 1];\n          if (m < max[b]) m = max[b];\n          a = 20.0 * (m * 2.0 - a) / (a * (gfc.numlines_s[b - 1] + gfc.numlines_s[b] - 1));\n          var k = 0 | a;\n          if (k > last_tab_entry) k = last_tab_entry;\n          mask_idx[b] = k;\n        } else {\n          mask_idx[b] = 0;\n        }\n      }\n      function vbrpsy_compute_masking_s(gfp, fftenergy_s, eb, thr, chn, sblock) {\n        var gfc = gfp.internal_flags;\n        var max = new float[Encoder.CBANDS](),\n          avg = new_float(Encoder.CBANDS);\n        var i, j, b;\n        var mask_idx_s = new int[Encoder.CBANDS]();\n        for (b = j = 0; b < gfc.npart_s; ++b) {\n          var ebb = 0,\n            m = 0;\n          var n = gfc.numlines_s[b];\n          for (i = 0; i < n; ++i, ++j) {\n            var el = fftenergy_s[sblock][j];\n            ebb += el;\n            if (m < el) m = el;\n          }\n          eb[b] = ebb;\n          max[b] = m;\n          avg[b] = ebb / n;\n        }\n        for (; b < Encoder.CBANDS; ++b) {\n          max[b] = 0;\n          avg[b] = 0;\n        }\n        psyvbr_calc_mask_index_s(gfc, max, avg, mask_idx_s);\n        for (j = b = 0; b < gfc.npart_s; b++) {\n          var kk = gfc.s3ind_s[b][0];\n          var last = gfc.s3ind_s[b][1];\n          var dd, dd_n;\n          var x, ecb, avg_mask;\n          dd = mask_idx_s[kk];\n          dd_n = 1;\n          ecb = gfc.s3_ss[j] * eb[kk] * tab[mask_idx_s[kk]];\n          ++j;\n          ++kk;\n          while (kk <= last) {\n            dd += mask_idx_s[kk];\n            dd_n += 1;\n            x = gfc.s3_ss[j] * eb[kk] * tab[mask_idx_s[kk]];\n            ecb = vbrpsy_mask_add(ecb, x, kk - b);\n            ++j;\n            ++kk;\n          }\n          dd = (1 + 2 * dd) / (2 * dd_n);\n          avg_mask = tab[dd] * 0.5;\n          ecb *= avg_mask;\n          thr[b] = ecb;\n          gfc.nb_s2[chn][b] = gfc.nb_s1[chn][b];\n          gfc.nb_s1[chn][b] = ecb;\n          {\n            /*\r\n            * if THR exceeds EB, the quantization routines will take the\r\n            * difference from other bands. in case of strong tonal samples\r\n            * (tonaltest.wav) this leads to heavy distortions. that's why\r\n            * we limit THR here.\r\n            */\n            x = max[b];\n            x *= gfc.minval_s[b];\n            x *= avg_mask;\n            if (thr[b] > x) {\n              thr[b] = x;\n            }\n          }\n          if (gfc.masking_lower > 1) {\n            thr[b] *= gfc.masking_lower;\n          }\n          if (thr[b] > eb[b]) {\n            thr[b] = eb[b];\n          }\n          if (gfc.masking_lower < 1) {\n            thr[b] *= gfc.masking_lower;\n          }\n        }\n        for (; b < Encoder.CBANDS; ++b) {\n          eb[b] = 0;\n          thr[b] = 0;\n        }\n      }\n      function vbrpsy_compute_masking_l(gfc, fftenergy, eb_l, thr, chn) {\n        var max = new_float(Encoder.CBANDS),\n          avg = new_float(Encoder.CBANDS);\n        var mask_idx_l = new_int(Encoder.CBANDS + 2);\n        var b; /*********************************************************************\r\n               * Calculate the energy and the tonality of each partition.\r\n               *********************************************************************/\n        calc_energy(gfc, fftenergy, eb_l, max, avg);\n        calc_mask_index_l(gfc, max, avg, mask_idx_l); /*********************************************************************\r\n                                                      * convolve the partitioned energy and unpredictability with the\r\n                                                      * spreading function, s3_l[b][k]\r\n                                                      ********************************************************************/\n        var k = 0;\n        for (b = 0; b < gfc.npart_l; b++) {\n          var x, ecb, avg_mask, t; /* convolve the partitioned energy with the spreading function */\n          var kk = gfc.s3ind[b][0];\n          var last = gfc.s3ind[b][1];\n          var dd = 0,\n            dd_n = 0;\n          dd = mask_idx_l[kk];\n          dd_n += 1;\n          ecb = gfc.s3_ll[k] * eb_l[kk] * tab[mask_idx_l[kk]];\n          ++k;\n          ++kk;\n          while (kk <= last) {\n            dd += mask_idx_l[kk];\n            dd_n += 1;\n            x = gfc.s3_ll[k] * eb_l[kk] * tab[mask_idx_l[kk]];\n            t = vbrpsy_mask_add(ecb, x, kk - b);\n            ecb = t;\n            ++k;\n            ++kk;\n          }\n          dd = (1 + 2 * dd) / (2 * dd_n);\n          avg_mask = tab[dd] * 0.5;\n          ecb *= avg_mask; /**** long block pre-echo control ****/ /**\r\n                                                                   * <PRE>\r\n                                                                   * dont use long block pre-echo control if previous granule was\r\n                                                                   * a short block.  This is to avoid the situation:\r\n                                                                   * frame0:  quiet (very low masking)\r\n                                                                   * frame1:  surge  (triggers short blocks)\r\n                                                                   * frame2:  regular frame.  looks like pre-echo when compared to\r\n                                                                   *          frame0, but all pre-echo was in frame1.\r\n                                                                   * </PRE>\r\n                                                                   */ /*\r\n                                                                      * chn=0,1 L and R channels chn=2,3 S and M channels.\r\n                                                                      */\n          if (gfc.blocktype_old[chn & 0x01] == Encoder.SHORT_TYPE) {\n            var ecb_limit = rpelev * gfc.nb_1[chn][b];\n            if (ecb_limit > 0) {\n              thr[b] = Math.min(ecb, ecb_limit);\n            } else {\n              /**\r\n              * <PRE>\r\n              * Robert 071209:\r\n              * Because we don't calculate long block psy when we know a granule\r\n              * should be of short blocks, we don't have any clue how the granule\r\n              * before would have looked like as a long block. So we have to guess\r\n              * a little bit for this END_TYPE block.\r\n              * Most of the time we get away with this sloppyness. (fingers crossed :)\r\n              * The speed increase is worth it.\r\n              * </PRE>\r\n              */\n              thr[b] = Math.min(ecb, eb_l[b] * NS_PREECHO_ATT2);\n            }\n          } else {\n            var ecb_limit_2 = rpelev2 * gfc.nb_2[chn][b];\n            var ecb_limit_1 = rpelev * gfc.nb_1[chn][b];\n            var ecb_limit;\n            if (ecb_limit_2 <= 0) {\n              ecb_limit_2 = ecb;\n            }\n            if (ecb_limit_1 <= 0) {\n              ecb_limit_1 = ecb;\n            }\n            if (gfc.blocktype_old[chn & 0x01] == Encoder.NORM_TYPE) {\n              ecb_limit = Math.min(ecb_limit_1, ecb_limit_2);\n            } else {\n              ecb_limit = ecb_limit_1;\n            }\n            thr[b] = Math.min(ecb, ecb_limit);\n          }\n          gfc.nb_2[chn][b] = gfc.nb_1[chn][b];\n          gfc.nb_1[chn][b] = ecb;\n          {\n            /*\r\n            * if THR exceeds EB, the quantization routines will take the\r\n            * difference from other bands. in case of strong tonal samples\r\n            * (tonaltest.wav) this leads to heavy distortions. that's why\r\n            * we limit THR here.\r\n            */\n            x = max[b];\n            x *= gfc.minval_l[b];\n            x *= avg_mask;\n            if (thr[b] > x) {\n              thr[b] = x;\n            }\n          }\n          if (gfc.masking_lower > 1) {\n            thr[b] *= gfc.masking_lower;\n          }\n          if (thr[b] > eb_l[b]) {\n            thr[b] = eb_l[b];\n          }\n          if (gfc.masking_lower < 1) {\n            thr[b] *= gfc.masking_lower;\n          }\n        }\n        for (; b < Encoder.CBANDS; ++b) {\n          eb_l[b] = 0;\n          thr[b] = 0;\n        }\n      }\n      function vbrpsy_compute_block_type(gfp, uselongblock) {\n        var gfc = gfp.internal_flags;\n        if (gfp.short_blocks == ShortBlock.short_block_coupled /* force both channels to use the same block type */ /* this is necessary if the frame is to be encoded in ms_stereo. */ /* But even without ms_stereo, FhG does this */ && !(uselongblock[0] != 0 && uselongblock[1] != 0)) uselongblock[0] = uselongblock[1] = 0;\n        for (var chn = 0; chn < gfc.channels_out; chn++) {\n          /* disable short blocks */if (gfp.short_blocks == ShortBlock.short_block_dispensed) {\n            uselongblock[chn] = 1;\n          }\n          if (gfp.short_blocks == ShortBlock.short_block_forced) {\n            uselongblock[chn] = 0;\n          }\n        }\n      }\n      function vbrpsy_apply_block_type(gfp, uselongblock, blocktype_d) {\n        var gfc = gfp.internal_flags; /*\r\n                                      * update the blocktype of the previous granule, since it depends on\r\n                                      * what happend in this granule\r\n                                      */\n        for (var chn = 0; chn < gfc.channels_out; chn++) {\n          var blocktype = Encoder.NORM_TYPE; /* disable short blocks */\n          if (uselongblock[chn] != 0) {\n            /* no attack : use long blocks */if (gfc.blocktype_old[chn] == Encoder.SHORT_TYPE) blocktype = Encoder.STOP_TYPE;\n          } else {\n            /* attack : use short blocks */blocktype = Encoder.SHORT_TYPE;\n            if (gfc.blocktype_old[chn] == Encoder.NORM_TYPE) {\n              gfc.blocktype_old[chn] = Encoder.START_TYPE;\n            }\n            if (gfc.blocktype_old[chn] == Encoder.STOP_TYPE) gfc.blocktype_old[chn] = Encoder.SHORT_TYPE;\n          }\n          blocktype_d[chn] = gfc.blocktype_old[chn]; // value returned to calling program\n          gfc.blocktype_old[chn] = blocktype; // save for next call to l3psy_anal\n        }\n      } /**\r\n                   * compute M/S thresholds from Johnston & Ferreira 1992 ICASSP paper\r\n                   */\n      function vbrpsy_compute_MS_thresholds(eb, thr, cb_mld, ath_cb, athadjust, msfix, n) {\n        var msfix2 = msfix * 2;\n        var athlower = msfix > 0 ? Math.pow(10, athadjust) : 1;\n        var rside, rmid;\n        for (var b = 0; b < n; ++b) {\n          var ebM = eb[2][b];\n          var ebS = eb[3][b];\n          var thmL = thr[0][b];\n          var thmR = thr[1][b];\n          var thmM = thr[2][b];\n          var thmS = thr[3][b]; /* use this fix if L & R masking differs by 2db or less */\n          if (thmL <= 1.58 * thmR && thmR <= 1.58 * thmL) {\n            var mld_m = cb_mld[b] * ebS;\n            var mld_s = cb_mld[b] * ebM;\n            rmid = Math.max(thmM, Math.min(thmS, mld_m));\n            rside = Math.max(thmS, Math.min(thmM, mld_s));\n          } else {\n            rmid = thmM;\n            rside = thmS;\n          }\n          if (msfix > 0) {\n            /***************************************************************/ /* Adjust M/S maskings if user set \"msfix\" */ /***************************************************************/ /* Naoki Shibata 2000 */var thmLR, thmMS;\n            var ath = ath_cb[b] * athlower;\n            thmLR = Math.min(Math.max(thmL, ath), Math.max(thmR, ath));\n            thmM = Math.max(rmid, ath);\n            thmS = Math.max(rside, ath);\n            thmMS = thmM + thmS;\n            if (thmMS > 0 && thmLR * msfix2 < thmMS) {\n              var f = thmLR * msfix2 / thmMS;\n              thmM *= f;\n              thmS *= f;\n            }\n            rmid = Math.min(thmM, rmid);\n            rside = Math.min(thmS, rside);\n          }\n          if (rmid > ebM) {\n            rmid = ebM;\n          }\n          if (rside > ebS) {\n            rside = ebS;\n          }\n          thr[2][b] = rmid;\n          thr[3][b] = rside;\n        }\n      }\n      this.L3psycho_anal_vbr = function (gfp, buffer, bufPos, gr_out, masking_ratio, masking_MS_ratio, percep_entropy, percep_MS_entropy, energy, blocktype_d) {\n        var gfc = gfp.internal_flags; /* fft and energy calculation */\n        var wsamp_l;\n        var wsamp_s;\n        var fftenergy = new_float(Encoder.HBLKSIZE);\n        var fftenergy_s = new_float_n([3, Encoder.HBLKSIZE_s]);\n        var wsamp_L = new_float_n([2, Encoder.BLKSIZE]);\n        var wsamp_S = new_float_n([2, 3, Encoder.BLKSIZE_s]);\n        var eb = new_float_n([4, Encoder.CBANDS]),\n          thr = new_float_n([4, Encoder.CBANDS]);\n        var sub_short_factor = new_float_n([4, 3]);\n        var pcfact = 0.6; /* block type */\n        var ns_attacks = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n        var uselongblock = new_int(2); /* usual variables like loop indices, etc.. */ /* chn=2 and 3 = Mid and Side channels */\n        var n_chn_psy = gfp.mode == MPEGMode.JOINT_STEREO ? 4 : gfc.channels_out;\n        vbrpsy_attack_detection(gfp, buffer, bufPos, gr_out, masking_ratio, masking_MS_ratio, energy, sub_short_factor, ns_attacks, uselongblock);\n        vbrpsy_compute_block_type(gfp, uselongblock); /* LONG BLOCK CASE */\n        {\n          for (var chn = 0; chn < n_chn_psy; chn++) {\n            var ch01 = chn & 0x01;\n            wsamp_l = wsamp_L;\n            vbrpsy_compute_fft_l(gfp, buffer, bufPos, chn, gr_out, fftenergy, wsamp_l, ch01);\n            vbrpsy_compute_loudness_approximation_l(gfp, gr_out, chn, fftenergy);\n            if (uselongblock[ch01] != 0) {\n              vbrpsy_compute_masking_l(gfc, fftenergy, eb[chn], thr[chn], chn);\n            } else {\n              vbrpsy_skip_masking_l(gfc, chn);\n            }\n          }\n          if (uselongblock[0] + uselongblock[1] == 2) {\n            /* M/S channel */if (gfp.mode == MPEGMode.JOINT_STEREO) {\n              vbrpsy_compute_MS_thresholds(eb, thr, gfc.mld_cb_l, gfc.ATH.cb_l, gfp.ATHlower * gfc.ATH.adjust, gfp.msfix, gfc.npart_l);\n            }\n          } /* TODO: apply adaptive ATH masking here ?? */\n          for (var chn = 0; chn < n_chn_psy; chn++) {\n            var ch01 = chn & 0x01;\n            if (uselongblock[ch01] != 0) {\n              convert_partition2scalefac_l(gfc, eb[chn], thr[chn], chn);\n            }\n          }\n        } /* SHORT BLOCKS CASE */\n        {\n          for (var sblock = 0; sblock < 3; sblock++) {\n            for (var chn = 0; chn < n_chn_psy; ++chn) {\n              var ch01 = chn & 0x01;\n              if (uselongblock[ch01] != 0) {\n                vbrpsy_skip_masking_s(gfc, chn, sblock);\n              } else {\n                /* compute masking thresholds for short blocks */wsamp_s = wsamp_S;\n                vbrpsy_compute_fft_s(gfp, buffer, bufPos, chn, sblock, fftenergy_s, wsamp_s, ch01);\n                vbrpsy_compute_masking_s(gfp, fftenergy_s, eb[chn], thr[chn], chn, sblock);\n              }\n            }\n            if (uselongblock[0] + uselongblock[1] == 0) {\n              /* M/S channel */if (gfp.mode == MPEGMode.JOINT_STEREO) {\n                vbrpsy_compute_MS_thresholds(eb, thr, gfc.mld_cb_s, gfc.ATH.cb_s, gfp.ATHlower * gfc.ATH.adjust, gfp.msfix, gfc.npart_s);\n              } /* L/R channel */\n            } /* TODO: apply adaptive ATH masking here ?? */\n            for (var chn = 0; chn < n_chn_psy; ++chn) {\n              var ch01 = chn & 0x01;\n              if (0 == uselongblock[ch01]) {\n                convert_partition2scalefac_s(gfc, eb[chn], thr[chn], chn, sblock);\n              }\n            }\n          } /**** short block pre-echo control ****/\n          for (var chn = 0; chn < n_chn_psy; chn++) {\n            var ch01 = chn & 0x01;\n            if (uselongblock[ch01] != 0) {\n              continue;\n            }\n            for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\n              var new_thmm = new_float(3);\n              for (var sblock = 0; sblock < 3; sblock++) {\n                var thmm = gfc.thm[chn].s[sb][sblock];\n                thmm *= NS_PREECHO_ATT0;\n                if (ns_attacks[chn][sblock] >= 2 || ns_attacks[chn][sblock + 1] == 1) {\n                  var idx = sblock != 0 ? sblock - 1 : 2;\n                  var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm, NS_PREECHO_ATT1 * pcfact);\n                  thmm = Math.min(thmm, p);\n                } else if (ns_attacks[chn][sblock] == 1) {\n                  var idx = sblock != 0 ? sblock - 1 : 2;\n                  var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm, NS_PREECHO_ATT2 * pcfact);\n                  thmm = Math.min(thmm, p);\n                } else if (sblock != 0 && ns_attacks[chn][sblock - 1] == 3 || sblock == 0 && gfc.nsPsy.lastAttacks[chn] == 3) {\n                  var idx = sblock != 2 ? sblock + 1 : 0;\n                  var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm, NS_PREECHO_ATT2 * pcfact);\n                  thmm = Math.min(thmm, p);\n                } /* pulse like signal detection for fatboy.wav and so on */\n                thmm *= sub_short_factor[chn][sblock];\n                new_thmm[sblock] = thmm;\n              }\n              for (var sblock = 0; sblock < 3; sblock++) {\n                gfc.thm[chn].s[sb][sblock] = new_thmm[sblock];\n              }\n            }\n          }\n        }\n        for (var chn = 0; chn < n_chn_psy; chn++) {\n          gfc.nsPsy.lastAttacks[chn] = ns_attacks[chn][2];\n        } /***************************************************************\r\n          * determine final block type\r\n          ***************************************************************/\n        vbrpsy_apply_block_type(gfp, uselongblock, blocktype_d); /*********************************************************************\r\n                                                                 * compute the value of PE to return ... no delay and advance\r\n                                                                 *********************************************************************/\n        for (var chn = 0; chn < n_chn_psy; chn++) {\n          var ppe;\n          var ppePos;\n          var type;\n          var mr;\n          if (chn > 1) {\n            ppe = percep_MS_entropy;\n            ppePos = -2;\n            type = Encoder.NORM_TYPE;\n            if (blocktype_d[0] == Encoder.SHORT_TYPE || blocktype_d[1] == Encoder.SHORT_TYPE) type = Encoder.SHORT_TYPE;\n            mr = masking_MS_ratio[gr_out][chn - 2];\n          } else {\n            ppe = percep_entropy;\n            ppePos = 0;\n            type = blocktype_d[chn];\n            mr = masking_ratio[gr_out][chn];\n          }\n          if (type == Encoder.SHORT_TYPE) {\n            ppe[ppePos + chn] = pecalc_s(mr, gfc.masking_lower);\n          } else {\n            ppe[ppePos + chn] = pecalc_l(mr, gfc.masking_lower);\n          }\n          if (gfp.analysis) {\n            gfc.pinfo.pe[gr_out][chn] = ppe[ppePos + chn];\n          }\n        }\n        return 0;\n      };\n      function s3_func_x(bark, hf_slope) {\n        var tempx = bark,\n          tempy;\n        if (tempx >= 0) {\n          tempy = -tempx * 27;\n        } else {\n          tempy = tempx * hf_slope;\n        }\n        if (tempy <= -72.0) {\n          return 0;\n        }\n        return Math.exp(tempy * LN_TO_LOG10);\n      }\n      function norm_s3_func_x(hf_slope) {\n        var lim_a = 0,\n          lim_b = 0;\n        {\n          var x = 0,\n            l,\n            h;\n          for (x = 0; s3_func_x(x, hf_slope) > 1e-20; x -= 1) {}\n          l = x;\n          h = 0;\n          while (Math.abs(h - l) > 1e-12) {\n            x = (h + l) / 2;\n            if (s3_func_x(x, hf_slope) > 0) {\n              h = x;\n            } else {\n              l = x;\n            }\n          }\n          lim_a = l;\n        }\n        {\n          var x = 0,\n            l,\n            h;\n          for (x = 0; s3_func_x(x, hf_slope) > 1e-20; x += 1) {}\n          l = 0;\n          h = x;\n          while (Math.abs(h - l) > 1e-12) {\n            x = (h + l) / 2;\n            if (s3_func_x(x, hf_slope) > 0) {\n              l = x;\n            } else {\n              h = x;\n            }\n          }\n          lim_b = h;\n        }\n        {\n          var sum = 0;\n          var m = 1000;\n          var i;\n          for (i = 0; i <= m; ++i) {\n            var x = lim_a + i * (lim_b - lim_a) / m;\n            var y = s3_func_x(x, hf_slope);\n            sum += y;\n          }\n          {\n            var norm = (m + 1) / (sum * (lim_b - lim_a)); /* printf( \"norm = %lf\\n\",norm); */\n            return norm;\n          }\n        }\n      } /**\r\n        *   The spreading function.  Values returned in units of energy\r\n        */\n      function s3_func(bark) {\n        var tempx, x, tempy, temp;\n        tempx = bark;\n        if (tempx >= 0) tempx *= 3;else tempx *= 1.5;\n        if (tempx >= 0.5 && tempx <= 2.5) {\n          temp = tempx - 0.5;\n          x = 8.0 * (temp * temp - 2.0 * temp);\n        } else x = 0.0;\n        tempx += 0.474;\n        tempy = 15.811389 + 7.5 * tempx - 17.5 * Math.sqrt(1.0 + tempx * tempx);\n        if (tempy <= -60.0) return 0.0;\n        tempx = Math.exp((x + tempy) * LN_TO_LOG10); /**\r\n                                                     * <PRE>\r\n                                                     * Normalization.  The spreading function should be normalized so that:\r\n                                                     * +inf\r\n                                                     * /\r\n                                                     * |  s3 [ bark ]  d(bark)   =  1\r\n                                                     * /\r\n                                                     * -inf\r\n                                                     * </PRE>\r\n                                                     */\n        tempx /= .6609193;\n        return tempx;\n      } /**\r\n        * see for example \"Zwicker: Psychoakustik, 1982; ISBN 3-540-11401-7\r\n        */\n      function freq2bark(freq) {\n        /* input: freq in hz output: barks */if (freq < 0) freq = 0;\n        freq = freq * 0.001;\n        return 13.0 * Math.atan(.76 * freq) + 3.5 * Math.atan(freq * freq / (7.5 * 7.5));\n      }\n      function init_numline(numlines, bo, bm, bval, bval_width, mld, bo_w, sfreq, blksize, scalepos, deltafreq, sbmax) {\n        var b_frq = new_float(Encoder.CBANDS + 1);\n        var sample_freq_frac = sfreq / (sbmax > 15 ? 2 * 576 : 2 * 192);\n        var partition = new_int(Encoder.HBLKSIZE);\n        var i;\n        sfreq /= blksize;\n        var j = 0;\n        var ni = 0; /* compute numlines, the number of spectral lines in each partition band */ /* each partition band should be about DELBARK wide. */\n        for (i = 0; i < Encoder.CBANDS; i++) {\n          var bark1;\n          var j2;\n          bark1 = freq2bark(sfreq * j);\n          b_frq[i] = sfreq * j;\n          for (j2 = j; freq2bark(sfreq * j2) - bark1 < DELBARK && j2 <= blksize / 2; j2++) {}\n          numlines[i] = j2 - j;\n          ni = i + 1;\n          while (j < j2) {\n            partition[j++] = i;\n          }\n          if (j > blksize / 2) {\n            j = blksize / 2;\n            ++i;\n            break;\n          }\n        }\n        b_frq[i] = sfreq * j;\n        for (var sfb = 0; sfb < sbmax; sfb++) {\n          var i1, i2, start, end;\n          var arg;\n          start = scalepos[sfb];\n          end = scalepos[sfb + 1];\n          i1 = 0 | Math.floor(.5 + deltafreq * (start - .5));\n          if (i1 < 0) i1 = 0;\n          i2 = 0 | Math.floor(.5 + deltafreq * (end - .5));\n          if (i2 > blksize / 2) i2 = blksize / 2;\n          bm[sfb] = (partition[i1] + partition[i2]) / 2;\n          bo[sfb] = partition[i2];\n          var f_tmp = sample_freq_frac * end; /*\r\n                                              * calculate how much of this band belongs to current scalefactor\r\n                                              * band\r\n                                              */\n          bo_w[sfb] = (f_tmp - b_frq[bo[sfb]]) / (b_frq[bo[sfb] + 1] - b_frq[bo[sfb]]);\n          if (bo_w[sfb] < 0) {\n            bo_w[sfb] = 0;\n          } else {\n            if (bo_w[sfb] > 1) {\n              bo_w[sfb] = 1;\n            }\n          } /* setup stereo demasking thresholds */ /* formula reverse enginerred from plot in paper */\n          arg = freq2bark(sfreq * scalepos[sfb] * deltafreq);\n          arg = Math.min(arg, 15.5) / 15.5;\n          mld[sfb] = Math.pow(10.0, 1.25 * (1 - Math.cos(Math.PI * arg)) - 2.5);\n        } /* compute bark values of each critical band */\n        j = 0;\n        for (var k = 0; k < ni; k++) {\n          var w = numlines[k];\n          var bark1, bark2;\n          bark1 = freq2bark(sfreq * j);\n          bark2 = freq2bark(sfreq * (j + w - 1));\n          bval[k] = .5 * (bark1 + bark2);\n          bark1 = freq2bark(sfreq * (j - .5));\n          bark2 = freq2bark(sfreq * (j + w - .5));\n          bval_width[k] = bark2 - bark1;\n          j += w;\n        }\n        return ni;\n      }\n      function init_s3_values(s3ind, npart, bval, bval_width, norm, use_old_s3) {\n        var s3 = new_float_n([Encoder.CBANDS, Encoder.CBANDS]); /*\r\n                                                                * The s3 array is not linear in the bark scale.\r\n                                                                *\r\n                                                                * bval[x] should be used to get the bark value.\r\n                                                                */\n        var j;\n        var numberOfNoneZero = 0; /**\r\n                                  * <PRE>\r\n                                  * s[i][j], the value of the spreading function,\r\n                                  * centered at band j (masker), for band i (maskee)\r\n                                  *\r\n                                  * i.e.: sum over j to spread into signal barkval=i\r\n                                  * NOTE: i and j are used opposite as in the ISO docs\r\n                                  * </PRE>\r\n                                  */\n        if (use_old_s3) {\n          for (var i = 0; i < npart; i++) {\n            for (j = 0; j < npart; j++) {\n              var v = s3_func(bval[i] - bval[j]) * bval_width[j];\n              s3[i][j] = v * norm[i];\n            }\n          }\n        } else {\n          for (j = 0; j < npart; j++) {\n            var hf_slope = 15 + Math.min(21 / bval[j], 12);\n            var s3_x_norm = norm_s3_func_x(hf_slope);\n            for (var i = 0; i < npart; i++) {\n              var v = s3_x_norm * s3_func_x(bval[i] - bval[j], hf_slope) * bval_width[j];\n              s3[i][j] = v * norm[i];\n            }\n          }\n        }\n        for (var i = 0; i < npart; i++) {\n          for (j = 0; j < npart; j++) {\n            if (s3[i][j] > 0.0) break;\n          }\n          s3ind[i][0] = j;\n          for (j = npart - 1; j > 0; j--) {\n            if (s3[i][j] > 0.0) break;\n          }\n          s3ind[i][1] = j;\n          numberOfNoneZero += s3ind[i][1] - s3ind[i][0] + 1;\n        }\n        var p = new_float(numberOfNoneZero);\n        var k = 0;\n        for (var i = 0; i < npart; i++) {\n          for (j = s3ind[i][0]; j <= s3ind[i][1]; j++) {\n            p[k++] = s3[i][j];\n          }\n        }\n        return p;\n      }\n      function stereo_demask(f) {\n        /* setup stereo demasking thresholds */ /* formula reverse enginerred from plot in paper */var arg = freq2bark(f);\n        arg = Math.min(arg, 15.5) / 15.5;\n        return Math.pow(10.0, 1.25 * (1 - Math.cos(Math.PI * arg)) - 2.5);\n      } /**\r\n        * NOTE: the bitrate reduction from the inter-channel masking effect is low\r\n        * compared to the chance of getting annyoing artefacts. L3psycho_anal_vbr\r\n        * does not use this feature. (Robert 071216)\r\n        */\n      this.psymodel_init = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var i;\n        var useOldS3 = true;\n        var bvl_a = 13,\n          bvl_b = 24;\n        var snr_l_a = 0,\n          snr_l_b = 0;\n        var snr_s_a = -8.25,\n          snr_s_b = -4.5;\n        var bval = new_float(Encoder.CBANDS);\n        var bval_width = new_float(Encoder.CBANDS);\n        var norm = new_float(Encoder.CBANDS);\n        var sfreq = gfp.out_samplerate;\n        switch (gfp.experimentalZ) {\n          default:\n          case 0:\n            useOldS3 = true;\n            break;\n          case 1:\n            useOldS3 = gfp.VBR == VbrMode.vbr_mtrh || gfp.VBR == VbrMode.vbr_mt ? false : true;\n            break;\n          case 2:\n            useOldS3 = false;\n            break;\n          case 3:\n            bvl_a = 8;\n            snr_l_a = -1.75;\n            snr_l_b = -0.0125;\n            snr_s_a = -8.25;\n            snr_s_b = -2.25;\n            break;\n        }\n        gfc.ms_ener_ratio_old = .25;\n        gfc.blocktype_old[0] = gfc.blocktype_old[1] = Encoder.NORM_TYPE; // the vbr header is long blocks\n        for (i = 0; i < 4; ++i) {\n          for (var j = 0; j < Encoder.CBANDS; ++j) {\n            gfc.nb_1[i][j] = 1e20;\n            gfc.nb_2[i][j] = 1e20;\n            gfc.nb_s1[i][j] = gfc.nb_s2[i][j] = 1.0;\n          }\n          for (var sb = 0; sb < Encoder.SBMAX_l; sb++) {\n            gfc.en[i].l[sb] = 1e20;\n            gfc.thm[i].l[sb] = 1e20;\n          }\n          for (var j = 0; j < 3; ++j) {\n            for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\n              gfc.en[i].s[sb][j] = 1e20;\n              gfc.thm[i].s[sb][j] = 1e20;\n            }\n            gfc.nsPsy.lastAttacks[i] = 0;\n          }\n          for (var j = 0; j < 9; j++) {\n            gfc.nsPsy.last_en_subshort[i][j] = 10.;\n          }\n        } /* init. for loudness approx. -jd 2001 mar 27 */\n        gfc.loudness_sq_save[0] = gfc.loudness_sq_save[1] = 0.0; /*************************************************************************\r\n                                                                 * now compute the psychoacoustic model specific constants\r\n                                                                 ************************************************************************/ /* compute numlines, bo, bm, bval, bval_width, mld */\n        gfc.npart_l = init_numline(gfc.numlines_l, gfc.bo_l, gfc.bm_l, bval, bval_width, gfc.mld_l, gfc.PSY.bo_l_weight, sfreq, Encoder.BLKSIZE, gfc.scalefac_band.l, Encoder.BLKSIZE / (2.0 * 576), Encoder.SBMAX_l); /* compute the spreading function */\n        for (i = 0; i < gfc.npart_l; i++) {\n          var snr = snr_l_a;\n          if (bval[i] >= bvl_a) {\n            snr = snr_l_b * (bval[i] - bvl_a) / (bvl_b - bvl_a) + snr_l_a * (bvl_b - bval[i]) / (bvl_b - bvl_a);\n          }\n          norm[i] = Math.pow(10.0, snr / 10.0);\n          if (gfc.numlines_l[i] > 0) {\n            gfc.rnumlines_l[i] = 1.0 / gfc.numlines_l[i];\n          } else {\n            gfc.rnumlines_l[i] = 0;\n          }\n        }\n        gfc.s3_ll = init_s3_values(gfc.s3ind, gfc.npart_l, bval, bval_width, norm, useOldS3); /* compute long block specific values, ATH and MINVAL */\n        var j = 0;\n        for (i = 0; i < gfc.npart_l; i++) {\n          var x; /* ATH */\n          x = Float.MAX_VALUE;\n          for (var k = 0; k < gfc.numlines_l[i]; k++, j++) {\n            var freq = sfreq * j / (1000.0 * Encoder.BLKSIZE);\n            var level; /*\r\n                       * ATH below 100 Hz constant, not further climbing\r\n                       */\n            level = this.ATHformula(freq * 1000, gfp) - 20; // scale to FFT units; returned value is in dB\n            level = Math.pow(10., 0.1 * level); // convert from dB . energy\n            level *= gfc.numlines_l[i];\n            if (x > level) x = level;\n          }\n          gfc.ATH.cb_l[i] = x; /*\r\n                               * MINVAL. For low freq, the strength of the masking is limited by\r\n                               * minval this is an ISO MPEG1 thing, dont know if it is really\r\n                               * needed\r\n                               */ /*\r\n                                  * FIXME: it does work to reduce low-freq problems in S53-Wind-Sax\r\n                                  * and lead-voice samples, but introduces some 3 kbps bit bloat too.\r\n                                  * TODO: Further refinement of the shape of this hack.\r\n                                  */\n          x = -20 + bval[i] * 20 / 10;\n          if (x > 6) {\n            x = 100;\n          }\n          if (x < -15) {\n            x = -15;\n          }\n          x -= 8.;\n          gfc.minval_l[i] = Math.pow(10.0, x / 10.) * gfc.numlines_l[i];\n        } /************************************************************************\r\n          * do the same things for short blocks\r\n          ************************************************************************/\n        gfc.npart_s = init_numline(gfc.numlines_s, gfc.bo_s, gfc.bm_s, bval, bval_width, gfc.mld_s, gfc.PSY.bo_s_weight, sfreq, Encoder.BLKSIZE_s, gfc.scalefac_band.s, Encoder.BLKSIZE_s / (2.0 * 192), Encoder.SBMAX_s); /* SNR formula. short block is normalized by SNR. is it still right ? */\n        j = 0;\n        for (i = 0; i < gfc.npart_s; i++) {\n          var x;\n          var snr = snr_s_a;\n          if (bval[i] >= bvl_a) {\n            snr = snr_s_b * (bval[i] - bvl_a) / (bvl_b - bvl_a) + snr_s_a * (bvl_b - bval[i]) / (bvl_b - bvl_a);\n          }\n          norm[i] = Math.pow(10.0, snr / 10.0); /* ATH */\n          x = Float.MAX_VALUE;\n          for (var k = 0; k < gfc.numlines_s[i]; k++, j++) {\n            var freq = sfreq * j / (1000.0 * Encoder.BLKSIZE_s);\n            var level; /* freq = Min(.1,freq); */ /*\r\n                                                  * ATH below 100 Hz constant, not\r\n                                                  * further climbing\r\n                                                  */\n            level = this.ATHformula(freq * 1000, gfp) - 20; // scale to FFT units; returned value is in dB\n            level = Math.pow(10., 0.1 * level); // convert from dB . energy\n            level *= gfc.numlines_s[i];\n            if (x > level) x = level;\n          }\n          gfc.ATH.cb_s[i] = x; /*\r\n                               * MINVAL. For low freq, the strength of the masking is limited by\r\n                               * minval this is an ISO MPEG1 thing, dont know if it is really\r\n                               * needed\r\n                               */\n          x = -7.0 + bval[i] * 7.0 / 12.0;\n          if (bval[i] > 12) {\n            x *= 1 + Math.log(1 + x) * 3.1;\n          }\n          if (bval[i] < 12) {\n            x *= 1 + Math.log(1 - x) * 2.3;\n          }\n          if (x < -15) {\n            x = -15;\n          }\n          x -= 8;\n          gfc.minval_s[i] = Math.pow(10.0, x / 10) * gfc.numlines_s[i];\n        }\n        gfc.s3_ss = init_s3_values(gfc.s3ind_s, gfc.npart_s, bval, bval_width, norm, useOldS3);\n        init_mask_add_max_values();\n        fft.init_fft(gfc); /* setup temporal masking */\n        gfc.decay = Math.exp(-1.0 * LOG10 / (temporalmask_sustain_sec * sfreq / 192.0));\n        {\n          var msfix;\n          msfix = NS_MSFIX;\n          if ((gfp.exp_nspsytune & 2) != 0) msfix = 1.0;\n          if (Math.abs(gfp.msfix) > 0.0) msfix = gfp.msfix;\n          gfp.msfix = msfix; /*\r\n                             * spread only from npart_l bands. Normally, we use the spreading\r\n                             * function to convolve from npart_l down to npart_l bands\r\n                             */\n          for (var b = 0; b < gfc.npart_l; b++) {\n            if (gfc.s3ind[b][1] > gfc.npart_l - 1) gfc.s3ind[b][1] = gfc.npart_l - 1;\n          }\n        } /*\r\n          * prepare for ATH auto adjustment: we want to decrease the ATH by 12 dB\r\n          * per second\r\n          */\n        var frame_duration = 576. * gfc.mode_gr / sfreq;\n        gfc.ATH.decay = Math.pow(10., -12. / 10. * frame_duration);\n        gfc.ATH.adjust = 0.01; /* minimum, for leading low loudness */\n        gfc.ATH.adjustLimit = 1.0; /* on lead, allow adjust up to maximum */\n        if (gfp.ATHtype != -1) {\n          /* compute equal loudness weights (eql_w) */var freq;\n          var freq_inc = gfp.out_samplerate / Encoder.BLKSIZE;\n          var eql_balance = 0.0;\n          freq = 0.0;\n          for (i = 0; i < Encoder.BLKSIZE / 2; ++i) {\n            /* convert ATH dB to relative power (not dB) */ /* to determine eql_w */freq += freq_inc;\n            gfc.ATH.eql_w[i] = 1. / Math.pow(10, this.ATHformula(freq, gfp) / 10);\n            eql_balance += gfc.ATH.eql_w[i];\n          }\n          eql_balance = 1.0 / eql_balance;\n          for (i = Encoder.BLKSIZE / 2; --i >= 0;) {\n            /* scale weights */gfc.ATH.eql_w[i] *= eql_balance;\n          }\n        }\n        {\n          for (var b = j = 0; b < gfc.npart_s; ++b) {\n            for (i = 0; i < gfc.numlines_s[b]; ++i) {\n              ++j;\n            }\n          }\n          for (var b = j = 0; b < gfc.npart_l; ++b) {\n            for (i = 0; i < gfc.numlines_l[b]; ++i) {\n              ++j;\n            }\n          }\n        }\n        j = 0;\n        for (i = 0; i < gfc.npart_l; i++) {\n          var freq = sfreq * (j + gfc.numlines_l[i] / 2) / (1.0 * Encoder.BLKSIZE);\n          gfc.mld_cb_l[i] = stereo_demask(freq);\n          j += gfc.numlines_l[i];\n        }\n        for (; i < Encoder.CBANDS; ++i) {\n          gfc.mld_cb_l[i] = 1;\n        }\n        j = 0;\n        for (i = 0; i < gfc.npart_s; i++) {\n          var freq = sfreq * (j + gfc.numlines_s[i] / 2) / (1.0 * Encoder.BLKSIZE_s);\n          gfc.mld_cb_s[i] = stereo_demask(freq);\n          j += gfc.numlines_s[i];\n        }\n        for (; i < Encoder.CBANDS; ++i) {\n          gfc.mld_cb_s[i] = 1;\n        }\n        return 0;\n      }; /**\r\n         * Those ATH formulas are returning their minimum value for input = -1\r\n         */\n      function ATHformula_GB(f, value) {\n        /**\r\n        * <PRE>\r\n        *  from Painter & Spanias\r\n        *           modified by Gabriel Bouvigne to better fit the reality\r\n        *           ath =    3.640 * pow(f,-0.8)\r\n        *           - 6.800 * exp(-0.6*pow(f-3.4,2.0))\r\n        *           + 6.000 * exp(-0.15*pow(f-8.7,2.0))\r\n        *           + 0.6* 0.001 * pow(f,4.0);\r\n        *\r\n        *\r\n        *           In the past LAME was using the Painter &Spanias formula.\r\n        *           But we had some recurrent problems with HF content.\r\n        *           We measured real ATH values, and found the older formula\r\n        *           to be inaccurate in the higher part. So we made this new\r\n        *           formula and this solved most of HF problematic test cases.\r\n        *           The tradeoff is that in VBR mode it increases a lot the\r\n        *           bitrate.\r\n        * </PRE>\r\n        */ /*\r\n           * This curve can be adjusted according to the VBR scale: it adjusts\r\n           * from something close to Painter & Spanias on V9 up to Bouvigne's\r\n           * formula for V0. This way the VBR bitrate is more balanced according\r\n           * to the -V value.\r\n           */ // the following Hack allows to ask for the lowest value\n        if (f < -.3) f = 3410; // convert to khz\n        f /= 1000;\n        f = Math.max(0.1, f);\n        var ath = 3.640 * Math.pow(f, -0.8) - 6.800 * Math.exp(-0.6 * Math.pow(f - 3.4, 2.0)) + 6.000 * Math.exp(-0.15 * Math.pow(f - 8.7, 2.0)) + (0.6 + 0.04 * value) * 0.001 * Math.pow(f, 4.0);\n        return ath;\n      }\n      this.ATHformula = function (f, gfp) {\n        var ath;\n        switch (gfp.ATHtype) {\n          case 0:\n            ath = ATHformula_GB(f, 9);\n            break;\n          case 1:\n            // over sensitive, should probably be removed\n            ath = ATHformula_GB(f, -1);\n            break;\n          case 2:\n            ath = ATHformula_GB(f, 0);\n            break;\n          case 3:\n            // modification of GB formula by Roel\n            ath = ATHformula_GB(f, 1) + 6;\n            break;\n          case 4:\n            ath = ATHformula_GB(f, gfp.ATHcurve);\n            break;\n          default:\n            ath = ATHformula_GB(f, 0);\n            break;\n        }\n        return ath;\n      };\n    }\n    function Lame() {\n      var self = this;\n      var LAME_MAXALBUMART = 128 * 1024;\n      Lame.V9 = 410;\n      Lame.V8 = 420;\n      Lame.V7 = 430;\n      Lame.V6 = 440;\n      Lame.V5 = 450;\n      Lame.V4 = 460;\n      Lame.V3 = 470;\n      Lame.V2 = 480;\n      Lame.V1 = 490;\n      Lame.V0 = 500; /* still there for compatibility */\n      Lame.R3MIX = 1000;\n      Lame.STANDARD = 1001;\n      Lame.EXTREME = 1002;\n      Lame.INSANE = 1003;\n      Lame.STANDARD_FAST = 1004;\n      Lame.EXTREME_FAST = 1005;\n      Lame.MEDIUM = 1006;\n      Lame.MEDIUM_FAST = 1007; /**\r\n                               * maximum size of mp3buffer needed if you encode at most 1152 samples for\r\n                               * each call to lame_encode_buffer. see lame_encode_buffer() below\r\n                               * (LAME_MAXMP3BUFFER is now obsolete)\r\n                               */\n      var LAME_MAXMP3BUFFER = 16384 + LAME_MAXALBUMART;\n      Lame.LAME_MAXMP3BUFFER = LAME_MAXMP3BUFFER;\n      var ga;\n      var bs;\n      var p;\n      var qupvt;\n      var qu;\n      var psy = new PsyModel();\n      var vbr;\n      var ver;\n      var id3;\n      var mpglib;\n      this.enc = new Encoder();\n      this.setModules = function (_ga, _bs, _p, _qupvt, _qu, _vbr, _ver, _id3, _mpglib) {\n        ga = _ga;\n        bs = _bs;\n        p = _p;\n        qupvt = _qupvt;\n        qu = _qu;\n        vbr = _vbr;\n        ver = _ver;\n        id3 = _id3;\n        mpglib = _mpglib;\n        this.enc.setModules(bs, psy, qupvt, vbr);\n      }; /**\r\n         * PSY Model related stuff\r\n         */\n      function PSY() {\n        /**\r\n        * The dbQ stuff.\r\n        */\n        this.mask_adjust = 0.; /**\r\n                               * The dbQ stuff.\r\n                               */\n        this.mask_adjust_short = 0.; /* at transition from one scalefactor band to next */ /**\r\n                                                                                           * Band weight long scalefactor bands.\r\n                                                                                           */\n        this.bo_l_weight = new_float(Encoder.SBMAX_l); /**\r\n                                                       * Band weight short scalefactor bands.\r\n                                                       */\n        this.bo_s_weight = new_float(Encoder.SBMAX_s);\n      }\n      function LowPassHighPass() {\n        this.lowerlimit = 0.;\n      }\n      function BandPass(bitrate, lPass) {\n        this.lowpass = lPass;\n      }\n      var LAME_ID = 0xFFF88E3B;\n      function lame_init_old(gfp) {\n        var gfc;\n        gfp.class_id = LAME_ID;\n        gfc = gfp.internal_flags = new LameInternalFlags(); /* Global flags. set defaults here for non-zero values */ /* see lame.h for description */ /*\r\n                                                                                                                                                       * set integer values to -1 to mean that LAME will compute the best\r\n                                                                                                                                                       * value, UNLESS the calling program as set it (and the value is no\r\n                                                                                                                                                       * longer -1)\r\n                                                                                                                                                       */\n        gfp.mode = MPEGMode.NOT_SET;\n        gfp.original = 1;\n        gfp.in_samplerate = 44100;\n        gfp.num_channels = 2;\n        gfp.num_samples = -1;\n        gfp.bWriteVbrTag = true;\n        gfp.quality = -1;\n        gfp.short_blocks = null;\n        gfc.subblock_gain = -1;\n        gfp.lowpassfreq = 0;\n        gfp.highpassfreq = 0;\n        gfp.lowpasswidth = -1;\n        gfp.highpasswidth = -1;\n        gfp.VBR = VbrMode.vbr_off;\n        gfp.VBR_q = 4;\n        gfp.ATHcurve = -1;\n        gfp.VBR_mean_bitrate_kbps = 128;\n        gfp.VBR_min_bitrate_kbps = 0;\n        gfp.VBR_max_bitrate_kbps = 0;\n        gfp.VBR_hard_min = 0;\n        gfc.VBR_min_bitrate = 1; /* not 0 ????? */\n        gfc.VBR_max_bitrate = 13; /* not 14 ????? */\n        gfp.quant_comp = -1;\n        gfp.quant_comp_short = -1;\n        gfp.msfix = -1;\n        gfc.resample_ratio = 1;\n        gfc.OldValue[0] = 180;\n        gfc.OldValue[1] = 180;\n        gfc.CurrentStep[0] = 4;\n        gfc.CurrentStep[1] = 4;\n        gfc.masking_lower = 1;\n        gfc.nsPsy.attackthre = -1;\n        gfc.nsPsy.attackthre_s = -1;\n        gfp.scale = -1;\n        gfp.athaa_type = -1;\n        gfp.ATHtype = -1; /* default = -1 = set in lame_init_params */\n        gfp.athaa_loudapprox = -1; /* 1 = flat loudness approx. (total energy) */ /* 2 = equal loudness curve */\n        gfp.athaa_sensitivity = 0.0; /* no offset */\n        gfp.useTemporal = null;\n        gfp.interChRatio = -1; /*\r\n                               * The reason for int mf_samples_to_encode = ENCDELAY + POSTDELAY;\r\n                               * ENCDELAY = internal encoder delay. And then we have to add\r\n                               * POSTDELAY=288 because of the 50% MDCT overlap. A 576 MDCT granule\r\n                               * decodes to 1152 samples. To synthesize the 576 samples centered under\r\n                               * this granule we need the previous granule for the first 288 samples\r\n                               * (no problem), and the next granule for the next 288 samples (not\r\n                               * possible if this is last granule). So we need to pad with 288 samples\r\n                               * to make sure we can encode the 576 samples we are interested in.\r\n                               */\n        gfc.mf_samples_to_encode = Encoder.ENCDELAY + Encoder.POSTDELAY;\n        gfp.encoder_padding = 0;\n        gfc.mf_size = Encoder.ENCDELAY - Encoder.MDCTDELAY; /*\r\n                                                            * we pad input with this many 0's\r\n                                                            */\n        gfp.findReplayGain = false;\n        gfp.decode_on_the_fly = false;\n        gfc.decode_on_the_fly = false;\n        gfc.findReplayGain = false;\n        gfc.findPeakSample = false;\n        gfc.RadioGain = 0;\n        gfc.AudiophileGain = 0;\n        gfc.noclipGainChange = 0;\n        gfc.noclipScale = -1.0;\n        gfp.preset = 0;\n        gfp.write_id3tag_automatic = true;\n        return 0;\n      }\n      this.lame_init = function () {\n        var gfp = new LameGlobalFlags();\n        var ret = lame_init_old(gfp);\n        if (ret != 0) {\n          return null;\n        }\n        gfp.lame_allocated_gfp = 1;\n        return gfp;\n      };\n      function filter_coef(x) {\n        if (x > 1.0) return 0.0;\n        if (x <= 0.0) return 1.0;\n        return Math.cos(Math.PI / 2 * x);\n      }\n      this.nearestBitrateFullIndex = function (bitrate) {\n        /* borrowed from DM abr presets */var full_bitrate_table = [8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320];\n        var lower_range = 0,\n          lower_range_kbps = 0,\n          upper_range = 0,\n          upper_range_kbps = 0; /* We assume specified bitrate will be 320kbps */\n        upper_range_kbps = full_bitrate_table[16];\n        upper_range = 16;\n        lower_range_kbps = full_bitrate_table[16];\n        lower_range = 16; /*\r\n                          * Determine which significant bitrates the value specified falls\r\n                          * between, if loop ends without breaking then we were correct above\r\n                          * that the value was 320\r\n                          */\n        for (var b = 0; b < 16; b++) {\n          if (Math.max(bitrate, full_bitrate_table[b + 1]) != bitrate) {\n            upper_range_kbps = full_bitrate_table[b + 1];\n            upper_range = b + 1;\n            lower_range_kbps = full_bitrate_table[b];\n            lower_range = b;\n            break; /* We found upper range */\n          }\n        } /* Determine which range the value specified is closer to */\n        if (upper_range_kbps - bitrate > bitrate - lower_range_kbps) {\n          return lower_range;\n        }\n        return upper_range;\n      };\n      function optimum_samplefreq(lowpassfreq, input_samplefreq) {\n        /*\r\n        * Rules:\r\n        *\r\n        * - if possible, sfb21 should NOT be used\r\n        */\n        var suggested_samplefreq = 44100;\n        if (input_samplefreq >= 48000) suggested_samplefreq = 48000;else if (input_samplefreq >= 44100) suggested_samplefreq = 44100;else if (input_samplefreq >= 32000) suggested_samplefreq = 32000;else if (input_samplefreq >= 24000) suggested_samplefreq = 24000;else if (input_samplefreq >= 22050) suggested_samplefreq = 22050;else if (input_samplefreq >= 16000) suggested_samplefreq = 16000;else if (input_samplefreq >= 12000) suggested_samplefreq = 12000;else if (input_samplefreq >= 11025) suggested_samplefreq = 11025;else if (input_samplefreq >= 8000) suggested_samplefreq = 8000;\n        if (lowpassfreq == -1) return suggested_samplefreq;\n        if (lowpassfreq <= 15960) suggested_samplefreq = 44100;\n        if (lowpassfreq <= 15250) suggested_samplefreq = 32000;\n        if (lowpassfreq <= 11220) suggested_samplefreq = 24000;\n        if (lowpassfreq <= 9970) suggested_samplefreq = 22050;\n        if (lowpassfreq <= 7230) suggested_samplefreq = 16000;\n        if (lowpassfreq <= 5420) suggested_samplefreq = 12000;\n        if (lowpassfreq <= 4510) suggested_samplefreq = 11025;\n        if (lowpassfreq <= 3970) suggested_samplefreq = 8000;\n        if (input_samplefreq < suggested_samplefreq) {\n          /*\r\n          * choose a valid MPEG sample frequency above the input sample\r\n          * frequency to avoid SFB21/12 bitrate bloat rh 061115\r\n          */\n          if (input_samplefreq > 44100) {\n            return 48000;\n          }\n          if (input_samplefreq > 32000) {\n            return 44100;\n          }\n          if (input_samplefreq > 24000) {\n            return 32000;\n          }\n          if (input_samplefreq > 22050) {\n            return 24000;\n          }\n          if (input_samplefreq > 16000) {\n            return 22050;\n          }\n          if (input_samplefreq > 12000) {\n            return 16000;\n          }\n          if (input_samplefreq > 11025) {\n            return 12000;\n          }\n          if (input_samplefreq > 8000) {\n            return 11025;\n          }\n          return 8000;\n        }\n        return suggested_samplefreq;\n      } /**\r\n        * convert samp freq in Hz to index\r\n        */\n      function SmpFrqIndex(sample_freq, gpf) {\n        switch (sample_freq) {\n          case 44100:\n            gpf.version = 1;\n            return 0;\n          case 48000:\n            gpf.version = 1;\n            return 1;\n          case 32000:\n            gpf.version = 1;\n            return 2;\n          case 22050:\n            gpf.version = 0;\n            return 0;\n          case 24000:\n            gpf.version = 0;\n            return 1;\n          case 16000:\n            gpf.version = 0;\n            return 2;\n          case 11025:\n            gpf.version = 0;\n            return 0;\n          case 12000:\n            gpf.version = 0;\n            return 1;\n          case 8000:\n            gpf.version = 0;\n            return 2;\n          default:\n            gpf.version = 0;\n            return -1;\n        }\n      } /**\r\n        * @param bRate\r\n        *            legal rates from 8 to 320\r\n        */\n      function FindNearestBitrate(bRate, version, samplerate) {\n        /* MPEG-1 or MPEG-2 LSF */if (samplerate < 16000) version = 2;\n        var bitrate = Tables.bitrate_table[version][1];\n        for (var i = 2; i <= 14; i++) {\n          if (Tables.bitrate_table[version][i] > 0) {\n            if (Math.abs(Tables.bitrate_table[version][i] - bRate) < Math.abs(bitrate - bRate)) bitrate = Tables.bitrate_table[version][i];\n          }\n        }\n        return bitrate;\n      } /**\r\n        * @param bRate\r\n        *            legal rates from 32 to 448 kbps\r\n        * @param version\r\n        *            MPEG-1 or MPEG-2/2.5 LSF\r\n        */\n      function BitrateIndex(bRate, version, samplerate) {\n        /* convert bitrate in kbps to index */if (samplerate < 16000) version = 2;\n        for (var i = 0; i <= 14; i++) {\n          if (Tables.bitrate_table[version][i] > 0) {\n            if (Tables.bitrate_table[version][i] == bRate) {\n              return i;\n            }\n          }\n        }\n        return -1;\n      }\n      function optimum_bandwidth(lh, bitrate) {\n        /**\r\n        * <PRE>\r\n        *  Input:\r\n        *      bitrate     total bitrate in kbps\r\n        *\r\n        *   Output:\r\n        *      lowerlimit: best lowpass frequency limit for input filter in Hz\r\n        *      upperlimit: best highpass frequency limit for input filter in Hz\r\n        * </PRE>\r\n        */\n        var freq_map = [new BandPass(8, 2000), new BandPass(16, 3700), new BandPass(24, 3900), new BandPass(32, 5500), new BandPass(40, 7000), new BandPass(48, 7500), new BandPass(56, 10000), new BandPass(64, 11000), new BandPass(80, 13500), new BandPass(96, 15100), new BandPass(112, 15600), new BandPass(128, 17000), new BandPass(160, 17500), new BandPass(192, 18600), new BandPass(224, 19400), new BandPass(256, 19700), new BandPass(320, 20500)];\n        var table_index = self.nearestBitrateFullIndex(bitrate);\n        lh.lowerlimit = freq_map[table_index].lowpass;\n      }\n      function lame_init_params_ppflt(gfp) {\n        var gfc = gfp.internal_flags; /***************************************************************/ /* compute info needed for polyphase filter (filter type==0, default) */ /***************************************************************/\n        var lowpass_band = 32;\n        var highpass_band = -1;\n        if (gfc.lowpass1 > 0) {\n          var minband = 999;\n          for (var band = 0; band <= 31; band++) {\n            var freq = band / 31.0; /* this band and above will be zeroed: */\n            if (freq >= gfc.lowpass2) {\n              lowpass_band = Math.min(lowpass_band, band);\n            }\n            if (gfc.lowpass1 < freq && freq < gfc.lowpass2) {\n              minband = Math.min(minband, band);\n            }\n          } /*\r\n            * compute the *actual* transition band implemented by the polyphase\r\n            * filter\r\n            */\n          if (minband == 999) {\n            gfc.lowpass1 = (lowpass_band - .75) / 31.0;\n          } else {\n            gfc.lowpass1 = (minband - .75) / 31.0;\n          }\n          gfc.lowpass2 = lowpass_band / 31.0;\n        } /*\r\n          * make sure highpass filter is within 90% of what the effective\r\n          * highpass frequency will be\r\n          */\n        if (gfc.highpass2 > 0) {\n          if (gfc.highpass2 < .9 * (.75 / 31.0)) {\n            gfc.highpass1 = 0;\n            gfc.highpass2 = 0;\n            System.err.println(\"Warning: highpass filter disabled.  \" + \"highpass frequency too small\\n\");\n          }\n        }\n        if (gfc.highpass2 > 0) {\n          var maxband = -1;\n          for (var band = 0; band <= 31; band++) {\n            var freq = band / 31.0; /* this band and below will be zereod */\n            if (freq <= gfc.highpass1) {\n              highpass_band = Math.max(highpass_band, band);\n            }\n            if (gfc.highpass1 < freq && freq < gfc.highpass2) {\n              maxband = Math.max(maxband, band);\n            }\n          } /*\r\n            * compute the *actual* transition band implemented by the polyphase\r\n            * filter\r\n            */\n          gfc.highpass1 = highpass_band / 31.0;\n          if (maxband == -1) {\n            gfc.highpass2 = (highpass_band + .75) / 31.0;\n          } else {\n            gfc.highpass2 = (maxband + .75) / 31.0;\n          }\n        }\n        for (var band = 0; band < 32; band++) {\n          var fc1, fc2;\n          var freq = band / 31.0;\n          if (gfc.highpass2 > gfc.highpass1) {\n            fc1 = filter_coef((gfc.highpass2 - freq) / (gfc.highpass2 - gfc.highpass1 + 1e-20));\n          } else {\n            fc1 = 1.0;\n          }\n          if (gfc.lowpass2 > gfc.lowpass1) {\n            fc2 = filter_coef((freq - gfc.lowpass1) / (gfc.lowpass2 - gfc.lowpass1 + 1e-20));\n          } else {\n            fc2 = 1.0;\n          }\n          gfc.amp_filter[band] = fc1 * fc2;\n        }\n      }\n      function lame_init_qval(gfp) {\n        var gfc = gfp.internal_flags;\n        switch (gfp.quality) {\n          default:\n          case 9:\n            /* no psymodel, no noise shaping */gfc.psymodel = 0;\n            gfc.noise_shaping = 0;\n            gfc.noise_shaping_amp = 0;\n            gfc.noise_shaping_stop = 0;\n            gfc.use_best_huffman = 0;\n            gfc.full_outer_loop = 0;\n            break;\n          case 8:\n            gfp.quality = 7;\n          //$FALL-THROUGH$\n          case 7:\n            /*\r\n                              * use psymodel (for short block and m/s switching), but no noise\r\n                              * shapping\r\n                              */\n            gfc.psymodel = 1;\n            gfc.noise_shaping = 0;\n            gfc.noise_shaping_amp = 0;\n            gfc.noise_shaping_stop = 0;\n            gfc.use_best_huffman = 0;\n            gfc.full_outer_loop = 0;\n            break;\n          case 6:\n            gfc.psymodel = 1;\n            if (gfc.noise_shaping == 0) gfc.noise_shaping = 1;\n            gfc.noise_shaping_amp = 0;\n            gfc.noise_shaping_stop = 0;\n            if (gfc.subblock_gain == -1) gfc.subblock_gain = 1;\n            gfc.use_best_huffman = 0;\n            gfc.full_outer_loop = 0;\n            break;\n          case 5:\n            gfc.psymodel = 1;\n            if (gfc.noise_shaping == 0) gfc.noise_shaping = 1;\n            gfc.noise_shaping_amp = 0;\n            gfc.noise_shaping_stop = 0;\n            if (gfc.subblock_gain == -1) gfc.subblock_gain = 1;\n            gfc.use_best_huffman = 0;\n            gfc.full_outer_loop = 0;\n            break;\n          case 4:\n            gfc.psymodel = 1;\n            if (gfc.noise_shaping == 0) gfc.noise_shaping = 1;\n            gfc.noise_shaping_amp = 0;\n            gfc.noise_shaping_stop = 0;\n            if (gfc.subblock_gain == -1) gfc.subblock_gain = 1;\n            gfc.use_best_huffman = 1;\n            gfc.full_outer_loop = 0;\n            break;\n          case 3:\n            gfc.psymodel = 1;\n            if (gfc.noise_shaping == 0) gfc.noise_shaping = 1;\n            gfc.noise_shaping_amp = 1;\n            gfc.noise_shaping_stop = 1;\n            if (gfc.subblock_gain == -1) gfc.subblock_gain = 1;\n            gfc.use_best_huffman = 1;\n            gfc.full_outer_loop = 0;\n            break;\n          case 2:\n            gfc.psymodel = 1;\n            if (gfc.noise_shaping == 0) gfc.noise_shaping = 1;\n            if (gfc.substep_shaping == 0) gfc.substep_shaping = 2;\n            gfc.noise_shaping_amp = 1;\n            gfc.noise_shaping_stop = 1;\n            if (gfc.subblock_gain == -1) gfc.subblock_gain = 1;\n            gfc.use_best_huffman = 1; /* inner loop */\n            gfc.full_outer_loop = 0;\n            break;\n          case 1:\n            gfc.psymodel = 1;\n            if (gfc.noise_shaping == 0) gfc.noise_shaping = 1;\n            if (gfc.substep_shaping == 0) gfc.substep_shaping = 2;\n            gfc.noise_shaping_amp = 2;\n            gfc.noise_shaping_stop = 1;\n            if (gfc.subblock_gain == -1) gfc.subblock_gain = 1;\n            gfc.use_best_huffman = 1;\n            gfc.full_outer_loop = 0;\n            break;\n          case 0:\n            gfc.psymodel = 1;\n            if (gfc.noise_shaping == 0) gfc.noise_shaping = 1;\n            if (gfc.substep_shaping == 0) gfc.substep_shaping = 2;\n            gfc.noise_shaping_amp = 2;\n            gfc.noise_shaping_stop = 1;\n            if (gfc.subblock_gain == -1) gfc.subblock_gain = 1;\n            gfc.use_best_huffman = 1; /*\r\n                                      * type 2 disabled because of it slowness, in favor of full outer\r\n                                      * loop search\r\n                                      */\n            gfc.full_outer_loop = 0; /*\r\n                                     * full outer loop search disabled because of audible distortions it\r\n                                     * may generate rh 060629\r\n                                     */\n            break;\n        }\n      }\n      function lame_init_bitstream(gfp) {\n        var gfc = gfp.internal_flags;\n        gfp.frameNum = 0;\n        if (gfp.write_id3tag_automatic) {\n          id3.id3tag_write_v2(gfp);\n        } /* initialize histogram data optionally used by frontend */\n        gfc.bitrate_stereoMode_Hist = new_int_n([16, 4 + 1]);\n        gfc.bitrate_blockType_Hist = new_int_n([16, 4 + 1 + 1]);\n        gfc.PeakSample = 0.0; /* Write initial VBR Header to bitstream and init VBR data */\n        if (gfp.bWriteVbrTag) vbr.InitVbrTag(gfp);\n      } /********************************************************************\r\n        * initialize internal params based on data in gf (globalflags struct filled\r\n        * in by calling program)\r\n        *\r\n        * OUTLINE:\r\n        *\r\n        * We first have some complex code to determine bitrate, output samplerate\r\n        * and mode. It is complicated by the fact that we allow the user to set\r\n        * some or all of these parameters, and need to determine best possible\r\n        * values for the rest of them:\r\n        *\r\n        * 1. set some CPU related flags 2. check if we are mono.mono, stereo.mono\r\n        * or stereo.stereo 3. compute bitrate and output samplerate: user may have\r\n        * set compression ratio user may have set a bitrate user may have set a\r\n        * output samplerate 4. set some options which depend on output samplerate\r\n        * 5. compute the actual compression ratio 6. set mode based on compression\r\n        * ratio\r\n        *\r\n        * The remaining code is much simpler - it just sets options based on the\r\n        * mode & compression ratio:\r\n        *\r\n        * set allow_diff_short based on mode select lowpass filter based on\r\n        * compression ratio & mode set the bitrate index, and min/max bitrates for\r\n        * VBR modes disable VBR tag if it is not appropriate initialize the\r\n        * bitstream initialize scalefac_band data set sideinfo_len (based on\r\n        * channels, CRC, out_samplerate) write an id3v2 tag into the bitstream\r\n        * write VBR tag into the bitstream set mpeg1/2 flag estimate the number of\r\n        * frames (based on a lot of data)\r\n        *\r\n        * now we set more flags: nspsytune: see code VBR modes see code CBR/ABR see\r\n        * code\r\n        *\r\n        * Finally, we set the algorithm flags based on the gfp.quality value\r\n        * lame_init_qval(gfp);\r\n        *\r\n        ********************************************************************/\n      this.lame_init_params = function (gfp) {\n        var gfc = gfp.internal_flags;\n        gfc.Class_ID = 0;\n        if (gfc.ATH == null) gfc.ATH = new ATH();\n        if (gfc.PSY == null) gfc.PSY = new PSY();\n        if (gfc.rgdata == null) gfc.rgdata = new ReplayGain();\n        gfc.channels_in = gfp.num_channels;\n        if (gfc.channels_in == 1) gfp.mode = MPEGMode.MONO;\n        gfc.channels_out = gfp.mode == MPEGMode.MONO ? 1 : 2;\n        gfc.mode_ext = Encoder.MPG_MD_MS_LR;\n        if (gfp.mode == MPEGMode.MONO) gfp.force_ms = false; /*\r\n                                                             * don't allow forced mid/side stereo for mono output\r\n                                                             */\n        if (gfp.VBR == VbrMode.vbr_off && gfp.VBR_mean_bitrate_kbps != 128 && gfp.brate == 0) gfp.brate = gfp.VBR_mean_bitrate_kbps;\n        if (gfp.VBR == VbrMode.vbr_off || gfp.VBR == VbrMode.vbr_mtrh || gfp.VBR == VbrMode.vbr_mt) {/* these modes can handle free format condition */} else {\n          gfp.free_format = false; /* mode can't be mixed with free format */\n        }\n        if (gfp.VBR == VbrMode.vbr_off && gfp.brate == 0) {\n          /* no bitrate or compression ratio specified, use 11.025 */if (BitStream.EQ(gfp.compression_ratio, 0)) gfp.compression_ratio = 11.025; /*\r\n                                                                                                                                                 * rate to compress a CD down to exactly 128000 bps\r\n                                                                                                                                                 */\n        } /* find bitrate if user specify a compression ratio */\n        if (gfp.VBR == VbrMode.vbr_off && gfp.compression_ratio > 0) {\n          if (gfp.out_samplerate == 0) gfp.out_samplerate = map2MP3Frequency(int(0.97 * gfp.in_samplerate)); /*\r\n                                                                                                             * round up with a margin of 3 %\r\n                                                                                                             */ /*\r\n                                                                                                                * choose a bitrate for the output samplerate which achieves\r\n                                                                                                                * specified compression ratio\r\n                                                                                                                */\n          gfp.brate = 0 | gfp.out_samplerate * 16 * gfc.channels_out / (1.e3 * gfp.compression_ratio); /* we need the version for the bitrate table look up */\n          gfc.samplerate_index = SmpFrqIndex(gfp.out_samplerate, gfp);\n          if (!gfp.free_format)\n            /*\r\n            * for non Free Format find the nearest allowed\r\n            * bitrate\r\n            */\n            gfp.brate = FindNearestBitrate(gfp.brate, gfp.version, gfp.out_samplerate);\n        }\n        if (gfp.out_samplerate != 0) {\n          if (gfp.out_samplerate < 16000) {\n            gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps, 8);\n            gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps, 64);\n          } else if (gfp.out_samplerate < 32000) {\n            gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps, 8);\n            gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps, 160);\n          } else {\n            gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps, 32);\n            gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps, 320);\n          }\n        } /****************************************************************/ /* if a filter has not been enabled, see if we should add one: */ /****************************************************************/\n        if (gfp.lowpassfreq == 0) {\n          var lowpass = 16000.;\n          switch (gfp.VBR) {\n            case VbrMode.vbr_off:\n              {\n                var lh = new LowPassHighPass();\n                optimum_bandwidth(lh, gfp.brate);\n                lowpass = lh.lowerlimit;\n                break;\n              }\n            case VbrMode.vbr_abr:\n              {\n                var lh = new LowPassHighPass();\n                optimum_bandwidth(lh, gfp.VBR_mean_bitrate_kbps);\n                lowpass = lh.lowerlimit;\n                break;\n              }\n            case VbrMode.vbr_rh:\n              {\n                var x = [19500, 19000, 18600, 18000, 17500, 16000, 15600, 14900, 12500, 10000, 3950];\n                if (0 <= gfp.VBR_q && gfp.VBR_q <= 9) {\n                  var a = x[gfp.VBR_q],\n                    b = x[gfp.VBR_q + 1],\n                    m = gfp.VBR_q_frac;\n                  lowpass = linear_int(a, b, m);\n                } else {\n                  lowpass = 19500;\n                }\n                break;\n              }\n            default:\n              {\n                var x = [19500, 19000, 18500, 18000, 17500, 16500, 15500, 14500, 12500, 9500, 3950];\n                if (0 <= gfp.VBR_q && gfp.VBR_q <= 9) {\n                  var a = x[gfp.VBR_q],\n                    b = x[gfp.VBR_q + 1],\n                    m = gfp.VBR_q_frac;\n                  lowpass = linear_int(a, b, m);\n                } else {\n                  lowpass = 19500;\n                }\n              }\n          }\n          if (gfp.mode == MPEGMode.MONO && (gfp.VBR == VbrMode.vbr_off || gfp.VBR == VbrMode.vbr_abr)) lowpass *= 1.5;\n          gfp.lowpassfreq = lowpass | 0;\n        }\n        if (gfp.out_samplerate == 0) {\n          if (2 * gfp.lowpassfreq > gfp.in_samplerate) {\n            gfp.lowpassfreq = gfp.in_samplerate / 2;\n          }\n          gfp.out_samplerate = optimum_samplefreq(gfp.lowpassfreq | 0, gfp.in_samplerate);\n        }\n        gfp.lowpassfreq = Math.min(20500, gfp.lowpassfreq);\n        gfp.lowpassfreq = Math.min(gfp.out_samplerate / 2, gfp.lowpassfreq);\n        if (gfp.VBR == VbrMode.vbr_off) {\n          gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out / (1.e3 * gfp.brate);\n        }\n        if (gfp.VBR == VbrMode.vbr_abr) {\n          gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out / (1.e3 * gfp.VBR_mean_bitrate_kbps);\n        } /*\r\n          * do not compute ReplayGain values and do not find the peak sample if\r\n          * we can't store them\r\n          */\n        if (!gfp.bWriteVbrTag) {\n          gfp.findReplayGain = false;\n          gfp.decode_on_the_fly = false;\n          gfc.findPeakSample = false;\n        }\n        gfc.findReplayGain = gfp.findReplayGain;\n        gfc.decode_on_the_fly = gfp.decode_on_the_fly;\n        if (gfc.decode_on_the_fly) gfc.findPeakSample = true;\n        if (gfc.findReplayGain) {\n          if (ga.InitGainAnalysis(gfc.rgdata, gfp.out_samplerate) == GainAnalysis.INIT_GAIN_ANALYSIS_ERROR) {\n            gfp.internal_flags = null;\n            return -6;\n          }\n        }\n        if (gfc.decode_on_the_fly && !gfp.decode_only) {\n          if (gfc.hip != null) {\n            mpglib.hip_decode_exit(gfc.hip);\n          }\n          gfc.hip = mpglib.hip_decode_init();\n        }\n        gfc.mode_gr = gfp.out_samplerate <= 24000 ? 1 : 2; /*\r\n                                                           * Number of granules per frame\r\n                                                           */\n        gfp.framesize = 576 * gfc.mode_gr;\n        gfp.encoder_delay = Encoder.ENCDELAY;\n        gfc.resample_ratio = gfp.in_samplerate / gfp.out_samplerate; /**\r\n                                                                     * <PRE>\r\n                                                                     *  sample freq       bitrate     compression ratio\r\n                                                                     *     [kHz]      [kbps/channel]   for 16 bit input\r\n                                                                     *     44.1            56               12.6\r\n                                                                     *     44.1            64               11.025\r\n                                                                     *     44.1            80                8.82\r\n                                                                     *     22.05           24               14.7\r\n                                                                     *     22.05           32               11.025\r\n                                                                     *     22.05           40                8.82\r\n                                                                     *     16              16               16.0\r\n                                                                     *     16              24               10.667\r\n                                                                     * </PRE>\r\n                                                                     */ /**\r\n                                                                        * <PRE>\r\n                                                                        *  For VBR, take a guess at the compression_ratio.\r\n                                                                        *  For example:\r\n                                                                        *\r\n                                                                        *    VBR_q    compression     like\r\n                                                                        *     -        4.4         320 kbps/44 kHz\r\n                                                                        *   0...1      5.5         256 kbps/44 kHz\r\n                                                                        *     2        7.3         192 kbps/44 kHz\r\n                                                                        *     4        8.8         160 kbps/44 kHz\r\n                                                                        *     6       11           128 kbps/44 kHz\r\n                                                                        *     9       14.7          96 kbps\r\n                                                                        *\r\n                                                                        *  for lower bitrates, downsample with --resample\r\n                                                                        * </PRE>\r\n                                                                        */\n        switch (gfp.VBR) {\n          case VbrMode.vbr_mt:\n          case VbrMode.vbr_rh:\n          case VbrMode.vbr_mtrh:\n            {\n              /* numbers are a bit strange, but they determine the lowpass value */var cmp = [5.7, 6.5, 7.3, 8.2, 10, 11.9, 13, 14, 15, 16.5];\n              gfp.compression_ratio = cmp[gfp.VBR_q];\n            }\n            break;\n          case VbrMode.vbr_abr:\n            gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out / (1.e3 * gfp.VBR_mean_bitrate_kbps);\n            break;\n          default:\n            gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out / (1.e3 * gfp.brate);\n            break;\n        } /*\r\n          * mode = -1 (not set by user) or mode = MONO (because of only 1 input\r\n          * channel). If mode has not been set, then select J-STEREO\r\n          */\n        if (gfp.mode == MPEGMode.NOT_SET) {\n          gfp.mode = MPEGMode.JOINT_STEREO;\n        } /* apply user driven high pass filter */\n        if (gfp.highpassfreq > 0) {\n          gfc.highpass1 = 2. * gfp.highpassfreq;\n          if (gfp.highpasswidth >= 0) gfc.highpass2 = 2. * (gfp.highpassfreq + gfp.highpasswidth);else /* 0% above on default */gfc.highpass2 = (1 + 0.00) * 2. * gfp.highpassfreq;\n          gfc.highpass1 /= gfp.out_samplerate;\n          gfc.highpass2 /= gfp.out_samplerate;\n        } else {\n          gfc.highpass1 = 0;\n          gfc.highpass2 = 0;\n        } /* apply user driven low pass filter */\n        if (gfp.lowpassfreq > 0) {\n          gfc.lowpass2 = 2. * gfp.lowpassfreq;\n          if (gfp.lowpasswidth >= 0) {\n            gfc.lowpass1 = 2. * (gfp.lowpassfreq - gfp.lowpasswidth);\n            if (gfc.lowpass1 < 0) /* has to be >= 0 */gfc.lowpass1 = 0;\n          } else {\n            /* 0% below on default */gfc.lowpass1 = (1 - 0.00) * 2. * gfp.lowpassfreq;\n          }\n          gfc.lowpass1 /= gfp.out_samplerate;\n          gfc.lowpass2 /= gfp.out_samplerate;\n        } else {\n          gfc.lowpass1 = 0;\n          gfc.lowpass2 = 0;\n        } /**********************************************************************/ /* compute info needed for polyphase filter (filter type==0, default) */ /**********************************************************************/\n        lame_init_params_ppflt(gfp); /*******************************************************\r\n                                     * samplerate and bitrate index\r\n                                     *******************************************************/\n        gfc.samplerate_index = SmpFrqIndex(gfp.out_samplerate, gfp);\n        if (gfc.samplerate_index < 0) {\n          gfp.internal_flags = null;\n          return -1;\n        }\n        if (gfp.VBR == VbrMode.vbr_off) {\n          if (gfp.free_format) {\n            gfc.bitrate_index = 0;\n          } else {\n            gfp.brate = FindNearestBitrate(gfp.brate, gfp.version, gfp.out_samplerate);\n            gfc.bitrate_index = BitrateIndex(gfp.brate, gfp.version, gfp.out_samplerate);\n            if (gfc.bitrate_index <= 0) {\n              gfp.internal_flags = null;\n              return -1;\n            }\n          }\n        } else {\n          gfc.bitrate_index = 1;\n        } /* for CBR, we will write an \"info\" tag. */\n        if (gfp.analysis) gfp.bWriteVbrTag = false; /* some file options not allowed if output is: not specified or stdout */\n        if (gfc.pinfo != null) gfp.bWriteVbrTag = false; /* disable Xing VBR tag */\n        bs.init_bit_stream_w(gfc);\n        var j = gfc.samplerate_index + 3 * gfp.version + 6 * (gfp.out_samplerate < 16000 ? 1 : 0);\n        for (var i = 0; i < Encoder.SBMAX_l + 1; i++) {\n          gfc.scalefac_band.l[i] = qupvt.sfBandIndex[j].l[i];\n        }\n        for (var i = 0; i < Encoder.PSFB21 + 1; i++) {\n          var size = (gfc.scalefac_band.l[22] - gfc.scalefac_band.l[21]) / Encoder.PSFB21;\n          var start = gfc.scalefac_band.l[21] + i * size;\n          gfc.scalefac_band.psfb21[i] = start;\n        }\n        gfc.scalefac_band.psfb21[Encoder.PSFB21] = 576;\n        for (var i = 0; i < Encoder.SBMAX_s + 1; i++) {\n          gfc.scalefac_band.s[i] = qupvt.sfBandIndex[j].s[i];\n        }\n        for (var i = 0; i < Encoder.PSFB12 + 1; i++) {\n          var size = (gfc.scalefac_band.s[13] - gfc.scalefac_band.s[12]) / Encoder.PSFB12;\n          var start = gfc.scalefac_band.s[12] + i * size;\n          gfc.scalefac_band.psfb12[i] = start;\n        }\n        gfc.scalefac_band.psfb12[Encoder.PSFB12] = 192; /* determine the mean bitrate for main data */\n        if (gfp.version == 1) /* MPEG 1 */gfc.sideinfo_len = gfc.channels_out == 1 ? 4 + 17 : 4 + 32;else /* MPEG 2 */gfc.sideinfo_len = gfc.channels_out == 1 ? 4 + 9 : 4 + 17;\n        if (gfp.error_protection) gfc.sideinfo_len += 2;\n        lame_init_bitstream(gfp);\n        gfc.Class_ID = LAME_ID;\n        {\n          var k;\n          for (k = 0; k < 19; k++) {\n            gfc.nsPsy.pefirbuf[k] = 700 * gfc.mode_gr * gfc.channels_out;\n          }\n          if (gfp.ATHtype == -1) gfp.ATHtype = 4;\n        }\n        switch (gfp.VBR) {\n          case VbrMode.vbr_mt:\n            gfp.VBR = VbrMode.vbr_mtrh;\n          //$FALL-THROUGH$\n          case VbrMode.vbr_mtrh:\n            {\n              if (gfp.useTemporal == null) {\n                gfp.useTemporal = false; /* off by default for this VBR mode */\n              }\n              p.apply_preset(gfp, 500 - gfp.VBR_q * 10, 0); /**\r\n                                                            * <PRE>\r\n                                                            *   The newer VBR code supports only a limited\r\n                                                            *     subset of quality levels:\r\n                                                            *     9-5=5 are the same, uses x^3/4 quantization\r\n                                                            *   4-0=0 are the same  5 plus best huffman divide code\r\n                                                            * </PRE>\r\n                                                            */\n              if (gfp.quality < 0) gfp.quality = LAME_DEFAULT_QUALITY;\n              if (gfp.quality < 5) gfp.quality = 0;\n              if (gfp.quality > 5) gfp.quality = 5;\n              gfc.PSY.mask_adjust = gfp.maskingadjust;\n              gfc.PSY.mask_adjust_short = gfp.maskingadjust_short; /*\r\n                                                                   * sfb21 extra only with MPEG-1 at higher sampling rates\r\n                                                                   */\n              if (gfp.experimentalY) gfc.sfb21_extra = false;else gfc.sfb21_extra = gfp.out_samplerate > 44000;\n              gfc.iteration_loop = new VBRNewIterationLoop(qu);\n              break;\n            }\n          case VbrMode.vbr_rh:\n            {\n              p.apply_preset(gfp, 500 - gfp.VBR_q * 10, 0);\n              gfc.PSY.mask_adjust = gfp.maskingadjust;\n              gfc.PSY.mask_adjust_short = gfp.maskingadjust_short; /*\r\n                                                                   * sfb21 extra only with MPEG-1 at higher sampling rates\r\n                                                                   */\n              if (gfp.experimentalY) gfc.sfb21_extra = false;else gfc.sfb21_extra = gfp.out_samplerate > 44000; /*\r\n                                                                                                                * VBR needs at least the output of GPSYCHO, so we have to garantee\r\n                                                                                                                * that by setting a minimum quality level, actually level 6 does\r\n                                                                                                                * it. down to level 6\r\n                                                                                                                */\n              if (gfp.quality > 6) gfp.quality = 6;\n              if (gfp.quality < 0) gfp.quality = LAME_DEFAULT_QUALITY;\n              gfc.iteration_loop = new VBROldIterationLoop(qu);\n              break;\n            }\n          default:\n            /* cbr/abr */{\n              var vbrmode; /*\r\n                           * no sfb21 extra with CBR code\r\n                           */\n              gfc.sfb21_extra = false;\n              if (gfp.quality < 0) gfp.quality = LAME_DEFAULT_QUALITY;\n              vbrmode = gfp.VBR;\n              if (vbrmode == VbrMode.vbr_off) gfp.VBR_mean_bitrate_kbps = gfp.brate; /* second, set parameters depending on bitrate */\n              p.apply_preset(gfp, gfp.VBR_mean_bitrate_kbps, 0);\n              gfp.VBR = vbrmode;\n              gfc.PSY.mask_adjust = gfp.maskingadjust;\n              gfc.PSY.mask_adjust_short = gfp.maskingadjust_short;\n              if (vbrmode == VbrMode.vbr_off) {\n                gfc.iteration_loop = new CBRNewIterationLoop(qu);\n              } else {\n                gfc.iteration_loop = new ABRIterationLoop(qu);\n              }\n              break;\n            }\n        } /* initialize default values common for all modes */\n        if (gfp.VBR != VbrMode.vbr_off) {\n          /* choose a min/max bitrate for VBR */ /* if the user didn't specify VBR_max_bitrate: */gfc.VBR_min_bitrate = 1; /*\r\n                                                                                                                           * default: allow 8 kbps (MPEG-2) or 32 kbps (MPEG-1)\r\n                                                                                                                           */\n          gfc.VBR_max_bitrate = 14; /*\r\n                                    * default: allow 160 kbps (MPEG-2) or 320 kbps (MPEG-1)\r\n                                    */\n          if (gfp.out_samplerate < 16000) gfc.VBR_max_bitrate = 8; /* default: allow 64 kbps (MPEG-2.5) */\n          if (gfp.VBR_min_bitrate_kbps != 0) {\n            gfp.VBR_min_bitrate_kbps = FindNearestBitrate(gfp.VBR_min_bitrate_kbps, gfp.version, gfp.out_samplerate);\n            gfc.VBR_min_bitrate = BitrateIndex(gfp.VBR_min_bitrate_kbps, gfp.version, gfp.out_samplerate);\n            if (gfc.VBR_min_bitrate < 0) return -1;\n          }\n          if (gfp.VBR_max_bitrate_kbps != 0) {\n            gfp.VBR_max_bitrate_kbps = FindNearestBitrate(gfp.VBR_max_bitrate_kbps, gfp.version, gfp.out_samplerate);\n            gfc.VBR_max_bitrate = BitrateIndex(gfp.VBR_max_bitrate_kbps, gfp.version, gfp.out_samplerate);\n            if (gfc.VBR_max_bitrate < 0) return -1;\n          }\n          gfp.VBR_min_bitrate_kbps = Tables.bitrate_table[gfp.version][gfc.VBR_min_bitrate];\n          gfp.VBR_max_bitrate_kbps = Tables.bitrate_table[gfp.version][gfc.VBR_max_bitrate];\n          gfp.VBR_mean_bitrate_kbps = Math.min(Tables.bitrate_table[gfp.version][gfc.VBR_max_bitrate], gfp.VBR_mean_bitrate_kbps);\n          gfp.VBR_mean_bitrate_kbps = Math.max(Tables.bitrate_table[gfp.version][gfc.VBR_min_bitrate], gfp.VBR_mean_bitrate_kbps);\n        } /* just another daily changing developer switch */\n        if (gfp.tune) {\n          gfc.PSY.mask_adjust += gfp.tune_value_a;\n          gfc.PSY.mask_adjust_short += gfp.tune_value_a;\n        } /* initialize internal qval settings */\n        lame_init_qval(gfp); /*\r\n                             * automatic ATH adjustment on\r\n                             */\n        if (gfp.athaa_type < 0) gfc.ATH.useAdjust = 3;else gfc.ATH.useAdjust = gfp.athaa_type; /* initialize internal adaptive ATH settings -jd */\n        gfc.ATH.aaSensitivityP = Math.pow(10.0, gfp.athaa_sensitivity / -10.0);\n        if (gfp.short_blocks == null) {\n          gfp.short_blocks = ShortBlock.short_block_allowed;\n        } /*\r\n          * Note Jan/2003: Many hardware decoders cannot handle short blocks in\r\n          * regular stereo mode unless they are coupled (same type in both\r\n          * channels) it is a rare event (1 frame per min. or so) that LAME would\r\n          * use uncoupled short blocks, so lets turn them off until we decide how\r\n          * to handle this. No other encoders allow uncoupled short blocks, even\r\n          * though it is in the standard.\r\n          */ /*\r\n             * rh 20040217: coupling makes no sense for mono and dual-mono streams\r\n             */\n        if (gfp.short_blocks == ShortBlock.short_block_allowed && (gfp.mode == MPEGMode.JOINT_STEREO || gfp.mode == MPEGMode.STEREO)) {\n          gfp.short_blocks = ShortBlock.short_block_coupled;\n        }\n        if (gfp.quant_comp < 0) gfp.quant_comp = 1;\n        if (gfp.quant_comp_short < 0) gfp.quant_comp_short = 0;\n        if (gfp.msfix < 0) gfp.msfix = 0; /* select psychoacoustic model */\n        gfp.exp_nspsytune = gfp.exp_nspsytune | 1;\n        if (gfp.internal_flags.nsPsy.attackthre < 0) gfp.internal_flags.nsPsy.attackthre = PsyModel.NSATTACKTHRE;\n        if (gfp.internal_flags.nsPsy.attackthre_s < 0) gfp.internal_flags.nsPsy.attackthre_s = PsyModel.NSATTACKTHRE_S;\n        if (gfp.scale < 0) gfp.scale = 1;\n        if (gfp.ATHtype < 0) gfp.ATHtype = 4;\n        if (gfp.ATHcurve < 0) gfp.ATHcurve = 4;\n        if (gfp.athaa_loudapprox < 0) gfp.athaa_loudapprox = 2;\n        if (gfp.interChRatio < 0) gfp.interChRatio = 0;\n        if (gfp.useTemporal == null) gfp.useTemporal = true; /* on by default */ /*\r\n                                                                                 * padding method as described in\r\n                                                                                 * \"MPEG-Layer3 / Bitstream Syntax and Decoding\" by Martin Sieler, Ralph\r\n                                                                                 * Sperschneider\r\n                                                                                 *\r\n                                                                                 * note: there is no padding for the very first frame\r\n                                                                                 *\r\n                                                                                 * Robert Hegemann 2000-06-22\r\n                                                                                 */\n        gfc.slot_lag = gfc.frac_SpF = 0;\n        if (gfp.VBR == VbrMode.vbr_off) gfc.slot_lag = gfc.frac_SpF = (gfp.version + 1) * 72000 * gfp.brate % gfp.out_samplerate | 0;\n        qupvt.iteration_init(gfp);\n        psy.psymodel_init(gfp);\n        return 0;\n      };\n      function update_inbuffer_size(gfc, nsamples) {\n        if (gfc.in_buffer_0 == null || gfc.in_buffer_nsamples < nsamples) {\n          gfc.in_buffer_0 = new_float(nsamples);\n          gfc.in_buffer_1 = new_float(nsamples);\n          gfc.in_buffer_nsamples = nsamples;\n        }\n      }\n      this.lame_encode_flush = function (gfp, mp3buffer, mp3bufferPos, mp3buffer_size) {\n        var gfc = gfp.internal_flags;\n        var buffer = new_short_n([2, 1152]);\n        var imp3 = 0,\n          mp3count,\n          mp3buffer_size_remaining; /*\r\n                                    * we always add POSTDELAY=288 padding to make sure granule with real\r\n                                    * data can be complety decoded (because of 50% overlap with next\r\n                                    * granule\r\n                                    */\n        var end_padding;\n        var frames_left;\n        var samples_to_encode = gfc.mf_samples_to_encode - Encoder.POSTDELAY;\n        var mf_needed = calcNeeded(gfp); /* Was flush already called? */\n        if (gfc.mf_samples_to_encode < 1) {\n          return 0;\n        }\n        mp3count = 0;\n        if (gfp.in_samplerate != gfp.out_samplerate) {\n          /*\r\n          * delay due to resampling; needs to be fixed, if resampling code\r\n          * gets changed\r\n          */\n          samples_to_encode += 16. * gfp.out_samplerate / gfp.in_samplerate;\n        }\n        end_padding = gfp.framesize - samples_to_encode % gfp.framesize;\n        if (end_padding < 576) end_padding += gfp.framesize;\n        gfp.encoder_padding = end_padding;\n        frames_left = (samples_to_encode + end_padding) / gfp.framesize; /*\r\n                                                                         * send in a frame of 0 padding until all internal sample buffers are\r\n                                                                         * flushed\r\n                                                                         */\n        while (frames_left > 0 && imp3 >= 0) {\n          var bunch = mf_needed - gfc.mf_size;\n          var frame_num = gfp.frameNum;\n          bunch *= gfp.in_samplerate;\n          bunch /= gfp.out_samplerate;\n          if (bunch > 1152) bunch = 1152;\n          if (bunch < 1) bunch = 1;\n          mp3buffer_size_remaining = mp3buffer_size - mp3count; /* if user specifed buffer size = 0, dont check size */\n          if (mp3buffer_size == 0) mp3buffer_size_remaining = 0;\n          imp3 = this.lame_encode_buffer(gfp, buffer[0], buffer[1], bunch, mp3buffer, mp3bufferPos, mp3buffer_size_remaining);\n          mp3bufferPos += imp3;\n          mp3count += imp3;\n          frames_left -= frame_num != gfp.frameNum ? 1 : 0;\n        } /*\r\n          * Set gfc.mf_samples_to_encode to 0, so we may detect and break loops\r\n          * calling it more than once in a row.\r\n          */\n        gfc.mf_samples_to_encode = 0;\n        if (imp3 < 0) {\n          /* some type of fatal error */return imp3;\n        }\n        mp3buffer_size_remaining = mp3buffer_size - mp3count; /* if user specifed buffer size = 0, dont check size */\n        if (mp3buffer_size == 0) mp3buffer_size_remaining = 0; /* mp3 related stuff. bit buffer might still contain some mp3 data */\n        bs.flush_bitstream(gfp);\n        imp3 = bs.copy_buffer(gfc, mp3buffer, mp3bufferPos, mp3buffer_size_remaining, 1);\n        if (imp3 < 0) {\n          /* some type of fatal error */return imp3;\n        }\n        mp3bufferPos += imp3;\n        mp3count += imp3;\n        mp3buffer_size_remaining = mp3buffer_size - mp3count; /* if user specifed buffer size = 0, dont check size */\n        if (mp3buffer_size == 0) mp3buffer_size_remaining = 0;\n        if (gfp.write_id3tag_automatic) {\n          /* write a id3 tag to the bitstream */id3.id3tag_write_v1(gfp);\n          imp3 = bs.copy_buffer(gfc, mp3buffer, mp3bufferPos, mp3buffer_size_remaining, 0);\n          if (imp3 < 0) {\n            return imp3;\n          }\n          mp3count += imp3;\n        }\n        return mp3count;\n      };\n      this.lame_encode_buffer = function (gfp, buffer_l, buffer_r, nsamples, mp3buf, mp3bufPos, mp3buf_size) {\n        var gfc = gfp.internal_flags;\n        var in_buffer = [null, null];\n        if (gfc.Class_ID != LAME_ID) return -3;\n        if (nsamples == 0) return 0;\n        update_inbuffer_size(gfc, nsamples);\n        in_buffer[0] = gfc.in_buffer_0;\n        in_buffer[1] = gfc.in_buffer_1; /* make a copy of input buffer, changing type to sample_t */\n        for (var i = 0; i < nsamples; i++) {\n          in_buffer[0][i] = buffer_l[i];\n          if (gfc.channels_in > 1) in_buffer[1][i] = buffer_r[i];\n        }\n        return lame_encode_buffer_sample(gfp, in_buffer[0], in_buffer[1], nsamples, mp3buf, mp3bufPos, mp3buf_size);\n      };\n      function calcNeeded(gfp) {\n        var mf_needed = Encoder.BLKSIZE + gfp.framesize - Encoder.FFTOFFSET; /*\r\n                                                                             * amount needed for FFT\r\n                                                                             */\n        mf_needed = Math.max(mf_needed, 512 + gfp.framesize - 32);\n        return mf_needed;\n      }\n      function lame_encode_buffer_sample(gfp, buffer_l, buffer_r, nsamples, mp3buf, mp3bufPos, mp3buf_size) {\n        var gfc = gfp.internal_flags;\n        var mp3size = 0,\n          ret,\n          i,\n          ch,\n          mf_needed;\n        var mp3out;\n        var mfbuf = [null, null];\n        var in_buffer = [null, null];\n        if (gfc.Class_ID != LAME_ID) return -3;\n        if (nsamples == 0) return 0; /* copy out any tags that may have been written into bitstream */\n        mp3out = bs.copy_buffer(gfc, mp3buf, mp3bufPos, mp3buf_size, 0);\n        if (mp3out < 0) return mp3out; /* not enough buffer space */\n        mp3bufPos += mp3out;\n        mp3size += mp3out;\n        in_buffer[0] = buffer_l;\n        in_buffer[1] = buffer_r; /* Apply user defined re-scaling */ /* user selected scaling of the samples */\n        if (BitStream.NEQ(gfp.scale, 0) && BitStream.NEQ(gfp.scale, 1.0)) {\n          for (i = 0; i < nsamples; ++i) {\n            in_buffer[0][i] *= gfp.scale;\n            if (gfc.channels_out == 2) in_buffer[1][i] *= gfp.scale;\n          }\n        } /* user selected scaling of the channel 0 (left) samples */\n        if (BitStream.NEQ(gfp.scale_left, 0) && BitStream.NEQ(gfp.scale_left, 1.0)) {\n          for (i = 0; i < nsamples; ++i) {\n            in_buffer[0][i] *= gfp.scale_left;\n          }\n        } /* user selected scaling of the channel 1 (right) samples */\n        if (BitStream.NEQ(gfp.scale_right, 0) && BitStream.NEQ(gfp.scale_right, 1.0)) {\n          for (i = 0; i < nsamples; ++i) {\n            in_buffer[1][i] *= gfp.scale_right;\n          }\n        } /* Downsample to Mono if 2 channels in and 1 channel out */\n        if (gfp.num_channels == 2 && gfc.channels_out == 1) {\n          for (i = 0; i < nsamples; ++i) {\n            in_buffer[0][i] = 0.5 * (in_buffer[0][i] + in_buffer[1][i]);\n            in_buffer[1][i] = 0.0;\n          }\n        }\n        mf_needed = calcNeeded(gfp);\n        mfbuf[0] = gfc.mfbuf[0];\n        mfbuf[1] = gfc.mfbuf[1];\n        var in_bufferPos = 0;\n        while (nsamples > 0) {\n          var in_buffer_ptr = [null, null];\n          var n_in = 0; /* number of input samples processed with fill_buffer */\n          var n_out = 0; /* number of samples output with fill_buffer */ /* n_in <> n_out if we are resampling */\n          in_buffer_ptr[0] = in_buffer[0];\n          in_buffer_ptr[1] = in_buffer[1]; /* copy in new samples into mfbuf, with resampling */\n          var inOut = new InOut();\n          fill_buffer(gfp, mfbuf, in_buffer_ptr, in_bufferPos, nsamples, inOut);\n          n_in = inOut.n_in;\n          n_out = inOut.n_out; /* compute ReplayGain of resampled input if requested */\n          if (gfc.findReplayGain && !gfc.decode_on_the_fly) if (ga.AnalyzeSamples(gfc.rgdata, mfbuf[0], gfc.mf_size, mfbuf[1], gfc.mf_size, n_out, gfc.channels_out) == GainAnalysis.GAIN_ANALYSIS_ERROR) return -6; /* update in_buffer counters */\n          nsamples -= n_in;\n          in_bufferPos += n_in;\n          if (gfc.channels_out == 2) ; // in_bufferPos += n_in;\n          /* update mfbuf[] counters */\n          gfc.mf_size += n_out; /*\r\n                                * lame_encode_flush may have set gfc.mf_sample_to_encode to 0 so we\r\n                                * have to reinitialize it here when that happened.\r\n                                */\n          if (gfc.mf_samples_to_encode < 1) {\n            gfc.mf_samples_to_encode = Encoder.ENCDELAY + Encoder.POSTDELAY;\n          }\n          gfc.mf_samples_to_encode += n_out;\n          if (gfc.mf_size >= mf_needed) {\n            /* encode the frame. */ /* mp3buf = pointer to current location in buffer */ /* mp3buf_size = size of original mp3 output buffer */ /* = 0 if we should not worry about the */ /* buffer size because calling program is */ /* to lazy to compute it */ /* mp3size = size of data written to buffer so far */ /* mp3buf_size-mp3size = amount of space avalable */var buf_size = mp3buf_size - mp3size;\n            if (mp3buf_size == 0) buf_size = 0;\n            ret = lame_encode_frame(gfp, mfbuf[0], mfbuf[1], mp3buf, mp3bufPos, buf_size);\n            if (ret < 0) return ret;\n            mp3bufPos += ret;\n            mp3size += ret; /* shift out old samples */\n            gfc.mf_size -= gfp.framesize;\n            gfc.mf_samples_to_encode -= gfp.framesize;\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n              for (i = 0; i < gfc.mf_size; i++) {\n                mfbuf[ch][i] = mfbuf[ch][i + gfp.framesize];\n              }\n            }\n          }\n        }\n        return mp3size;\n      }\n      function lame_encode_frame(gfp, inbuf_l, inbuf_r, mp3buf, mp3bufPos, mp3buf_size) {\n        var ret = self.enc.lame_encode_mp3_frame(gfp, inbuf_l, inbuf_r, mp3buf, mp3bufPos, mp3buf_size);\n        gfp.frameNum++;\n        return ret;\n      }\n      function InOut() {\n        this.n_in = 0;\n        this.n_out = 0;\n      }\n      function NumUsed() {\n        this.num_used = 0;\n      } /**\r\n        * Greatest common divisor.\r\n        * <p>\r\n        * Joint work of Euclid and M. Hendry\r\n        */\n      function gcd(i, j) {\n        return j != 0 ? gcd(j, i % j) : i;\n      } /**\r\n        * Resampling via FIR filter, blackman window.\r\n        */\n      function blackman(x, fcn, l) {\n        /*\r\n        * This algorithm from: SIGNAL PROCESSING ALGORITHMS IN FORTRAN AND C\r\n        * S.D. Stearns and R.A. David, Prentice-Hall, 1992\r\n        */\n        var wcn = Math.PI * fcn;\n        x /= l;\n        if (x < 0) x = 0;\n        if (x > 1) x = 1;\n        var x2 = x - .5;\n        var bkwn = 0.42 - 0.5 * Math.cos(2 * x * Math.PI) + 0.08 * Math.cos(4 * x * Math.PI);\n        if (Math.abs(x2) < 1e-9) return wcn / Math.PI;else return bkwn * Math.sin(l * wcn * x2) / (Math.PI * l * x2);\n      }\n      function fill_buffer_resample(gfp, outbuf, outbufPos, desired_len, inbuf, in_bufferPos, len, num_used, ch) {\n        var gfc = gfp.internal_flags;\n        var i,\n          j = 0,\n          k; /* number of convolution functions to pre-compute */\n        var bpc = gfp.out_samplerate / gcd(gfp.out_samplerate, gfp.in_samplerate);\n        if (bpc > LameInternalFlags.BPC) bpc = LameInternalFlags.BPC;\n        var intratio = Math.abs(gfc.resample_ratio - Math.floor(.5 + gfc.resample_ratio)) < .0001 ? 1 : 0;\n        var fcn = 1.00 / gfc.resample_ratio;\n        if (fcn > 1.00) fcn = 1.00;\n        var filter_l = 31;\n        if (0 == filter_l % 2) --filter_l; /* must be odd */\n        filter_l += intratio; /* unless resample_ratio=int, it must be even */\n        var BLACKSIZE = filter_l + 1; /* size of data needed for FIR */\n        if (gfc.fill_buffer_resample_init == 0) {\n          gfc.inbuf_old[0] = new_float(BLACKSIZE);\n          gfc.inbuf_old[1] = new_float(BLACKSIZE);\n          for (i = 0; i <= 2 * bpc; ++i) {\n            gfc.blackfilt[i] = new_float(BLACKSIZE);\n          }\n          gfc.itime[0] = 0;\n          gfc.itime[1] = 0; /* precompute blackman filter coefficients */\n          for (j = 0; j <= 2 * bpc; j++) {\n            var sum = 0.;\n            var offset = (j - bpc) / (2. * bpc);\n            for (i = 0; i <= filter_l; i++) {\n              sum += gfc.blackfilt[j][i] = blackman(i - offset, fcn, filter_l);\n            }\n            for (i = 0; i <= filter_l; i++) {\n              gfc.blackfilt[j][i] /= sum;\n            }\n          }\n          gfc.fill_buffer_resample_init = 1;\n        }\n        var inbuf_old = gfc.inbuf_old[ch]; /* time of j'th element in inbuf = itime + j/ifreq; */ /* time of k'th element in outbuf = j/ofreq */\n        for (k = 0; k < desired_len; k++) {\n          var time0;\n          var joff;\n          time0 = k * gfc.resample_ratio; /* time of k'th output sample */\n          j = 0 | Math.floor(time0 - gfc.itime[ch]); /* check if we need more input data */\n          if (filter_l + j - filter_l / 2 >= len) break; /* blackman filter. by default, window centered at j+.5(filter_l%2) */ /* but we want a window centered at time0. */\n          var offset = time0 - gfc.itime[ch] - (j + .5 * (filter_l % 2)); /* find the closest precomputed window for this offset: */\n          joff = 0 | Math.floor(offset * 2 * bpc + bpc + .5);\n          var xvalue = 0.;\n          for (i = 0; i <= filter_l; ++i) {\n            var j2 = i + j - filter_l / 2;\n            var y;\n            y = j2 < 0 ? inbuf_old[BLACKSIZE + j2] : inbuf[in_bufferPos + j2];\n            xvalue += y * gfc.blackfilt[joff][i];\n          }\n          outbuf[outbufPos + k] = xvalue;\n        } /* k = number of samples added to outbuf */ /* last k sample used data from [j-filter_l/2,j+filter_l-filter_l/2] */ /* how many samples of input data were used: */\n        num_used.num_used = Math.min(len, filter_l + j - filter_l / 2); /*\r\n                                                                        * adjust our input time counter. Incriment by the number of samples\r\n                                                                        * used, then normalize so that next output sample is at time 0, next\r\n                                                                        * input buffer is at time itime[ch]\r\n                                                                        */\n        gfc.itime[ch] += num_used.num_used - k * gfc.resample_ratio; /* save the last BLACKSIZE samples into the inbuf_old buffer */\n        if (num_used.num_used >= BLACKSIZE) {\n          for (i = 0; i < BLACKSIZE; i++) {\n            inbuf_old[i] = inbuf[in_bufferPos + num_used.num_used + i - BLACKSIZE];\n          }\n        } else {\n          /* shift in num_used.num_used samples into inbuf_old */var n_shift = BLACKSIZE - num_used.num_used; /*\r\n                                                                                                              * number of samples to\r\n                                                                                                              * shift\r\n                                                                                                              */ /*\r\n                                                                                                                 * shift n_shift samples by num_used.num_used, to make room for the\r\n                                                                                                                 * num_used new samples\r\n                                                                                                                 */\n          for (i = 0; i < n_shift; ++i) {\n            inbuf_old[i] = inbuf_old[i + num_used.num_used];\n          } /* shift in the num_used.num_used samples */\n          for (j = 0; i < BLACKSIZE; ++i, ++j) {\n            inbuf_old[i] = inbuf[in_bufferPos + j];\n          }\n        }\n        return k; /* return the number samples created at the new samplerate */\n      }\n      function fill_buffer(gfp, mfbuf, in_buffer, in_bufferPos, nsamples, io) {\n        var gfc = gfp.internal_flags; /* copy in new samples into mfbuf, with resampling if necessary */\n        if (gfc.resample_ratio < .9999 || gfc.resample_ratio > 1.0001) {\n          for (var ch = 0; ch < gfc.channels_out; ch++) {\n            var numUsed = new NumUsed();\n            io.n_out = fill_buffer_resample(gfp, mfbuf[ch], gfc.mf_size, gfp.framesize, in_buffer[ch], in_bufferPos, nsamples, numUsed, ch);\n            io.n_in = numUsed.num_used;\n          }\n        } else {\n          io.n_out = Math.min(gfp.framesize, nsamples);\n          io.n_in = io.n_out;\n          for (var i = 0; i < io.n_out; ++i) {\n            mfbuf[0][gfc.mf_size + i] = in_buffer[0][in_bufferPos + i];\n            if (gfc.channels_out == 2) mfbuf[1][gfc.mf_size + i] = in_buffer[1][in_bufferPos + i];\n          }\n        }\n      }\n    }\n    function GetAudio() {\n      var parse;\n      var mpg;\n      this.setModules = function (parse2, mpg2) {\n        parse = parse2;\n        mpg = mpg2;\n      };\n    }\n    function Parse() {\n      var ver;\n      var id3;\n      var pre;\n      this.setModules = function (ver2, id32, pre2) {\n        ver = ver2;\n        id3 = id32;\n        pre = pre2;\n      };\n    }\n    function MPGLib() {}\n    function ID3Tag() {\n      var bits;\n      var ver;\n      this.setModules = function (_bits, _ver) {\n        bits = _bits;\n        ver = _ver;\n      };\n    }\n    function Mp3Encoder(channels, samplerate, kbps) {\n      if (arguments.length != 3) {\n        console.error('WARN: Mp3Encoder(channels, samplerate, kbps) not specified');\n        channels = 1;\n        samplerate = 44100;\n        kbps = 128;\n      }\n      var lame = new Lame();\n      var gaud = new GetAudio();\n      var ga = new GainAnalysis();\n      var bs = new BitStream();\n      var p = new Presets();\n      var qupvt = new QuantizePVT();\n      var qu = new Quantize();\n      var vbr = new VBRTag();\n      var ver = new Version();\n      var id3 = new ID3Tag();\n      var rv = new Reservoir();\n      var tak = new Takehiro();\n      var parse = new Parse();\n      var mpg = new MPGLib();\n      lame.setModules(ga, bs, p, qupvt, qu, vbr, ver, id3, mpg);\n      bs.setModules(ga, mpg, ver, vbr);\n      id3.setModules(bs, ver);\n      p.setModules(lame);\n      qu.setModules(bs, rv, qupvt, tak);\n      qupvt.setModules(tak, rv, lame.enc.psy);\n      rv.setModules(bs);\n      tak.setModules(qupvt);\n      vbr.setModules(lame, bs, ver);\n      gaud.setModules(parse, mpg);\n      parse.setModules(ver, id3, p);\n      var gfp = lame.lame_init();\n      gfp.num_channels = channels;\n      gfp.in_samplerate = samplerate;\n      gfp.brate = kbps;\n      gfp.mode = MPEGMode.STEREO;\n      gfp.quality = 3;\n      gfp.bWriteVbrTag = false;\n      gfp.disable_reservoir = true;\n      gfp.write_id3tag_automatic = false;\n      var retcode = lame.lame_init_params(gfp);\n      var maxSamples = 1152;\n      var mp3buf_size = 0 | 1.25 * maxSamples + 7200;\n      var mp3buf = new_byte(mp3buf_size);\n      this.encodeBuffer = function (left, right) {\n        if (channels == 1) {\n          right = left;\n        }\n        if (left.length > maxSamples) {\n          maxSamples = left.length;\n          mp3buf_size = 0 | 1.25 * maxSamples + 7200;\n          mp3buf = new_byte(mp3buf_size);\n        }\n        var _sz = lame.lame_encode_buffer(gfp, left, right, left.length, mp3buf, 0, mp3buf_size);\n        return new Int8Array(mp3buf.subarray(0, _sz));\n      };\n      this.flush = function () {\n        var _sz = lame.lame_encode_flush(gfp, mp3buf, 0, mp3buf_size);\n        return new Int8Array(mp3buf.subarray(0, _sz));\n      };\n    }\n    function WavHeader() {\n      this.dataOffset = 0;\n      this.dataLen = 0;\n      this.channels = 0;\n      this.sampleRate = 0;\n    }\n    function fourccToInt(fourcc) {\n      return fourcc.charCodeAt(0) << 24 | fourcc.charCodeAt(1) << 16 | fourcc.charCodeAt(2) << 8 | fourcc.charCodeAt(3);\n    }\n    WavHeader.RIFF = fourccToInt(\"RIFF\");\n    WavHeader.WAVE = fourccToInt(\"WAVE\");\n    WavHeader.fmt_ = fourccToInt(\"fmt \");\n    WavHeader.data = fourccToInt(\"data\");\n    WavHeader.readHeader = function (dataView) {\n      var w = new WavHeader();\n      var header = dataView.getUint32(0, false);\n      if (WavHeader.RIFF != header) {\n        return;\n      }\n      var fileLen = dataView.getUint32(4, true);\n      if (WavHeader.WAVE != dataView.getUint32(8, false)) {\n        return;\n      }\n      if (WavHeader.fmt_ != dataView.getUint32(12, false)) {\n        return;\n      }\n      var fmtLen = dataView.getUint32(16, true);\n      var pos = 16 + 4;\n      switch (fmtLen) {\n        case 16:\n        case 18:\n          w.channels = dataView.getUint16(pos + 2, true);\n          w.sampleRate = dataView.getUint32(pos + 4, true);\n          break;\n        default:\n          throw 'extended fmt chunk not implemented';\n      }\n      pos += fmtLen;\n      var data = WavHeader.data;\n      var len = 0;\n      while (data != header) {\n        header = dataView.getUint32(pos, false);\n        len = dataView.getUint32(pos + 4, true);\n        if (data == header) {\n          break;\n        }\n        pos += len + 8;\n      }\n      w.dataLen = len;\n      w.dataOffset = pos + 8;\n      return w;\n    };\n    L3Side.SFBMAX = Encoder.SBMAX_s * 3; //testFullLength();\n    lamejs.Mp3Encoder = Mp3Encoder;\n    lamejs.WavHeader = WavHeader;\n  } //fs=require('fs');\n  lamejs();\n  var mp3Encoder,\n    maxSamples = 1152,\n    wav,\n    samplesLeft,\n    config,\n    dataBuffer,\n    samplesRight;\n  var clearBuffer = function clearBuffer() {\n    dataBuffer = [];\n  };\n  var appendToBuffer = function appendToBuffer(mp3Buf) {\n    dataBuffer.push(new Int8Array(mp3Buf));\n  };\n  var init = function init(prefConfig) {\n    config = prefConfig || {};\n    clearBuffer();\n  };\n  var encode = function encode(arrayBuffer) {\n    wav = lamejs.WavHeader.readHeader(new DataView(arrayBuffer));\n    if (!wav) {\n      self.postMessage({\n        cmd: \"error\",\n        msg: \"Specified file is not a Wave file\"\n      });\n      return;\n    }\n    var dataView = new Int16Array(arrayBuffer, wav.dataOffset, wav.dataLen / 2);\n    samplesLeft = wav.channels === 1 ? dataView : new Int16Array(wav.dataLen / (2 * wav.channels));\n    samplesRight = wav.channels === 2 ? new Int16Array(wav.dataLen / (2 * wav.channels)) : undefined;\n    if (wav.channels > 1) {\n      for (var i = 0; i < samplesLeft.length; i++) {\n        samplesLeft[i] = dataView[i * 2];\n        samplesRight[i] = dataView[i * 2 + 1];\n      }\n    }\n    mp3Encoder = new lamejs.Mp3Encoder(wav.channels, wav.sampleRate, config.bitRate || 96);\n    var remaining = samplesLeft.length;\n    for (var i = 0; remaining >= maxSamples; i += maxSamples) {\n      var left = samplesLeft.subarray(i, i + maxSamples);\n      var right;\n      if (samplesRight) {\n        right = samplesRight.subarray(i, i + maxSamples);\n      }\n      var mp3buf = mp3Encoder.encodeBuffer(left, right);\n      appendToBuffer(mp3buf);\n      remaining -= maxSamples;\n      self.postMessage({\n        cmd: \"progress\",\n        progress: 1 - remaining / samplesLeft.length\n      });\n    }\n  };\n  var finish = function finish() {\n    if (!wav) {\n      return;\n    }\n    var mp3buf = mp3Encoder.flush();\n    appendToBuffer(mp3buf);\n    self.postMessage({\n      cmd: \"end\",\n      buf: dataBuffer\n    });\n    clearBuffer(); //free up memory\n  };\n  self.onmessage = function (e) {\n    switch (e.data.cmd) {\n      case \"init\":\n        init(e.data.config);\n        break;\n      case \"encode\":\n        encode(e.data.rawInput);\n        break;\n      case \"finish\":\n        finish();\n        break;\n    }\n  };\n};\nvar code = workercode.toString();\ncode = code.substring(code.indexOf(\"{\") + 1, code.lastIndexOf(\"}\"));\nvar blob = new Blob([code], {\n  type: \"application/javascript\"\n});\nvar worker_script = URL.createObjectURL(blob);\nmodule.exports = worker_script;","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import getPrototypeOf from \"./getPrototypeOf\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct\";\nimport possibleConstructorReturn from \"./possibleConstructorReturn\";\nexport default function _createSuper(Derived) {\n  return function () {\n    var Super = getPrototypeOf(Derived),\n        result;\n\n    if (isNativeReflectConstruct()) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return possibleConstructorReturn(this, result);\n  };\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","/** @license React v16.8.6\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar k = require(\"object-assign\"),\n  n = \"function\" === typeof Symbol && Symbol.for,\n  p = n ? Symbol.for(\"react.element\") : 60103,\n  q = n ? Symbol.for(\"react.portal\") : 60106,\n  r = n ? Symbol.for(\"react.fragment\") : 60107,\n  t = n ? Symbol.for(\"react.strict_mode\") : 60108,\n  u = n ? Symbol.for(\"react.profiler\") : 60114,\n  v = n ? Symbol.for(\"react.provider\") : 60109,\n  w = n ? Symbol.for(\"react.context\") : 60110,\n  x = n ? Symbol.for(\"react.concurrent_mode\") : 60111,\n  y = n ? Symbol.for(\"react.forward_ref\") : 60112,\n  z = n ? Symbol.for(\"react.suspense\") : 60113,\n  aa = n ? Symbol.for(\"react.memo\") : 60115,\n  ba = n ? Symbol.for(\"react.lazy\") : 60116,\n  A = \"function\" === typeof Symbol && Symbol.iterator;\nfunction ca(a, b, d, c, e, g, h, f) {\n  if (!a) {\n    a = void 0;\n    if (void 0 === b) a = Error(\"Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.\");else {\n      var l = [d, c, e, g, h, f],\n        m = 0;\n      a = Error(b.replace(/%s/g, function () {\n        return l[m++];\n      }));\n      a.name = \"Invariant Violation\";\n    }\n    a.framesToPop = 1;\n    throw a;\n  }\n}\nfunction B(a) {\n  for (var b = arguments.length - 1, d = \"https://reactjs.org/docs/error-decoder.html?invariant=\" + a, c = 0; c < b; c++) d += \"&args[]=\" + encodeURIComponent(arguments[c + 1]);\n  ca(!1, \"Minified React error #\" + a + \"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. \", d);\n}\nvar C = {\n    isMounted: function isMounted() {\n      return !1;\n    },\n    enqueueForceUpdate: function enqueueForceUpdate() {},\n    enqueueReplaceState: function enqueueReplaceState() {},\n    enqueueSetState: function enqueueSetState() {}\n  },\n  D = {};\nfunction E(a, b, d) {\n  this.props = a;\n  this.context = b;\n  this.refs = D;\n  this.updater = d || C;\n}\nE.prototype.isReactComponent = {};\nE.prototype.setState = function (a, b) {\n  \"object\" !== typeof a && \"function\" !== typeof a && null != a ? B(\"85\") : void 0;\n  this.updater.enqueueSetState(this, a, b, \"setState\");\n};\nE.prototype.forceUpdate = function (a) {\n  this.updater.enqueueForceUpdate(this, a, \"forceUpdate\");\n};\nfunction F() {}\nF.prototype = E.prototype;\nfunction G(a, b, d) {\n  this.props = a;\n  this.context = b;\n  this.refs = D;\n  this.updater = d || C;\n}\nvar H = G.prototype = new F();\nH.constructor = G;\nk(H, E.prototype);\nH.isPureReactComponent = !0;\nvar I = {\n    current: null\n  },\n  J = {\n    current: null\n  },\n  K = Object.prototype.hasOwnProperty,\n  L = {\n    key: !0,\n    ref: !0,\n    __self: !0,\n    __source: !0\n  };\nfunction M(a, b, d) {\n  var c = void 0,\n    e = {},\n    g = null,\n    h = null;\n  if (null != b) for (c in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (g = \"\" + b.key), b) K.call(b, c) && !L.hasOwnProperty(c) && (e[c] = b[c]);\n  var f = arguments.length - 2;\n  if (1 === f) e.children = d;else if (1 < f) {\n    for (var l = Array(f), m = 0; m < f; m++) l[m] = arguments[m + 2];\n    e.children = l;\n  }\n  if (a && a.defaultProps) for (c in f = a.defaultProps, f) void 0 === e[c] && (e[c] = f[c]);\n  return {\n    $$typeof: p,\n    type: a,\n    key: g,\n    ref: h,\n    props: e,\n    _owner: J.current\n  };\n}\nfunction da(a, b) {\n  return {\n    $$typeof: p,\n    type: a.type,\n    key: b,\n    ref: a.ref,\n    props: a.props,\n    _owner: a._owner\n  };\n}\nfunction N(a) {\n  return \"object\" === typeof a && null !== a && a.$$typeof === p;\n}\nfunction escape(a) {\n  var b = {\n    \"=\": \"=0\",\n    \":\": \"=2\"\n  };\n  return \"$\" + (\"\" + a).replace(/[=:]/g, function (a) {\n    return b[a];\n  });\n}\nvar O = /\\/+/g,\n  P = [];\nfunction Q(a, b, d, c) {\n  if (P.length) {\n    var e = P.pop();\n    e.result = a;\n    e.keyPrefix = b;\n    e.func = d;\n    e.context = c;\n    e.count = 0;\n    return e;\n  }\n  return {\n    result: a,\n    keyPrefix: b,\n    func: d,\n    context: c,\n    count: 0\n  };\n}\nfunction R(a) {\n  a.result = null;\n  a.keyPrefix = null;\n  a.func = null;\n  a.context = null;\n  a.count = 0;\n  10 > P.length && P.push(a);\n}\nfunction S(a, b, d, c) {\n  var e = typeof a;\n  if (\"undefined\" === e || \"boolean\" === e) a = null;\n  var g = !1;\n  if (null === a) g = !0;else switch (e) {\n    case \"string\":\n    case \"number\":\n      g = !0;\n      break;\n    case \"object\":\n      switch (a.$$typeof) {\n        case p:\n        case q:\n          g = !0;\n      }\n  }\n  if (g) return d(c, a, \"\" === b ? \".\" + T(a, 0) : b), 1;\n  g = 0;\n  b = \"\" === b ? \".\" : b + \":\";\n  if (Array.isArray(a)) for (var h = 0; h < a.length; h++) {\n    e = a[h];\n    var f = b + T(e, h);\n    g += S(e, f, d, c);\n  } else if (null === a || \"object\" !== typeof a ? f = null : (f = A && a[A] || a[\"@@iterator\"], f = \"function\" === typeof f ? f : null), \"function\" === typeof f) for (a = f.call(a), h = 0; !(e = a.next()).done;) e = e.value, f = b + T(e, h++), g += S(e, f, d, c);else \"object\" === e && (d = \"\" + a, B(\"31\", \"[object Object]\" === d ? \"object with keys {\" + Object.keys(a).join(\", \") + \"}\" : d, \"\"));\n  return g;\n}\nfunction U(a, b, d) {\n  return null == a ? 0 : S(a, \"\", b, d);\n}\nfunction T(a, b) {\n  return \"object\" === typeof a && null !== a && null != a.key ? escape(a.key) : b.toString(36);\n}\nfunction ea(a, b) {\n  a.func.call(a.context, b, a.count++);\n}\nfunction fa(a, b, d) {\n  var c = a.result,\n    e = a.keyPrefix;\n  a = a.func.call(a.context, b, a.count++);\n  Array.isArray(a) ? V(a, c, d, function (a) {\n    return a;\n  }) : null != a && (N(a) && (a = da(a, e + (!a.key || b && b.key === a.key ? \"\" : (\"\" + a.key).replace(O, \"$&/\") + \"/\") + d)), c.push(a));\n}\nfunction V(a, b, d, c, e) {\n  var g = \"\";\n  null != d && (g = (\"\" + d).replace(O, \"$&/\") + \"/\");\n  b = Q(b, g, c, e);\n  U(a, fa, b);\n  R(b);\n}\nfunction W() {\n  var a = I.current;\n  null === a ? B(\"321\") : void 0;\n  return a;\n}\nvar X = {\n    Children: {\n      map: function map(a, b, d) {\n        if (null == a) return a;\n        var c = [];\n        V(a, c, null, b, d);\n        return c;\n      },\n      forEach: function forEach(a, b, d) {\n        if (null == a) return a;\n        b = Q(null, null, b, d);\n        U(a, ea, b);\n        R(b);\n      },\n      count: function count(a) {\n        return U(a, function () {\n          return null;\n        }, null);\n      },\n      toArray: function toArray(a) {\n        var b = [];\n        V(a, b, null, function (a) {\n          return a;\n        });\n        return b;\n      },\n      only: function only(a) {\n        N(a) ? void 0 : B(\"143\");\n        return a;\n      }\n    },\n    createRef: function createRef() {\n      return {\n        current: null\n      };\n    },\n    Component: E,\n    PureComponent: G,\n    createContext: function createContext(a, b) {\n      void 0 === b && (b = null);\n      a = {\n        $$typeof: w,\n        _calculateChangedBits: b,\n        _currentValue: a,\n        _currentValue2: a,\n        _threadCount: 0,\n        Provider: null,\n        Consumer: null\n      };\n      a.Provider = {\n        $$typeof: v,\n        _context: a\n      };\n      return a.Consumer = a;\n    },\n    forwardRef: function forwardRef(a) {\n      return {\n        $$typeof: y,\n        render: a\n      };\n    },\n    lazy: function lazy(a) {\n      return {\n        $$typeof: ba,\n        _ctor: a,\n        _status: -1,\n        _result: null\n      };\n    },\n    memo: function memo(a, b) {\n      return {\n        $$typeof: aa,\n        type: a,\n        compare: void 0 === b ? null : b\n      };\n    },\n    useCallback: function useCallback(a, b) {\n      return W().useCallback(a, b);\n    },\n    useContext: function useContext(a, b) {\n      return W().useContext(a, b);\n    },\n    useEffect: function useEffect(a, b) {\n      return W().useEffect(a, b);\n    },\n    useImperativeHandle: function useImperativeHandle(a, b, d) {\n      return W().useImperativeHandle(a, b, d);\n    },\n    useDebugValue: function useDebugValue() {},\n    useLayoutEffect: function useLayoutEffect(a, b) {\n      return W().useLayoutEffect(a, b);\n    },\n    useMemo: function useMemo(a, b) {\n      return W().useMemo(a, b);\n    },\n    useReducer: function useReducer(a, b, d) {\n      return W().useReducer(a, b, d);\n    },\n    useRef: function useRef(a) {\n      return W().useRef(a);\n    },\n    useState: function useState(a) {\n      return W().useState(a);\n    },\n    Fragment: r,\n    StrictMode: t,\n    Suspense: z,\n    createElement: M,\n    cloneElement: function cloneElement(a, b, d) {\n      null === a || void 0 === a ? B(\"267\", a) : void 0;\n      var c = void 0,\n        e = k({}, a.props),\n        g = a.key,\n        h = a.ref,\n        f = a._owner;\n      if (null != b) {\n        void 0 !== b.ref && (h = b.ref, f = J.current);\n        void 0 !== b.key && (g = \"\" + b.key);\n        var l = void 0;\n        a.type && a.type.defaultProps && (l = a.type.defaultProps);\n        for (c in b) K.call(b, c) && !L.hasOwnProperty(c) && (e[c] = void 0 === b[c] && void 0 !== l ? l[c] : b[c]);\n      }\n      c = arguments.length - 2;\n      if (1 === c) e.children = d;else if (1 < c) {\n        l = Array(c);\n        for (var m = 0; m < c; m++) l[m] = arguments[m + 2];\n        e.children = l;\n      }\n      return {\n        $$typeof: p,\n        type: a.type,\n        key: g,\n        ref: h,\n        props: e,\n        _owner: f\n      };\n    },\n    createFactory: function createFactory(a) {\n      var b = M.bind(null, a);\n      b.type = a;\n      return b;\n    },\n    isValidElement: N,\n    version: \"16.8.6\",\n    unstable_ConcurrentMode: x,\n    unstable_Profiler: u,\n    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {\n      ReactCurrentDispatcher: I,\n      ReactCurrentOwner: J,\n      assign: k\n    }\n  },\n  Y = {\n    default: X\n  },\n  Z = Y && X || Y;\nmodule.exports = Z.default || Z;","/** @license React v16.8.6\n * react-dom.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/*\n Modernizr 3.0.0pre (Custom Build) | MIT\n*/\n'use strict';\n\nvar aa = require(\"react\"),\n  n = require(\"object-assign\"),\n  r = require(\"scheduler\");\nfunction ba(a, b, c, d, e, f, g, h) {\n  if (!a) {\n    a = void 0;\n    if (void 0 === b) a = Error(\"Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.\");else {\n      var l = [c, d, e, f, g, h],\n        k = 0;\n      a = Error(b.replace(/%s/g, function () {\n        return l[k++];\n      }));\n      a.name = \"Invariant Violation\";\n    }\n    a.framesToPop = 1;\n    throw a;\n  }\n}\nfunction x(a) {\n  for (var b = arguments.length - 1, c = \"https://reactjs.org/docs/error-decoder.html?invariant=\" + a, d = 0; d < b; d++) c += \"&args[]=\" + encodeURIComponent(arguments[d + 1]);\n  ba(!1, \"Minified React error #\" + a + \"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. \", c);\n}\naa ? void 0 : x(\"227\");\nfunction ca(a, b, c, d, e, f, g, h, l) {\n  var k = Array.prototype.slice.call(arguments, 3);\n  try {\n    b.apply(c, k);\n  } catch (m) {\n    this.onError(m);\n  }\n}\nvar da = !1,\n  ea = null,\n  fa = !1,\n  ha = null,\n  ia = {\n    onError: function onError(a) {\n      da = !0;\n      ea = a;\n    }\n  };\nfunction ja(a, b, c, d, e, f, g, h, l) {\n  da = !1;\n  ea = null;\n  ca.apply(ia, arguments);\n}\nfunction ka(a, b, c, d, e, f, g, h, l) {\n  ja.apply(this, arguments);\n  if (da) {\n    if (da) {\n      var k = ea;\n      da = !1;\n      ea = null;\n    } else x(\"198\"), k = void 0;\n    fa || (fa = !0, ha = k);\n  }\n}\nvar la = null,\n  ma = {};\nfunction na() {\n  if (la) for (var a in ma) {\n    var b = ma[a],\n      c = la.indexOf(a);\n    -1 < c ? void 0 : x(\"96\", a);\n    if (!oa[c]) {\n      b.extractEvents ? void 0 : x(\"97\", a);\n      oa[c] = b;\n      c = b.eventTypes;\n      for (var d in c) {\n        var e = void 0;\n        var f = c[d],\n          g = b,\n          h = d;\n        pa.hasOwnProperty(h) ? x(\"99\", h) : void 0;\n        pa[h] = f;\n        var l = f.phasedRegistrationNames;\n        if (l) {\n          for (e in l) l.hasOwnProperty(e) && qa(l[e], g, h);\n          e = !0;\n        } else f.registrationName ? (qa(f.registrationName, g, h), e = !0) : e = !1;\n        e ? void 0 : x(\"98\", d, a);\n      }\n    }\n  }\n}\nfunction qa(a, b, c) {\n  ra[a] ? x(\"100\", a) : void 0;\n  ra[a] = b;\n  sa[a] = b.eventTypes[c].dependencies;\n}\nvar oa = [],\n  pa = {},\n  ra = {},\n  sa = {},\n  ta = null,\n  ua = null,\n  va = null;\nfunction wa(a, b, c) {\n  var d = a.type || \"unknown-event\";\n  a.currentTarget = va(c);\n  ka(d, b, void 0, a);\n  a.currentTarget = null;\n}\nfunction xa(a, b) {\n  null == b ? x(\"30\") : void 0;\n  if (null == a) return b;\n  if (Array.isArray(a)) {\n    if (Array.isArray(b)) return a.push.apply(a, b), a;\n    a.push(b);\n    return a;\n  }\n  return Array.isArray(b) ? [a].concat(b) : [a, b];\n}\nfunction ya(a, b, c) {\n  Array.isArray(a) ? a.forEach(b, c) : a && b.call(c, a);\n}\nvar za = null;\nfunction Aa(a) {\n  if (a) {\n    var b = a._dispatchListeners,\n      c = a._dispatchInstances;\n    if (Array.isArray(b)) for (var d = 0; d < b.length && !a.isPropagationStopped(); d++) wa(a, b[d], c[d]);else b && wa(a, b, c);\n    a._dispatchListeners = null;\n    a._dispatchInstances = null;\n    a.isPersistent() || a.constructor.release(a);\n  }\n}\nvar Ba = {\n  injectEventPluginOrder: function injectEventPluginOrder(a) {\n    la ? x(\"101\") : void 0;\n    la = Array.prototype.slice.call(a);\n    na();\n  },\n  injectEventPluginsByName: function injectEventPluginsByName(a) {\n    var b = !1,\n      c;\n    for (c in a) if (a.hasOwnProperty(c)) {\n      var d = a[c];\n      ma.hasOwnProperty(c) && ma[c] === d || (ma[c] ? x(\"102\", c) : void 0, ma[c] = d, b = !0);\n    }\n    b && na();\n  }\n};\nfunction Ca(a, b) {\n  var c = a.stateNode;\n  if (!c) return null;\n  var d = ta(c);\n  if (!d) return null;\n  c = d[b];\n  a: switch (b) {\n    case \"onClick\":\n    case \"onClickCapture\":\n    case \"onDoubleClick\":\n    case \"onDoubleClickCapture\":\n    case \"onMouseDown\":\n    case \"onMouseDownCapture\":\n    case \"onMouseMove\":\n    case \"onMouseMoveCapture\":\n    case \"onMouseUp\":\n    case \"onMouseUpCapture\":\n      (d = !d.disabled) || (a = a.type, d = !(\"button\" === a || \"input\" === a || \"select\" === a || \"textarea\" === a));\n      a = !d;\n      break a;\n    default:\n      a = !1;\n  }\n  if (a) return null;\n  c && \"function\" !== typeof c ? x(\"231\", b, typeof c) : void 0;\n  return c;\n}\nfunction Da(a) {\n  null !== a && (za = xa(za, a));\n  a = za;\n  za = null;\n  if (a && (ya(a, Aa), za ? x(\"95\") : void 0, fa)) throw a = ha, fa = !1, ha = null, a;\n}\nvar Ea = Math.random().toString(36).slice(2),\n  Fa = \"__reactInternalInstance$\" + Ea,\n  Ga = \"__reactEventHandlers$\" + Ea;\nfunction Ha(a) {\n  if (a[Fa]) return a[Fa];\n  for (; !a[Fa];) if (a.parentNode) a = a.parentNode;else return null;\n  a = a[Fa];\n  return 5 === a.tag || 6 === a.tag ? a : null;\n}\nfunction Ia(a) {\n  a = a[Fa];\n  return !a || 5 !== a.tag && 6 !== a.tag ? null : a;\n}\nfunction Ja(a) {\n  if (5 === a.tag || 6 === a.tag) return a.stateNode;\n  x(\"33\");\n}\nfunction Ka(a) {\n  return a[Ga] || null;\n}\nfunction La(a) {\n  do a = a.return; while (a && 5 !== a.tag);\n  return a ? a : null;\n}\nfunction Ma(a, b, c) {\n  if (b = Ca(a, c.dispatchConfig.phasedRegistrationNames[b])) c._dispatchListeners = xa(c._dispatchListeners, b), c._dispatchInstances = xa(c._dispatchInstances, a);\n}\nfunction Na(a) {\n  if (a && a.dispatchConfig.phasedRegistrationNames) {\n    for (var b = a._targetInst, c = []; b;) c.push(b), b = La(b);\n    for (b = c.length; 0 < b--;) Ma(c[b], \"captured\", a);\n    for (b = 0; b < c.length; b++) Ma(c[b], \"bubbled\", a);\n  }\n}\nfunction Oa(a, b, c) {\n  a && c && c.dispatchConfig.registrationName && (b = Ca(a, c.dispatchConfig.registrationName)) && (c._dispatchListeners = xa(c._dispatchListeners, b), c._dispatchInstances = xa(c._dispatchInstances, a));\n}\nfunction Pa(a) {\n  a && a.dispatchConfig.registrationName && Oa(a._targetInst, null, a);\n}\nfunction Qa(a) {\n  ya(a, Na);\n}\nvar Ra = !(\"undefined\" === typeof window || !window.document || !window.document.createElement);\nfunction Sa(a, b) {\n  var c = {};\n  c[a.toLowerCase()] = b.toLowerCase();\n  c[\"Webkit\" + a] = \"webkit\" + b;\n  c[\"Moz\" + a] = \"moz\" + b;\n  return c;\n}\nvar Ta = {\n    animationend: Sa(\"Animation\", \"AnimationEnd\"),\n    animationiteration: Sa(\"Animation\", \"AnimationIteration\"),\n    animationstart: Sa(\"Animation\", \"AnimationStart\"),\n    transitionend: Sa(\"Transition\", \"TransitionEnd\")\n  },\n  Ua = {},\n  Va = {};\nRa && (Va = document.createElement(\"div\").style, \"AnimationEvent\" in window || (delete Ta.animationend.animation, delete Ta.animationiteration.animation, delete Ta.animationstart.animation), \"TransitionEvent\" in window || delete Ta.transitionend.transition);\nfunction Wa(a) {\n  if (Ua[a]) return Ua[a];\n  if (!Ta[a]) return a;\n  var b = Ta[a],\n    c;\n  for (c in b) if (b.hasOwnProperty(c) && c in Va) return Ua[a] = b[c];\n  return a;\n}\nvar Xa = Wa(\"animationend\"),\n  Ya = Wa(\"animationiteration\"),\n  Za = Wa(\"animationstart\"),\n  $a = Wa(\"transitionend\"),\n  ab = \"abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting\".split(\" \"),\n  bb = null,\n  cb = null,\n  db = null;\nfunction eb() {\n  if (db) return db;\n  var a,\n    b = cb,\n    c = b.length,\n    d,\n    e = \"value\" in bb ? bb.value : bb.textContent,\n    f = e.length;\n  for (a = 0; a < c && b[a] === e[a]; a++);\n  var g = c - a;\n  for (d = 1; d <= g && b[c - d] === e[f - d]; d++);\n  return db = e.slice(a, 1 < d ? 1 - d : void 0);\n}\nfunction fb() {\n  return !0;\n}\nfunction gb() {\n  return !1;\n}\nfunction y(a, b, c, d) {\n  this.dispatchConfig = a;\n  this._targetInst = b;\n  this.nativeEvent = c;\n  a = this.constructor.Interface;\n  for (var e in a) a.hasOwnProperty(e) && ((b = a[e]) ? this[e] = b(c) : \"target\" === e ? this.target = d : this[e] = c[e]);\n  this.isDefaultPrevented = (null != c.defaultPrevented ? c.defaultPrevented : !1 === c.returnValue) ? fb : gb;\n  this.isPropagationStopped = gb;\n  return this;\n}\nn(y.prototype, {\n  preventDefault: function preventDefault() {\n    this.defaultPrevented = !0;\n    var a = this.nativeEvent;\n    a && (a.preventDefault ? a.preventDefault() : \"unknown\" !== typeof a.returnValue && (a.returnValue = !1), this.isDefaultPrevented = fb);\n  },\n  stopPropagation: function stopPropagation() {\n    var a = this.nativeEvent;\n    a && (a.stopPropagation ? a.stopPropagation() : \"unknown\" !== typeof a.cancelBubble && (a.cancelBubble = !0), this.isPropagationStopped = fb);\n  },\n  persist: function persist() {\n    this.isPersistent = fb;\n  },\n  isPersistent: gb,\n  destructor: function destructor() {\n    var a = this.constructor.Interface,\n      b;\n    for (b in a) this[b] = null;\n    this.nativeEvent = this._targetInst = this.dispatchConfig = null;\n    this.isPropagationStopped = this.isDefaultPrevented = gb;\n    this._dispatchInstances = this._dispatchListeners = null;\n  }\n});\ny.Interface = {\n  type: null,\n  target: null,\n  currentTarget: function currentTarget() {\n    return null;\n  },\n  eventPhase: null,\n  bubbles: null,\n  cancelable: null,\n  timeStamp: function timeStamp(a) {\n    return a.timeStamp || Date.now();\n  },\n  defaultPrevented: null,\n  isTrusted: null\n};\ny.extend = function (a) {\n  function b() {}\n  function c() {\n    return d.apply(this, arguments);\n  }\n  var d = this;\n  b.prototype = d.prototype;\n  var e = new b();\n  n(e, c.prototype);\n  c.prototype = e;\n  c.prototype.constructor = c;\n  c.Interface = n({}, d.Interface, a);\n  c.extend = d.extend;\n  hb(c);\n  return c;\n};\nhb(y);\nfunction ib(a, b, c, d) {\n  if (this.eventPool.length) {\n    var e = this.eventPool.pop();\n    this.call(e, a, b, c, d);\n    return e;\n  }\n  return new this(a, b, c, d);\n}\nfunction jb(a) {\n  a instanceof this ? void 0 : x(\"279\");\n  a.destructor();\n  10 > this.eventPool.length && this.eventPool.push(a);\n}\nfunction hb(a) {\n  a.eventPool = [];\n  a.getPooled = ib;\n  a.release = jb;\n}\nvar kb = y.extend({\n    data: null\n  }),\n  lb = y.extend({\n    data: null\n  }),\n  mb = [9, 13, 27, 32],\n  nb = Ra && \"CompositionEvent\" in window,\n  ob = null;\nRa && \"documentMode\" in document && (ob = document.documentMode);\nvar pb = Ra && \"TextEvent\" in window && !ob,\n  qb = Ra && (!nb || ob && 8 < ob && 11 >= ob),\n  rb = String.fromCharCode(32),\n  sb = {\n    beforeInput: {\n      phasedRegistrationNames: {\n        bubbled: \"onBeforeInput\",\n        captured: \"onBeforeInputCapture\"\n      },\n      dependencies: [\"compositionend\", \"keypress\", \"textInput\", \"paste\"]\n    },\n    compositionEnd: {\n      phasedRegistrationNames: {\n        bubbled: \"onCompositionEnd\",\n        captured: \"onCompositionEndCapture\"\n      },\n      dependencies: \"blur compositionend keydown keypress keyup mousedown\".split(\" \")\n    },\n    compositionStart: {\n      phasedRegistrationNames: {\n        bubbled: \"onCompositionStart\",\n        captured: \"onCompositionStartCapture\"\n      },\n      dependencies: \"blur compositionstart keydown keypress keyup mousedown\".split(\" \")\n    },\n    compositionUpdate: {\n      phasedRegistrationNames: {\n        bubbled: \"onCompositionUpdate\",\n        captured: \"onCompositionUpdateCapture\"\n      },\n      dependencies: \"blur compositionupdate keydown keypress keyup mousedown\".split(\" \")\n    }\n  },\n  tb = !1;\nfunction ub(a, b) {\n  switch (a) {\n    case \"keyup\":\n      return -1 !== mb.indexOf(b.keyCode);\n    case \"keydown\":\n      return 229 !== b.keyCode;\n    case \"keypress\":\n    case \"mousedown\":\n    case \"blur\":\n      return !0;\n    default:\n      return !1;\n  }\n}\nfunction vb(a) {\n  a = a.detail;\n  return \"object\" === typeof a && \"data\" in a ? a.data : null;\n}\nvar wb = !1;\nfunction xb(a, b) {\n  switch (a) {\n    case \"compositionend\":\n      return vb(b);\n    case \"keypress\":\n      if (32 !== b.which) return null;\n      tb = !0;\n      return rb;\n    case \"textInput\":\n      return a = b.data, a === rb && tb ? null : a;\n    default:\n      return null;\n  }\n}\nfunction yb(a, b) {\n  if (wb) return \"compositionend\" === a || !nb && ub(a, b) ? (a = eb(), db = cb = bb = null, wb = !1, a) : null;\n  switch (a) {\n    case \"paste\":\n      return null;\n    case \"keypress\":\n      if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {\n        if (b.char && 1 < b.char.length) return b.char;\n        if (b.which) return String.fromCharCode(b.which);\n      }\n      return null;\n    case \"compositionend\":\n      return qb && \"ko\" !== b.locale ? null : b.data;\n    default:\n      return null;\n  }\n}\nvar zb = {\n    eventTypes: sb,\n    extractEvents: function extractEvents(a, b, c, d) {\n      var e = void 0;\n      var f = void 0;\n      if (nb) b: {\n        switch (a) {\n          case \"compositionstart\":\n            e = sb.compositionStart;\n            break b;\n          case \"compositionend\":\n            e = sb.compositionEnd;\n            break b;\n          case \"compositionupdate\":\n            e = sb.compositionUpdate;\n            break b;\n        }\n        e = void 0;\n      } else wb ? ub(a, c) && (e = sb.compositionEnd) : \"keydown\" === a && 229 === c.keyCode && (e = sb.compositionStart);\n      e ? (qb && \"ko\" !== c.locale && (wb || e !== sb.compositionStart ? e === sb.compositionEnd && wb && (f = eb()) : (bb = d, cb = \"value\" in bb ? bb.value : bb.textContent, wb = !0)), e = kb.getPooled(e, b, c, d), f ? e.data = f : (f = vb(c), null !== f && (e.data = f)), Qa(e), f = e) : f = null;\n      (a = pb ? xb(a, c) : yb(a, c)) ? (b = lb.getPooled(sb.beforeInput, b, c, d), b.data = a, Qa(b)) : b = null;\n      return null === f ? b : null === b ? f : [f, b];\n    }\n  },\n  Ab = null,\n  Bb = null,\n  Cb = null;\nfunction Db(a) {\n  if (a = ua(a)) {\n    \"function\" !== typeof Ab ? x(\"280\") : void 0;\n    var b = ta(a.stateNode);\n    Ab(a.stateNode, a.type, b);\n  }\n}\nfunction Eb(a) {\n  Bb ? Cb ? Cb.push(a) : Cb = [a] : Bb = a;\n}\nfunction Fb() {\n  if (Bb) {\n    var a = Bb,\n      b = Cb;\n    Cb = Bb = null;\n    Db(a);\n    if (b) for (a = 0; a < b.length; a++) Db(b[a]);\n  }\n}\nfunction Gb(a, b) {\n  return a(b);\n}\nfunction Hb(a, b, c) {\n  return a(b, c);\n}\nfunction Ib() {}\nvar Jb = !1;\nfunction Kb(a, b) {\n  if (Jb) return a(b);\n  Jb = !0;\n  try {\n    return Gb(a, b);\n  } finally {\n    if (Jb = !1, null !== Bb || null !== Cb) Ib(), Fb();\n  }\n}\nvar Lb = {\n  color: !0,\n  date: !0,\n  datetime: !0,\n  \"datetime-local\": !0,\n  email: !0,\n  month: !0,\n  number: !0,\n  password: !0,\n  range: !0,\n  search: !0,\n  tel: !0,\n  text: !0,\n  time: !0,\n  url: !0,\n  week: !0\n};\nfunction Mb(a) {\n  var b = a && a.nodeName && a.nodeName.toLowerCase();\n  return \"input\" === b ? !!Lb[a.type] : \"textarea\" === b ? !0 : !1;\n}\nfunction Nb(a) {\n  a = a.target || a.srcElement || window;\n  a.correspondingUseElement && (a = a.correspondingUseElement);\n  return 3 === a.nodeType ? a.parentNode : a;\n}\nfunction Ob(a) {\n  if (!Ra) return !1;\n  a = \"on\" + a;\n  var b = (a in document);\n  b || (b = document.createElement(\"div\"), b.setAttribute(a, \"return;\"), b = \"function\" === typeof b[a]);\n  return b;\n}\nfunction Pb(a) {\n  var b = a.type;\n  return (a = a.nodeName) && \"input\" === a.toLowerCase() && (\"checkbox\" === b || \"radio\" === b);\n}\nfunction Qb(a) {\n  var b = Pb(a) ? \"checked\" : \"value\",\n    c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b),\n    d = \"\" + a[b];\n  if (!a.hasOwnProperty(b) && \"undefined\" !== typeof c && \"function\" === typeof c.get && \"function\" === typeof c.set) {\n    var e = c.get,\n      f = c.set;\n    Object.defineProperty(a, b, {\n      configurable: !0,\n      get: function get() {\n        return e.call(this);\n      },\n      set: function set(a) {\n        d = \"\" + a;\n        f.call(this, a);\n      }\n    });\n    Object.defineProperty(a, b, {\n      enumerable: c.enumerable\n    });\n    return {\n      getValue: function getValue() {\n        return d;\n      },\n      setValue: function setValue(a) {\n        d = \"\" + a;\n      },\n      stopTracking: function stopTracking() {\n        a._valueTracker = null;\n        delete a[b];\n      }\n    };\n  }\n}\nfunction Rb(a) {\n  a._valueTracker || (a._valueTracker = Qb(a));\n}\nfunction Sb(a) {\n  if (!a) return !1;\n  var b = a._valueTracker;\n  if (!b) return !0;\n  var c = b.getValue();\n  var d = \"\";\n  a && (d = Pb(a) ? a.checked ? \"true\" : \"false\" : a.value);\n  a = d;\n  return a !== c ? (b.setValue(a), !0) : !1;\n}\nvar Tb = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\nTb.hasOwnProperty(\"ReactCurrentDispatcher\") || (Tb.ReactCurrentDispatcher = {\n  current: null\n});\nvar Ub = /^(.*)[\\\\\\/]/,\n  z = \"function\" === typeof Symbol && Symbol.for,\n  Vb = z ? Symbol.for(\"react.element\") : 60103,\n  Wb = z ? Symbol.for(\"react.portal\") : 60106,\n  Xb = z ? Symbol.for(\"react.fragment\") : 60107,\n  Yb = z ? Symbol.for(\"react.strict_mode\") : 60108,\n  Zb = z ? Symbol.for(\"react.profiler\") : 60114,\n  $b = z ? Symbol.for(\"react.provider\") : 60109,\n  ac = z ? Symbol.for(\"react.context\") : 60110,\n  bc = z ? Symbol.for(\"react.concurrent_mode\") : 60111,\n  cc = z ? Symbol.for(\"react.forward_ref\") : 60112,\n  dc = z ? Symbol.for(\"react.suspense\") : 60113,\n  ec = z ? Symbol.for(\"react.memo\") : 60115,\n  fc = z ? Symbol.for(\"react.lazy\") : 60116,\n  gc = \"function\" === typeof Symbol && Symbol.iterator;\nfunction hc(a) {\n  if (null === a || \"object\" !== typeof a) return null;\n  a = gc && a[gc] || a[\"@@iterator\"];\n  return \"function\" === typeof a ? a : null;\n}\nfunction ic(a) {\n  if (null == a) return null;\n  if (\"function\" === typeof a) return a.displayName || a.name || null;\n  if (\"string\" === typeof a) return a;\n  switch (a) {\n    case bc:\n      return \"ConcurrentMode\";\n    case Xb:\n      return \"Fragment\";\n    case Wb:\n      return \"Portal\";\n    case Zb:\n      return \"Profiler\";\n    case Yb:\n      return \"StrictMode\";\n    case dc:\n      return \"Suspense\";\n  }\n  if (\"object\" === typeof a) switch (a.$$typeof) {\n    case ac:\n      return \"Context.Consumer\";\n    case $b:\n      return \"Context.Provider\";\n    case cc:\n      var b = a.render;\n      b = b.displayName || b.name || \"\";\n      return a.displayName || (\"\" !== b ? \"ForwardRef(\" + b + \")\" : \"ForwardRef\");\n    case ec:\n      return ic(a.type);\n    case fc:\n      if (a = 1 === a._status ? a._result : null) return ic(a);\n  }\n  return null;\n}\nfunction jc(a) {\n  var b = \"\";\n  do {\n    a: switch (a.tag) {\n      case 3:\n      case 4:\n      case 6:\n      case 7:\n      case 10:\n      case 9:\n        var c = \"\";\n        break a;\n      default:\n        var d = a._debugOwner,\n          e = a._debugSource,\n          f = ic(a.type);\n        c = null;\n        d && (c = ic(d.type));\n        d = f;\n        f = \"\";\n        e ? f = \" (at \" + e.fileName.replace(Ub, \"\") + \":\" + e.lineNumber + \")\" : c && (f = \" (created by \" + c + \")\");\n        c = \"\\n    in \" + (d || \"Unknown\") + f;\n    }\n    b += c;\n    a = a.return;\n  } while (a);\n  return b;\n}\nvar kc = /^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,\n  lc = Object.prototype.hasOwnProperty,\n  mc = {},\n  nc = {};\nfunction oc(a) {\n  if (lc.call(nc, a)) return !0;\n  if (lc.call(mc, a)) return !1;\n  if (kc.test(a)) return nc[a] = !0;\n  mc[a] = !0;\n  return !1;\n}\nfunction pc(a, b, c, d) {\n  if (null !== c && 0 === c.type) return !1;\n  switch (typeof b) {\n    case \"function\":\n    case \"symbol\":\n      return !0;\n    case \"boolean\":\n      if (d) return !1;\n      if (null !== c) return !c.acceptsBooleans;\n      a = a.toLowerCase().slice(0, 5);\n      return \"data-\" !== a && \"aria-\" !== a;\n    default:\n      return !1;\n  }\n}\nfunction qc(a, b, c, d) {\n  if (null === b || \"undefined\" === typeof b || pc(a, b, c, d)) return !0;\n  if (d) return !1;\n  if (null !== c) switch (c.type) {\n    case 3:\n      return !b;\n    case 4:\n      return !1 === b;\n    case 5:\n      return isNaN(b);\n    case 6:\n      return isNaN(b) || 1 > b;\n  }\n  return !1;\n}\nfunction C(a, b, c, d, e) {\n  this.acceptsBooleans = 2 === b || 3 === b || 4 === b;\n  this.attributeName = d;\n  this.attributeNamespace = e;\n  this.mustUseProperty = c;\n  this.propertyName = a;\n  this.type = b;\n}\nvar D = {};\n\"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style\".split(\" \").forEach(function (a) {\n  D[a] = new C(a, 0, !1, a, null);\n});\n[[\"acceptCharset\", \"accept-charset\"], [\"className\", \"class\"], [\"htmlFor\", \"for\"], [\"httpEquiv\", \"http-equiv\"]].forEach(function (a) {\n  var b = a[0];\n  D[b] = new C(b, 1, !1, a[1], null);\n});\n[\"contentEditable\", \"draggable\", \"spellCheck\", \"value\"].forEach(function (a) {\n  D[a] = new C(a, 2, !1, a.toLowerCase(), null);\n});\n[\"autoReverse\", \"externalResourcesRequired\", \"focusable\", \"preserveAlpha\"].forEach(function (a) {\n  D[a] = new C(a, 2, !1, a, null);\n});\n\"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope\".split(\" \").forEach(function (a) {\n  D[a] = new C(a, 3, !1, a.toLowerCase(), null);\n});\n[\"checked\", \"multiple\", \"muted\", \"selected\"].forEach(function (a) {\n  D[a] = new C(a, 3, !0, a, null);\n});\n[\"capture\", \"download\"].forEach(function (a) {\n  D[a] = new C(a, 4, !1, a, null);\n});\n[\"cols\", \"rows\", \"size\", \"span\"].forEach(function (a) {\n  D[a] = new C(a, 6, !1, a, null);\n});\n[\"rowSpan\", \"start\"].forEach(function (a) {\n  D[a] = new C(a, 5, !1, a.toLowerCase(), null);\n});\nvar rc = /[\\-:]([a-z])/g;\nfunction sc(a) {\n  return a[1].toUpperCase();\n}\n\"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height\".split(\" \").forEach(function (a) {\n  var b = a.replace(rc, sc);\n  D[b] = new C(b, 1, !1, a, null);\n});\n\"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type\".split(\" \").forEach(function (a) {\n  var b = a.replace(rc, sc);\n  D[b] = new C(b, 1, !1, a, \"http://www.w3.org/1999/xlink\");\n});\n[\"xml:base\", \"xml:lang\", \"xml:space\"].forEach(function (a) {\n  var b = a.replace(rc, sc);\n  D[b] = new C(b, 1, !1, a, \"http://www.w3.org/XML/1998/namespace\");\n});\n[\"tabIndex\", \"crossOrigin\"].forEach(function (a) {\n  D[a] = new C(a, 1, !1, a.toLowerCase(), null);\n});\nfunction tc(a, b, c, d) {\n  var e = D.hasOwnProperty(b) ? D[b] : null;\n  var f = null !== e ? 0 === e.type : d ? !1 : !(2 < b.length) || \"o\" !== b[0] && \"O\" !== b[0] || \"n\" !== b[1] && \"N\" !== b[1] ? !1 : !0;\n  f || (qc(b, c, e, d) && (c = null), d || null === e ? oc(b) && (null === c ? a.removeAttribute(b) : a.setAttribute(b, \"\" + c)) : e.mustUseProperty ? a[e.propertyName] = null === c ? 3 === e.type ? !1 : \"\" : c : (b = e.attributeName, d = e.attributeNamespace, null === c ? a.removeAttribute(b) : (e = e.type, c = 3 === e || 4 === e && !0 === c ? \"\" : \"\" + c, d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c))));\n}\nfunction uc(a) {\n  switch (typeof a) {\n    case \"boolean\":\n    case \"number\":\n    case \"object\":\n    case \"string\":\n    case \"undefined\":\n      return a;\n    default:\n      return \"\";\n  }\n}\nfunction vc(a, b) {\n  var c = b.checked;\n  return n({}, b, {\n    defaultChecked: void 0,\n    defaultValue: void 0,\n    value: void 0,\n    checked: null != c ? c : a._wrapperState.initialChecked\n  });\n}\nfunction wc(a, b) {\n  var c = null == b.defaultValue ? \"\" : b.defaultValue,\n    d = null != b.checked ? b.checked : b.defaultChecked;\n  c = uc(null != b.value ? b.value : c);\n  a._wrapperState = {\n    initialChecked: d,\n    initialValue: c,\n    controlled: \"checkbox\" === b.type || \"radio\" === b.type ? null != b.checked : null != b.value\n  };\n}\nfunction xc(a, b) {\n  b = b.checked;\n  null != b && tc(a, \"checked\", b, !1);\n}\nfunction yc(a, b) {\n  xc(a, b);\n  var c = uc(b.value),\n    d = b.type;\n  if (null != c) {\n    if (\"number\" === d) {\n      if (0 === c && \"\" === a.value || a.value != c) a.value = \"\" + c;\n    } else a.value !== \"\" + c && (a.value = \"\" + c);\n  } else if (\"submit\" === d || \"reset\" === d) {\n    a.removeAttribute(\"value\");\n    return;\n  }\n  b.hasOwnProperty(\"value\") ? zc(a, b.type, c) : b.hasOwnProperty(\"defaultValue\") && zc(a, b.type, uc(b.defaultValue));\n  null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);\n}\nfunction Ac(a, b, c) {\n  if (b.hasOwnProperty(\"value\") || b.hasOwnProperty(\"defaultValue\")) {\n    var d = b.type;\n    if (!(\"submit\" !== d && \"reset\" !== d || void 0 !== b.value && null !== b.value)) return;\n    b = \"\" + a._wrapperState.initialValue;\n    c || b === a.value || (a.value = b);\n    a.defaultValue = b;\n  }\n  c = a.name;\n  \"\" !== c && (a.name = \"\");\n  a.defaultChecked = !a.defaultChecked;\n  a.defaultChecked = !!a._wrapperState.initialChecked;\n  \"\" !== c && (a.name = c);\n}\nfunction zc(a, b, c) {\n  if (\"number\" !== b || a.ownerDocument.activeElement !== a) null == c ? a.defaultValue = \"\" + a._wrapperState.initialValue : a.defaultValue !== \"\" + c && (a.defaultValue = \"\" + c);\n}\nvar Bc = {\n  change: {\n    phasedRegistrationNames: {\n      bubbled: \"onChange\",\n      captured: \"onChangeCapture\"\n    },\n    dependencies: \"blur change click focus input keydown keyup selectionchange\".split(\" \")\n  }\n};\nfunction Cc(a, b, c) {\n  a = y.getPooled(Bc.change, a, b, c);\n  a.type = \"change\";\n  Eb(c);\n  Qa(a);\n  return a;\n}\nvar Dc = null,\n  Ec = null;\nfunction Fc(a) {\n  Da(a);\n}\nfunction Gc(a) {\n  var b = Ja(a);\n  if (Sb(b)) return a;\n}\nfunction Hc(a, b) {\n  if (\"change\" === a) return b;\n}\nvar Ic = !1;\nRa && (Ic = Ob(\"input\") && (!document.documentMode || 9 < document.documentMode));\nfunction Jc() {\n  Dc && (Dc.detachEvent(\"onpropertychange\", Kc), Ec = Dc = null);\n}\nfunction Kc(a) {\n  \"value\" === a.propertyName && Gc(Ec) && (a = Cc(Ec, a, Nb(a)), Kb(Fc, a));\n}\nfunction Lc(a, b, c) {\n  \"focus\" === a ? (Jc(), Dc = b, Ec = c, Dc.attachEvent(\"onpropertychange\", Kc)) : \"blur\" === a && Jc();\n}\nfunction Mc(a) {\n  if (\"selectionchange\" === a || \"keyup\" === a || \"keydown\" === a) return Gc(Ec);\n}\nfunction Nc(a, b) {\n  if (\"click\" === a) return Gc(b);\n}\nfunction Oc(a, b) {\n  if (\"input\" === a || \"change\" === a) return Gc(b);\n}\nvar Pc = {\n    eventTypes: Bc,\n    _isInputEventSupported: Ic,\n    extractEvents: function extractEvents(a, b, c, d) {\n      var e = b ? Ja(b) : window,\n        f = void 0,\n        g = void 0,\n        h = e.nodeName && e.nodeName.toLowerCase();\n      \"select\" === h || \"input\" === h && \"file\" === e.type ? f = Hc : Mb(e) ? Ic ? f = Oc : (f = Mc, g = Lc) : (h = e.nodeName) && \"input\" === h.toLowerCase() && (\"checkbox\" === e.type || \"radio\" === e.type) && (f = Nc);\n      if (f && (f = f(a, b))) return Cc(f, c, d);\n      g && g(a, e, b);\n      \"blur\" === a && (a = e._wrapperState) && a.controlled && \"number\" === e.type && zc(e, \"number\", e.value);\n    }\n  },\n  Qc = y.extend({\n    view: null,\n    detail: null\n  }),\n  Rc = {\n    Alt: \"altKey\",\n    Control: \"ctrlKey\",\n    Meta: \"metaKey\",\n    Shift: \"shiftKey\"\n  };\nfunction Sc(a) {\n  var b = this.nativeEvent;\n  return b.getModifierState ? b.getModifierState(a) : (a = Rc[a]) ? !!b[a] : !1;\n}\nfunction Tc() {\n  return Sc;\n}\nvar Uc = 0,\n  Vc = 0,\n  Wc = !1,\n  Xc = !1,\n  Yc = Qc.extend({\n    screenX: null,\n    screenY: null,\n    clientX: null,\n    clientY: null,\n    pageX: null,\n    pageY: null,\n    ctrlKey: null,\n    shiftKey: null,\n    altKey: null,\n    metaKey: null,\n    getModifierState: Tc,\n    button: null,\n    buttons: null,\n    relatedTarget: function relatedTarget(a) {\n      return a.relatedTarget || (a.fromElement === a.srcElement ? a.toElement : a.fromElement);\n    },\n    movementX: function movementX(a) {\n      if (\"movementX\" in a) return a.movementX;\n      var b = Uc;\n      Uc = a.screenX;\n      return Wc ? \"mousemove\" === a.type ? a.screenX - b : 0 : (Wc = !0, 0);\n    },\n    movementY: function movementY(a) {\n      if (\"movementY\" in a) return a.movementY;\n      var b = Vc;\n      Vc = a.screenY;\n      return Xc ? \"mousemove\" === a.type ? a.screenY - b : 0 : (Xc = !0, 0);\n    }\n  }),\n  Zc = Yc.extend({\n    pointerId: null,\n    width: null,\n    height: null,\n    pressure: null,\n    tangentialPressure: null,\n    tiltX: null,\n    tiltY: null,\n    twist: null,\n    pointerType: null,\n    isPrimary: null\n  }),\n  $c = {\n    mouseEnter: {\n      registrationName: \"onMouseEnter\",\n      dependencies: [\"mouseout\", \"mouseover\"]\n    },\n    mouseLeave: {\n      registrationName: \"onMouseLeave\",\n      dependencies: [\"mouseout\", \"mouseover\"]\n    },\n    pointerEnter: {\n      registrationName: \"onPointerEnter\",\n      dependencies: [\"pointerout\", \"pointerover\"]\n    },\n    pointerLeave: {\n      registrationName: \"onPointerLeave\",\n      dependencies: [\"pointerout\", \"pointerover\"]\n    }\n  },\n  ad = {\n    eventTypes: $c,\n    extractEvents: function extractEvents(a, b, c, d) {\n      var e = \"mouseover\" === a || \"pointerover\" === a,\n        f = \"mouseout\" === a || \"pointerout\" === a;\n      if (e && (c.relatedTarget || c.fromElement) || !f && !e) return null;\n      e = d.window === d ? d : (e = d.ownerDocument) ? e.defaultView || e.parentWindow : window;\n      f ? (f = b, b = (b = c.relatedTarget || c.toElement) ? Ha(b) : null) : f = null;\n      if (f === b) return null;\n      var g = void 0,\n        h = void 0,\n        l = void 0,\n        k = void 0;\n      if (\"mouseout\" === a || \"mouseover\" === a) g = Yc, h = $c.mouseLeave, l = $c.mouseEnter, k = \"mouse\";else if (\"pointerout\" === a || \"pointerover\" === a) g = Zc, h = $c.pointerLeave, l = $c.pointerEnter, k = \"pointer\";\n      var m = null == f ? e : Ja(f);\n      e = null == b ? e : Ja(b);\n      a = g.getPooled(h, f, c, d);\n      a.type = k + \"leave\";\n      a.target = m;\n      a.relatedTarget = e;\n      c = g.getPooled(l, b, c, d);\n      c.type = k + \"enter\";\n      c.target = e;\n      c.relatedTarget = m;\n      d = b;\n      if (f && d) a: {\n        b = f;\n        e = d;\n        k = 0;\n        for (g = b; g; g = La(g)) k++;\n        g = 0;\n        for (l = e; l; l = La(l)) g++;\n        for (; 0 < k - g;) b = La(b), k--;\n        for (; 0 < g - k;) e = La(e), g--;\n        for (; k--;) {\n          if (b === e || b === e.alternate) break a;\n          b = La(b);\n          e = La(e);\n        }\n        b = null;\n      } else b = null;\n      e = b;\n      for (b = []; f && f !== e;) {\n        k = f.alternate;\n        if (null !== k && k === e) break;\n        b.push(f);\n        f = La(f);\n      }\n      for (f = []; d && d !== e;) {\n        k = d.alternate;\n        if (null !== k && k === e) break;\n        f.push(d);\n        d = La(d);\n      }\n      for (d = 0; d < b.length; d++) Oa(b[d], \"bubbled\", a);\n      for (d = f.length; 0 < d--;) Oa(f[d], \"captured\", c);\n      return [a, c];\n    }\n  };\nfunction bd(a, b) {\n  return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;\n}\nvar cd = Object.prototype.hasOwnProperty;\nfunction dd(a, b) {\n  if (bd(a, b)) return !0;\n  if (\"object\" !== typeof a || null === a || \"object\" !== typeof b || null === b) return !1;\n  var c = Object.keys(a),\n    d = Object.keys(b);\n  if (c.length !== d.length) return !1;\n  for (d = 0; d < c.length; d++) if (!cd.call(b, c[d]) || !bd(a[c[d]], b[c[d]])) return !1;\n  return !0;\n}\nfunction ed(a) {\n  var b = a;\n  if (a.alternate) for (; b.return;) b = b.return;else {\n    if (0 !== (b.effectTag & 2)) return 1;\n    for (; b.return;) if (b = b.return, 0 !== (b.effectTag & 2)) return 1;\n  }\n  return 3 === b.tag ? 2 : 3;\n}\nfunction fd(a) {\n  2 !== ed(a) ? x(\"188\") : void 0;\n}\nfunction gd(a) {\n  var b = a.alternate;\n  if (!b) return b = ed(a), 3 === b ? x(\"188\") : void 0, 1 === b ? null : a;\n  for (var c = a, d = b;;) {\n    var e = c.return,\n      f = e ? e.alternate : null;\n    if (!e || !f) break;\n    if (e.child === f.child) {\n      for (var g = e.child; g;) {\n        if (g === c) return fd(e), a;\n        if (g === d) return fd(e), b;\n        g = g.sibling;\n      }\n      x(\"188\");\n    }\n    if (c.return !== d.return) c = e, d = f;else {\n      g = !1;\n      for (var h = e.child; h;) {\n        if (h === c) {\n          g = !0;\n          c = e;\n          d = f;\n          break;\n        }\n        if (h === d) {\n          g = !0;\n          d = e;\n          c = f;\n          break;\n        }\n        h = h.sibling;\n      }\n      if (!g) {\n        for (h = f.child; h;) {\n          if (h === c) {\n            g = !0;\n            c = f;\n            d = e;\n            break;\n          }\n          if (h === d) {\n            g = !0;\n            d = f;\n            c = e;\n            break;\n          }\n          h = h.sibling;\n        }\n        g ? void 0 : x(\"189\");\n      }\n    }\n    c.alternate !== d ? x(\"190\") : void 0;\n  }\n  3 !== c.tag ? x(\"188\") : void 0;\n  return c.stateNode.current === c ? a : b;\n}\nfunction hd(a) {\n  a = gd(a);\n  if (!a) return null;\n  for (var b = a;;) {\n    if (5 === b.tag || 6 === b.tag) return b;\n    if (b.child) b.child.return = b, b = b.child;else {\n      if (b === a) break;\n      for (; !b.sibling;) {\n        if (!b.return || b.return === a) return null;\n        b = b.return;\n      }\n      b.sibling.return = b.return;\n      b = b.sibling;\n    }\n  }\n  return null;\n}\nvar id = y.extend({\n    animationName: null,\n    elapsedTime: null,\n    pseudoElement: null\n  }),\n  jd = y.extend({\n    clipboardData: function clipboardData(a) {\n      return \"clipboardData\" in a ? a.clipboardData : window.clipboardData;\n    }\n  }),\n  kd = Qc.extend({\n    relatedTarget: null\n  });\nfunction ld(a) {\n  var b = a.keyCode;\n  \"charCode\" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;\n  10 === a && (a = 13);\n  return 32 <= a || 13 === a ? a : 0;\n}\nvar md = {\n    Esc: \"Escape\",\n    Spacebar: \" \",\n    Left: \"ArrowLeft\",\n    Up: \"ArrowUp\",\n    Right: \"ArrowRight\",\n    Down: \"ArrowDown\",\n    Del: \"Delete\",\n    Win: \"OS\",\n    Menu: \"ContextMenu\",\n    Apps: \"ContextMenu\",\n    Scroll: \"ScrollLock\",\n    MozPrintableKey: \"Unidentified\"\n  },\n  nd = {\n    8: \"Backspace\",\n    9: \"Tab\",\n    12: \"Clear\",\n    13: \"Enter\",\n    16: \"Shift\",\n    17: \"Control\",\n    18: \"Alt\",\n    19: \"Pause\",\n    20: \"CapsLock\",\n    27: \"Escape\",\n    32: \" \",\n    33: \"PageUp\",\n    34: \"PageDown\",\n    35: \"End\",\n    36: \"Home\",\n    37: \"ArrowLeft\",\n    38: \"ArrowUp\",\n    39: \"ArrowRight\",\n    40: \"ArrowDown\",\n    45: \"Insert\",\n    46: \"Delete\",\n    112: \"F1\",\n    113: \"F2\",\n    114: \"F3\",\n    115: \"F4\",\n    116: \"F5\",\n    117: \"F6\",\n    118: \"F7\",\n    119: \"F8\",\n    120: \"F9\",\n    121: \"F10\",\n    122: \"F11\",\n    123: \"F12\",\n    144: \"NumLock\",\n    145: \"ScrollLock\",\n    224: \"Meta\"\n  },\n  od = Qc.extend({\n    key: function key(a) {\n      if (a.key) {\n        var b = md[a.key] || a.key;\n        if (\"Unidentified\" !== b) return b;\n      }\n      return \"keypress\" === a.type ? (a = ld(a), 13 === a ? \"Enter\" : String.fromCharCode(a)) : \"keydown\" === a.type || \"keyup\" === a.type ? nd[a.keyCode] || \"Unidentified\" : \"\";\n    },\n    location: null,\n    ctrlKey: null,\n    shiftKey: null,\n    altKey: null,\n    metaKey: null,\n    repeat: null,\n    locale: null,\n    getModifierState: Tc,\n    charCode: function charCode(a) {\n      return \"keypress\" === a.type ? ld(a) : 0;\n    },\n    keyCode: function keyCode(a) {\n      return \"keydown\" === a.type || \"keyup\" === a.type ? a.keyCode : 0;\n    },\n    which: function which(a) {\n      return \"keypress\" === a.type ? ld(a) : \"keydown\" === a.type || \"keyup\" === a.type ? a.keyCode : 0;\n    }\n  }),\n  pd = Yc.extend({\n    dataTransfer: null\n  }),\n  qd = Qc.extend({\n    touches: null,\n    targetTouches: null,\n    changedTouches: null,\n    altKey: null,\n    metaKey: null,\n    ctrlKey: null,\n    shiftKey: null,\n    getModifierState: Tc\n  }),\n  rd = y.extend({\n    propertyName: null,\n    elapsedTime: null,\n    pseudoElement: null\n  }),\n  sd = Yc.extend({\n    deltaX: function deltaX(a) {\n      return \"deltaX\" in a ? a.deltaX : \"wheelDeltaX\" in a ? -a.wheelDeltaX : 0;\n    },\n    deltaY: function deltaY(a) {\n      return \"deltaY\" in a ? a.deltaY : \"wheelDeltaY\" in a ? -a.wheelDeltaY : \"wheelDelta\" in a ? -a.wheelDelta : 0;\n    },\n    deltaZ: null,\n    deltaMode: null\n  }),\n  td = [[\"abort\", \"abort\"], [Xa, \"animationEnd\"], [Ya, \"animationIteration\"], [Za, \"animationStart\"], [\"canplay\", \"canPlay\"], [\"canplaythrough\", \"canPlayThrough\"], [\"drag\", \"drag\"], [\"dragenter\", \"dragEnter\"], [\"dragexit\", \"dragExit\"], [\"dragleave\", \"dragLeave\"], [\"dragover\", \"dragOver\"], [\"durationchange\", \"durationChange\"], [\"emptied\", \"emptied\"], [\"encrypted\", \"encrypted\"], [\"ended\", \"ended\"], [\"error\", \"error\"], [\"gotpointercapture\", \"gotPointerCapture\"], [\"load\", \"load\"], [\"loadeddata\", \"loadedData\"], [\"loadedmetadata\", \"loadedMetadata\"], [\"loadstart\", \"loadStart\"], [\"lostpointercapture\", \"lostPointerCapture\"], [\"mousemove\", \"mouseMove\"], [\"mouseout\", \"mouseOut\"], [\"mouseover\", \"mouseOver\"], [\"playing\", \"playing\"], [\"pointermove\", \"pointerMove\"], [\"pointerout\", \"pointerOut\"], [\"pointerover\", \"pointerOver\"], [\"progress\", \"progress\"], [\"scroll\", \"scroll\"], [\"seeking\", \"seeking\"], [\"stalled\", \"stalled\"], [\"suspend\", \"suspend\"], [\"timeupdate\", \"timeUpdate\"], [\"toggle\", \"toggle\"], [\"touchmove\", \"touchMove\"], [$a, \"transitionEnd\"], [\"waiting\", \"waiting\"], [\"wheel\", \"wheel\"]],\n  ud = {},\n  vd = {};\nfunction wd(a, b) {\n  var c = a[0];\n  a = a[1];\n  var d = \"on\" + (a[0].toUpperCase() + a.slice(1));\n  b = {\n    phasedRegistrationNames: {\n      bubbled: d,\n      captured: d + \"Capture\"\n    },\n    dependencies: [c],\n    isInteractive: b\n  };\n  ud[a] = b;\n  vd[c] = b;\n}\n[[\"blur\", \"blur\"], [\"cancel\", \"cancel\"], [\"click\", \"click\"], [\"close\", \"close\"], [\"contextmenu\", \"contextMenu\"], [\"copy\", \"copy\"], [\"cut\", \"cut\"], [\"auxclick\", \"auxClick\"], [\"dblclick\", \"doubleClick\"], [\"dragend\", \"dragEnd\"], [\"dragstart\", \"dragStart\"], [\"drop\", \"drop\"], [\"focus\", \"focus\"], [\"input\", \"input\"], [\"invalid\", \"invalid\"], [\"keydown\", \"keyDown\"], [\"keypress\", \"keyPress\"], [\"keyup\", \"keyUp\"], [\"mousedown\", \"mouseDown\"], [\"mouseup\", \"mouseUp\"], [\"paste\", \"paste\"], [\"pause\", \"pause\"], [\"play\", \"play\"], [\"pointercancel\", \"pointerCancel\"], [\"pointerdown\", \"pointerDown\"], [\"pointerup\", \"pointerUp\"], [\"ratechange\", \"rateChange\"], [\"reset\", \"reset\"], [\"seeked\", \"seeked\"], [\"submit\", \"submit\"], [\"touchcancel\", \"touchCancel\"], [\"touchend\", \"touchEnd\"], [\"touchstart\", \"touchStart\"], [\"volumechange\", \"volumeChange\"]].forEach(function (a) {\n  wd(a, !0);\n});\ntd.forEach(function (a) {\n  wd(a, !1);\n});\nvar xd = {\n    eventTypes: ud,\n    isInteractiveTopLevelEventType: function isInteractiveTopLevelEventType(a) {\n      a = vd[a];\n      return void 0 !== a && !0 === a.isInteractive;\n    },\n    extractEvents: function extractEvents(a, b, c, d) {\n      var e = vd[a];\n      if (!e) return null;\n      switch (a) {\n        case \"keypress\":\n          if (0 === ld(c)) return null;\n        case \"keydown\":\n        case \"keyup\":\n          a = od;\n          break;\n        case \"blur\":\n        case \"focus\":\n          a = kd;\n          break;\n        case \"click\":\n          if (2 === c.button) return null;\n        case \"auxclick\":\n        case \"dblclick\":\n        case \"mousedown\":\n        case \"mousemove\":\n        case \"mouseup\":\n        case \"mouseout\":\n        case \"mouseover\":\n        case \"contextmenu\":\n          a = Yc;\n          break;\n        case \"drag\":\n        case \"dragend\":\n        case \"dragenter\":\n        case \"dragexit\":\n        case \"dragleave\":\n        case \"dragover\":\n        case \"dragstart\":\n        case \"drop\":\n          a = pd;\n          break;\n        case \"touchcancel\":\n        case \"touchend\":\n        case \"touchmove\":\n        case \"touchstart\":\n          a = qd;\n          break;\n        case Xa:\n        case Ya:\n        case Za:\n          a = id;\n          break;\n        case $a:\n          a = rd;\n          break;\n        case \"scroll\":\n          a = Qc;\n          break;\n        case \"wheel\":\n          a = sd;\n          break;\n        case \"copy\":\n        case \"cut\":\n        case \"paste\":\n          a = jd;\n          break;\n        case \"gotpointercapture\":\n        case \"lostpointercapture\":\n        case \"pointercancel\":\n        case \"pointerdown\":\n        case \"pointermove\":\n        case \"pointerout\":\n        case \"pointerover\":\n        case \"pointerup\":\n          a = Zc;\n          break;\n        default:\n          a = y;\n      }\n      b = a.getPooled(e, b, c, d);\n      Qa(b);\n      return b;\n    }\n  },\n  yd = xd.isInteractiveTopLevelEventType,\n  zd = [];\nfunction Ad(a) {\n  var b = a.targetInst,\n    c = b;\n  do {\n    if (!c) {\n      a.ancestors.push(c);\n      break;\n    }\n    var d;\n    for (d = c; d.return;) d = d.return;\n    d = 3 !== d.tag ? null : d.stateNode.containerInfo;\n    if (!d) break;\n    a.ancestors.push(c);\n    c = Ha(d);\n  } while (c);\n  for (c = 0; c < a.ancestors.length; c++) {\n    b = a.ancestors[c];\n    var e = Nb(a.nativeEvent);\n    d = a.topLevelType;\n    for (var f = a.nativeEvent, g = null, h = 0; h < oa.length; h++) {\n      var l = oa[h];\n      l && (l = l.extractEvents(d, b, f, e)) && (g = xa(g, l));\n    }\n    Da(g);\n  }\n}\nvar Bd = !0;\nfunction E(a, b) {\n  if (!b) return null;\n  var c = (yd(a) ? Cd : Dd).bind(null, a);\n  b.addEventListener(a, c, !1);\n}\nfunction Ed(a, b) {\n  if (!b) return null;\n  var c = (yd(a) ? Cd : Dd).bind(null, a);\n  b.addEventListener(a, c, !0);\n}\nfunction Cd(a, b) {\n  Hb(Dd, a, b);\n}\nfunction Dd(a, b) {\n  if (Bd) {\n    var c = Nb(b);\n    c = Ha(c);\n    null === c || \"number\" !== typeof c.tag || 2 === ed(c) || (c = null);\n    if (zd.length) {\n      var d = zd.pop();\n      d.topLevelType = a;\n      d.nativeEvent = b;\n      d.targetInst = c;\n      a = d;\n    } else a = {\n      topLevelType: a,\n      nativeEvent: b,\n      targetInst: c,\n      ancestors: []\n    };\n    try {\n      Kb(Ad, a);\n    } finally {\n      a.topLevelType = null, a.nativeEvent = null, a.targetInst = null, a.ancestors.length = 0, 10 > zd.length && zd.push(a);\n    }\n  }\n}\nvar Fd = {},\n  Gd = 0,\n  Hd = \"_reactListenersID\" + (\"\" + Math.random()).slice(2);\nfunction Id(a) {\n  Object.prototype.hasOwnProperty.call(a, Hd) || (a[Hd] = Gd++, Fd[a[Hd]] = {});\n  return Fd[a[Hd]];\n}\nfunction Jd(a) {\n  a = a || (\"undefined\" !== typeof document ? document : void 0);\n  if (\"undefined\" === typeof a) return null;\n  try {\n    return a.activeElement || a.body;\n  } catch (b) {\n    return a.body;\n  }\n}\nfunction Kd(a) {\n  for (; a && a.firstChild;) a = a.firstChild;\n  return a;\n}\nfunction Ld(a, b) {\n  var c = Kd(a);\n  a = 0;\n  for (var d; c;) {\n    if (3 === c.nodeType) {\n      d = a + c.textContent.length;\n      if (a <= b && d >= b) return {\n        node: c,\n        offset: b - a\n      };\n      a = d;\n    }\n    a: {\n      for (; c;) {\n        if (c.nextSibling) {\n          c = c.nextSibling;\n          break a;\n        }\n        c = c.parentNode;\n      }\n      c = void 0;\n    }\n    c = Kd(c);\n  }\n}\nfunction Md(a, b) {\n  return a && b ? a === b ? !0 : a && 3 === a.nodeType ? !1 : b && 3 === b.nodeType ? Md(a, b.parentNode) : \"contains\" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : !1 : !1;\n}\nfunction Nd() {\n  for (var a = window, b = Jd(); b instanceof a.HTMLIFrameElement;) {\n    try {\n      var c = \"string\" === typeof b.contentWindow.location.href;\n    } catch (d) {\n      c = !1;\n    }\n    if (c) a = b.contentWindow;else break;\n    b = Jd(a.document);\n  }\n  return b;\n}\nfunction Od(a) {\n  var b = a && a.nodeName && a.nodeName.toLowerCase();\n  return b && (\"input\" === b && (\"text\" === a.type || \"search\" === a.type || \"tel\" === a.type || \"url\" === a.type || \"password\" === a.type) || \"textarea\" === b || \"true\" === a.contentEditable);\n}\nfunction Pd() {\n  var a = Nd();\n  if (Od(a)) {\n    if (\"selectionStart\" in a) var b = {\n      start: a.selectionStart,\n      end: a.selectionEnd\n    };else a: {\n      b = (b = a.ownerDocument) && b.defaultView || window;\n      var c = b.getSelection && b.getSelection();\n      if (c && 0 !== c.rangeCount) {\n        b = c.anchorNode;\n        var d = c.anchorOffset,\n          e = c.focusNode;\n        c = c.focusOffset;\n        try {\n          b.nodeType, e.nodeType;\n        } catch (A) {\n          b = null;\n          break a;\n        }\n        var f = 0,\n          g = -1,\n          h = -1,\n          l = 0,\n          k = 0,\n          m = a,\n          p = null;\n        b: for (;;) {\n          for (var t;;) {\n            m !== b || 0 !== d && 3 !== m.nodeType || (g = f + d);\n            m !== e || 0 !== c && 3 !== m.nodeType || (h = f + c);\n            3 === m.nodeType && (f += m.nodeValue.length);\n            if (null === (t = m.firstChild)) break;\n            p = m;\n            m = t;\n          }\n          for (;;) {\n            if (m === a) break b;\n            p === b && ++l === d && (g = f);\n            p === e && ++k === c && (h = f);\n            if (null !== (t = m.nextSibling)) break;\n            m = p;\n            p = m.parentNode;\n          }\n          m = t;\n        }\n        b = -1 === g || -1 === h ? null : {\n          start: g,\n          end: h\n        };\n      } else b = null;\n    }\n    b = b || {\n      start: 0,\n      end: 0\n    };\n  } else b = null;\n  return {\n    focusedElem: a,\n    selectionRange: b\n  };\n}\nfunction Qd(a) {\n  var b = Nd(),\n    c = a.focusedElem,\n    d = a.selectionRange;\n  if (b !== c && c && c.ownerDocument && Md(c.ownerDocument.documentElement, c)) {\n    if (null !== d && Od(c)) if (b = d.start, a = d.end, void 0 === a && (a = b), \"selectionStart\" in c) c.selectionStart = b, c.selectionEnd = Math.min(a, c.value.length);else if (a = (b = c.ownerDocument || document) && b.defaultView || window, a.getSelection) {\n      a = a.getSelection();\n      var e = c.textContent.length,\n        f = Math.min(d.start, e);\n      d = void 0 === d.end ? f : Math.min(d.end, e);\n      !a.extend && f > d && (e = d, d = f, f = e);\n      e = Ld(c, f);\n      var g = Ld(c, d);\n      e && g && (1 !== a.rangeCount || a.anchorNode !== e.node || a.anchorOffset !== e.offset || a.focusNode !== g.node || a.focusOffset !== g.offset) && (b = b.createRange(), b.setStart(e.node, e.offset), a.removeAllRanges(), f > d ? (a.addRange(b), a.extend(g.node, g.offset)) : (b.setEnd(g.node, g.offset), a.addRange(b)));\n    }\n    b = [];\n    for (a = c; a = a.parentNode;) 1 === a.nodeType && b.push({\n      element: a,\n      left: a.scrollLeft,\n      top: a.scrollTop\n    });\n    \"function\" === typeof c.focus && c.focus();\n    for (c = 0; c < b.length; c++) a = b[c], a.element.scrollLeft = a.left, a.element.scrollTop = a.top;\n  }\n}\nvar Rd = Ra && \"documentMode\" in document && 11 >= document.documentMode,\n  Sd = {\n    select: {\n      phasedRegistrationNames: {\n        bubbled: \"onSelect\",\n        captured: \"onSelectCapture\"\n      },\n      dependencies: \"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange\".split(\" \")\n    }\n  },\n  Td = null,\n  Ud = null,\n  Vd = null,\n  Wd = !1;\nfunction Xd(a, b) {\n  var c = b.window === b ? b.document : 9 === b.nodeType ? b : b.ownerDocument;\n  if (Wd || null == Td || Td !== Jd(c)) return null;\n  c = Td;\n  \"selectionStart\" in c && Od(c) ? c = {\n    start: c.selectionStart,\n    end: c.selectionEnd\n  } : (c = (c.ownerDocument && c.ownerDocument.defaultView || window).getSelection(), c = {\n    anchorNode: c.anchorNode,\n    anchorOffset: c.anchorOffset,\n    focusNode: c.focusNode,\n    focusOffset: c.focusOffset\n  });\n  return Vd && dd(Vd, c) ? null : (Vd = c, a = y.getPooled(Sd.select, Ud, a, b), a.type = \"select\", a.target = Td, Qa(a), a);\n}\nvar Yd = {\n  eventTypes: Sd,\n  extractEvents: function extractEvents(a, b, c, d) {\n    var e = d.window === d ? d.document : 9 === d.nodeType ? d : d.ownerDocument,\n      f;\n    if (!(f = !e)) {\n      a: {\n        e = Id(e);\n        f = sa.onSelect;\n        for (var g = 0; g < f.length; g++) {\n          var h = f[g];\n          if (!e.hasOwnProperty(h) || !e[h]) {\n            e = !1;\n            break a;\n          }\n        }\n        e = !0;\n      }\n      f = !e;\n    }\n    if (f) return null;\n    e = b ? Ja(b) : window;\n    switch (a) {\n      case \"focus\":\n        if (Mb(e) || \"true\" === e.contentEditable) Td = e, Ud = b, Vd = null;\n        break;\n      case \"blur\":\n        Vd = Ud = Td = null;\n        break;\n      case \"mousedown\":\n        Wd = !0;\n        break;\n      case \"contextmenu\":\n      case \"mouseup\":\n      case \"dragend\":\n        return Wd = !1, Xd(c, d);\n      case \"selectionchange\":\n        if (Rd) break;\n      case \"keydown\":\n      case \"keyup\":\n        return Xd(c, d);\n    }\n    return null;\n  }\n};\nBa.injectEventPluginOrder(\"ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin\".split(\" \"));\nta = Ka;\nua = Ia;\nva = Ja;\nBa.injectEventPluginsByName({\n  SimpleEventPlugin: xd,\n  EnterLeaveEventPlugin: ad,\n  ChangeEventPlugin: Pc,\n  SelectEventPlugin: Yd,\n  BeforeInputEventPlugin: zb\n});\nfunction Zd(a) {\n  var b = \"\";\n  aa.Children.forEach(a, function (a) {\n    null != a && (b += a);\n  });\n  return b;\n}\nfunction $d(a, b) {\n  a = n({\n    children: void 0\n  }, b);\n  if (b = Zd(b.children)) a.children = b;\n  return a;\n}\nfunction ae(a, b, c, d) {\n  a = a.options;\n  if (b) {\n    b = {};\n    for (var e = 0; e < c.length; e++) b[\"$\" + c[e]] = !0;\n    for (c = 0; c < a.length; c++) e = b.hasOwnProperty(\"$\" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = !0);\n  } else {\n    c = \"\" + uc(c);\n    b = null;\n    for (e = 0; e < a.length; e++) {\n      if (a[e].value === c) {\n        a[e].selected = !0;\n        d && (a[e].defaultSelected = !0);\n        return;\n      }\n      null !== b || a[e].disabled || (b = a[e]);\n    }\n    null !== b && (b.selected = !0);\n  }\n}\nfunction be(a, b) {\n  null != b.dangerouslySetInnerHTML ? x(\"91\") : void 0;\n  return n({}, b, {\n    value: void 0,\n    defaultValue: void 0,\n    children: \"\" + a._wrapperState.initialValue\n  });\n}\nfunction ce(a, b) {\n  var c = b.value;\n  null == c && (c = b.defaultValue, b = b.children, null != b && (null != c ? x(\"92\") : void 0, Array.isArray(b) && (1 >= b.length ? void 0 : x(\"93\"), b = b[0]), c = b), null == c && (c = \"\"));\n  a._wrapperState = {\n    initialValue: uc(c)\n  };\n}\nfunction de(a, b) {\n  var c = uc(b.value),\n    d = uc(b.defaultValue);\n  null != c && (c = \"\" + c, c !== a.value && (a.value = c), null == b.defaultValue && a.defaultValue !== c && (a.defaultValue = c));\n  null != d && (a.defaultValue = \"\" + d);\n}\nfunction ee(a) {\n  var b = a.textContent;\n  b === a._wrapperState.initialValue && (a.value = b);\n}\nvar fe = {\n  html: \"http://www.w3.org/1999/xhtml\",\n  mathml: \"http://www.w3.org/1998/Math/MathML\",\n  svg: \"http://www.w3.org/2000/svg\"\n};\nfunction ge(a) {\n  switch (a) {\n    case \"svg\":\n      return \"http://www.w3.org/2000/svg\";\n    case \"math\":\n      return \"http://www.w3.org/1998/Math/MathML\";\n    default:\n      return \"http://www.w3.org/1999/xhtml\";\n  }\n}\nfunction he(a, b) {\n  return null == a || \"http://www.w3.org/1999/xhtml\" === a ? ge(b) : \"http://www.w3.org/2000/svg\" === a && \"foreignObject\" === b ? \"http://www.w3.org/1999/xhtml\" : a;\n}\nvar ie = void 0,\n  je = function (a) {\n    return \"undefined\" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function (b, c, d, e) {\n      MSApp.execUnsafeLocalFunction(function () {\n        return a(b, c, d, e);\n      });\n    } : a;\n  }(function (a, b) {\n    if (a.namespaceURI !== fe.svg || \"innerHTML\" in a) a.innerHTML = b;else {\n      ie = ie || document.createElement(\"div\");\n      ie.innerHTML = \"<svg>\" + b + \"</svg>\";\n      for (b = ie.firstChild; a.firstChild;) a.removeChild(a.firstChild);\n      for (; b.firstChild;) a.appendChild(b.firstChild);\n    }\n  });\nfunction ke(a, b) {\n  if (b) {\n    var c = a.firstChild;\n    if (c && c === a.lastChild && 3 === c.nodeType) {\n      c.nodeValue = b;\n      return;\n    }\n  }\n  a.textContent = b;\n}\nvar le = {\n    animationIterationCount: !0,\n    borderImageOutset: !0,\n    borderImageSlice: !0,\n    borderImageWidth: !0,\n    boxFlex: !0,\n    boxFlexGroup: !0,\n    boxOrdinalGroup: !0,\n    columnCount: !0,\n    columns: !0,\n    flex: !0,\n    flexGrow: !0,\n    flexPositive: !0,\n    flexShrink: !0,\n    flexNegative: !0,\n    flexOrder: !0,\n    gridArea: !0,\n    gridRow: !0,\n    gridRowEnd: !0,\n    gridRowSpan: !0,\n    gridRowStart: !0,\n    gridColumn: !0,\n    gridColumnEnd: !0,\n    gridColumnSpan: !0,\n    gridColumnStart: !0,\n    fontWeight: !0,\n    lineClamp: !0,\n    lineHeight: !0,\n    opacity: !0,\n    order: !0,\n    orphans: !0,\n    tabSize: !0,\n    widows: !0,\n    zIndex: !0,\n    zoom: !0,\n    fillOpacity: !0,\n    floodOpacity: !0,\n    stopOpacity: !0,\n    strokeDasharray: !0,\n    strokeDashoffset: !0,\n    strokeMiterlimit: !0,\n    strokeOpacity: !0,\n    strokeWidth: !0\n  },\n  me = [\"Webkit\", \"ms\", \"Moz\", \"O\"];\nObject.keys(le).forEach(function (a) {\n  me.forEach(function (b) {\n    b = b + a.charAt(0).toUpperCase() + a.substring(1);\n    le[b] = le[a];\n  });\n});\nfunction ne(a, b, c) {\n  return null == b || \"boolean\" === typeof b || \"\" === b ? \"\" : c || \"number\" !== typeof b || 0 === b || le.hasOwnProperty(a) && le[a] ? (\"\" + b).trim() : b + \"px\";\n}\nfunction oe(a, b) {\n  a = a.style;\n  for (var c in b) if (b.hasOwnProperty(c)) {\n    var d = 0 === c.indexOf(\"--\"),\n      e = ne(c, b[c], d);\n    \"float\" === c && (c = \"cssFloat\");\n    d ? a.setProperty(c, e) : a[c] = e;\n  }\n}\nvar pe = n({\n  menuitem: !0\n}, {\n  area: !0,\n  base: !0,\n  br: !0,\n  col: !0,\n  embed: !0,\n  hr: !0,\n  img: !0,\n  input: !0,\n  keygen: !0,\n  link: !0,\n  meta: !0,\n  param: !0,\n  source: !0,\n  track: !0,\n  wbr: !0\n});\nfunction qe(a, b) {\n  b && (pe[a] && (null != b.children || null != b.dangerouslySetInnerHTML ? x(\"137\", a, \"\") : void 0), null != b.dangerouslySetInnerHTML && (null != b.children ? x(\"60\") : void 0, \"object\" === typeof b.dangerouslySetInnerHTML && \"__html\" in b.dangerouslySetInnerHTML ? void 0 : x(\"61\")), null != b.style && \"object\" !== typeof b.style ? x(\"62\", \"\") : void 0);\n}\nfunction re(a, b) {\n  if (-1 === a.indexOf(\"-\")) return \"string\" === typeof b.is;\n  switch (a) {\n    case \"annotation-xml\":\n    case \"color-profile\":\n    case \"font-face\":\n    case \"font-face-src\":\n    case \"font-face-uri\":\n    case \"font-face-format\":\n    case \"font-face-name\":\n    case \"missing-glyph\":\n      return !1;\n    default:\n      return !0;\n  }\n}\nfunction se(a, b) {\n  a = 9 === a.nodeType || 11 === a.nodeType ? a : a.ownerDocument;\n  var c = Id(a);\n  b = sa[b];\n  for (var d = 0; d < b.length; d++) {\n    var e = b[d];\n    if (!c.hasOwnProperty(e) || !c[e]) {\n      switch (e) {\n        case \"scroll\":\n          Ed(\"scroll\", a);\n          break;\n        case \"focus\":\n        case \"blur\":\n          Ed(\"focus\", a);\n          Ed(\"blur\", a);\n          c.blur = !0;\n          c.focus = !0;\n          break;\n        case \"cancel\":\n        case \"close\":\n          Ob(e) && Ed(e, a);\n          break;\n        case \"invalid\":\n        case \"submit\":\n        case \"reset\":\n          break;\n        default:\n          -1 === ab.indexOf(e) && E(e, a);\n      }\n      c[e] = !0;\n    }\n  }\n}\nfunction te() {}\nvar ue = null,\n  ve = null;\nfunction we(a, b) {\n  switch (a) {\n    case \"button\":\n    case \"input\":\n    case \"select\":\n    case \"textarea\":\n      return !!b.autoFocus;\n  }\n  return !1;\n}\nfunction xe(a, b) {\n  return \"textarea\" === a || \"option\" === a || \"noscript\" === a || \"string\" === typeof b.children || \"number\" === typeof b.children || \"object\" === typeof b.dangerouslySetInnerHTML && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html;\n}\nvar ye = \"function\" === typeof setTimeout ? setTimeout : void 0,\n  ze = \"function\" === typeof clearTimeout ? clearTimeout : void 0,\n  Ae = r.unstable_scheduleCallback,\n  Be = r.unstable_cancelCallback;\nfunction Ce(a, b, c, d, e) {\n  a[Ga] = e;\n  \"input\" === c && \"radio\" === e.type && null != e.name && xc(a, e);\n  re(c, d);\n  d = re(c, e);\n  for (var f = 0; f < b.length; f += 2) {\n    var g = b[f],\n      h = b[f + 1];\n    \"style\" === g ? oe(a, h) : \"dangerouslySetInnerHTML\" === g ? je(a, h) : \"children\" === g ? ke(a, h) : tc(a, g, h, d);\n  }\n  switch (c) {\n    case \"input\":\n      yc(a, e);\n      break;\n    case \"textarea\":\n      de(a, e);\n      break;\n    case \"select\":\n      b = a._wrapperState.wasMultiple, a._wrapperState.wasMultiple = !!e.multiple, c = e.value, null != c ? ae(a, !!e.multiple, c, !1) : b !== !!e.multiple && (null != e.defaultValue ? ae(a, !!e.multiple, e.defaultValue, !0) : ae(a, !!e.multiple, e.multiple ? [] : \"\", !1));\n  }\n}\nfunction De(a) {\n  for (a = a.nextSibling; a && 1 !== a.nodeType && 3 !== a.nodeType;) a = a.nextSibling;\n  return a;\n}\nfunction Ee(a) {\n  for (a = a.firstChild; a && 1 !== a.nodeType && 3 !== a.nodeType;) a = a.nextSibling;\n  return a;\n}\nnew Set();\nvar Fe = [],\n  Ge = -1;\nfunction F(a) {\n  0 > Ge || (a.current = Fe[Ge], Fe[Ge] = null, Ge--);\n}\nfunction G(a, b) {\n  Ge++;\n  Fe[Ge] = a.current;\n  a.current = b;\n}\nvar He = {},\n  H = {\n    current: He\n  },\n  I = {\n    current: !1\n  },\n  Ie = He;\nfunction Je(a, b) {\n  var c = a.type.contextTypes;\n  if (!c) return He;\n  var d = a.stateNode;\n  if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;\n  var e = {},\n    f;\n  for (f in c) e[f] = b[f];\n  d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);\n  return e;\n}\nfunction J(a) {\n  a = a.childContextTypes;\n  return null !== a && void 0 !== a;\n}\nfunction Ke(a) {\n  F(I, a);\n  F(H, a);\n}\nfunction Le(a) {\n  F(I, a);\n  F(H, a);\n}\nfunction Me(a, b, c) {\n  H.current !== He ? x(\"168\") : void 0;\n  G(H, b, a);\n  G(I, c, a);\n}\nfunction Ne(a, b, c) {\n  var d = a.stateNode;\n  a = b.childContextTypes;\n  if (\"function\" !== typeof d.getChildContext) return c;\n  d = d.getChildContext();\n  for (var e in d) e in a ? void 0 : x(\"108\", ic(b) || \"Unknown\", e);\n  return n({}, c, d);\n}\nfunction Oe(a) {\n  var b = a.stateNode;\n  b = b && b.__reactInternalMemoizedMergedChildContext || He;\n  Ie = H.current;\n  G(H, b, a);\n  G(I, I.current, a);\n  return !0;\n}\nfunction Pe(a, b, c) {\n  var d = a.stateNode;\n  d ? void 0 : x(\"169\");\n  c ? (b = Ne(a, b, Ie), d.__reactInternalMemoizedMergedChildContext = b, F(I, a), F(H, a), G(H, b, a)) : F(I, a);\n  G(I, c, a);\n}\nvar Qe = null,\n  Re = null;\nfunction Se(a) {\n  return function (b) {\n    try {\n      return a(b);\n    } catch (c) {}\n  };\n}\nfunction Te(a) {\n  if (\"undefined\" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return !1;\n  var b = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n  if (b.isDisabled || !b.supportsFiber) return !0;\n  try {\n    var c = b.inject(a);\n    Qe = Se(function (a) {\n      return b.onCommitFiberRoot(c, a);\n    });\n    Re = Se(function (a) {\n      return b.onCommitFiberUnmount(c, a);\n    });\n  } catch (d) {}\n  return !0;\n}\nfunction Ue(a, b, c, d) {\n  this.tag = a;\n  this.key = c;\n  this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;\n  this.index = 0;\n  this.ref = null;\n  this.pendingProps = b;\n  this.contextDependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;\n  this.mode = d;\n  this.effectTag = 0;\n  this.lastEffect = this.firstEffect = this.nextEffect = null;\n  this.childExpirationTime = this.expirationTime = 0;\n  this.alternate = null;\n}\nfunction K(a, b, c, d) {\n  return new Ue(a, b, c, d);\n}\nfunction Ve(a) {\n  a = a.prototype;\n  return !(!a || !a.isReactComponent);\n}\nfunction We(a) {\n  if (\"function\" === typeof a) return Ve(a) ? 1 : 0;\n  if (void 0 !== a && null !== a) {\n    a = a.$$typeof;\n    if (a === cc) return 11;\n    if (a === ec) return 14;\n  }\n  return 2;\n}\nfunction Xe(a, b) {\n  var c = a.alternate;\n  null === c ? (c = K(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.effectTag = 0, c.nextEffect = null, c.firstEffect = null, c.lastEffect = null);\n  c.childExpirationTime = a.childExpirationTime;\n  c.expirationTime = a.expirationTime;\n  c.child = a.child;\n  c.memoizedProps = a.memoizedProps;\n  c.memoizedState = a.memoizedState;\n  c.updateQueue = a.updateQueue;\n  c.contextDependencies = a.contextDependencies;\n  c.sibling = a.sibling;\n  c.index = a.index;\n  c.ref = a.ref;\n  return c;\n}\nfunction Ye(a, b, c, d, e, f) {\n  var g = 2;\n  d = a;\n  if (\"function\" === typeof a) Ve(a) && (g = 1);else if (\"string\" === typeof a) g = 5;else a: switch (a) {\n    case Xb:\n      return Ze(c.children, e, f, b);\n    case bc:\n      return $e(c, e | 3, f, b);\n    case Yb:\n      return $e(c, e | 2, f, b);\n    case Zb:\n      return a = K(12, c, b, e | 4), a.elementType = Zb, a.type = Zb, a.expirationTime = f, a;\n    case dc:\n      return a = K(13, c, b, e), a.elementType = dc, a.type = dc, a.expirationTime = f, a;\n    default:\n      if (\"object\" === typeof a && null !== a) switch (a.$$typeof) {\n        case $b:\n          g = 10;\n          break a;\n        case ac:\n          g = 9;\n          break a;\n        case cc:\n          g = 11;\n          break a;\n        case ec:\n          g = 14;\n          break a;\n        case fc:\n          g = 16;\n          d = null;\n          break a;\n      }\n      x(\"130\", null == a ? a : typeof a, \"\");\n  }\n  b = K(g, c, b, e);\n  b.elementType = a;\n  b.type = d;\n  b.expirationTime = f;\n  return b;\n}\nfunction Ze(a, b, c, d) {\n  a = K(7, a, d, b);\n  a.expirationTime = c;\n  return a;\n}\nfunction $e(a, b, c, d) {\n  a = K(8, a, d, b);\n  b = 0 === (b & 1) ? Yb : bc;\n  a.elementType = b;\n  a.type = b;\n  a.expirationTime = c;\n  return a;\n}\nfunction af(a, b, c) {\n  a = K(6, a, null, b);\n  a.expirationTime = c;\n  return a;\n}\nfunction bf(a, b, c) {\n  b = K(4, null !== a.children ? a.children : [], a.key, b);\n  b.expirationTime = c;\n  b.stateNode = {\n    containerInfo: a.containerInfo,\n    pendingChildren: null,\n    implementation: a.implementation\n  };\n  return b;\n}\nfunction cf(a, b) {\n  a.didError = !1;\n  var c = a.earliestPendingTime;\n  0 === c ? a.earliestPendingTime = a.latestPendingTime = b : c < b ? a.earliestPendingTime = b : a.latestPendingTime > b && (a.latestPendingTime = b);\n  df(b, a);\n}\nfunction ef(a, b) {\n  a.didError = !1;\n  if (0 === b) a.earliestPendingTime = 0, a.latestPendingTime = 0, a.earliestSuspendedTime = 0, a.latestSuspendedTime = 0, a.latestPingedTime = 0;else {\n    b < a.latestPingedTime && (a.latestPingedTime = 0);\n    var c = a.latestPendingTime;\n    0 !== c && (c > b ? a.earliestPendingTime = a.latestPendingTime = 0 : a.earliestPendingTime > b && (a.earliestPendingTime = a.latestPendingTime));\n    c = a.earliestSuspendedTime;\n    0 === c ? cf(a, b) : b < a.latestSuspendedTime ? (a.earliestSuspendedTime = 0, a.latestSuspendedTime = 0, a.latestPingedTime = 0, cf(a, b)) : b > c && cf(a, b);\n  }\n  df(0, a);\n}\nfunction ff(a, b) {\n  a.didError = !1;\n  a.latestPingedTime >= b && (a.latestPingedTime = 0);\n  var c = a.earliestPendingTime,\n    d = a.latestPendingTime;\n  c === b ? a.earliestPendingTime = d === b ? a.latestPendingTime = 0 : d : d === b && (a.latestPendingTime = c);\n  c = a.earliestSuspendedTime;\n  d = a.latestSuspendedTime;\n  0 === c ? a.earliestSuspendedTime = a.latestSuspendedTime = b : c < b ? a.earliestSuspendedTime = b : d > b && (a.latestSuspendedTime = b);\n  df(b, a);\n}\nfunction gf(a, b) {\n  var c = a.earliestPendingTime;\n  a = a.earliestSuspendedTime;\n  c > b && (b = c);\n  a > b && (b = a);\n  return b;\n}\nfunction df(a, b) {\n  var c = b.earliestSuspendedTime,\n    d = b.latestSuspendedTime,\n    e = b.earliestPendingTime,\n    f = b.latestPingedTime;\n  e = 0 !== e ? e : f;\n  0 === e && (0 === a || d < a) && (e = d);\n  a = e;\n  0 !== a && c > a && (a = c);\n  b.nextExpirationTimeToWorkOn = e;\n  b.expirationTime = a;\n}\nfunction L(a, b) {\n  if (a && a.defaultProps) {\n    b = n({}, b);\n    a = a.defaultProps;\n    for (var c in a) void 0 === b[c] && (b[c] = a[c]);\n  }\n  return b;\n}\nfunction hf(a) {\n  var b = a._result;\n  switch (a._status) {\n    case 1:\n      return b;\n    case 2:\n      throw b;\n    case 0:\n      throw b;\n    default:\n      a._status = 0;\n      b = a._ctor;\n      b = b();\n      b.then(function (b) {\n        0 === a._status && (b = b.default, a._status = 1, a._result = b);\n      }, function (b) {\n        0 === a._status && (a._status = 2, a._result = b);\n      });\n      switch (a._status) {\n        case 1:\n          return a._result;\n        case 2:\n          throw a._result;\n      }\n      a._result = b;\n      throw b;\n  }\n}\nvar jf = new aa.Component().refs;\nfunction kf(a, b, c, d) {\n  b = a.memoizedState;\n  c = c(d, b);\n  c = null === c || void 0 === c ? b : n({}, b, c);\n  a.memoizedState = c;\n  d = a.updateQueue;\n  null !== d && 0 === a.expirationTime && (d.baseState = c);\n}\nvar tf = {\n  isMounted: function isMounted(a) {\n    return (a = a._reactInternalFiber) ? 2 === ed(a) : !1;\n  },\n  enqueueSetState: function enqueueSetState(a, b, c) {\n    a = a._reactInternalFiber;\n    var d = lf();\n    d = mf(d, a);\n    var e = nf(d);\n    e.payload = b;\n    void 0 !== c && null !== c && (e.callback = c);\n    of();\n    pf(a, e);\n    qf(a, d);\n  },\n  enqueueReplaceState: function enqueueReplaceState(a, b, c) {\n    a = a._reactInternalFiber;\n    var d = lf();\n    d = mf(d, a);\n    var e = nf(d);\n    e.tag = rf;\n    e.payload = b;\n    void 0 !== c && null !== c && (e.callback = c);\n    of();\n    pf(a, e);\n    qf(a, d);\n  },\n  enqueueForceUpdate: function enqueueForceUpdate(a, b) {\n    a = a._reactInternalFiber;\n    var c = lf();\n    c = mf(c, a);\n    var d = nf(c);\n    d.tag = sf;\n    void 0 !== b && null !== b && (d.callback = b);\n    of();\n    pf(a, d);\n    qf(a, c);\n  }\n};\nfunction uf(a, b, c, d, e, f, g) {\n  a = a.stateNode;\n  return \"function\" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !dd(c, d) || !dd(e, f) : !0;\n}\nfunction vf(a, b, c) {\n  var d = !1,\n    e = He;\n  var f = b.contextType;\n  \"object\" === typeof f && null !== f ? f = M(f) : (e = J(b) ? Ie : H.current, d = b.contextTypes, f = (d = null !== d && void 0 !== d) ? Je(a, e) : He);\n  b = new b(c, f);\n  a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;\n  b.updater = tf;\n  a.stateNode = b;\n  b._reactInternalFiber = a;\n  d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);\n  return b;\n}\nfunction wf(a, b, c, d) {\n  a = b.state;\n  \"function\" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);\n  \"function\" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);\n  b.state !== a && tf.enqueueReplaceState(b, b.state, null);\n}\nfunction xf(a, b, c, d) {\n  var e = a.stateNode;\n  e.props = c;\n  e.state = a.memoizedState;\n  e.refs = jf;\n  var f = b.contextType;\n  \"object\" === typeof f && null !== f ? e.context = M(f) : (f = J(b) ? Ie : H.current, e.context = Je(a, f));\n  f = a.updateQueue;\n  null !== f && (yf(a, f, c, e, d), e.state = a.memoizedState);\n  f = b.getDerivedStateFromProps;\n  \"function\" === typeof f && (kf(a, b, f, c), e.state = a.memoizedState);\n  \"function\" === typeof b.getDerivedStateFromProps || \"function\" === typeof e.getSnapshotBeforeUpdate || \"function\" !== typeof e.UNSAFE_componentWillMount && \"function\" !== typeof e.componentWillMount || (b = e.state, \"function\" === typeof e.componentWillMount && e.componentWillMount(), \"function\" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && tf.enqueueReplaceState(e, e.state, null), f = a.updateQueue, null !== f && (yf(a, f, c, e, d), e.state = a.memoizedState));\n  \"function\" === typeof e.componentDidMount && (a.effectTag |= 4);\n}\nvar zf = Array.isArray;\nfunction Af(a, b, c) {\n  a = c.ref;\n  if (null !== a && \"function\" !== typeof a && \"object\" !== typeof a) {\n    if (c._owner) {\n      c = c._owner;\n      var d = void 0;\n      c && (1 !== c.tag ? x(\"309\") : void 0, d = c.stateNode);\n      d ? void 0 : x(\"147\", a);\n      var e = \"\" + a;\n      if (null !== b && null !== b.ref && \"function\" === typeof b.ref && b.ref._stringRef === e) return b.ref;\n      b = function b(a) {\n        var b = d.refs;\n        b === jf && (b = d.refs = {});\n        null === a ? delete b[e] : b[e] = a;\n      };\n      b._stringRef = e;\n      return b;\n    }\n    \"string\" !== typeof a ? x(\"284\") : void 0;\n    c._owner ? void 0 : x(\"290\", a);\n  }\n  return a;\n}\nfunction Bf(a, b) {\n  \"textarea\" !== a.type && x(\"31\", \"[object Object]\" === Object.prototype.toString.call(b) ? \"object with keys {\" + Object.keys(b).join(\", \") + \"}\" : b, \"\");\n}\nfunction Cf(a) {\n  function b(b, c) {\n    if (a) {\n      var d = b.lastEffect;\n      null !== d ? (d.nextEffect = c, b.lastEffect = c) : b.firstEffect = b.lastEffect = c;\n      c.nextEffect = null;\n      c.effectTag = 8;\n    }\n  }\n  function c(c, d) {\n    if (!a) return null;\n    for (; null !== d;) b(c, d), d = d.sibling;\n    return null;\n  }\n  function d(a, b) {\n    for (a = new Map(); null !== b;) null !== b.key ? a.set(b.key, b) : a.set(b.index, b), b = b.sibling;\n    return a;\n  }\n  function e(a, b, c) {\n    a = Xe(a, b, c);\n    a.index = 0;\n    a.sibling = null;\n    return a;\n  }\n  function f(b, c, d) {\n    b.index = d;\n    if (!a) return c;\n    d = b.alternate;\n    if (null !== d) return d = d.index, d < c ? (b.effectTag = 2, c) : d;\n    b.effectTag = 2;\n    return c;\n  }\n  function g(b) {\n    a && null === b.alternate && (b.effectTag = 2);\n    return b;\n  }\n  function h(a, b, c, d) {\n    if (null === b || 6 !== b.tag) return b = af(c, a.mode, d), b.return = a, b;\n    b = e(b, c, d);\n    b.return = a;\n    return b;\n  }\n  function l(a, b, c, d) {\n    if (null !== b && b.elementType === c.type) return d = e(b, c.props, d), d.ref = Af(a, b, c), d.return = a, d;\n    d = Ye(c.type, c.key, c.props, null, a.mode, d);\n    d.ref = Af(a, b, c);\n    d.return = a;\n    return d;\n  }\n  function k(a, b, c, d) {\n    if (null === b || 4 !== b.tag || b.stateNode.containerInfo !== c.containerInfo || b.stateNode.implementation !== c.implementation) return b = bf(c, a.mode, d), b.return = a, b;\n    b = e(b, c.children || [], d);\n    b.return = a;\n    return b;\n  }\n  function m(a, b, c, d, f) {\n    if (null === b || 7 !== b.tag) return b = Ze(c, a.mode, d, f), b.return = a, b;\n    b = e(b, c, d);\n    b.return = a;\n    return b;\n  }\n  function p(a, b, c) {\n    if (\"string\" === typeof b || \"number\" === typeof b) return b = af(\"\" + b, a.mode, c), b.return = a, b;\n    if (\"object\" === typeof b && null !== b) {\n      switch (b.$$typeof) {\n        case Vb:\n          return c = Ye(b.type, b.key, b.props, null, a.mode, c), c.ref = Af(a, null, b), c.return = a, c;\n        case Wb:\n          return b = bf(b, a.mode, c), b.return = a, b;\n      }\n      if (zf(b) || hc(b)) return b = Ze(b, a.mode, c, null), b.return = a, b;\n      Bf(a, b);\n    }\n    return null;\n  }\n  function t(a, b, c, d) {\n    var e = null !== b ? b.key : null;\n    if (\"string\" === typeof c || \"number\" === typeof c) return null !== e ? null : h(a, b, \"\" + c, d);\n    if (\"object\" === typeof c && null !== c) {\n      switch (c.$$typeof) {\n        case Vb:\n          return c.key === e ? c.type === Xb ? m(a, b, c.props.children, d, e) : l(a, b, c, d) : null;\n        case Wb:\n          return c.key === e ? k(a, b, c, d) : null;\n      }\n      if (zf(c) || hc(c)) return null !== e ? null : m(a, b, c, d, null);\n      Bf(a, c);\n    }\n    return null;\n  }\n  function A(a, b, c, d, e) {\n    if (\"string\" === typeof d || \"number\" === typeof d) return a = a.get(c) || null, h(b, a, \"\" + d, e);\n    if (\"object\" === typeof d && null !== d) {\n      switch (d.$$typeof) {\n        case Vb:\n          return a = a.get(null === d.key ? c : d.key) || null, d.type === Xb ? m(b, a, d.props.children, e, d.key) : l(b, a, d, e);\n        case Wb:\n          return a = a.get(null === d.key ? c : d.key) || null, k(b, a, d, e);\n      }\n      if (zf(d) || hc(d)) return a = a.get(c) || null, m(b, a, d, e, null);\n      Bf(b, d);\n    }\n    return null;\n  }\n  function v(e, g, h, k) {\n    for (var l = null, m = null, q = g, u = g = 0, B = null; null !== q && u < h.length; u++) {\n      q.index > u ? (B = q, q = null) : B = q.sibling;\n      var w = t(e, q, h[u], k);\n      if (null === w) {\n        null === q && (q = B);\n        break;\n      }\n      a && q && null === w.alternate && b(e, q);\n      g = f(w, g, u);\n      null === m ? l = w : m.sibling = w;\n      m = w;\n      q = B;\n    }\n    if (u === h.length) return c(e, q), l;\n    if (null === q) {\n      for (; u < h.length; u++) if (q = p(e, h[u], k)) g = f(q, g, u), null === m ? l = q : m.sibling = q, m = q;\n      return l;\n    }\n    for (q = d(e, q); u < h.length; u++) if (B = A(q, e, u, h[u], k)) a && null !== B.alternate && q.delete(null === B.key ? u : B.key), g = f(B, g, u), null === m ? l = B : m.sibling = B, m = B;\n    a && q.forEach(function (a) {\n      return b(e, a);\n    });\n    return l;\n  }\n  function R(e, g, h, k) {\n    var l = hc(h);\n    \"function\" !== typeof l ? x(\"150\") : void 0;\n    h = l.call(h);\n    null == h ? x(\"151\") : void 0;\n    for (var m = l = null, q = g, u = g = 0, B = null, w = h.next(); null !== q && !w.done; u++, w = h.next()) {\n      q.index > u ? (B = q, q = null) : B = q.sibling;\n      var v = t(e, q, w.value, k);\n      if (null === v) {\n        q || (q = B);\n        break;\n      }\n      a && q && null === v.alternate && b(e, q);\n      g = f(v, g, u);\n      null === m ? l = v : m.sibling = v;\n      m = v;\n      q = B;\n    }\n    if (w.done) return c(e, q), l;\n    if (null === q) {\n      for (; !w.done; u++, w = h.next()) w = p(e, w.value, k), null !== w && (g = f(w, g, u), null === m ? l = w : m.sibling = w, m = w);\n      return l;\n    }\n    for (q = d(e, q); !w.done; u++, w = h.next()) w = A(q, e, u, w.value, k), null !== w && (a && null !== w.alternate && q.delete(null === w.key ? u : w.key), g = f(w, g, u), null === m ? l = w : m.sibling = w, m = w);\n    a && q.forEach(function (a) {\n      return b(e, a);\n    });\n    return l;\n  }\n  return function (a, d, f, h) {\n    var k = \"object\" === typeof f && null !== f && f.type === Xb && null === f.key;\n    k && (f = f.props.children);\n    var l = \"object\" === typeof f && null !== f;\n    if (l) switch (f.$$typeof) {\n      case Vb:\n        a: {\n          l = f.key;\n          for (k = d; null !== k;) {\n            if (k.key === l) {\n              if (7 === k.tag ? f.type === Xb : k.elementType === f.type) {\n                c(a, k.sibling);\n                d = e(k, f.type === Xb ? f.props.children : f.props, h);\n                d.ref = Af(a, k, f);\n                d.return = a;\n                a = d;\n                break a;\n              } else {\n                c(a, k);\n                break;\n              }\n            } else b(a, k);\n            k = k.sibling;\n          }\n          f.type === Xb ? (d = Ze(f.props.children, a.mode, h, f.key), d.return = a, a = d) : (h = Ye(f.type, f.key, f.props, null, a.mode, h), h.ref = Af(a, d, f), h.return = a, a = h);\n        }\n        return g(a);\n      case Wb:\n        a: {\n          for (k = f.key; null !== d;) {\n            if (d.key === k) {\n              if (4 === d.tag && d.stateNode.containerInfo === f.containerInfo && d.stateNode.implementation === f.implementation) {\n                c(a, d.sibling);\n                d = e(d, f.children || [], h);\n                d.return = a;\n                a = d;\n                break a;\n              } else {\n                c(a, d);\n                break;\n              }\n            } else b(a, d);\n            d = d.sibling;\n          }\n          d = bf(f, a.mode, h);\n          d.return = a;\n          a = d;\n        }\n        return g(a);\n    }\n    if (\"string\" === typeof f || \"number\" === typeof f) return f = \"\" + f, null !== d && 6 === d.tag ? (c(a, d.sibling), d = e(d, f, h), d.return = a, a = d) : (c(a, d), d = af(f, a.mode, h), d.return = a, a = d), g(a);\n    if (zf(f)) return v(a, d, f, h);\n    if (hc(f)) return R(a, d, f, h);\n    l && Bf(a, f);\n    if (\"undefined\" === typeof f && !k) switch (a.tag) {\n      case 1:\n      case 0:\n        h = a.type, x(\"152\", h.displayName || h.name || \"Component\");\n    }\n    return c(a, d);\n  };\n}\nvar Df = Cf(!0),\n  Ef = Cf(!1),\n  Ff = {},\n  N = {\n    current: Ff\n  },\n  Gf = {\n    current: Ff\n  },\n  Hf = {\n    current: Ff\n  };\nfunction If(a) {\n  a === Ff ? x(\"174\") : void 0;\n  return a;\n}\nfunction Jf(a, b) {\n  G(Hf, b, a);\n  G(Gf, a, a);\n  G(N, Ff, a);\n  var c = b.nodeType;\n  switch (c) {\n    case 9:\n    case 11:\n      b = (b = b.documentElement) ? b.namespaceURI : he(null, \"\");\n      break;\n    default:\n      c = 8 === c ? b.parentNode : b, b = c.namespaceURI || null, c = c.tagName, b = he(b, c);\n  }\n  F(N, a);\n  G(N, b, a);\n}\nfunction Kf(a) {\n  F(N, a);\n  F(Gf, a);\n  F(Hf, a);\n}\nfunction Lf(a) {\n  If(Hf.current);\n  var b = If(N.current);\n  var c = he(b, a.type);\n  b !== c && (G(Gf, a, a), G(N, c, a));\n}\nfunction Mf(a) {\n  Gf.current === a && (F(N, a), F(Gf, a));\n}\nvar Nf = 0,\n  Of = 2,\n  Pf = 4,\n  Qf = 8,\n  Rf = 16,\n  Sf = 32,\n  Tf = 64,\n  Uf = 128,\n  Vf = Tb.ReactCurrentDispatcher,\n  Wf = 0,\n  Xf = null,\n  O = null,\n  P = null,\n  Yf = null,\n  Q = null,\n  Zf = null,\n  $f = 0,\n  ag = null,\n  bg = 0,\n  cg = !1,\n  dg = null,\n  eg = 0;\nfunction fg() {\n  x(\"321\");\n}\nfunction gg(a, b) {\n  if (null === b) return !1;\n  for (var c = 0; c < b.length && c < a.length; c++) if (!bd(a[c], b[c])) return !1;\n  return !0;\n}\nfunction hg(a, b, c, d, e, f) {\n  Wf = f;\n  Xf = b;\n  P = null !== a ? a.memoizedState : null;\n  Vf.current = null === P ? ig : jg;\n  b = c(d, e);\n  if (cg) {\n    do cg = !1, eg += 1, P = null !== a ? a.memoizedState : null, Zf = Yf, ag = Q = O = null, Vf.current = jg, b = c(d, e); while (cg);\n    dg = null;\n    eg = 0;\n  }\n  Vf.current = kg;\n  a = Xf;\n  a.memoizedState = Yf;\n  a.expirationTime = $f;\n  a.updateQueue = ag;\n  a.effectTag |= bg;\n  a = null !== O && null !== O.next;\n  Wf = 0;\n  Zf = Q = Yf = P = O = Xf = null;\n  $f = 0;\n  ag = null;\n  bg = 0;\n  a ? x(\"300\") : void 0;\n  return b;\n}\nfunction lg() {\n  Vf.current = kg;\n  Wf = 0;\n  Zf = Q = Yf = P = O = Xf = null;\n  $f = 0;\n  ag = null;\n  bg = 0;\n  cg = !1;\n  dg = null;\n  eg = 0;\n}\nfunction mg() {\n  var a = {\n    memoizedState: null,\n    baseState: null,\n    queue: null,\n    baseUpdate: null,\n    next: null\n  };\n  null === Q ? Yf = Q = a : Q = Q.next = a;\n  return Q;\n}\nfunction ng() {\n  if (null !== Zf) Q = Zf, Zf = Q.next, O = P, P = null !== O ? O.next : null;else {\n    null === P ? x(\"310\") : void 0;\n    O = P;\n    var a = {\n      memoizedState: O.memoizedState,\n      baseState: O.baseState,\n      queue: O.queue,\n      baseUpdate: O.baseUpdate,\n      next: null\n    };\n    Q = null === Q ? Yf = a : Q.next = a;\n    P = O.next;\n  }\n  return Q;\n}\nfunction og(a, b) {\n  return \"function\" === typeof b ? b(a) : b;\n}\nfunction pg(a) {\n  var b = ng(),\n    c = b.queue;\n  null === c ? x(\"311\") : void 0;\n  c.lastRenderedReducer = a;\n  if (0 < eg) {\n    var d = c.dispatch;\n    if (null !== dg) {\n      var e = dg.get(c);\n      if (void 0 !== e) {\n        dg.delete(c);\n        var f = b.memoizedState;\n        do f = a(f, e.action), e = e.next; while (null !== e);\n        bd(f, b.memoizedState) || (qg = !0);\n        b.memoizedState = f;\n        b.baseUpdate === c.last && (b.baseState = f);\n        c.lastRenderedState = f;\n        return [f, d];\n      }\n    }\n    return [b.memoizedState, d];\n  }\n  d = c.last;\n  var g = b.baseUpdate;\n  f = b.baseState;\n  null !== g ? (null !== d && (d.next = null), d = g.next) : d = null !== d ? d.next : null;\n  if (null !== d) {\n    var h = e = null,\n      l = d,\n      k = !1;\n    do {\n      var m = l.expirationTime;\n      m < Wf ? (k || (k = !0, h = g, e = f), m > $f && ($f = m)) : f = l.eagerReducer === a ? l.eagerState : a(f, l.action);\n      g = l;\n      l = l.next;\n    } while (null !== l && l !== d);\n    k || (h = g, e = f);\n    bd(f, b.memoizedState) || (qg = !0);\n    b.memoizedState = f;\n    b.baseUpdate = h;\n    b.baseState = e;\n    c.lastRenderedState = f;\n  }\n  return [b.memoizedState, c.dispatch];\n}\nfunction rg(a, b, c, d) {\n  a = {\n    tag: a,\n    create: b,\n    destroy: c,\n    deps: d,\n    next: null\n  };\n  null === ag ? (ag = {\n    lastEffect: null\n  }, ag.lastEffect = a.next = a) : (b = ag.lastEffect, null === b ? ag.lastEffect = a.next = a : (c = b.next, b.next = a, a.next = c, ag.lastEffect = a));\n  return a;\n}\nfunction sg(a, b, c, d) {\n  var e = mg();\n  bg |= a;\n  e.memoizedState = rg(b, c, void 0, void 0 === d ? null : d);\n}\nfunction tg(a, b, c, d) {\n  var e = ng();\n  d = void 0 === d ? null : d;\n  var f = void 0;\n  if (null !== O) {\n    var g = O.memoizedState;\n    f = g.destroy;\n    if (null !== d && gg(d, g.deps)) {\n      rg(Nf, c, f, d);\n      return;\n    }\n  }\n  bg |= a;\n  e.memoizedState = rg(b, c, f, d);\n}\nfunction ug(a, b) {\n  if (\"function\" === typeof b) return a = a(), b(a), function () {\n    b(null);\n  };\n  if (null !== b && void 0 !== b) return a = a(), b.current = a, function () {\n    b.current = null;\n  };\n}\nfunction vg() {}\nfunction wg(a, b, c) {\n  25 > eg ? void 0 : x(\"301\");\n  var d = a.alternate;\n  if (a === Xf || null !== d && d === Xf) {\n    if (cg = !0, a = {\n      expirationTime: Wf,\n      action: c,\n      eagerReducer: null,\n      eagerState: null,\n      next: null\n    }, null === dg && (dg = new Map()), c = dg.get(b), void 0 === c) dg.set(b, a);else {\n      for (b = c; null !== b.next;) b = b.next;\n      b.next = a;\n    }\n  } else {\n    of();\n    var e = lf();\n    e = mf(e, a);\n    var f = {\n        expirationTime: e,\n        action: c,\n        eagerReducer: null,\n        eagerState: null,\n        next: null\n      },\n      g = b.last;\n    if (null === g) f.next = f;else {\n      var h = g.next;\n      null !== h && (f.next = h);\n      g.next = f;\n    }\n    b.last = f;\n    if (0 === a.expirationTime && (null === d || 0 === d.expirationTime) && (d = b.lastRenderedReducer, null !== d)) try {\n      var l = b.lastRenderedState,\n        k = d(l, c);\n      f.eagerReducer = d;\n      f.eagerState = k;\n      if (bd(k, l)) return;\n    } catch (m) {} finally {}\n    qf(a, e);\n  }\n}\nvar kg = {\n    readContext: M,\n    useCallback: fg,\n    useContext: fg,\n    useEffect: fg,\n    useImperativeHandle: fg,\n    useLayoutEffect: fg,\n    useMemo: fg,\n    useReducer: fg,\n    useRef: fg,\n    useState: fg,\n    useDebugValue: fg\n  },\n  ig = {\n    readContext: M,\n    useCallback: function useCallback(a, b) {\n      mg().memoizedState = [a, void 0 === b ? null : b];\n      return a;\n    },\n    useContext: M,\n    useEffect: function useEffect(a, b) {\n      return sg(516, Uf | Tf, a, b);\n    },\n    useImperativeHandle: function useImperativeHandle(a, b, c) {\n      c = null !== c && void 0 !== c ? c.concat([a]) : null;\n      return sg(4, Pf | Sf, ug.bind(null, b, a), c);\n    },\n    useLayoutEffect: function useLayoutEffect(a, b) {\n      return sg(4, Pf | Sf, a, b);\n    },\n    useMemo: function useMemo(a, b) {\n      var c = mg();\n      b = void 0 === b ? null : b;\n      a = a();\n      c.memoizedState = [a, b];\n      return a;\n    },\n    useReducer: function useReducer(a, b, c) {\n      var d = mg();\n      b = void 0 !== c ? c(b) : b;\n      d.memoizedState = d.baseState = b;\n      a = d.queue = {\n        last: null,\n        dispatch: null,\n        lastRenderedReducer: a,\n        lastRenderedState: b\n      };\n      a = a.dispatch = wg.bind(null, Xf, a);\n      return [d.memoizedState, a];\n    },\n    useRef: function useRef(a) {\n      var b = mg();\n      a = {\n        current: a\n      };\n      return b.memoizedState = a;\n    },\n    useState: function useState(a) {\n      var b = mg();\n      \"function\" === typeof a && (a = a());\n      b.memoizedState = b.baseState = a;\n      a = b.queue = {\n        last: null,\n        dispatch: null,\n        lastRenderedReducer: og,\n        lastRenderedState: a\n      };\n      a = a.dispatch = wg.bind(null, Xf, a);\n      return [b.memoizedState, a];\n    },\n    useDebugValue: vg\n  },\n  jg = {\n    readContext: M,\n    useCallback: function useCallback(a, b) {\n      var c = ng();\n      b = void 0 === b ? null : b;\n      var d = c.memoizedState;\n      if (null !== d && null !== b && gg(b, d[1])) return d[0];\n      c.memoizedState = [a, b];\n      return a;\n    },\n    useContext: M,\n    useEffect: function useEffect(a, b) {\n      return tg(516, Uf | Tf, a, b);\n    },\n    useImperativeHandle: function useImperativeHandle(a, b, c) {\n      c = null !== c && void 0 !== c ? c.concat([a]) : null;\n      return tg(4, Pf | Sf, ug.bind(null, b, a), c);\n    },\n    useLayoutEffect: function useLayoutEffect(a, b) {\n      return tg(4, Pf | Sf, a, b);\n    },\n    useMemo: function useMemo(a, b) {\n      var c = ng();\n      b = void 0 === b ? null : b;\n      var d = c.memoizedState;\n      if (null !== d && null !== b && gg(b, d[1])) return d[0];\n      a = a();\n      c.memoizedState = [a, b];\n      return a;\n    },\n    useReducer: pg,\n    useRef: function useRef() {\n      return ng().memoizedState;\n    },\n    useState: function useState(a) {\n      return pg(og, a);\n    },\n    useDebugValue: vg\n  },\n  xg = null,\n  yg = null,\n  zg = !1;\nfunction Ag(a, b) {\n  var c = K(5, null, null, 0);\n  c.elementType = \"DELETED\";\n  c.type = \"DELETED\";\n  c.stateNode = b;\n  c.return = a;\n  c.effectTag = 8;\n  null !== a.lastEffect ? (a.lastEffect.nextEffect = c, a.lastEffect = c) : a.firstEffect = a.lastEffect = c;\n}\nfunction Bg(a, b) {\n  switch (a.tag) {\n    case 5:\n      var c = a.type;\n      b = 1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;\n      return null !== b ? (a.stateNode = b, !0) : !1;\n    case 6:\n      return b = \"\" === a.pendingProps || 3 !== b.nodeType ? null : b, null !== b ? (a.stateNode = b, !0) : !1;\n    case 13:\n      return !1;\n    default:\n      return !1;\n  }\n}\nfunction Cg(a) {\n  if (zg) {\n    var b = yg;\n    if (b) {\n      var c = b;\n      if (!Bg(a, b)) {\n        b = De(c);\n        if (!b || !Bg(a, b)) {\n          a.effectTag |= 2;\n          zg = !1;\n          xg = a;\n          return;\n        }\n        Ag(xg, c);\n      }\n      xg = a;\n      yg = Ee(b);\n    } else a.effectTag |= 2, zg = !1, xg = a;\n  }\n}\nfunction Dg(a) {\n  for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 18 !== a.tag;) a = a.return;\n  xg = a;\n}\nfunction Eg(a) {\n  if (a !== xg) return !1;\n  if (!zg) return Dg(a), zg = !0, !1;\n  var b = a.type;\n  if (5 !== a.tag || \"head\" !== b && \"body\" !== b && !xe(b, a.memoizedProps)) for (b = yg; b;) Ag(a, b), b = De(b);\n  Dg(a);\n  yg = xg ? De(a.stateNode) : null;\n  return !0;\n}\nfunction Fg() {\n  yg = xg = null;\n  zg = !1;\n}\nvar Gg = Tb.ReactCurrentOwner,\n  qg = !1;\nfunction S(a, b, c, d) {\n  b.child = null === a ? Ef(b, null, c, d) : Df(b, a.child, c, d);\n}\nfunction Hg(a, b, c, d, e) {\n  c = c.render;\n  var f = b.ref;\n  Ig(b, e);\n  d = hg(a, b, c, d, f, e);\n  if (null !== a && !qg) return b.updateQueue = a.updateQueue, b.effectTag &= -517, a.expirationTime <= e && (a.expirationTime = 0), Jg(a, b, e);\n  b.effectTag |= 1;\n  S(a, b, d, e);\n  return b.child;\n}\nfunction Kg(a, b, c, d, e, f) {\n  if (null === a) {\n    var g = c.type;\n    if (\"function\" === typeof g && !Ve(g) && void 0 === g.defaultProps && null === c.compare && void 0 === c.defaultProps) return b.tag = 15, b.type = g, Lg(a, b, g, d, e, f);\n    a = Ye(c.type, null, d, null, b.mode, f);\n    a.ref = b.ref;\n    a.return = b;\n    return b.child = a;\n  }\n  g = a.child;\n  if (e < f && (e = g.memoizedProps, c = c.compare, c = null !== c ? c : dd, c(e, d) && a.ref === b.ref)) return Jg(a, b, f);\n  b.effectTag |= 1;\n  a = Xe(g, d, f);\n  a.ref = b.ref;\n  a.return = b;\n  return b.child = a;\n}\nfunction Lg(a, b, c, d, e, f) {\n  return null !== a && dd(a.memoizedProps, d) && a.ref === b.ref && (qg = !1, e < f) ? Jg(a, b, f) : Mg(a, b, c, d, f);\n}\nfunction Ng(a, b) {\n  var c = b.ref;\n  if (null === a && null !== c || null !== a && a.ref !== c) b.effectTag |= 128;\n}\nfunction Mg(a, b, c, d, e) {\n  var f = J(c) ? Ie : H.current;\n  f = Je(b, f);\n  Ig(b, e);\n  c = hg(a, b, c, d, f, e);\n  if (null !== a && !qg) return b.updateQueue = a.updateQueue, b.effectTag &= -517, a.expirationTime <= e && (a.expirationTime = 0), Jg(a, b, e);\n  b.effectTag |= 1;\n  S(a, b, c, e);\n  return b.child;\n}\nfunction Og(a, b, c, d, e) {\n  if (J(c)) {\n    var f = !0;\n    Oe(b);\n  } else f = !1;\n  Ig(b, e);\n  if (null === b.stateNode) null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2), vf(b, c, d, e), xf(b, c, d, e), d = !0;else if (null === a) {\n    var g = b.stateNode,\n      h = b.memoizedProps;\n    g.props = h;\n    var l = g.context,\n      k = c.contextType;\n    \"object\" === typeof k && null !== k ? k = M(k) : (k = J(c) ? Ie : H.current, k = Je(b, k));\n    var m = c.getDerivedStateFromProps,\n      p = \"function\" === typeof m || \"function\" === typeof g.getSnapshotBeforeUpdate;\n    p || \"function\" !== typeof g.UNSAFE_componentWillReceiveProps && \"function\" !== typeof g.componentWillReceiveProps || (h !== d || l !== k) && wf(b, g, d, k);\n    Pg = !1;\n    var t = b.memoizedState;\n    l = g.state = t;\n    var A = b.updateQueue;\n    null !== A && (yf(b, A, d, g, e), l = b.memoizedState);\n    h !== d || t !== l || I.current || Pg ? (\"function\" === typeof m && (kf(b, c, m, d), l = b.memoizedState), (h = Pg || uf(b, c, h, d, t, l, k)) ? (p || \"function\" !== typeof g.UNSAFE_componentWillMount && \"function\" !== typeof g.componentWillMount || (\"function\" === typeof g.componentWillMount && g.componentWillMount(), \"function\" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), \"function\" === typeof g.componentDidMount && (b.effectTag |= 4)) : (\"function\" === typeof g.componentDidMount && (b.effectTag |= 4), b.memoizedProps = d, b.memoizedState = l), g.props = d, g.state = l, g.context = k, d = h) : (\"function\" === typeof g.componentDidMount && (b.effectTag |= 4), d = !1);\n  } else g = b.stateNode, h = b.memoizedProps, g.props = b.type === b.elementType ? h : L(b.type, h), l = g.context, k = c.contextType, \"object\" === typeof k && null !== k ? k = M(k) : (k = J(c) ? Ie : H.current, k = Je(b, k)), m = c.getDerivedStateFromProps, (p = \"function\" === typeof m || \"function\" === typeof g.getSnapshotBeforeUpdate) || \"function\" !== typeof g.UNSAFE_componentWillReceiveProps && \"function\" !== typeof g.componentWillReceiveProps || (h !== d || l !== k) && wf(b, g, d, k), Pg = !1, l = b.memoizedState, t = g.state = l, A = b.updateQueue, null !== A && (yf(b, A, d, g, e), t = b.memoizedState), h !== d || l !== t || I.current || Pg ? (\"function\" === typeof m && (kf(b, c, m, d), t = b.memoizedState), (m = Pg || uf(b, c, h, d, l, t, k)) ? (p || \"function\" !== typeof g.UNSAFE_componentWillUpdate && \"function\" !== typeof g.componentWillUpdate || (\"function\" === typeof g.componentWillUpdate && g.componentWillUpdate(d, t, k), \"function\" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, t, k)), \"function\" === typeof g.componentDidUpdate && (b.effectTag |= 4), \"function\" === typeof g.getSnapshotBeforeUpdate && (b.effectTag |= 256)) : (\"function\" !== typeof g.componentDidUpdate || h === a.memoizedProps && l === a.memoizedState || (b.effectTag |= 4), \"function\" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && l === a.memoizedState || (b.effectTag |= 256), b.memoizedProps = d, b.memoizedState = t), g.props = d, g.state = t, g.context = k, d = m) : (\"function\" !== typeof g.componentDidUpdate || h === a.memoizedProps && l === a.memoizedState || (b.effectTag |= 4), \"function\" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && l === a.memoizedState || (b.effectTag |= 256), d = !1);\n  return Qg(a, b, c, d, f, e);\n}\nfunction Qg(a, b, c, d, e, f) {\n  Ng(a, b);\n  var g = 0 !== (b.effectTag & 64);\n  if (!d && !g) return e && Pe(b, c, !1), Jg(a, b, f);\n  d = b.stateNode;\n  Gg.current = b;\n  var h = g && \"function\" !== typeof c.getDerivedStateFromError ? null : d.render();\n  b.effectTag |= 1;\n  null !== a && g ? (b.child = Df(b, a.child, null, f), b.child = Df(b, null, h, f)) : S(a, b, h, f);\n  b.memoizedState = d.state;\n  e && Pe(b, c, !0);\n  return b.child;\n}\nfunction Rg(a) {\n  var b = a.stateNode;\n  b.pendingContext ? Me(a, b.pendingContext, b.pendingContext !== b.context) : b.context && Me(a, b.context, !1);\n  Jf(a, b.containerInfo);\n}\nfunction Sg(a, b, c) {\n  var d = b.mode,\n    e = b.pendingProps,\n    f = b.memoizedState;\n  if (0 === (b.effectTag & 64)) {\n    f = null;\n    var g = !1;\n  } else f = {\n    timedOutAt: null !== f ? f.timedOutAt : 0\n  }, g = !0, b.effectTag &= -65;\n  if (null === a) {\n    if (g) {\n      var h = e.fallback;\n      a = Ze(null, d, 0, null);\n      0 === (b.mode & 1) && (a.child = null !== b.memoizedState ? b.child.child : b.child);\n      d = Ze(h, d, c, null);\n      a.sibling = d;\n      c = a;\n      c.return = d.return = b;\n    } else c = d = Ef(b, null, e.children, c);\n  } else null !== a.memoizedState ? (d = a.child, h = d.sibling, g ? (c = e.fallback, e = Xe(d, d.pendingProps, 0), 0 === (b.mode & 1) && (g = null !== b.memoizedState ? b.child.child : b.child, g !== d.child && (e.child = g)), d = e.sibling = Xe(h, c, h.expirationTime), c = e, e.childExpirationTime = 0, c.return = d.return = b) : c = d = Df(b, d.child, e.children, c)) : (h = a.child, g ? (g = e.fallback, e = Ze(null, d, 0, null), e.child = h, 0 === (b.mode & 1) && (e.child = null !== b.memoizedState ? b.child.child : b.child), d = e.sibling = Ze(g, d, c, null), d.effectTag |= 2, c = e, e.childExpirationTime = 0, c.return = d.return = b) : d = c = Df(b, h, e.children, c)), b.stateNode = a.stateNode;\n  b.memoizedState = f;\n  b.child = c;\n  return d;\n}\nfunction Jg(a, b, c) {\n  null !== a && (b.contextDependencies = a.contextDependencies);\n  if (b.childExpirationTime < c) return null;\n  null !== a && b.child !== a.child ? x(\"153\") : void 0;\n  if (null !== b.child) {\n    a = b.child;\n    c = Xe(a, a.pendingProps, a.expirationTime);\n    b.child = c;\n    for (c.return = b; null !== a.sibling;) a = a.sibling, c = c.sibling = Xe(a, a.pendingProps, a.expirationTime), c.return = b;\n    c.sibling = null;\n  }\n  return b.child;\n}\nfunction Tg(a, b, c) {\n  var d = b.expirationTime;\n  if (null !== a) {\n    if (a.memoizedProps !== b.pendingProps || I.current) qg = !0;else {\n      if (d < c) {\n        qg = !1;\n        switch (b.tag) {\n          case 3:\n            Rg(b);\n            Fg();\n            break;\n          case 5:\n            Lf(b);\n            break;\n          case 1:\n            J(b.type) && Oe(b);\n            break;\n          case 4:\n            Jf(b, b.stateNode.containerInfo);\n            break;\n          case 10:\n            Ug(b, b.memoizedProps.value);\n            break;\n          case 13:\n            if (null !== b.memoizedState) {\n              d = b.child.childExpirationTime;\n              if (0 !== d && d >= c) return Sg(a, b, c);\n              b = Jg(a, b, c);\n              return null !== b ? b.sibling : null;\n            }\n        }\n        return Jg(a, b, c);\n      }\n    }\n  } else qg = !1;\n  b.expirationTime = 0;\n  switch (b.tag) {\n    case 2:\n      d = b.elementType;\n      null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2);\n      a = b.pendingProps;\n      var e = Je(b, H.current);\n      Ig(b, c);\n      e = hg(null, b, d, a, e, c);\n      b.effectTag |= 1;\n      if (\"object\" === typeof e && null !== e && \"function\" === typeof e.render && void 0 === e.$$typeof) {\n        b.tag = 1;\n        lg();\n        if (J(d)) {\n          var f = !0;\n          Oe(b);\n        } else f = !1;\n        b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null;\n        var g = d.getDerivedStateFromProps;\n        \"function\" === typeof g && kf(b, d, g, a);\n        e.updater = tf;\n        b.stateNode = e;\n        e._reactInternalFiber = b;\n        xf(b, d, a, c);\n        b = Qg(null, b, d, !0, f, c);\n      } else b.tag = 0, S(null, b, e, c), b = b.child;\n      return b;\n    case 16:\n      e = b.elementType;\n      null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2);\n      f = b.pendingProps;\n      a = hf(e);\n      b.type = a;\n      e = b.tag = We(a);\n      f = L(a, f);\n      g = void 0;\n      switch (e) {\n        case 0:\n          g = Mg(null, b, a, f, c);\n          break;\n        case 1:\n          g = Og(null, b, a, f, c);\n          break;\n        case 11:\n          g = Hg(null, b, a, f, c);\n          break;\n        case 14:\n          g = Kg(null, b, a, L(a.type, f), d, c);\n          break;\n        default:\n          x(\"306\", a, \"\");\n      }\n      return g;\n    case 0:\n      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : L(d, e), Mg(a, b, d, e, c);\n    case 1:\n      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : L(d, e), Og(a, b, d, e, c);\n    case 3:\n      Rg(b);\n      d = b.updateQueue;\n      null === d ? x(\"282\") : void 0;\n      e = b.memoizedState;\n      e = null !== e ? e.element : null;\n      yf(b, d, b.pendingProps, null, c);\n      d = b.memoizedState.element;\n      if (d === e) Fg(), b = Jg(a, b, c);else {\n        e = b.stateNode;\n        if (e = (null === a || null === a.child) && e.hydrate) yg = Ee(b.stateNode.containerInfo), xg = b, e = zg = !0;\n        e ? (b.effectTag |= 2, b.child = Ef(b, null, d, c)) : (S(a, b, d, c), Fg());\n        b = b.child;\n      }\n      return b;\n    case 5:\n      return Lf(b), null === a && Cg(b), d = b.type, e = b.pendingProps, f = null !== a ? a.memoizedProps : null, g = e.children, xe(d, e) ? g = null : null !== f && xe(d, f) && (b.effectTag |= 16), Ng(a, b), 1 !== c && b.mode & 1 && e.hidden ? (b.expirationTime = b.childExpirationTime = 1, b = null) : (S(a, b, g, c), b = b.child), b;\n    case 6:\n      return null === a && Cg(b), null;\n    case 13:\n      return Sg(a, b, c);\n    case 4:\n      return Jf(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = Df(b, null, d, c) : S(a, b, d, c), b.child;\n    case 11:\n      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : L(d, e), Hg(a, b, d, e, c);\n    case 7:\n      return S(a, b, b.pendingProps, c), b.child;\n    case 8:\n      return S(a, b, b.pendingProps.children, c), b.child;\n    case 12:\n      return S(a, b, b.pendingProps.children, c), b.child;\n    case 10:\n      a: {\n        d = b.type._context;\n        e = b.pendingProps;\n        g = b.memoizedProps;\n        f = e.value;\n        Ug(b, f);\n        if (null !== g) {\n          var h = g.value;\n          f = bd(h, f) ? 0 : (\"function\" === typeof d._calculateChangedBits ? d._calculateChangedBits(h, f) : 1073741823) | 0;\n          if (0 === f) {\n            if (g.children === e.children && !I.current) {\n              b = Jg(a, b, c);\n              break a;\n            }\n          } else for (h = b.child, null !== h && (h.return = b); null !== h;) {\n            var l = h.contextDependencies;\n            if (null !== l) {\n              g = h.child;\n              for (var k = l.first; null !== k;) {\n                if (k.context === d && 0 !== (k.observedBits & f)) {\n                  1 === h.tag && (k = nf(c), k.tag = sf, pf(h, k));\n                  h.expirationTime < c && (h.expirationTime = c);\n                  k = h.alternate;\n                  null !== k && k.expirationTime < c && (k.expirationTime = c);\n                  k = c;\n                  for (var m = h.return; null !== m;) {\n                    var p = m.alternate;\n                    if (m.childExpirationTime < k) m.childExpirationTime = k, null !== p && p.childExpirationTime < k && (p.childExpirationTime = k);else if (null !== p && p.childExpirationTime < k) p.childExpirationTime = k;else break;\n                    m = m.return;\n                  }\n                  l.expirationTime < c && (l.expirationTime = c);\n                  break;\n                }\n                k = k.next;\n              }\n            } else g = 10 === h.tag ? h.type === b.type ? null : h.child : h.child;\n            if (null !== g) g.return = h;else for (g = h; null !== g;) {\n              if (g === b) {\n                g = null;\n                break;\n              }\n              h = g.sibling;\n              if (null !== h) {\n                h.return = g.return;\n                g = h;\n                break;\n              }\n              g = g.return;\n            }\n            h = g;\n          }\n        }\n        S(a, b, e.children, c);\n        b = b.child;\n      }\n      return b;\n    case 9:\n      return e = b.type, f = b.pendingProps, d = f.children, Ig(b, c), e = M(e, f.unstable_observedBits), d = d(e), b.effectTag |= 1, S(a, b, d, c), b.child;\n    case 14:\n      return e = b.type, f = L(e, b.pendingProps), f = L(e.type, f), Kg(a, b, e, f, d, c);\n    case 15:\n      return Lg(a, b, b.type, b.pendingProps, d, c);\n    case 17:\n      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : L(d, e), null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2), b.tag = 1, J(d) ? (a = !0, Oe(b)) : a = !1, Ig(b, c), vf(b, d, e, c), xf(b, d, e, c), Qg(null, b, d, !0, a, c);\n  }\n  x(\"156\");\n}\nvar Vg = {\n    current: null\n  },\n  Wg = null,\n  Xg = null,\n  Yg = null;\nfunction Ug(a, b) {\n  var c = a.type._context;\n  G(Vg, c._currentValue, a);\n  c._currentValue = b;\n}\nfunction Zg(a) {\n  var b = Vg.current;\n  F(Vg, a);\n  a.type._context._currentValue = b;\n}\nfunction Ig(a, b) {\n  Wg = a;\n  Yg = Xg = null;\n  var c = a.contextDependencies;\n  null !== c && c.expirationTime >= b && (qg = !0);\n  a.contextDependencies = null;\n}\nfunction M(a, b) {\n  if (Yg !== a && !1 !== b && 0 !== b) {\n    if (\"number\" !== typeof b || 1073741823 === b) Yg = a, b = 1073741823;\n    b = {\n      context: a,\n      observedBits: b,\n      next: null\n    };\n    null === Xg ? (null === Wg ? x(\"308\") : void 0, Xg = b, Wg.contextDependencies = {\n      first: b,\n      expirationTime: 0\n    }) : Xg = Xg.next = b;\n  }\n  return a._currentValue;\n}\nvar $g = 0,\n  rf = 1,\n  sf = 2,\n  ah = 3,\n  Pg = !1;\nfunction bh(a) {\n  return {\n    baseState: a,\n    firstUpdate: null,\n    lastUpdate: null,\n    firstCapturedUpdate: null,\n    lastCapturedUpdate: null,\n    firstEffect: null,\n    lastEffect: null,\n    firstCapturedEffect: null,\n    lastCapturedEffect: null\n  };\n}\nfunction ch(a) {\n  return {\n    baseState: a.baseState,\n    firstUpdate: a.firstUpdate,\n    lastUpdate: a.lastUpdate,\n    firstCapturedUpdate: null,\n    lastCapturedUpdate: null,\n    firstEffect: null,\n    lastEffect: null,\n    firstCapturedEffect: null,\n    lastCapturedEffect: null\n  };\n}\nfunction nf(a) {\n  return {\n    expirationTime: a,\n    tag: $g,\n    payload: null,\n    callback: null,\n    next: null,\n    nextEffect: null\n  };\n}\nfunction dh(a, b) {\n  null === a.lastUpdate ? a.firstUpdate = a.lastUpdate = b : (a.lastUpdate.next = b, a.lastUpdate = b);\n}\nfunction pf(a, b) {\n  var c = a.alternate;\n  if (null === c) {\n    var d = a.updateQueue;\n    var e = null;\n    null === d && (d = a.updateQueue = bh(a.memoizedState));\n  } else d = a.updateQueue, e = c.updateQueue, null === d ? null === e ? (d = a.updateQueue = bh(a.memoizedState), e = c.updateQueue = bh(c.memoizedState)) : d = a.updateQueue = ch(e) : null === e && (e = c.updateQueue = ch(d));\n  null === e || d === e ? dh(d, b) : null === d.lastUpdate || null === e.lastUpdate ? (dh(d, b), dh(e, b)) : (dh(d, b), e.lastUpdate = b);\n}\nfunction eh(a, b) {\n  var c = a.updateQueue;\n  c = null === c ? a.updateQueue = bh(a.memoizedState) : fh(a, c);\n  null === c.lastCapturedUpdate ? c.firstCapturedUpdate = c.lastCapturedUpdate = b : (c.lastCapturedUpdate.next = b, c.lastCapturedUpdate = b);\n}\nfunction fh(a, b) {\n  var c = a.alternate;\n  null !== c && b === c.updateQueue && (b = a.updateQueue = ch(b));\n  return b;\n}\nfunction gh(a, b, c, d, e, f) {\n  switch (c.tag) {\n    case rf:\n      return a = c.payload, \"function\" === typeof a ? a.call(f, d, e) : a;\n    case ah:\n      a.effectTag = a.effectTag & -2049 | 64;\n    case $g:\n      a = c.payload;\n      e = \"function\" === typeof a ? a.call(f, d, e) : a;\n      if (null === e || void 0 === e) break;\n      return n({}, d, e);\n    case sf:\n      Pg = !0;\n  }\n  return d;\n}\nfunction yf(a, b, c, d, e) {\n  Pg = !1;\n  b = fh(a, b);\n  for (var f = b.baseState, g = null, h = 0, l = b.firstUpdate, k = f; null !== l;) {\n    var m = l.expirationTime;\n    m < e ? (null === g && (g = l, f = k), h < m && (h = m)) : (k = gh(a, b, l, k, c, d), null !== l.callback && (a.effectTag |= 32, l.nextEffect = null, null === b.lastEffect ? b.firstEffect = b.lastEffect = l : (b.lastEffect.nextEffect = l, b.lastEffect = l)));\n    l = l.next;\n  }\n  m = null;\n  for (l = b.firstCapturedUpdate; null !== l;) {\n    var p = l.expirationTime;\n    p < e ? (null === m && (m = l, null === g && (f = k)), h < p && (h = p)) : (k = gh(a, b, l, k, c, d), null !== l.callback && (a.effectTag |= 32, l.nextEffect = null, null === b.lastCapturedEffect ? b.firstCapturedEffect = b.lastCapturedEffect = l : (b.lastCapturedEffect.nextEffect = l, b.lastCapturedEffect = l)));\n    l = l.next;\n  }\n  null === g && (b.lastUpdate = null);\n  null === m ? b.lastCapturedUpdate = null : a.effectTag |= 32;\n  null === g && null === m && (f = k);\n  b.baseState = f;\n  b.firstUpdate = g;\n  b.firstCapturedUpdate = m;\n  a.expirationTime = h;\n  a.memoizedState = k;\n}\nfunction hh(a, b, c) {\n  null !== b.firstCapturedUpdate && (null !== b.lastUpdate && (b.lastUpdate.next = b.firstCapturedUpdate, b.lastUpdate = b.lastCapturedUpdate), b.firstCapturedUpdate = b.lastCapturedUpdate = null);\n  ih(b.firstEffect, c);\n  b.firstEffect = b.lastEffect = null;\n  ih(b.firstCapturedEffect, c);\n  b.firstCapturedEffect = b.lastCapturedEffect = null;\n}\nfunction ih(a, b) {\n  for (; null !== a;) {\n    var c = a.callback;\n    if (null !== c) {\n      a.callback = null;\n      var d = b;\n      \"function\" !== typeof c ? x(\"191\", c) : void 0;\n      c.call(d);\n    }\n    a = a.nextEffect;\n  }\n}\nfunction jh(a, b) {\n  return {\n    value: a,\n    source: b,\n    stack: jc(b)\n  };\n}\nfunction kh(a) {\n  a.effectTag |= 4;\n}\nvar lh = void 0,\n  mh = void 0,\n  nh = void 0,\n  oh = void 0;\nlh = function lh(a, b) {\n  for (var c = b.child; null !== c;) {\n    if (5 === c.tag || 6 === c.tag) a.appendChild(c.stateNode);else if (4 !== c.tag && null !== c.child) {\n      c.child.return = c;\n      c = c.child;\n      continue;\n    }\n    if (c === b) break;\n    for (; null === c.sibling;) {\n      if (null === c.return || c.return === b) return;\n      c = c.return;\n    }\n    c.sibling.return = c.return;\n    c = c.sibling;\n  }\n};\nmh = function mh() {};\nnh = function nh(a, b, c, d, e) {\n  var f = a.memoizedProps;\n  if (f !== d) {\n    var g = b.stateNode;\n    If(N.current);\n    a = null;\n    switch (c) {\n      case \"input\":\n        f = vc(g, f);\n        d = vc(g, d);\n        a = [];\n        break;\n      case \"option\":\n        f = $d(g, f);\n        d = $d(g, d);\n        a = [];\n        break;\n      case \"select\":\n        f = n({}, f, {\n          value: void 0\n        });\n        d = n({}, d, {\n          value: void 0\n        });\n        a = [];\n        break;\n      case \"textarea\":\n        f = be(g, f);\n        d = be(g, d);\n        a = [];\n        break;\n      default:\n        \"function\" !== typeof f.onClick && \"function\" === typeof d.onClick && (g.onclick = te);\n    }\n    qe(c, d);\n    g = c = void 0;\n    var h = null;\n    for (c in f) if (!d.hasOwnProperty(c) && f.hasOwnProperty(c) && null != f[c]) if (\"style\" === c) {\n      var l = f[c];\n      for (g in l) l.hasOwnProperty(g) && (h || (h = {}), h[g] = \"\");\n    } else \"dangerouslySetInnerHTML\" !== c && \"children\" !== c && \"suppressContentEditableWarning\" !== c && \"suppressHydrationWarning\" !== c && \"autoFocus\" !== c && (ra.hasOwnProperty(c) ? a || (a = []) : (a = a || []).push(c, null));\n    for (c in d) {\n      var k = d[c];\n      l = null != f ? f[c] : void 0;\n      if (d.hasOwnProperty(c) && k !== l && (null != k || null != l)) if (\"style\" === c) {\n        if (l) {\n          for (g in l) !l.hasOwnProperty(g) || k && k.hasOwnProperty(g) || (h || (h = {}), h[g] = \"\");\n          for (g in k) k.hasOwnProperty(g) && l[g] !== k[g] && (h || (h = {}), h[g] = k[g]);\n        } else h || (a || (a = []), a.push(c, h)), h = k;\n      } else \"dangerouslySetInnerHTML\" === c ? (k = k ? k.__html : void 0, l = l ? l.__html : void 0, null != k && l !== k && (a = a || []).push(c, \"\" + k)) : \"children\" === c ? l === k || \"string\" !== typeof k && \"number\" !== typeof k || (a = a || []).push(c, \"\" + k) : \"suppressContentEditableWarning\" !== c && \"suppressHydrationWarning\" !== c && (ra.hasOwnProperty(c) ? (null != k && se(e, c), a || l === k || (a = [])) : (a = a || []).push(c, k));\n    }\n    h && (a = a || []).push(\"style\", h);\n    e = a;\n    (b.updateQueue = e) && kh(b);\n  }\n};\noh = function oh(a, b, c, d) {\n  c !== d && kh(b);\n};\nvar ph = \"function\" === typeof WeakSet ? WeakSet : Set;\nfunction qh(a, b) {\n  var c = b.source,\n    d = b.stack;\n  null === d && null !== c && (d = jc(c));\n  null !== c && ic(c.type);\n  b = b.value;\n  null !== a && 1 === a.tag && ic(a.type);\n  try {\n    console.error(b);\n  } catch (e) {\n    setTimeout(function () {\n      throw e;\n    });\n  }\n}\nfunction rh(a) {\n  var b = a.ref;\n  if (null !== b) if (\"function\" === typeof b) try {\n    b(null);\n  } catch (c) {\n    sh(a, c);\n  } else b.current = null;\n}\nfunction th(a, b, c) {\n  c = c.updateQueue;\n  c = null !== c ? c.lastEffect : null;\n  if (null !== c) {\n    var d = c = c.next;\n    do {\n      if ((d.tag & a) !== Nf) {\n        var e = d.destroy;\n        d.destroy = void 0;\n        void 0 !== e && e();\n      }\n      (d.tag & b) !== Nf && (e = d.create, d.destroy = e());\n      d = d.next;\n    } while (d !== c);\n  }\n}\nfunction uh(a, b) {\n  for (var c = a;;) {\n    if (5 === c.tag) {\n      var d = c.stateNode;\n      if (b) d.style.display = \"none\";else {\n        d = c.stateNode;\n        var e = c.memoizedProps.style;\n        e = void 0 !== e && null !== e && e.hasOwnProperty(\"display\") ? e.display : null;\n        d.style.display = ne(\"display\", e);\n      }\n    } else if (6 === c.tag) c.stateNode.nodeValue = b ? \"\" : c.memoizedProps;else if (13 === c.tag && null !== c.memoizedState) {\n      d = c.child.sibling;\n      d.return = c;\n      c = d;\n      continue;\n    } else if (null !== c.child) {\n      c.child.return = c;\n      c = c.child;\n      continue;\n    }\n    if (c === a) break;\n    for (; null === c.sibling;) {\n      if (null === c.return || c.return === a) return;\n      c = c.return;\n    }\n    c.sibling.return = c.return;\n    c = c.sibling;\n  }\n}\nfunction vh(a) {\n  \"function\" === typeof Re && Re(a);\n  switch (a.tag) {\n    case 0:\n    case 11:\n    case 14:\n    case 15:\n      var b = a.updateQueue;\n      if (null !== b && (b = b.lastEffect, null !== b)) {\n        var c = b = b.next;\n        do {\n          var d = c.destroy;\n          if (void 0 !== d) {\n            var e = a;\n            try {\n              d();\n            } catch (f) {\n              sh(e, f);\n            }\n          }\n          c = c.next;\n        } while (c !== b);\n      }\n      break;\n    case 1:\n      rh(a);\n      b = a.stateNode;\n      if (\"function\" === typeof b.componentWillUnmount) try {\n        b.props = a.memoizedProps, b.state = a.memoizedState, b.componentWillUnmount();\n      } catch (f) {\n        sh(a, f);\n      }\n      break;\n    case 5:\n      rh(a);\n      break;\n    case 4:\n      wh(a);\n  }\n}\nfunction xh(a) {\n  return 5 === a.tag || 3 === a.tag || 4 === a.tag;\n}\nfunction yh(a) {\n  a: {\n    for (var b = a.return; null !== b;) {\n      if (xh(b)) {\n        var c = b;\n        break a;\n      }\n      b = b.return;\n    }\n    x(\"160\");\n    c = void 0;\n  }\n  var d = b = void 0;\n  switch (c.tag) {\n    case 5:\n      b = c.stateNode;\n      d = !1;\n      break;\n    case 3:\n      b = c.stateNode.containerInfo;\n      d = !0;\n      break;\n    case 4:\n      b = c.stateNode.containerInfo;\n      d = !0;\n      break;\n    default:\n      x(\"161\");\n  }\n  c.effectTag & 16 && (ke(b, \"\"), c.effectTag &= -17);\n  a: b: for (c = a;;) {\n    for (; null === c.sibling;) {\n      if (null === c.return || xh(c.return)) {\n        c = null;\n        break a;\n      }\n      c = c.return;\n    }\n    c.sibling.return = c.return;\n    for (c = c.sibling; 5 !== c.tag && 6 !== c.tag && 18 !== c.tag;) {\n      if (c.effectTag & 2) continue b;\n      if (null === c.child || 4 === c.tag) continue b;else c.child.return = c, c = c.child;\n    }\n    if (!(c.effectTag & 2)) {\n      c = c.stateNode;\n      break a;\n    }\n  }\n  for (var e = a;;) {\n    if (5 === e.tag || 6 === e.tag) {\n      if (c) {\n        if (d) {\n          var f = b,\n            g = e.stateNode,\n            h = c;\n          8 === f.nodeType ? f.parentNode.insertBefore(g, h) : f.insertBefore(g, h);\n        } else b.insertBefore(e.stateNode, c);\n      } else d ? (g = b, h = e.stateNode, 8 === g.nodeType ? (f = g.parentNode, f.insertBefore(h, g)) : (f = g, f.appendChild(h)), g = g._reactRootContainer, null !== g && void 0 !== g || null !== f.onclick || (f.onclick = te)) : b.appendChild(e.stateNode);\n    } else if (4 !== e.tag && null !== e.child) {\n      e.child.return = e;\n      e = e.child;\n      continue;\n    }\n    if (e === a) break;\n    for (; null === e.sibling;) {\n      if (null === e.return || e.return === a) return;\n      e = e.return;\n    }\n    e.sibling.return = e.return;\n    e = e.sibling;\n  }\n}\nfunction wh(a) {\n  for (var b = a, c = !1, d = void 0, e = void 0;;) {\n    if (!c) {\n      c = b.return;\n      a: for (;;) {\n        null === c ? x(\"160\") : void 0;\n        switch (c.tag) {\n          case 5:\n            d = c.stateNode;\n            e = !1;\n            break a;\n          case 3:\n            d = c.stateNode.containerInfo;\n            e = !0;\n            break a;\n          case 4:\n            d = c.stateNode.containerInfo;\n            e = !0;\n            break a;\n        }\n        c = c.return;\n      }\n      c = !0;\n    }\n    if (5 === b.tag || 6 === b.tag) {\n      a: for (var f = b, g = f;;) if (vh(g), null !== g.child && 4 !== g.tag) g.child.return = g, g = g.child;else {\n        if (g === f) break;\n        for (; null === g.sibling;) {\n          if (null === g.return || g.return === f) break a;\n          g = g.return;\n        }\n        g.sibling.return = g.return;\n        g = g.sibling;\n      }\n      e ? (f = d, g = b.stateNode, 8 === f.nodeType ? f.parentNode.removeChild(g) : f.removeChild(g)) : d.removeChild(b.stateNode);\n    } else if (4 === b.tag) {\n      if (null !== b.child) {\n        d = b.stateNode.containerInfo;\n        e = !0;\n        b.child.return = b;\n        b = b.child;\n        continue;\n      }\n    } else if (vh(b), null !== b.child) {\n      b.child.return = b;\n      b = b.child;\n      continue;\n    }\n    if (b === a) break;\n    for (; null === b.sibling;) {\n      if (null === b.return || b.return === a) return;\n      b = b.return;\n      4 === b.tag && (c = !1);\n    }\n    b.sibling.return = b.return;\n    b = b.sibling;\n  }\n}\nfunction zh(a, b) {\n  switch (b.tag) {\n    case 0:\n    case 11:\n    case 14:\n    case 15:\n      th(Pf, Qf, b);\n      break;\n    case 1:\n      break;\n    case 5:\n      var c = b.stateNode;\n      if (null != c) {\n        var d = b.memoizedProps;\n        a = null !== a ? a.memoizedProps : d;\n        var e = b.type,\n          f = b.updateQueue;\n        b.updateQueue = null;\n        null !== f && Ce(c, f, e, a, d, b);\n      }\n      break;\n    case 6:\n      null === b.stateNode ? x(\"162\") : void 0;\n      b.stateNode.nodeValue = b.memoizedProps;\n      break;\n    case 3:\n      break;\n    case 12:\n      break;\n    case 13:\n      c = b.memoizedState;\n      d = void 0;\n      a = b;\n      null === c ? d = !1 : (d = !0, a = b.child, 0 === c.timedOutAt && (c.timedOutAt = lf()));\n      null !== a && uh(a, d);\n      c = b.updateQueue;\n      if (null !== c) {\n        b.updateQueue = null;\n        var g = b.stateNode;\n        null === g && (g = b.stateNode = new ph());\n        c.forEach(function (a) {\n          var c = Ah.bind(null, b, a);\n          g.has(a) || (g.add(a), a.then(c, c));\n        });\n      }\n      break;\n    case 17:\n      break;\n    default:\n      x(\"163\");\n  }\n}\nvar Bh = \"function\" === typeof WeakMap ? WeakMap : Map;\nfunction Ch(a, b, c) {\n  c = nf(c);\n  c.tag = ah;\n  c.payload = {\n    element: null\n  };\n  var d = b.value;\n  c.callback = function () {\n    Dh(d);\n    qh(a, b);\n  };\n  return c;\n}\nfunction Eh(a, b, c) {\n  c = nf(c);\n  c.tag = ah;\n  var d = a.type.getDerivedStateFromError;\n  if (\"function\" === typeof d) {\n    var e = b.value;\n    c.payload = function () {\n      return d(e);\n    };\n  }\n  var f = a.stateNode;\n  null !== f && \"function\" === typeof f.componentDidCatch && (c.callback = function () {\n    \"function\" !== typeof d && (null === Fh ? Fh = new Set([this]) : Fh.add(this));\n    var c = b.value,\n      e = b.stack;\n    qh(a, b);\n    this.componentDidCatch(c, {\n      componentStack: null !== e ? e : \"\"\n    });\n  });\n  return c;\n}\nfunction Gh(a) {\n  switch (a.tag) {\n    case 1:\n      J(a.type) && Ke(a);\n      var b = a.effectTag;\n      return b & 2048 ? (a.effectTag = b & -2049 | 64, a) : null;\n    case 3:\n      return Kf(a), Le(a), b = a.effectTag, 0 !== (b & 64) ? x(\"285\") : void 0, a.effectTag = b & -2049 | 64, a;\n    case 5:\n      return Mf(a), null;\n    case 13:\n      return b = a.effectTag, b & 2048 ? (a.effectTag = b & -2049 | 64, a) : null;\n    case 18:\n      return null;\n    case 4:\n      return Kf(a), null;\n    case 10:\n      return Zg(a), null;\n    default:\n      return null;\n  }\n}\nvar Hh = Tb.ReactCurrentDispatcher,\n  Ih = Tb.ReactCurrentOwner,\n  Jh = 1073741822,\n  Kh = !1,\n  T = null,\n  Lh = null,\n  U = 0,\n  Mh = -1,\n  Nh = !1,\n  V = null,\n  Oh = !1,\n  Ph = null,\n  Qh = null,\n  Rh = null,\n  Fh = null;\nfunction Sh() {\n  if (null !== T) for (var a = T.return; null !== a;) {\n    var b = a;\n    switch (b.tag) {\n      case 1:\n        var c = b.type.childContextTypes;\n        null !== c && void 0 !== c && Ke(b);\n        break;\n      case 3:\n        Kf(b);\n        Le(b);\n        break;\n      case 5:\n        Mf(b);\n        break;\n      case 4:\n        Kf(b);\n        break;\n      case 10:\n        Zg(b);\n    }\n    a = a.return;\n  }\n  Lh = null;\n  U = 0;\n  Mh = -1;\n  Nh = !1;\n  T = null;\n}\nfunction Th() {\n  for (; null !== V;) {\n    var a = V.effectTag;\n    a & 16 && ke(V.stateNode, \"\");\n    if (a & 128) {\n      var b = V.alternate;\n      null !== b && (b = b.ref, null !== b && (\"function\" === typeof b ? b(null) : b.current = null));\n    }\n    switch (a & 14) {\n      case 2:\n        yh(V);\n        V.effectTag &= -3;\n        break;\n      case 6:\n        yh(V);\n        V.effectTag &= -3;\n        zh(V.alternate, V);\n        break;\n      case 4:\n        zh(V.alternate, V);\n        break;\n      case 8:\n        a = V, wh(a), a.return = null, a.child = null, a.memoizedState = null, a.updateQueue = null, a = a.alternate, null !== a && (a.return = null, a.child = null, a.memoizedState = null, a.updateQueue = null);\n    }\n    V = V.nextEffect;\n  }\n}\nfunction Uh() {\n  for (; null !== V;) {\n    if (V.effectTag & 256) a: {\n      var a = V.alternate,\n        b = V;\n      switch (b.tag) {\n        case 0:\n        case 11:\n        case 15:\n          th(Of, Nf, b);\n          break a;\n        case 1:\n          if (b.effectTag & 256 && null !== a) {\n            var c = a.memoizedProps,\n              d = a.memoizedState;\n            a = b.stateNode;\n            b = a.getSnapshotBeforeUpdate(b.elementType === b.type ? c : L(b.type, c), d);\n            a.__reactInternalSnapshotBeforeUpdate = b;\n          }\n          break a;\n        case 3:\n        case 5:\n        case 6:\n        case 4:\n        case 17:\n          break a;\n        default:\n          x(\"163\");\n      }\n    }\n    V = V.nextEffect;\n  }\n}\nfunction Vh(a, b) {\n  for (; null !== V;) {\n    var c = V.effectTag;\n    if (c & 36) {\n      var d = V.alternate,\n        e = V,\n        f = b;\n      switch (e.tag) {\n        case 0:\n        case 11:\n        case 15:\n          th(Rf, Sf, e);\n          break;\n        case 1:\n          var g = e.stateNode;\n          if (e.effectTag & 4) if (null === d) g.componentDidMount();else {\n            var h = e.elementType === e.type ? d.memoizedProps : L(e.type, d.memoizedProps);\n            g.componentDidUpdate(h, d.memoizedState, g.__reactInternalSnapshotBeforeUpdate);\n          }\n          d = e.updateQueue;\n          null !== d && hh(e, d, g, f);\n          break;\n        case 3:\n          d = e.updateQueue;\n          if (null !== d) {\n            g = null;\n            if (null !== e.child) switch (e.child.tag) {\n              case 5:\n                g = e.child.stateNode;\n                break;\n              case 1:\n                g = e.child.stateNode;\n            }\n            hh(e, d, g, f);\n          }\n          break;\n        case 5:\n          f = e.stateNode;\n          null === d && e.effectTag & 4 && we(e.type, e.memoizedProps) && f.focus();\n          break;\n        case 6:\n          break;\n        case 4:\n          break;\n        case 12:\n          break;\n        case 13:\n          break;\n        case 17:\n          break;\n        default:\n          x(\"163\");\n      }\n    }\n    c & 128 && (e = V.ref, null !== e && (f = V.stateNode, \"function\" === typeof e ? e(f) : e.current = f));\n    c & 512 && (Ph = a);\n    V = V.nextEffect;\n  }\n}\nfunction Wh(a, b) {\n  Rh = Qh = Ph = null;\n  var c = W;\n  W = !0;\n  do {\n    if (b.effectTag & 512) {\n      var d = !1,\n        e = void 0;\n      try {\n        var f = b;\n        th(Uf, Nf, f);\n        th(Nf, Tf, f);\n      } catch (g) {\n        d = !0, e = g;\n      }\n      d && sh(b, e);\n    }\n    b = b.nextEffect;\n  } while (null !== b);\n  W = c;\n  c = a.expirationTime;\n  0 !== c && Xh(a, c);\n  X || W || Yh(1073741823, !1);\n}\nfunction of() {\n  null !== Qh && Be(Qh);\n  null !== Rh && Rh();\n}\nfunction Zh(a, b) {\n  Oh = Kh = !0;\n  a.current === b ? x(\"177\") : void 0;\n  var c = a.pendingCommitExpirationTime;\n  0 === c ? x(\"261\") : void 0;\n  a.pendingCommitExpirationTime = 0;\n  var d = b.expirationTime,\n    e = b.childExpirationTime;\n  ef(a, e > d ? e : d);\n  Ih.current = null;\n  d = void 0;\n  1 < b.effectTag ? null !== b.lastEffect ? (b.lastEffect.nextEffect = b, d = b.firstEffect) : d = b : d = b.firstEffect;\n  ue = Bd;\n  ve = Pd();\n  Bd = !1;\n  for (V = d; null !== V;) {\n    e = !1;\n    var f = void 0;\n    try {\n      Uh();\n    } catch (h) {\n      e = !0, f = h;\n    }\n    e && (null === V ? x(\"178\") : void 0, sh(V, f), null !== V && (V = V.nextEffect));\n  }\n  for (V = d; null !== V;) {\n    e = !1;\n    f = void 0;\n    try {\n      Th();\n    } catch (h) {\n      e = !0, f = h;\n    }\n    e && (null === V ? x(\"178\") : void 0, sh(V, f), null !== V && (V = V.nextEffect));\n  }\n  Qd(ve);\n  ve = null;\n  Bd = !!ue;\n  ue = null;\n  a.current = b;\n  for (V = d; null !== V;) {\n    e = !1;\n    f = void 0;\n    try {\n      Vh(a, c);\n    } catch (h) {\n      e = !0, f = h;\n    }\n    e && (null === V ? x(\"178\") : void 0, sh(V, f), null !== V && (V = V.nextEffect));\n  }\n  if (null !== d && null !== Ph) {\n    var g = Wh.bind(null, a, d);\n    Qh = r.unstable_runWithPriority(r.unstable_NormalPriority, function () {\n      return Ae(g);\n    });\n    Rh = g;\n  }\n  Kh = Oh = !1;\n  \"function\" === typeof Qe && Qe(b.stateNode);\n  c = b.expirationTime;\n  b = b.childExpirationTime;\n  b = b > c ? b : c;\n  0 === b && (Fh = null);\n  $h(a, b);\n}\nfunction ai(a) {\n  for (;;) {\n    var b = a.alternate,\n      c = a.return,\n      d = a.sibling;\n    if (0 === (a.effectTag & 1024)) {\n      T = a;\n      a: {\n        var e = b;\n        b = a;\n        var f = U;\n        var g = b.pendingProps;\n        switch (b.tag) {\n          case 2:\n            break;\n          case 16:\n            break;\n          case 15:\n          case 0:\n            break;\n          case 1:\n            J(b.type) && Ke(b);\n            break;\n          case 3:\n            Kf(b);\n            Le(b);\n            g = b.stateNode;\n            g.pendingContext && (g.context = g.pendingContext, g.pendingContext = null);\n            if (null === e || null === e.child) Eg(b), b.effectTag &= -3;\n            mh(b);\n            break;\n          case 5:\n            Mf(b);\n            var h = If(Hf.current);\n            f = b.type;\n            if (null !== e && null != b.stateNode) nh(e, b, f, g, h), e.ref !== b.ref && (b.effectTag |= 128);else if (g) {\n              var l = If(N.current);\n              if (Eg(b)) {\n                g = b;\n                e = g.stateNode;\n                var k = g.type,\n                  m = g.memoizedProps,\n                  p = h;\n                e[Fa] = g;\n                e[Ga] = m;\n                f = void 0;\n                h = k;\n                switch (h) {\n                  case \"iframe\":\n                  case \"object\":\n                    E(\"load\", e);\n                    break;\n                  case \"video\":\n                  case \"audio\":\n                    for (k = 0; k < ab.length; k++) E(ab[k], e);\n                    break;\n                  case \"source\":\n                    E(\"error\", e);\n                    break;\n                  case \"img\":\n                  case \"image\":\n                  case \"link\":\n                    E(\"error\", e);\n                    E(\"load\", e);\n                    break;\n                  case \"form\":\n                    E(\"reset\", e);\n                    E(\"submit\", e);\n                    break;\n                  case \"details\":\n                    E(\"toggle\", e);\n                    break;\n                  case \"input\":\n                    wc(e, m);\n                    E(\"invalid\", e);\n                    se(p, \"onChange\");\n                    break;\n                  case \"select\":\n                    e._wrapperState = {\n                      wasMultiple: !!m.multiple\n                    };\n                    E(\"invalid\", e);\n                    se(p, \"onChange\");\n                    break;\n                  case \"textarea\":\n                    ce(e, m), E(\"invalid\", e), se(p, \"onChange\");\n                }\n                qe(h, m);\n                k = null;\n                for (f in m) m.hasOwnProperty(f) && (l = m[f], \"children\" === f ? \"string\" === typeof l ? e.textContent !== l && (k = [\"children\", l]) : \"number\" === typeof l && e.textContent !== \"\" + l && (k = [\"children\", \"\" + l]) : ra.hasOwnProperty(f) && null != l && se(p, f));\n                switch (h) {\n                  case \"input\":\n                    Rb(e);\n                    Ac(e, m, !0);\n                    break;\n                  case \"textarea\":\n                    Rb(e);\n                    ee(e, m);\n                    break;\n                  case \"select\":\n                  case \"option\":\n                    break;\n                  default:\n                    \"function\" === typeof m.onClick && (e.onclick = te);\n                }\n                f = k;\n                g.updateQueue = f;\n                g = null !== f ? !0 : !1;\n                g && kh(b);\n              } else {\n                m = b;\n                p = f;\n                e = g;\n                k = 9 === h.nodeType ? h : h.ownerDocument;\n                l === fe.html && (l = ge(p));\n                l === fe.html ? \"script\" === p ? (e = k.createElement(\"div\"), e.innerHTML = \"<script>\\x3c/script>\", k = e.removeChild(e.firstChild)) : \"string\" === typeof e.is ? k = k.createElement(p, {\n                  is: e.is\n                }) : (k = k.createElement(p), \"select\" === p && (p = k, e.multiple ? p.multiple = !0 : e.size && (p.size = e.size))) : k = k.createElementNS(l, p);\n                e = k;\n                e[Fa] = m;\n                e[Ga] = g;\n                lh(e, b, !1, !1);\n                p = e;\n                k = f;\n                m = g;\n                var t = h,\n                  A = re(k, m);\n                switch (k) {\n                  case \"iframe\":\n                  case \"object\":\n                    E(\"load\", p);\n                    h = m;\n                    break;\n                  case \"video\":\n                  case \"audio\":\n                    for (h = 0; h < ab.length; h++) E(ab[h], p);\n                    h = m;\n                    break;\n                  case \"source\":\n                    E(\"error\", p);\n                    h = m;\n                    break;\n                  case \"img\":\n                  case \"image\":\n                  case \"link\":\n                    E(\"error\", p);\n                    E(\"load\", p);\n                    h = m;\n                    break;\n                  case \"form\":\n                    E(\"reset\", p);\n                    E(\"submit\", p);\n                    h = m;\n                    break;\n                  case \"details\":\n                    E(\"toggle\", p);\n                    h = m;\n                    break;\n                  case \"input\":\n                    wc(p, m);\n                    h = vc(p, m);\n                    E(\"invalid\", p);\n                    se(t, \"onChange\");\n                    break;\n                  case \"option\":\n                    h = $d(p, m);\n                    break;\n                  case \"select\":\n                    p._wrapperState = {\n                      wasMultiple: !!m.multiple\n                    };\n                    h = n({}, m, {\n                      value: void 0\n                    });\n                    E(\"invalid\", p);\n                    se(t, \"onChange\");\n                    break;\n                  case \"textarea\":\n                    ce(p, m);\n                    h = be(p, m);\n                    E(\"invalid\", p);\n                    se(t, \"onChange\");\n                    break;\n                  default:\n                    h = m;\n                }\n                qe(k, h);\n                l = void 0;\n                var v = k,\n                  R = p,\n                  u = h;\n                for (l in u) if (u.hasOwnProperty(l)) {\n                  var q = u[l];\n                  \"style\" === l ? oe(R, q) : \"dangerouslySetInnerHTML\" === l ? (q = q ? q.__html : void 0, null != q && je(R, q)) : \"children\" === l ? \"string\" === typeof q ? (\"textarea\" !== v || \"\" !== q) && ke(R, q) : \"number\" === typeof q && ke(R, \"\" + q) : \"suppressContentEditableWarning\" !== l && \"suppressHydrationWarning\" !== l && \"autoFocus\" !== l && (ra.hasOwnProperty(l) ? null != q && se(t, l) : null != q && tc(R, l, q, A));\n                }\n                switch (k) {\n                  case \"input\":\n                    Rb(p);\n                    Ac(p, m, !1);\n                    break;\n                  case \"textarea\":\n                    Rb(p);\n                    ee(p, m);\n                    break;\n                  case \"option\":\n                    null != m.value && p.setAttribute(\"value\", \"\" + uc(m.value));\n                    break;\n                  case \"select\":\n                    h = p;\n                    h.multiple = !!m.multiple;\n                    p = m.value;\n                    null != p ? ae(h, !!m.multiple, p, !1) : null != m.defaultValue && ae(h, !!m.multiple, m.defaultValue, !0);\n                    break;\n                  default:\n                    \"function\" === typeof h.onClick && (p.onclick = te);\n                }\n                (g = we(f, g)) && kh(b);\n                b.stateNode = e;\n              }\n              null !== b.ref && (b.effectTag |= 128);\n            } else null === b.stateNode ? x(\"166\") : void 0;\n            break;\n          case 6:\n            e && null != b.stateNode ? oh(e, b, e.memoizedProps, g) : (\"string\" !== typeof g && (null === b.stateNode ? x(\"166\") : void 0), e = If(Hf.current), If(N.current), Eg(b) ? (g = b, f = g.stateNode, e = g.memoizedProps, f[Fa] = g, (g = f.nodeValue !== e) && kh(b)) : (f = b, g = (9 === e.nodeType ? e : e.ownerDocument).createTextNode(g), g[Fa] = b, f.stateNode = g));\n            break;\n          case 11:\n            break;\n          case 13:\n            g = b.memoizedState;\n            if (0 !== (b.effectTag & 64)) {\n              b.expirationTime = f;\n              T = b;\n              break a;\n            }\n            g = null !== g;\n            f = null !== e && null !== e.memoizedState;\n            null !== e && !g && f && (e = e.child.sibling, null !== e && (h = b.firstEffect, null !== h ? (b.firstEffect = e, e.nextEffect = h) : (b.firstEffect = b.lastEffect = e, e.nextEffect = null), e.effectTag = 8));\n            if (g || f) b.effectTag |= 4;\n            break;\n          case 7:\n            break;\n          case 8:\n            break;\n          case 12:\n            break;\n          case 4:\n            Kf(b);\n            mh(b);\n            break;\n          case 10:\n            Zg(b);\n            break;\n          case 9:\n            break;\n          case 14:\n            break;\n          case 17:\n            J(b.type) && Ke(b);\n            break;\n          case 18:\n            break;\n          default:\n            x(\"156\");\n        }\n        T = null;\n      }\n      b = a;\n      if (1 === U || 1 !== b.childExpirationTime) {\n        g = 0;\n        for (f = b.child; null !== f;) e = f.expirationTime, h = f.childExpirationTime, e > g && (g = e), h > g && (g = h), f = f.sibling;\n        b.childExpirationTime = g;\n      }\n      if (null !== T) return T;\n      null !== c && 0 === (c.effectTag & 1024) && (null === c.firstEffect && (c.firstEffect = a.firstEffect), null !== a.lastEffect && (null !== c.lastEffect && (c.lastEffect.nextEffect = a.firstEffect), c.lastEffect = a.lastEffect), 1 < a.effectTag && (null !== c.lastEffect ? c.lastEffect.nextEffect = a : c.firstEffect = a, c.lastEffect = a));\n    } else {\n      a = Gh(a, U);\n      if (null !== a) return a.effectTag &= 1023, a;\n      null !== c && (c.firstEffect = c.lastEffect = null, c.effectTag |= 1024);\n    }\n    if (null !== d) return d;\n    if (null !== c) a = c;else break;\n  }\n  return null;\n}\nfunction bi(a) {\n  var b = Tg(a.alternate, a, U);\n  a.memoizedProps = a.pendingProps;\n  null === b && (b = ai(a));\n  Ih.current = null;\n  return b;\n}\nfunction ci(a, b) {\n  Kh ? x(\"243\") : void 0;\n  of();\n  Kh = !0;\n  var c = Hh.current;\n  Hh.current = kg;\n  var d = a.nextExpirationTimeToWorkOn;\n  if (d !== U || a !== Lh || null === T) Sh(), Lh = a, U = d, T = Xe(Lh.current, null, U), a.pendingCommitExpirationTime = 0;\n  var e = !1;\n  do {\n    try {\n      if (b) for (; null !== T && !di();) T = bi(T);else for (; null !== T;) T = bi(T);\n    } catch (u) {\n      if (Yg = Xg = Wg = null, lg(), null === T) e = !0, Dh(u);else {\n        null === T ? x(\"271\") : void 0;\n        var f = T,\n          g = f.return;\n        if (null === g) e = !0, Dh(u);else {\n          a: {\n            var h = a,\n              l = g,\n              k = f,\n              m = u;\n            g = U;\n            k.effectTag |= 1024;\n            k.firstEffect = k.lastEffect = null;\n            if (null !== m && \"object\" === typeof m && \"function\" === typeof m.then) {\n              var p = m;\n              m = l;\n              var t = -1,\n                A = -1;\n              do {\n                if (13 === m.tag) {\n                  var v = m.alternate;\n                  if (null !== v && (v = v.memoizedState, null !== v)) {\n                    A = 10 * (1073741822 - v.timedOutAt);\n                    break;\n                  }\n                  v = m.pendingProps.maxDuration;\n                  if (\"number\" === typeof v) if (0 >= v) t = 0;else if (-1 === t || v < t) t = v;\n                }\n                m = m.return;\n              } while (null !== m);\n              m = l;\n              do {\n                if (v = 13 === m.tag) v = void 0 === m.memoizedProps.fallback ? !1 : null === m.memoizedState;\n                if (v) {\n                  l = m.updateQueue;\n                  null === l ? (l = new Set(), l.add(p), m.updateQueue = l) : l.add(p);\n                  if (0 === (m.mode & 1)) {\n                    m.effectTag |= 64;\n                    k.effectTag &= -1957;\n                    1 === k.tag && (null === k.alternate ? k.tag = 17 : (g = nf(1073741823), g.tag = sf, pf(k, g)));\n                    k.expirationTime = 1073741823;\n                    break a;\n                  }\n                  k = h;\n                  l = g;\n                  var R = k.pingCache;\n                  null === R ? (R = k.pingCache = new Bh(), v = new Set(), R.set(p, v)) : (v = R.get(p), void 0 === v && (v = new Set(), R.set(p, v)));\n                  v.has(l) || (v.add(l), k = ei.bind(null, k, p, l), p.then(k, k));\n                  -1 === t ? h = 1073741823 : (-1 === A && (A = 10 * (1073741822 - gf(h, g)) - 5E3), h = A + t);\n                  0 <= h && Mh < h && (Mh = h);\n                  m.effectTag |= 2048;\n                  m.expirationTime = g;\n                  break a;\n                }\n                m = m.return;\n              } while (null !== m);\n              m = Error((ic(k.type) || \"A React component\") + \" suspended while rendering, but no fallback UI was specified.\\n\\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.\" + jc(k));\n            }\n            Nh = !0;\n            m = jh(m, k);\n            h = l;\n            do {\n              switch (h.tag) {\n                case 3:\n                  h.effectTag |= 2048;\n                  h.expirationTime = g;\n                  g = Ch(h, m, g);\n                  eh(h, g);\n                  break a;\n                case 1:\n                  if (t = m, A = h.type, k = h.stateNode, 0 === (h.effectTag & 64) && (\"function\" === typeof A.getDerivedStateFromError || null !== k && \"function\" === typeof k.componentDidCatch && (null === Fh || !Fh.has(k)))) {\n                    h.effectTag |= 2048;\n                    h.expirationTime = g;\n                    g = Eh(h, t, g);\n                    eh(h, g);\n                    break a;\n                  }\n              }\n              h = h.return;\n            } while (null !== h);\n          }\n          T = ai(f);\n          continue;\n        }\n      }\n    }\n    break;\n  } while (1);\n  Kh = !1;\n  Hh.current = c;\n  Yg = Xg = Wg = null;\n  lg();\n  if (e) Lh = null, a.finishedWork = null;else if (null !== T) a.finishedWork = null;else {\n    c = a.current.alternate;\n    null === c ? x(\"281\") : void 0;\n    Lh = null;\n    if (Nh) {\n      e = a.latestPendingTime;\n      f = a.latestSuspendedTime;\n      g = a.latestPingedTime;\n      if (0 !== e && e < d || 0 !== f && f < d || 0 !== g && g < d) {\n        ff(a, d);\n        fi(a, c, d, a.expirationTime, -1);\n        return;\n      }\n      if (!a.didError && b) {\n        a.didError = !0;\n        d = a.nextExpirationTimeToWorkOn = d;\n        b = a.expirationTime = 1073741823;\n        fi(a, c, d, b, -1);\n        return;\n      }\n    }\n    b && -1 !== Mh ? (ff(a, d), b = 10 * (1073741822 - gf(a, d)), b < Mh && (Mh = b), b = 10 * (1073741822 - lf()), b = Mh - b, fi(a, c, d, a.expirationTime, 0 > b ? 0 : b)) : (a.pendingCommitExpirationTime = d, a.finishedWork = c);\n  }\n}\nfunction sh(a, b) {\n  for (var c = a.return; null !== c;) {\n    switch (c.tag) {\n      case 1:\n        var d = c.stateNode;\n        if (\"function\" === typeof c.type.getDerivedStateFromError || \"function\" === typeof d.componentDidCatch && (null === Fh || !Fh.has(d))) {\n          a = jh(b, a);\n          a = Eh(c, a, 1073741823);\n          pf(c, a);\n          qf(c, 1073741823);\n          return;\n        }\n        break;\n      case 3:\n        a = jh(b, a);\n        a = Ch(c, a, 1073741823);\n        pf(c, a);\n        qf(c, 1073741823);\n        return;\n    }\n    c = c.return;\n  }\n  3 === a.tag && (c = jh(b, a), c = Ch(a, c, 1073741823), pf(a, c), qf(a, 1073741823));\n}\nfunction mf(a, b) {\n  var c = r.unstable_getCurrentPriorityLevel(),\n    d = void 0;\n  if (0 === (b.mode & 1)) d = 1073741823;else if (Kh && !Oh) d = U;else {\n    switch (c) {\n      case r.unstable_ImmediatePriority:\n        d = 1073741823;\n        break;\n      case r.unstable_UserBlockingPriority:\n        d = 1073741822 - 10 * (((1073741822 - a + 15) / 10 | 0) + 1);\n        break;\n      case r.unstable_NormalPriority:\n        d = 1073741822 - 25 * (((1073741822 - a + 500) / 25 | 0) + 1);\n        break;\n      case r.unstable_LowPriority:\n      case r.unstable_IdlePriority:\n        d = 1;\n        break;\n      default:\n        x(\"313\");\n    }\n    null !== Lh && d === U && --d;\n  }\n  c === r.unstable_UserBlockingPriority && (0 === gi || d < gi) && (gi = d);\n  return d;\n}\nfunction ei(a, b, c) {\n  var d = a.pingCache;\n  null !== d && d.delete(b);\n  if (null !== Lh && U === c) Lh = null;else if (b = a.earliestSuspendedTime, d = a.latestSuspendedTime, 0 !== b && c <= b && c >= d) {\n    a.didError = !1;\n    b = a.latestPingedTime;\n    if (0 === b || b > c) a.latestPingedTime = c;\n    df(c, a);\n    c = a.expirationTime;\n    0 !== c && Xh(a, c);\n  }\n}\nfunction Ah(a, b) {\n  var c = a.stateNode;\n  null !== c && c.delete(b);\n  b = lf();\n  b = mf(b, a);\n  a = hi(a, b);\n  null !== a && (cf(a, b), b = a.expirationTime, 0 !== b && Xh(a, b));\n}\nfunction hi(a, b) {\n  a.expirationTime < b && (a.expirationTime = b);\n  var c = a.alternate;\n  null !== c && c.expirationTime < b && (c.expirationTime = b);\n  var d = a.return,\n    e = null;\n  if (null === d && 3 === a.tag) e = a.stateNode;else for (; null !== d;) {\n    c = d.alternate;\n    d.childExpirationTime < b && (d.childExpirationTime = b);\n    null !== c && c.childExpirationTime < b && (c.childExpirationTime = b);\n    if (null === d.return && 3 === d.tag) {\n      e = d.stateNode;\n      break;\n    }\n    d = d.return;\n  }\n  return e;\n}\nfunction qf(a, b) {\n  a = hi(a, b);\n  null !== a && (!Kh && 0 !== U && b > U && Sh(), cf(a, b), Kh && !Oh && Lh === a || Xh(a, a.expirationTime), ii > ji && (ii = 0, x(\"185\")));\n}\nfunction ki(a, b, c, d, e) {\n  return r.unstable_runWithPriority(r.unstable_ImmediatePriority, function () {\n    return a(b, c, d, e);\n  });\n}\nvar li = null,\n  Y = null,\n  mi = 0,\n  ni = void 0,\n  W = !1,\n  oi = null,\n  Z = 0,\n  gi = 0,\n  pi = !1,\n  qi = null,\n  X = !1,\n  ri = !1,\n  si = null,\n  ti = r.unstable_now(),\n  ui = 1073741822 - (ti / 10 | 0),\n  vi = ui,\n  ji = 50,\n  ii = 0,\n  wi = null;\nfunction xi() {\n  ui = 1073741822 - ((r.unstable_now() - ti) / 10 | 0);\n}\nfunction yi(a, b) {\n  if (0 !== mi) {\n    if (b < mi) return;\n    null !== ni && r.unstable_cancelCallback(ni);\n  }\n  mi = b;\n  a = r.unstable_now() - ti;\n  ni = r.unstable_scheduleCallback(zi, {\n    timeout: 10 * (1073741822 - b) - a\n  });\n}\nfunction fi(a, b, c, d, e) {\n  a.expirationTime = d;\n  0 !== e || di() ? 0 < e && (a.timeoutHandle = ye(Ai.bind(null, a, b, c), e)) : (a.pendingCommitExpirationTime = c, a.finishedWork = b);\n}\nfunction Ai(a, b, c) {\n  a.pendingCommitExpirationTime = c;\n  a.finishedWork = b;\n  xi();\n  vi = ui;\n  Bi(a, c);\n}\nfunction $h(a, b) {\n  a.expirationTime = b;\n  a.finishedWork = null;\n}\nfunction lf() {\n  if (W) return vi;\n  Ci();\n  if (0 === Z || 1 === Z) xi(), vi = ui;\n  return vi;\n}\nfunction Xh(a, b) {\n  null === a.nextScheduledRoot ? (a.expirationTime = b, null === Y ? (li = Y = a, a.nextScheduledRoot = a) : (Y = Y.nextScheduledRoot = a, Y.nextScheduledRoot = li)) : b > a.expirationTime && (a.expirationTime = b);\n  W || (X ? ri && (oi = a, Z = 1073741823, Di(a, 1073741823, !1)) : 1073741823 === b ? Yh(1073741823, !1) : yi(a, b));\n}\nfunction Ci() {\n  var a = 0,\n    b = null;\n  if (null !== Y) for (var c = Y, d = li; null !== d;) {\n    var e = d.expirationTime;\n    if (0 === e) {\n      null === c || null === Y ? x(\"244\") : void 0;\n      if (d === d.nextScheduledRoot) {\n        li = Y = d.nextScheduledRoot = null;\n        break;\n      } else if (d === li) li = e = d.nextScheduledRoot, Y.nextScheduledRoot = e, d.nextScheduledRoot = null;else if (d === Y) {\n        Y = c;\n        Y.nextScheduledRoot = li;\n        d.nextScheduledRoot = null;\n        break;\n      } else c.nextScheduledRoot = d.nextScheduledRoot, d.nextScheduledRoot = null;\n      d = c.nextScheduledRoot;\n    } else {\n      e > a && (a = e, b = d);\n      if (d === Y) break;\n      if (1073741823 === a) break;\n      c = d;\n      d = d.nextScheduledRoot;\n    }\n  }\n  oi = b;\n  Z = a;\n}\nvar Ei = !1;\nfunction di() {\n  return Ei ? !0 : r.unstable_shouldYield() ? Ei = !0 : !1;\n}\nfunction zi() {\n  try {\n    if (!di() && null !== li) {\n      xi();\n      var a = li;\n      do {\n        var b = a.expirationTime;\n        0 !== b && ui <= b && (a.nextExpirationTimeToWorkOn = ui);\n        a = a.nextScheduledRoot;\n      } while (a !== li);\n    }\n    Yh(0, !0);\n  } finally {\n    Ei = !1;\n  }\n}\nfunction Yh(a, b) {\n  Ci();\n  if (b) for (xi(), vi = ui; null !== oi && 0 !== Z && a <= Z && !(Ei && ui > Z);) Di(oi, Z, ui > Z), Ci(), xi(), vi = ui;else for (; null !== oi && 0 !== Z && a <= Z;) Di(oi, Z, !1), Ci();\n  b && (mi = 0, ni = null);\n  0 !== Z && yi(oi, Z);\n  ii = 0;\n  wi = null;\n  if (null !== si) for (a = si, si = null, b = 0; b < a.length; b++) {\n    var c = a[b];\n    try {\n      c._onComplete();\n    } catch (d) {\n      pi || (pi = !0, qi = d);\n    }\n  }\n  if (pi) throw a = qi, qi = null, pi = !1, a;\n}\nfunction Bi(a, b) {\n  W ? x(\"253\") : void 0;\n  oi = a;\n  Z = b;\n  Di(a, b, !1);\n  Yh(1073741823, !1);\n}\nfunction Di(a, b, c) {\n  W ? x(\"245\") : void 0;\n  W = !0;\n  if (c) {\n    var d = a.finishedWork;\n    null !== d ? Fi(a, d, b) : (a.finishedWork = null, d = a.timeoutHandle, -1 !== d && (a.timeoutHandle = -1, ze(d)), ci(a, c), d = a.finishedWork, null !== d && (di() ? a.finishedWork = d : Fi(a, d, b)));\n  } else d = a.finishedWork, null !== d ? Fi(a, d, b) : (a.finishedWork = null, d = a.timeoutHandle, -1 !== d && (a.timeoutHandle = -1, ze(d)), ci(a, c), d = a.finishedWork, null !== d && Fi(a, d, b));\n  W = !1;\n}\nfunction Fi(a, b, c) {\n  var d = a.firstBatch;\n  if (null !== d && d._expirationTime >= c && (null === si ? si = [d] : si.push(d), d._defer)) {\n    a.finishedWork = b;\n    a.expirationTime = 0;\n    return;\n  }\n  a.finishedWork = null;\n  a === wi ? ii++ : (wi = a, ii = 0);\n  r.unstable_runWithPriority(r.unstable_ImmediatePriority, function () {\n    Zh(a, b);\n  });\n}\nfunction Dh(a) {\n  null === oi ? x(\"246\") : void 0;\n  oi.expirationTime = 0;\n  pi || (pi = !0, qi = a);\n}\nfunction Gi(a, b) {\n  var c = X;\n  X = !0;\n  try {\n    return a(b);\n  } finally {\n    (X = c) || W || Yh(1073741823, !1);\n  }\n}\nfunction Hi(a, b) {\n  if (X && !ri) {\n    ri = !0;\n    try {\n      return a(b);\n    } finally {\n      ri = !1;\n    }\n  }\n  return a(b);\n}\nfunction Ii(a, b, c) {\n  X || W || 0 === gi || (Yh(gi, !1), gi = 0);\n  var d = X;\n  X = !0;\n  try {\n    return r.unstable_runWithPriority(r.unstable_UserBlockingPriority, function () {\n      return a(b, c);\n    });\n  } finally {\n    (X = d) || W || Yh(1073741823, !1);\n  }\n}\nfunction Ji(a, b, c, d, e) {\n  var f = b.current;\n  a: if (c) {\n    c = c._reactInternalFiber;\n    b: {\n      2 === ed(c) && 1 === c.tag ? void 0 : x(\"170\");\n      var g = c;\n      do {\n        switch (g.tag) {\n          case 3:\n            g = g.stateNode.context;\n            break b;\n          case 1:\n            if (J(g.type)) {\n              g = g.stateNode.__reactInternalMemoizedMergedChildContext;\n              break b;\n            }\n        }\n        g = g.return;\n      } while (null !== g);\n      x(\"171\");\n      g = void 0;\n    }\n    if (1 === c.tag) {\n      var h = c.type;\n      if (J(h)) {\n        c = Ne(c, h, g);\n        break a;\n      }\n    }\n    c = g;\n  } else c = He;\n  null === b.context ? b.context = c : b.pendingContext = c;\n  b = e;\n  e = nf(d);\n  e.payload = {\n    element: a\n  };\n  b = void 0 === b ? null : b;\n  null !== b && (e.callback = b);\n  of();\n  pf(f, e);\n  qf(f, d);\n  return d;\n}\nfunction Ki(a, b, c, d) {\n  var e = b.current,\n    f = lf();\n  e = mf(f, e);\n  return Ji(a, b, c, e, d);\n}\nfunction Li(a) {\n  a = a.current;\n  if (!a.child) return null;\n  switch (a.child.tag) {\n    case 5:\n      return a.child.stateNode;\n    default:\n      return a.child.stateNode;\n  }\n}\nfunction Mi(a, b, c) {\n  var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;\n  return {\n    $$typeof: Wb,\n    key: null == d ? null : \"\" + d,\n    children: a,\n    containerInfo: b,\n    implementation: c\n  };\n}\nAb = function Ab(a, b, c) {\n  switch (b) {\n    case \"input\":\n      yc(a, c);\n      b = c.name;\n      if (\"radio\" === c.type && null != b) {\n        for (c = a; c.parentNode;) c = c.parentNode;\n        c = c.querySelectorAll(\"input[name=\" + JSON.stringify(\"\" + b) + '][type=\"radio\"]');\n        for (b = 0; b < c.length; b++) {\n          var d = c[b];\n          if (d !== a && d.form === a.form) {\n            var e = Ka(d);\n            e ? void 0 : x(\"90\");\n            Sb(d);\n            yc(d, e);\n          }\n        }\n      }\n      break;\n    case \"textarea\":\n      de(a, c);\n      break;\n    case \"select\":\n      b = c.value, null != b && ae(a, !!c.multiple, b, !1);\n  }\n};\nfunction Ni(a) {\n  var b = 1073741822 - 25 * (((1073741822 - lf() + 500) / 25 | 0) + 1);\n  b >= Jh && (b = Jh - 1);\n  this._expirationTime = Jh = b;\n  this._root = a;\n  this._callbacks = this._next = null;\n  this._hasChildren = this._didComplete = !1;\n  this._children = null;\n  this._defer = !0;\n}\nNi.prototype.render = function (a) {\n  this._defer ? void 0 : x(\"250\");\n  this._hasChildren = !0;\n  this._children = a;\n  var b = this._root._internalRoot,\n    c = this._expirationTime,\n    d = new Oi();\n  Ji(a, b, null, c, d._onCommit);\n  return d;\n};\nNi.prototype.then = function (a) {\n  if (this._didComplete) a();else {\n    var b = this._callbacks;\n    null === b && (b = this._callbacks = []);\n    b.push(a);\n  }\n};\nNi.prototype.commit = function () {\n  var a = this._root._internalRoot,\n    b = a.firstBatch;\n  this._defer && null !== b ? void 0 : x(\"251\");\n  if (this._hasChildren) {\n    var c = this._expirationTime;\n    if (b !== this) {\n      this._hasChildren && (c = this._expirationTime = b._expirationTime, this.render(this._children));\n      for (var d = null, e = b; e !== this;) d = e, e = e._next;\n      null === d ? x(\"251\") : void 0;\n      d._next = e._next;\n      this._next = b;\n      a.firstBatch = this;\n    }\n    this._defer = !1;\n    Bi(a, c);\n    b = this._next;\n    this._next = null;\n    b = a.firstBatch = b;\n    null !== b && b._hasChildren && b.render(b._children);\n  } else this._next = null, this._defer = !1;\n};\nNi.prototype._onComplete = function () {\n  if (!this._didComplete) {\n    this._didComplete = !0;\n    var a = this._callbacks;\n    if (null !== a) for (var b = 0; b < a.length; b++) (0, a[b])();\n  }\n};\nfunction Oi() {\n  this._callbacks = null;\n  this._didCommit = !1;\n  this._onCommit = this._onCommit.bind(this);\n}\nOi.prototype.then = function (a) {\n  if (this._didCommit) a();else {\n    var b = this._callbacks;\n    null === b && (b = this._callbacks = []);\n    b.push(a);\n  }\n};\nOi.prototype._onCommit = function () {\n  if (!this._didCommit) {\n    this._didCommit = !0;\n    var a = this._callbacks;\n    if (null !== a) for (var b = 0; b < a.length; b++) {\n      var c = a[b];\n      \"function\" !== typeof c ? x(\"191\", c) : void 0;\n      c();\n    }\n  }\n};\nfunction Pi(a, b, c) {\n  b = K(3, null, null, b ? 3 : 0);\n  a = {\n    current: b,\n    containerInfo: a,\n    pendingChildren: null,\n    pingCache: null,\n    earliestPendingTime: 0,\n    latestPendingTime: 0,\n    earliestSuspendedTime: 0,\n    latestSuspendedTime: 0,\n    latestPingedTime: 0,\n    didError: !1,\n    pendingCommitExpirationTime: 0,\n    finishedWork: null,\n    timeoutHandle: -1,\n    context: null,\n    pendingContext: null,\n    hydrate: c,\n    nextExpirationTimeToWorkOn: 0,\n    expirationTime: 0,\n    firstBatch: null,\n    nextScheduledRoot: null\n  };\n  this._internalRoot = b.stateNode = a;\n}\nPi.prototype.render = function (a, b) {\n  var c = this._internalRoot,\n    d = new Oi();\n  b = void 0 === b ? null : b;\n  null !== b && d.then(b);\n  Ki(a, c, null, d._onCommit);\n  return d;\n};\nPi.prototype.unmount = function (a) {\n  var b = this._internalRoot,\n    c = new Oi();\n  a = void 0 === a ? null : a;\n  null !== a && c.then(a);\n  Ki(null, b, null, c._onCommit);\n  return c;\n};\nPi.prototype.legacy_renderSubtreeIntoContainer = function (a, b, c) {\n  var d = this._internalRoot,\n    e = new Oi();\n  c = void 0 === c ? null : c;\n  null !== c && e.then(c);\n  Ki(b, d, a, e._onCommit);\n  return e;\n};\nPi.prototype.createBatch = function () {\n  var a = new Ni(this),\n    b = a._expirationTime,\n    c = this._internalRoot,\n    d = c.firstBatch;\n  if (null === d) c.firstBatch = a, a._next = null;else {\n    for (c = null; null !== d && d._expirationTime >= b;) c = d, d = d._next;\n    a._next = d;\n    null !== c && (c._next = a);\n  }\n  return a;\n};\nfunction Qi(a) {\n  return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || \" react-mount-point-unstable \" !== a.nodeValue));\n}\nGb = Gi;\nHb = Ii;\nIb = function Ib() {\n  W || 0 === gi || (Yh(gi, !1), gi = 0);\n};\nfunction Ri(a, b) {\n  b || (b = a ? 9 === a.nodeType ? a.documentElement : a.firstChild : null, b = !(!b || 1 !== b.nodeType || !b.hasAttribute(\"data-reactroot\")));\n  if (!b) for (var c; c = a.lastChild;) a.removeChild(c);\n  return new Pi(a, !1, b);\n}\nfunction Si(a, b, c, d, e) {\n  var f = c._reactRootContainer;\n  if (f) {\n    if (\"function\" === typeof e) {\n      var g = e;\n      e = function e() {\n        var a = Li(f._internalRoot);\n        g.call(a);\n      };\n    }\n    null != a ? f.legacy_renderSubtreeIntoContainer(a, b, e) : f.render(b, e);\n  } else {\n    f = c._reactRootContainer = Ri(c, d);\n    if (\"function\" === typeof e) {\n      var h = e;\n      e = function e() {\n        var a = Li(f._internalRoot);\n        h.call(a);\n      };\n    }\n    Hi(function () {\n      null != a ? f.legacy_renderSubtreeIntoContainer(a, b, e) : f.render(b, e);\n    });\n  }\n  return Li(f._internalRoot);\n}\nfunction Ti(a, b) {\n  var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;\n  Qi(b) ? void 0 : x(\"200\");\n  return Mi(a, b, null, c);\n}\nvar Vi = {\n  createPortal: Ti,\n  findDOMNode: function findDOMNode(a) {\n    if (null == a) return null;\n    if (1 === a.nodeType) return a;\n    var b = a._reactInternalFiber;\n    void 0 === b && (\"function\" === typeof a.render ? x(\"188\") : x(\"268\", Object.keys(a)));\n    a = hd(b);\n    a = null === a ? null : a.stateNode;\n    return a;\n  },\n  hydrate: function hydrate(a, b, c) {\n    Qi(b) ? void 0 : x(\"200\");\n    return Si(null, a, b, !0, c);\n  },\n  render: function render(a, b, c) {\n    Qi(b) ? void 0 : x(\"200\");\n    return Si(null, a, b, !1, c);\n  },\n  unstable_renderSubtreeIntoContainer: function unstable_renderSubtreeIntoContainer(a, b, c, d) {\n    Qi(c) ? void 0 : x(\"200\");\n    null == a || void 0 === a._reactInternalFiber ? x(\"38\") : void 0;\n    return Si(a, b, c, !1, d);\n  },\n  unmountComponentAtNode: function unmountComponentAtNode(a) {\n    Qi(a) ? void 0 : x(\"40\");\n    return a._reactRootContainer ? (Hi(function () {\n      Si(null, null, a, !1, function () {\n        a._reactRootContainer = null;\n      });\n    }), !0) : !1;\n  },\n  unstable_createPortal: function unstable_createPortal() {\n    return Ti.apply(void 0, arguments);\n  },\n  unstable_batchedUpdates: Gi,\n  unstable_interactiveUpdates: Ii,\n  flushSync: function flushSync(a, b) {\n    W ? x(\"187\") : void 0;\n    var c = X;\n    X = !0;\n    try {\n      return ki(a, b);\n    } finally {\n      X = c, Yh(1073741823, !1);\n    }\n  },\n  unstable_createRoot: Ui,\n  unstable_flushControlled: function unstable_flushControlled(a) {\n    var b = X;\n    X = !0;\n    try {\n      ki(a);\n    } finally {\n      (X = b) || W || Yh(1073741823, !1);\n    }\n  },\n  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {\n    Events: [Ia, Ja, Ka, Ba.injectEventPluginsByName, pa, Qa, function (a) {\n      ya(a, Pa);\n    }, Eb, Fb, Dd, Da]\n  }\n};\nfunction Ui(a, b) {\n  Qi(a) ? void 0 : x(\"299\", \"unstable_createRoot\");\n  return new Pi(a, !0, null != b && !0 === b.hydrate);\n}\n(function (a) {\n  var b = a.findFiberByHostInstance;\n  return Te(n({}, a, {\n    overrideProps: null,\n    currentDispatcherRef: Tb.ReactCurrentDispatcher,\n    findHostInstanceByFiber: function findHostInstanceByFiber(a) {\n      a = hd(a);\n      return null === a ? null : a.stateNode;\n    },\n    findFiberByHostInstance: function findFiberByHostInstance(a) {\n      return b ? b(a) : null;\n    }\n  }));\n})({\n  findFiberByHostInstance: Ha,\n  bundleType: 0,\n  version: \"16.8.6\",\n  rendererPackageName: \"react-dom\"\n});\nvar Wi = {\n    default: Vi\n  },\n  Xi = Wi && Vi || Wi;\nmodule.exports = Xi.default || Xi;","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/scheduler.production.min.js');\n} else {\n  module.exports = require('./cjs/scheduler.development.js');\n}","/** @license React v0.13.6\n * scheduler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n});\nvar d = null,\n  e = !1,\n  g = 3,\n  k = -1,\n  l = -1,\n  m = !1,\n  n = !1;\nfunction p() {\n  if (!m) {\n    var a = d.expirationTime;\n    n ? q() : n = !0;\n    _r(t, a);\n  }\n}\nfunction u() {\n  var a = d,\n    b = d.next;\n  if (d === b) d = null;else {\n    var c = d.previous;\n    d = c.next = b;\n    b.previous = c;\n  }\n  a.next = a.previous = null;\n  c = a.callback;\n  b = a.expirationTime;\n  a = a.priorityLevel;\n  var f = g,\n    Q = l;\n  g = a;\n  l = b;\n  try {\n    var h = c();\n  } finally {\n    g = f, l = Q;\n  }\n  if (\"function\" === typeof h) if (h = {\n    callback: h,\n    priorityLevel: a,\n    expirationTime: b,\n    next: null,\n    previous: null\n  }, null === d) d = h.next = h.previous = h;else {\n    c = null;\n    a = d;\n    do {\n      if (a.expirationTime >= b) {\n        c = a;\n        break;\n      }\n      a = a.next;\n    } while (a !== d);\n    null === c ? c = d : c === d && (d = h, p());\n    b = c.previous;\n    b.next = c.previous = h;\n    h.next = c;\n    h.previous = b;\n  }\n}\nfunction v() {\n  if (-1 === k && null !== d && 1 === d.priorityLevel) {\n    m = !0;\n    try {\n      do u(); while (null !== d && 1 === d.priorityLevel);\n    } finally {\n      m = !1, null !== d ? p() : n = !1;\n    }\n  }\n}\nfunction t(a) {\n  m = !0;\n  var b = e;\n  e = a;\n  try {\n    if (a) for (; null !== d;) {\n      var c = exports.unstable_now();\n      if (d.expirationTime <= c) {\n        do u(); while (null !== d && d.expirationTime <= c);\n      } else break;\n    } else if (null !== d) {\n      do u(); while (null !== d && !w());\n    }\n  } finally {\n    m = !1, e = b, null !== d ? p() : n = !1, v();\n  }\n}\nvar x = Date,\n  y = \"function\" === typeof setTimeout ? setTimeout : void 0,\n  z = \"function\" === typeof clearTimeout ? clearTimeout : void 0,\n  A = \"function\" === typeof requestAnimationFrame ? requestAnimationFrame : void 0,\n  B = \"function\" === typeof cancelAnimationFrame ? cancelAnimationFrame : void 0,\n  C,\n  D;\nfunction E(a) {\n  C = A(function (b) {\n    z(D);\n    a(b);\n  });\n  D = y(function () {\n    B(C);\n    a(exports.unstable_now());\n  }, 100);\n}\nif (\"object\" === typeof performance && \"function\" === typeof performance.now) {\n  var F = performance;\n  exports.unstable_now = function () {\n    return F.now();\n  };\n} else exports.unstable_now = function () {\n  return x.now();\n};\nvar _r,\n  q,\n  w,\n  G = null;\n\"undefined\" !== typeof window ? G = window : \"undefined\" !== typeof global && (G = global);\nif (G && G._schedMock) {\n  var H = G._schedMock;\n  _r = H[0];\n  q = H[1];\n  w = H[2];\n  exports.unstable_now = H[3];\n} else if (\"undefined\" === typeof window || \"function\" !== typeof MessageChannel) {\n  var I = null,\n    J = function J(a) {\n      if (null !== I) try {\n        I(a);\n      } finally {\n        I = null;\n      }\n    };\n  _r = function r(a) {\n    null !== I ? setTimeout(_r, 0, a) : (I = a, setTimeout(J, 0, !1));\n  };\n  q = function q() {\n    I = null;\n  };\n  w = function w() {\n    return !1;\n  };\n} else {\n  \"undefined\" !== typeof console && (\"function\" !== typeof A && console.error(\"This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills\"), \"function\" !== typeof B && console.error(\"This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills\"));\n  var K = null,\n    L = !1,\n    M = -1,\n    N = !1,\n    O = !1,\n    P = 0,\n    R = 33,\n    S = 33;\n  w = function w() {\n    return P <= exports.unstable_now();\n  };\n  var T = new MessageChannel(),\n    U = T.port2;\n  T.port1.onmessage = function () {\n    L = !1;\n    var a = K,\n      b = M;\n    K = null;\n    M = -1;\n    var c = exports.unstable_now(),\n      f = !1;\n    if (0 >= P - c) if (-1 !== b && b <= c) f = !0;else {\n      N || (N = !0, E(V));\n      K = a;\n      M = b;\n      return;\n    }\n    if (null !== a) {\n      O = !0;\n      try {\n        a(f);\n      } finally {\n        O = !1;\n      }\n    }\n  };\n  var V = function V(a) {\n    if (null !== K) {\n      E(V);\n      var b = a - P + S;\n      b < S && R < S ? (8 > b && (b = 8), S = b < R ? R : b) : R = b;\n      P = a + S;\n      L || (L = !0, U.postMessage(void 0));\n    } else N = !1;\n  };\n  _r = function _r(a, b) {\n    K = a;\n    M = b;\n    O || 0 > b ? U.postMessage(void 0) : N || (N = !0, E(V));\n  };\n  q = function q() {\n    K = null;\n    L = !1;\n    M = -1;\n  };\n}\nexports.unstable_ImmediatePriority = 1;\nexports.unstable_UserBlockingPriority = 2;\nexports.unstable_NormalPriority = 3;\nexports.unstable_IdlePriority = 5;\nexports.unstable_LowPriority = 4;\nexports.unstable_runWithPriority = function (a, b) {\n  switch (a) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n      break;\n    default:\n      a = 3;\n  }\n  var c = g,\n    f = k;\n  g = a;\n  k = exports.unstable_now();\n  try {\n    return b();\n  } finally {\n    g = c, k = f, v();\n  }\n};\nexports.unstable_next = function (a) {\n  switch (g) {\n    case 1:\n    case 2:\n    case 3:\n      var b = 3;\n      break;\n    default:\n      b = g;\n  }\n  var c = g,\n    f = k;\n  g = b;\n  k = exports.unstable_now();\n  try {\n    return a();\n  } finally {\n    g = c, k = f, v();\n  }\n};\nexports.unstable_scheduleCallback = function (a, b) {\n  var c = -1 !== k ? k : exports.unstable_now();\n  if (\"object\" === typeof b && null !== b && \"number\" === typeof b.timeout) b = c + b.timeout;else switch (g) {\n    case 1:\n      b = c + -1;\n      break;\n    case 2:\n      b = c + 250;\n      break;\n    case 5:\n      b = c + 1073741823;\n      break;\n    case 4:\n      b = c + 1E4;\n      break;\n    default:\n      b = c + 5E3;\n  }\n  a = {\n    callback: a,\n    priorityLevel: g,\n    expirationTime: b,\n    next: null,\n    previous: null\n  };\n  if (null === d) d = a.next = a.previous = a, p();else {\n    c = null;\n    var f = d;\n    do {\n      if (f.expirationTime > b) {\n        c = f;\n        break;\n      }\n      f = f.next;\n    } while (f !== d);\n    null === c ? c = d : c === d && (d = a, p());\n    b = c.previous;\n    b.next = c.previous = a;\n    a.next = c;\n    a.previous = b;\n  }\n  return a;\n};\nexports.unstable_cancelCallback = function (a) {\n  var b = a.next;\n  if (null !== b) {\n    if (b === a) d = null;else {\n      a === d && (d = b);\n      var c = a.previous;\n      c.next = b;\n      b.previous = c;\n    }\n    a.next = a.previous = null;\n  }\n};\nexports.unstable_wrapCallback = function (a) {\n  var b = g;\n  return function () {\n    var c = g,\n      f = k;\n    g = b;\n    k = exports.unstable_now();\n    try {\n      return a.apply(this, arguments);\n    } finally {\n      g = c, k = f, v();\n    }\n  };\n};\nexports.unstable_getCurrentPriorityLevel = function () {\n  return g;\n};\nexports.unstable_shouldYield = function () {\n  return !e && (null !== d && d.expirationTime < l || w());\n};\nexports.unstable_continueExecution = function () {\n  null !== d && p();\n};\nexports.unstable_pauseExecution = function () {};\nexports.unstable_getFirstCallbackNode = function () {\n  return d;\n};","var g;\n\n// This works in non-strict mode\ng = function () {\n  return this;\n}();\ntry {\n  // This works if eval is allowed (see CSP)\n  g = g || new Function(\"return this\")();\n} catch (e) {\n  // This works if the window reference is available\n  if (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\nmodule.exports = function () {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');\n    err.name = 'Invariant Violation';\n    throw err;\n  }\n  ;\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  }\n  ;\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n  ReactPropTypes.PropTypes = ReactPropTypes;\n  return ReactPropTypes;\n};","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\nmodule.exports = ReactPropTypesSecret;"],"sourceRoot":""}